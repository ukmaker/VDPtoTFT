
VDPDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f94  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3bc  0800a3bc  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3bc  0800a3bc  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3bc  0800a3bc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a3c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193d0  20000098  0800a460  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019468  0800a460  00029468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6e2  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b06  00000000  00000000  0003c7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00041aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8df  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b602  00000000  00000000  000709d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bc62  00000000  00000000  0008bfd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  001a7c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000098 	.word	0x20000098
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a154 	.word	0x0800a154

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000009c 	.word	0x2000009c
 8000214:	0800a154 	.word	0x0800a154

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f009 ff43 	bl	800a0bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b36      	ldr	r3, [pc, #216]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800023e:	4b34      	ldr	r3, [pc, #208]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000246:	4b32      	ldr	r3, [pc, #200]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000248:	2210      	movs	r2, #16
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b30      	ldr	r3, [pc, #192]	; (8000310 <MX_ADC1_Init+0xf8>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <MX_ADC1_Init+0xf8>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <MX_ADC1_Init+0xf8>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000272:	2201      	movs	r2, #1
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b26      	ldr	r3, [pc, #152]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800028e:	4b20      	ldr	r3, [pc, #128]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000290:	2201      	movs	r2, #1
 8000292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800029c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800029e:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a6:	481a      	ldr	r0, [pc, #104]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002a8:	f003 fbfa 	bl	8003aa0 <HAL_ADC_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80002b2:	f001 f8a7 	bl	8001404 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80002b6:	2306      	movs	r3, #6
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 80002ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002c8:	4619      	mov	r1, r3
 80002ca:	4811      	ldr	r0, [pc, #68]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002cc:	f004 ff12 	bl	80050f4 <HAL_ADCEx_MultiModeConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002d6:	f001 f895 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_ADC1_Init+0xfc>)
 80002dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002de:	2306      	movs	r3, #6
 80002e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002e6:	237f      	movs	r3, #127	; 0x7f
 80002e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002ea:	2304      	movs	r3, #4
 80002ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002f8:	f003 fe98 	bl	800402c <HAL_ADC_ConfigChannel>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000302:	f001 f87f 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3730      	adds	r7, #48	; 0x30
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000b4 	.word	0x200000b4
 8000314:	04300002 	.word	0x04300002

08000318 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	463b      	mov	r3, r7
 8000320:	2220      	movs	r2, #32
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f009 fec9 	bl	800a0bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800032a:	4b28      	ldr	r3, [pc, #160]	; (80003cc <MX_ADC2_Init+0xb4>)
 800032c:	4a28      	ldr	r2, [pc, #160]	; (80003d0 <MX_ADC2_Init+0xb8>)
 800032e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000336:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC2_Init+0xb4>)
 800033a:	2210      	movs	r2, #16
 800033c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC2_Init+0xb4>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000352:	2204      	movs	r2, #4
 8000354:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000358:	2200      	movs	r2, #0
 800035a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_ADC2_Init+0xb4>)
 800035e:	2200      	movs	r2, #0
 8000360:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000364:	2201      	movs	r2, #1
 8000366:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_ADC2_Init+0xb4>)
 800036a:	2200      	movs	r2, #0
 800036c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC2_Init+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000388:	f003 fb8a 	bl	8003aa0 <HAL_ADC_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000392:	f001 f837 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC2_Init+0xbc>)
 8000398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	; 0x7f
 80003a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ae:	463b      	mov	r3, r7
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <MX_ADC2_Init+0xb4>)
 80003b4:	f003 fe3a 	bl	800402c <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003be:	f001 f821 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000014c 	.word	0x2000014c
 80003d0:	50000100 	.word	0x50000100
 80003d4:	08600004 	.word	0x08600004

080003d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0a0      	sub	sp, #128	; 0x80
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	2254      	movs	r2, #84	; 0x54
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f009 fe5f 	bl	800a0bc <memset>
  if(adcHandle->Instance==ADC1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000406:	d16a      	bne.n	80004de <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800040e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000412:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f006 fe91 	bl	8007140 <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000424:	f000 ffee 	bl	8001404 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000428:	4b50      	ldr	r3, [pc, #320]	; (800056c <HAL_ADC_MspInit+0x194>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a4f      	ldr	r2, [pc, #316]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000430:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000432:	4b4e      	ldr	r3, [pc, #312]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d10b      	bne.n	8000452 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800043a:	4b4d      	ldr	r3, [pc, #308]	; (8000570 <HAL_ADC_MspInit+0x198>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a4c      	ldr	r2, [pc, #304]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b4a      	ldr	r3, [pc, #296]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b47      	ldr	r3, [pc, #284]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a46      	ldr	r2, [pc, #280]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b44      	ldr	r3, [pc, #272]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800046a:	2301      	movs	r3, #1
 800046c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	2303      	movs	r3, #3
 8000470:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f005 fef8 	bl	8006274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000486:	4a3c      	ldr	r2, [pc, #240]	; (8000578 <HAL_ADC_MspInit+0x1a0>)
 8000488:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800048a:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 800048c:	2205      	movs	r2, #5
 800048e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800049c:	4b35      	ldr	r3, [pc, #212]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004a2:	4b34      	ldr	r3, [pc, #208]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004b4:	2220      	movs	r2, #32
 80004b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80004be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004c0:	482c      	ldr	r0, [pc, #176]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004c2:	f005 fb71 	bl	8005ba8 <HAL_DMA_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80004cc:	f000 ff9a 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a28      	ldr	r2, [pc, #160]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004d4:	655a      	str	r2, [r3, #84]	; 0x54
 80004d6:	4a27      	ldr	r2, [pc, #156]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80004dc:	e042      	b.n	8000564 <HAL_ADC_MspInit+0x18c>
  else if(adcHandle->Instance==ADC2)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <HAL_ADC_MspInit+0x1a4>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d13d      	bne.n	8000564 <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80004ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	4618      	mov	r0, r3
 80004fa:	f006 fe21 	bl	8007140 <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000504:	f000 ff7e 	bl	8001404 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_ADC_MspInit+0x194>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000510:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d10b      	bne.n	8000532 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_ADC_MspInit+0x198>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800054a:	2302      	movs	r3, #2
 800054c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	2303      	movs	r3, #3
 8000550:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f005 fe88 	bl	8006274 <HAL_GPIO_Init>
}
 8000564:	bf00      	nop
 8000566:	3780      	adds	r7, #128	; 0x80
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000244 	.word	0x20000244
 8000570:	40021000 	.word	0x40021000
 8000574:	200001e4 	.word	0x200001e4
 8000578:	40020008 	.word	0x40020008
 800057c:	50000100 	.word	0x50000100

08000580 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_COMP1_Init+0x48>)
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <MX_COMP1_Init+0x4c>)
 8000588:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_COMP1_Init+0x48>)
 800058c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000590:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_COMP1_Init+0x48>)
 8000594:	2260      	movs	r2, #96	; 0x60
 8000596:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_COMP1_Init+0x48>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005a0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80005a4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005b4:	f005 f806 	bl	80055c4 <HAL_COMP_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 80005be:	f000 ff21 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000248 	.word	0x20000248
 80005cc:	40010200 	.word	0x40010200

080005d0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a24      	ldr	r2, [pc, #144]	; (8000680 <HAL_COMP_MspInit+0xb0>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d141      	bne.n	8000676 <HAL_COMP_MspInit+0xa6>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PA4     ------> COMP1_INM
    PA6     ------> COMP1_OUT
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000626:	2303      	movs	r3, #3
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f005 fe1c 	bl	8006274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 800064c:	2308      	movs	r3, #8
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f005 fe0b 	bl	8006274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_COMP_MspInit+0xb8>)
 8000672:	f005 fdff 	bl	8006274 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40010200 	.word	0x40010200
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_DMA_Init+0x98>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	4a23      	ldr	r2, [pc, #140]	; (8000724 <MX_DMA_Init+0x98>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6493      	str	r3, [r2, #72]	; 0x48
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_DMA_Init+0x98>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_DMA_Init+0x98>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_DMA_Init+0x98>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6493      	str	r3, [r2, #72]	; 0x48
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_DMA_Init+0x98>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_DMA_Init+0x98>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_DMA_Init+0x98>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_DMA_Init+0x98>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f005 fa2d 	bl	8005b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f005 fa44 	bl	8005b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	200c      	movs	r0, #12
 80006f0:	f005 fa25 	bl	8005b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006f4:	200c      	movs	r0, #12
 80006f6:	f005 fa3c 	bl	8005b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2038      	movs	r0, #56	; 0x38
 8000700:	f005 fa1d 	bl	8005b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000704:	2038      	movs	r0, #56	; 0x38
 8000706:	f005 fa34 	bl	8005b72 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	205e      	movs	r0, #94	; 0x5e
 8000710:	f005 fa15 	bl	8005b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000714:	205e      	movs	r0, #94	; 0x5e
 8000716:	f005 fa2c 	bl	8005b72 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a5d      	ldr	r2, [pc, #372]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <MX_GPIO_Init+0x190>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a57      	ldr	r2, [pc, #348]	; (80008b8 <MX_GPIO_Init+0x190>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b55      	ldr	r3, [pc, #340]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b52      	ldr	r3, [pc, #328]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a51      	ldr	r2, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <MX_GPIO_Init+0x190>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x190>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007b6:	2200      	movs	r2, #0
 80007b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007bc:	483f      	ldr	r0, [pc, #252]	; (80008bc <MX_GPIO_Init+0x194>)
 80007be:	f005 fedb 	bl	8006578 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f005 fed5 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80007d4:	483a      	ldr	r0, [pc, #232]	; (80008c0 <MX_GPIO_Init+0x198>)
 80007d6:	f005 fecf 	bl	8006578 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2104      	movs	r1, #4
 80007de:	4839      	ldr	r0, [pc, #228]	; (80008c4 <MX_GPIO_Init+0x19c>)
 80007e0:	f005 feca 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x198>)
 80007ec:	f005 fec4 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	482c      	ldr	r0, [pc, #176]	; (80008bc <MX_GPIO_Init+0x194>)
 800080a:	f005 fd33 	bl	8006274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f005 fd24 	bl	8006274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800082c:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	481e      	ldr	r0, [pc, #120]	; (80008c0 <MX_GPIO_Init+0x198>)
 8000846:	f005 fd15 	bl	8006274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000850:	2311      	movs	r3, #17
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4817      	ldr	r0, [pc, #92]	; (80008c0 <MX_GPIO_Init+0x198>)
 8000864:	f005 fd06 	bl	8006274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x19c>)
 8000880:	f005 fcf8 	bl	8006274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x198>)
 800089e:	f005 fce9 	bl	8006274 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x1a0>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x1a0>)
 80008a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ac:	6053      	str	r3, [r2, #4]

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800
 80008c0:	48000400 	.word	0x48000400
 80008c4:	48000c00 	.word	0x48000c00
 80008c8:	40010000 	.word	0x40010000

080008cc <initBitMap>:
// 00000000 -> 0
// 00000001 -> 1
// 00000010 -> 2
// 00000011 -> 2
// etc
void initBitMap() {
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e01a      	b.n	800090e <initBitMap+0x42>
		int bit = 1 << i;
 80008d8:	2201      	movs	r2, #1
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	607b      	str	r3, [r7, #4]
		for (int j = 0; j < bit; j++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e00b      	b.n	8000900 <initBitMap+0x34>
			bitMap[bit + j] = i + 1;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	440b      	add	r3, r1
 80008f2:	3201      	adds	r2, #1
 80008f4:	b2d1      	uxtb	r1, r2
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <initBitMap+0x58>)
 80008f8:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < bit; j++) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbef      	blt.n	80008e8 <initBitMap+0x1c>
	for (int i = 0; i < 8; i++) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b07      	cmp	r3, #7
 8000912:	dde1      	ble.n	80008d8 <initBitMap+0xc>
		}
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000036c 	.word	0x2000036c

08000928 <initColorMaps>:
		uint16_t rgb = rgbMap[i];
		rgbMap[i] = (rgb >> 8) | ((rgb & 0xff) << 8);
	}
}

void initColorMaps(float scaleFactor, float offset) {
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a4      	sub	sp, #144	; 0x90
 800092c:	af00      	add	r7, sp, #0
 800092e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000932:	edc7 0a00 	vstr	s1, [r7]

	float RY[16] = { 0, 0.47, 0.07, 0.17, 0.4, 0.43, 0.83, 0, 0.93, 0.93, 0.57,
			0.57, 0.13, 0.73, 0.47, 0.47 };
			*/

	float Y[16] = { 0, 0, 0.5, 0.6, 0.36, 0.5, 0.44, 0.66, 0.5, 0.62, 0.68,
 8000936:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <initColorMaps+0xd8>)
 8000938:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800093c:	461d      	mov	r5, r3
 800093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800094e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.78, 0.42, 0.48, 0.72, 0.92 };

	float RY[16] = { 0, 0.42, 0.06, 0.14, 0.34, 0.38, 0.76, 0, 0.84, 0.84, 0.5,
 8000952:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <initColorMaps+0xdc>)
 8000954:	f107 040c 	add.w	r4, r7, #12
 8000958:	461d      	mov	r5, r3
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800096a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.5, 0.12, 0.66, 0.42, 0.42 };

	// multiply by the initial scale factor and add the offset
	for(int i=0; i< 16; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000974:	e034      	b.n	80009e0 <initColorMaps+0xb8>
		Y[i] = (Y[i] * scaleFactor) + offset;
 8000976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	3390      	adds	r3, #144	; 0x90
 800097e:	443b      	add	r3, r7
 8000980:	3b44      	subs	r3, #68	; 0x44
 8000982:	ed93 7a00 	vldr	s14, [r3]
 8000986:	edd7 7a01 	vldr	s15, [r7, #4]
 800098a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800098e:	edd7 7a00 	vldr	s15, [r7]
 8000992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	3390      	adds	r3, #144	; 0x90
 800099e:	443b      	add	r3, r7
 80009a0:	3b44      	subs	r3, #68	; 0x44
 80009a2:	edc3 7a00 	vstr	s15, [r3]
		RY[i] = (RY[i] * scaleFactor) + offset;
 80009a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	3390      	adds	r3, #144	; 0x90
 80009ae:	443b      	add	r3, r7
 80009b0:	3b84      	subs	r3, #132	; 0x84
 80009b2:	ed93 7a00 	vldr	s14, [r3]
 80009b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009be:	edd7 7a00 	vldr	s15, [r7]
 80009c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	3390      	adds	r3, #144	; 0x90
 80009ce:	443b      	add	r3, r7
 80009d0:	3b84      	subs	r3, #132	; 0x84
 80009d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i< 16; i++) {
 80009d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009da:	3301      	adds	r3, #1
 80009dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80009e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	ddc6      	ble.n	8000976 <initColorMaps+0x4e>
	}

	setColorLevels(Y, RY);
 80009e8:	f107 020c 	add.w	r2, r7, #12
 80009ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f808 	bl	8000a08 <setColorLevels>
}
 80009f8:	bf00      	nop
 80009fa:	3790      	adds	r7, #144	; 0x90
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000a00:	0800a16c 	.word	0x0800a16c
 8000a04:	0800a1ac 	.word	0x0800a1ac

08000a08 <setColorLevels>:

void setColorLevels(float yLevels[16], float ryLevels[16]) {
 8000a08:	b480      	push	{r7}
 8000a0a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a14:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000a18:	6018      	str	r0, [r3, #0]
 8000a1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a1e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000a22:	6019      	str	r1, [r3, #0]
	float v = 0;
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	float oneBit = VREF / ADC_RESOLUTION_STEPS;
 8000a2c:	4ba4      	ldr	r3, [pc, #656]	; (8000cc0 <setColorLevels+0x2b8>)
 8000a2e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	uint16_t RYmap1[ADC_RESOLUTION_STEPS];

	float voltages[ADC_RESOLUTION_STEPS];

	// voltage to adc reading map
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a38:	e017      	b.n	8000a6a <setColorLevels+0x62>
		voltages[i] = v;
 8000a3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a3e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000a42:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000a4e:	601a      	str	r2, [r3, #0]
		v += oneBit;
 8000a50:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000a54:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8000a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a5c:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8000a60:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a64:	3301      	adds	r3, #1
 8000a66:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a6a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a70:	dde3      	ble.n	8000a3a <setColorLevels+0x32>
	}

	// Clear the color maps
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a78:	e022      	b.n	8000ac0 <setColorLevels+0xb8>
		YMap[j] = 0;
 8000a7a:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <setColorLevels+0x2bc>)
 8000a7c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a80:	2100      	movs	r1, #0
 8000a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RYMap[j] = 0;
 8000a86:	4a90      	ldr	r2, [pc, #576]	; (8000cc8 <setColorLevels+0x2c0>)
 8000a88:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Ymap1[j] = 0;
 8000a92:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000a9c:	443b      	add	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f823 2ca0 	strh.w	r2, [r3, #-160]
		RYmap1[j] = 0;
 8000aa4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000aa8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000aac:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8000ab6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000aba:	3301      	adds	r3, #1
 8000abc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000ac0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ac4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac6:	ddd8      	ble.n	8000a7a <setColorLevels+0x72>
	}

	// Create the voltage to color name bitmaps
	for (int i = 0; i < 16; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000ace:	e0ee      	b.n	8000cae <setColorLevels+0x2a6>

		v = yLevels[i];
 8000ad0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000ada:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000aee:	e041      	b.n	8000b74 <setColorLevels+0x16c>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8000af0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000af4:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000af8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	edd3 7a00 	vldr	s15, [r3]
 8000b04:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	db2b      	blt.n	8000b6a <setColorLevels+0x162>
 8000b12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b16:	3301      	adds	r3, #1
 8000b18:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000b1c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	d519      	bpl.n	8000b6a <setColorLevels+0x162>
				Ymap1[j] |= (1 << i);
 8000b36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b40:	443b      	add	r3, r7
 8000b42:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	2101      	movs	r1, #1
 8000b4a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b64:	443b      	add	r3, r7
 8000b66:	f823 2ca0 	strh.w	r2, [r3, #-160]
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000b6a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000b74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b78:	2b3e      	cmp	r3, #62	; 0x3e
 8000b7a:	ddb9      	ble.n	8000af0 <setColorLevels+0xe8>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS-1] <= v) {
 8000b7c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b80:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000b84:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000b88:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	db0d      	blt.n	8000bb2 <setColorLevels+0x1aa>
			Ymap1[ADC_RESOLUTION_STEPS-1] |= (1 << i);
 8000b96:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		}
		v = ryLevels[i];
 8000bb2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000bbc:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000bd0:	e041      	b.n	8000c56 <setColorLevels+0x24e>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8000bd2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000bd6:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000bda:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	edd3 7a00 	vldr	s15, [r3]
 8000be6:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf2:	db2b      	blt.n	8000c4c <setColorLevels+0x244>
 8000bf4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000bfe:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	d519      	bpl.n	8000c4c <setColorLevels+0x244>
				RYmap1[j] |= (1 << i);
 8000c18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c20:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000c24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c44:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000c48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000c4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c50:	3301      	adds	r3, #1
 8000c52:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000c56:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8000c5c:	ddb9      	ble.n	8000bd2 <setColorLevels+0x1ca>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS-1] <= v) {
 8000c5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c62:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000c66:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000c6a:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c76:	db15      	blt.n	8000ca4 <setColorLevels+0x29c>
			RYmap1[ADC_RESOLUTION_STEPS-1] |= (1 << i);
 8000c78:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c80:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	2101      	movs	r1, #1
 8000c88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	for (int i = 0; i < 16; i++) {
 8000ca4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000cae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	f77f af0c 	ble.w	8000ad0 <setColorLevels+0xc8>
	}

	// now propagate the map to each neighbouring entry
	// to allow for noise and inaccuracy

	for(uint16_t i=0; i<ADC_RESOLUTION_STEPS-1; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000cbe:	e080      	b.n	8000dc2 <setColorLevels+0x3ba>
 8000cc0:	3d533333 	.word	0x3d533333
 8000cc4:	2000026c 	.word	0x2000026c
 8000cc8:	200002ec 	.word	0x200002ec

		YMap[i] = Ymap1[i];
 8000ccc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000cd0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000cda:	443b      	add	r3, r7
 8000cdc:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <setColorLevels+0x3d4>)
 8000ce2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		RYMap[i] = RYmap1[i];
 8000ce6:	f8b7 120e 	ldrh.w	r1, [r7, #526]	; 0x20e
 8000cea:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000cee:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000cf2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000cf6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000cfa:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <setColorLevels+0x3d8>)
 8000cfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(i>0) {
 8000d00:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d029      	beq.n	8000d5c <setColorLevels+0x354>
			YMap[i] |= Ymap1[i-1];
 8000d08:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d0c:	4a33      	ldr	r2, [pc, #204]	; (8000ddc <setColorLevels+0x3d4>)
 8000d0e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d12:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d16:	3b01      	subs	r3, #1
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d1e:	443b      	add	r3, r7
 8000d20:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8000d24:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	b291      	uxth	r1, r2
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <setColorLevels+0x3d4>)
 8000d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i-1];
 8000d32:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <setColorLevels+0x3d8>)
 8000d38:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d3c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d4a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d4e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d52:	430a      	orrs	r2, r1
 8000d54:	b291      	uxth	r1, r2
 8000d56:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <setColorLevels+0x3d8>)
 8000d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if(i<ADC_RESOLUTION_STEPS-1) {
 8000d5c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d60:	2b3e      	cmp	r3, #62	; 0x3e
 8000d62:	d829      	bhi.n	8000db8 <setColorLevels+0x3b0>
			YMap[i] |= Ymap1[i+1];
 8000d64:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <setColorLevels+0x3d4>)
 8000d6a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d6e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d72:	3301      	adds	r3, #1
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d7a:	443b      	add	r3, r7
 8000d7c:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8000d80:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d84:	430a      	orrs	r2, r1
 8000d86:	b291      	uxth	r1, r2
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <setColorLevels+0x3d4>)
 8000d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i+1];
 8000d8e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <setColorLevels+0x3d8>)
 8000d94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d98:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000da2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000da6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000daa:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dae:	430a      	orrs	r2, r1
 8000db0:	b291      	uxth	r1, r2
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <setColorLevels+0x3d8>)
 8000db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<ADC_RESOLUTION_STEPS-1; i++) {
 8000db8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000dc2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8000dc8:	d980      	bls.n	8000ccc <setColorLevels+0x2c4>

	//white = (0.47 / VREF * ADC_RESOLUTION_STEPS) + offsetBinary;
	//RYMap[white-1] |= 0x8000;
	//RYMap[white] |= 0x8000;
	//RYMap[white+1] |= 0x8000;
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000026c 	.word	0x2000026c
 8000de0:	200002ec 	.word	0x200002ec

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f002 fb72 	bl	80034d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f9a2 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f7ff fc9a 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f7ff fc4a 	bl	800068c <MX_DMA_Init>
  MX_TIM8_Init();
 8000df8:	f001 ff36 	bl	8002c68 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000dfc:	f001 fc74 	bl	80026e8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000e00:	f7ff fa0a 	bl	8000218 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e04:	f7ff fa88 	bl	8000318 <MX_ADC2_Init>
  MX_SPI1_Init();
 8000e08:	f001 fad2 	bl	80023b0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e0c:	f001 fd76 	bl	80028fc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e10:	f001 fd3a 	bl	8002888 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e14:	f001 fe26 	bl	8002a64 <MX_TIM4_Init>
  MX_COMP1_Init();
 8000e18:	f7ff fbb2 	bl	8000580 <MX_COMP1_Init>
  MX_TIM5_Init();
 8000e1c:	f001 feea 	bl	8002bf4 <MX_TIM5_Init>
  MX_TIM16_Init();
 8000e20:	f001 ffdc 	bl	8002ddc <MX_TIM16_Init>
  MX_TIM20_Init();
 8000e24:	f002 f85c 	bl	8002ee0 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8000e28:	4ba7      	ldr	r3, [pc, #668]	; (80010c8 <main+0x2e4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e30:	4aa5      	ldr	r2, [pc, #660]	; (80010c8 <main+0x2e4>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6013      	str	r3, [r2, #0]
	mysetup();
 8000e38:	f001 f9da 	bl	80021f0 <mysetup>

	initBitMap();
 8000e3c:	f7ff fd46 	bl	80008cc <initBitMap>
	initColorMaps(0.43/0.47, 1.72);
 8000e40:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80010cc <main+0x2e8>
 8000e44:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80010d0 <main+0x2ec>
 8000e48:	f7ff fd6e 	bl	8000928 <initColorMaps>

#ifndef PAR_TFT
	swapRGBBytes();
#endif

	setLeftWindow();
 8000e4c:	f001 f9fe 	bl	800224c <setLeftWindow>

	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID,
 8000e50:	4aa0      	ldr	r2, [pc, #640]	; (80010d4 <main+0x2f0>)
 8000e52:	2114      	movs	r1, #20
 8000e54:	48a0      	ldr	r0, [pc, #640]	; (80010d8 <main+0x2f4>)
 8000e56:	f007 fe41 	bl	8008adc <HAL_TIM_RegisterCallback>
			VSyncCallback);

	HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_TX_COMPLETE_CB_ID,
 8000e5a:	4aa0      	ldr	r2, [pc, #640]	; (80010dc <main+0x2f8>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	48a0      	ldr	r0, [pc, #640]	; (80010e0 <main+0x2fc>)
 8000e60:	f006 fc9e 	bl	80077a0 <HAL_SPI_RegisterCallback>
			SPIFullCallback);
	HAL_DMA_RegisterCallback(&hdma_tim20_ch1, HAL_DMA_XFER_CPLT_CB_ID,
 8000e64:	4a9f      	ldr	r2, [pc, #636]	; (80010e4 <main+0x300>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	489f      	ldr	r0, [pc, #636]	; (80010e8 <main+0x304>)
 8000e6a:	f005 f8c9 	bl	8006000 <HAL_DMA_RegisterCallback>
			GPIODMAComplete);

	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID,
 8000e6e:	4a9f      	ldr	r2, [pc, #636]	; (80010ec <main+0x308>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	489f      	ldr	r0, [pc, #636]	; (80010f0 <main+0x30c>)
 8000e74:	f003 f814 	bl	8003ea0 <HAL_ADC_RegisterCallback>
			ADCCallback);
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_HALF_CB_ID,
 8000e78:	4a9c      	ldr	r2, [pc, #624]	; (80010ec <main+0x308>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	489c      	ldr	r0, [pc, #624]	; (80010f0 <main+0x30c>)
 8000e7e:	f003 f80f 	bl	8003ea0 <HAL_ADC_RegisterCallback>
			ADCCallback);

	HAL_COMP_Start(&hcomp1);
 8000e82:	489c      	ldr	r0, [pc, #624]	; (80010f4 <main+0x310>)
 8000e84:	f004 fd38 	bl	80058f8 <HAL_COMP_Start>
	HAL_TIM_Base_Start(&htim4); // hysnc
 8000e88:	489b      	ldr	r0, [pc, #620]	; (80010f8 <main+0x314>)
 8000e8a:	f006 fde3 	bl	8007a54 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1); // sample clock
 8000e8e:	489b      	ldr	r0, [pc, #620]	; (80010fc <main+0x318>)
 8000e90:	f006 fde0 	bl	8007a54 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3); // vsync
 8000e94:	4890      	ldr	r0, [pc, #576]	; (80010d8 <main+0x2f4>)
 8000e96:	f006 fe4d 	bl	8007b34 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8); // Parallel TFT DMA line clock
 8000e9a:	4899      	ldr	r0, [pc, #612]	; (8001100 <main+0x31c>)
 8000e9c:	f006 fdda 	bl	8007a54 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim20); // Parallel TFT DMA pixel clock
 8000ea0:	4898      	ldr	r0, [pc, #608]	; (8001104 <main+0x320>)
 8000ea2:	f006 fdd7 	bl	8007a54 <HAL_TIM_Base_Start>

	//HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_LEN);
	__HAL_TIM_ENABLE_DMA(&htim20, TIM_DMA_CC1);
 8000ea6:	4b97      	ldr	r3, [pc, #604]	; (8001104 <main+0x320>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	4b95      	ldr	r3, [pc, #596]	; (8001104 <main+0x320>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb4:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_OnePulse_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	488f      	ldr	r0, [pc, #572]	; (80010f8 <main+0x314>)
 8000eba:	f006 ffed 	bl	8007e98 <HAL_TIM_OnePulse_Start>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <main+0xe4>
		/* Starting Error */
		Error_Handler();
 8000ec4:	f000 fa9e 	bl	8001404 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8000ec8:	2100      	movs	r1, #0
 8000eca:	488c      	ldr	r0, [pc, #560]	; (80010fc <main+0x318>)
 8000ecc:	f006 ffe4 	bl	8007e98 <HAL_TIM_OnePulse_Start>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <main+0xf6>
		/* Starting Error */
		Error_Handler();
 8000ed6:	f000 fa95 	bl	8001404 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK) {
 8000eda:	2100      	movs	r1, #0
 8000edc:	487e      	ldr	r0, [pc, #504]	; (80010d8 <main+0x2f4>)
 8000ede:	f007 f859 	bl	8007f94 <HAL_TIM_OnePulse_Start_IT>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <main+0x108>
		/* Starting Error */
		Error_Handler();
 8000ee8:	f000 fa8c 	bl	8001404 <Error_Handler>
	}

	if (HAL_TIM_OnePulse_Start_IT(&htim20, TIM_CHANNEL_1) != HAL_OK) {
 8000eec:	2100      	movs	r1, #0
 8000eee:	4885      	ldr	r0, [pc, #532]	; (8001104 <main+0x320>)
 8000ef0:	f007 f850 	bl	8007f94 <HAL_TIM_OnePulse_Start_IT>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <main+0x11a>
		/* Starting Error */
		Error_Handler();
 8000efa:	f000 fa83 	bl	8001404 <Error_Handler>
	}
	HAL_TIM_OnePulse_Start(&htim8, TIM_CHANNEL_1);
 8000efe:	2100      	movs	r1, #0
 8000f00:	487f      	ldr	r0, [pc, #508]	; (8001100 <main+0x31c>)
 8000f02:	f006 ffc9 	bl	8007e98 <HAL_TIM_OnePulse_Start>

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 8000f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0a:	497f      	ldr	r1, [pc, #508]	; (8001108 <main+0x324>)
 8000f0c:	4878      	ldr	r0, [pc, #480]	; (80010f0 <main+0x30c>)
 8000f0e:	f003 ff1d 	bl	8004d4c <HAL_ADCEx_MultiModeStart_DMA>

	line = BLANKING_LINES; // Line 0 is when we detect vsync at the end of a frame
 8000f12:	4b7e      	ldr	r3, [pc, #504]	; (800110c <main+0x328>)
 8000f14:	2227      	movs	r2, #39	; 0x27
 8000f16:	801a      	strh	r2, [r3, #0]
	captureState = CAPTURE_STATE_SEEKING_SYNC;
 8000f18:	4b7d      	ldr	r3, [pc, #500]	; (8001110 <main+0x32c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]

	dmaState = DMA_CAPTURE_STATE_IDLE;
 8000f1e:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <main+0x330>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

	rgbBufIdx = 0;
 8000f24:	4b7c      	ldr	r3, [pc, #496]	; (8001118 <main+0x334>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
	rgbBufchunk = 0;
 8000f2a:	4b7c      	ldr	r3, [pc, #496]	; (800111c <main+0x338>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	pix = 0;
 8000f30:	4b7b      	ldr	r3, [pc, #492]	; (8001120 <main+0x33c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	801a      	strh	r2, [r3, #0]
	frameReady = 0;
 8000f36:	4b7b      	ldr	r3, [pc, #492]	; (8001124 <main+0x340>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]

	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <main+0x2e4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f44:	4a60      	ldr	r2, [pc, #384]	; (80010c8 <main+0x2e4>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6013      	str	r3, [r2, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (captureState) {
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <main+0x32c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d825      	bhi.n	8000fa2 <main+0x1be>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <main+0x178>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000fa3 	.word	0x08000fa3
 8000f60:	08000f75 	.word	0x08000f75
 8000f64:	08000fa3 	.word	0x08000fa3
 8000f68:	08000fa3 	.word	0x08000fa3
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f8b 	.word	0x08000f8b

		case CAPTURE_STATE_SEEKING_SYNC:
			break;

		case CAPTURE_STATE_FOUND_SYNC:
			captureState = CAPTURE_STATE_START_GRAB;
 8000f74:	4b66      	ldr	r3, [pc, #408]	; (8001110 <main+0x32c>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e015      	b.n	8000fa8 <main+0x1c4>

		case CAPTURE_STATE_GRABBED:
			captureState = CAPTURE_STATE_IDLE;
 8000f7c:	4b64      	ldr	r3, [pc, #400]	; (8001110 <main+0x32c>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	701a      	strb	r2, [r3, #0]
			frameReady = 1;
 8000f82:	4b68      	ldr	r3, [pc, #416]	; (8001124 <main+0x340>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
			break;
 8000f88:	e00e      	b.n	8000fa8 <main+0x1c4>

		case CAPTURE_STATE_IDLE:

			if (frameReady == 0) {
 8000f8a:	4b66      	ldr	r3, [pc, #408]	; (8001124 <main+0x340>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <main+0x1c2>
				captureState = CAPTURE_STATE_START_GRAB;
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <main+0x32c>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
				pix=0;
 8000f9a:	4b61      	ldr	r3, [pc, #388]	; (8001120 <main+0x33c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
			}

			break;
 8000fa0:	e001      	b.n	8000fa6 <main+0x1c2>

		default:
			break;
 8000fa2:	bf00      	nop
 8000fa4:	e000      	b.n	8000fa8 <main+0x1c4>
			break;
 8000fa6:	bf00      	nop
		}

		switch (dmaState) {
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	; (8001114 <main+0x330>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	f200 8086 	bhi.w	80010c0 <main+0x2dc>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <main+0x1d8>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fcd 	.word	0x08000fcd
 8000fc0:	08000fdf 	.word	0x08000fdf
 8000fc4:	080010c1 	.word	0x080010c1
 8000fc8:	0800103d 	.word	0x0800103d

		case DMA_CAPTURE_STATE_IDLE:
			if (frameReady == 1) {
 8000fcc:	4b55      	ldr	r3, [pc, #340]	; (8001124 <main+0x340>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d176      	bne.n	80010c4 <main+0x2e0>
				dmaState = DMA_STATE_START;
 8000fd6:	4b4f      	ldr	r3, [pc, #316]	; (8001114 <main+0x330>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fdc:	e072      	b.n	80010c4 <main+0x2e0>
			vsync();
			while(SPI1->SR & SPI_SR_BSY) {
				__NOP();
			}
#else
			vsync();
 8000fde:	f001 f993 	bl	8002308 <vsync>
#endif

			rgbBufchunk = 0;
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <main+0x338>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
			rgbBufIdx = 0;
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <main+0x334>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
			dmaState = DMA_STATE_RUNNING;
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <main+0x330>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	701a      	strb	r2, [r3, #0]
#ifndef PAR_TFT
			HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&rgbBuf, RGB_BUF_CHUNK_BYTES);
#else
			TIM20->DIER &= ~ TIM_DIER_CC1DE;
 8000ff4:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <main+0x344>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <main+0x344>)
 8000ffa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ffe:	60d3      	str	r3, [r2, #12]
			TIM20->DIER |= TIM_DIER_CC1DE;
 8001000:	4b49      	ldr	r3, [pc, #292]	; (8001128 <main+0x344>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <main+0x344>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	60d3      	str	r3, [r2, #12]
			HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 800100c:	4947      	ldr	r1, [pc, #284]	; (800112c <main+0x348>)
 800100e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001012:	4a47      	ldr	r2, [pc, #284]	; (8001130 <main+0x34c>)
 8001014:	4834      	ldr	r0, [pc, #208]	; (80010e8 <main+0x304>)
 8001016:	f004 fe6f 	bl	8005cf8 <HAL_DMA_Start_IT>

			GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <main+0x2e4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001022:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <main+0x2e4>)
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	6013      	str	r3, [r2, #0]

			__HAL_TIM_ENABLE(&htim8);
 800102a:	4b35      	ldr	r3, [pc, #212]	; (8001100 <main+0x31c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <main+0x31c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]
#endif
			break;
 800103a:	e044      	b.n	80010c6 <main+0x2e2>

		case DMA_STATE_RUNNING:
			break;

		case DMA_STATE_CHUNK_COMPLETE:
			rgbBufchunk++;
 800103c:	4b37      	ldr	r3, [pc, #220]	; (800111c <main+0x338>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <main+0x338>)
 8001046:	701a      	strb	r2, [r3, #0]

			if (rgbBufchunk == RGB_BUF_CHUNKS) {
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <main+0x338>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d106      	bne.n	800105e <main+0x27a>
				dmaState = DMA_CAPTURE_STATE_IDLE;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <main+0x330>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
				frameReady = 0;
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <main+0x340>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
				__HAL_TIM_ENABLE(&htim8);
#endif
				}
			break;
 800105c:	e033      	b.n	80010c6 <main+0x2e2>
				dmaState = DMA_STATE_RUNNING;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <main+0x330>)
 8001060:	2202      	movs	r2, #2
 8001062:	701a      	strb	r2, [r3, #0]
				TIM20->DIER &= ~ TIM_DIER_CC1DE;
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <main+0x344>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <main+0x344>)
 800106a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800106e:	60d3      	str	r3, [r2, #12]
				TIM20->DIER |= TIM_DIER_CC1DE;
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <main+0x344>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4a2c      	ldr	r2, [pc, #176]	; (8001128 <main+0x344>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	60d3      	str	r3, [r2, #12]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <main+0x338>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	031b      	lsls	r3, r3, #12
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <main+0x348>)
 800108e:	4413      	add	r3, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001096:	4a26      	ldr	r2, [pc, #152]	; (8001130 <main+0x34c>)
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <main+0x304>)
 800109a:	f004 fe2d 	bl	8005cf8 <HAL_DMA_Start_IT>
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <main+0x2e4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <main+0x2e4>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	6013      	str	r3, [r2, #0]
				__HAL_TIM_ENABLE(&htim8);
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <main+0x31c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <main+0x31c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0201 	orr.w	r2, r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
			break;
 80010be:	e002      	b.n	80010c6 <main+0x2e2>

		default:
			break;
 80010c0:	bf00      	nop
 80010c2:	e743      	b.n	8000f4c <main+0x168>
			break;
 80010c4:	bf00      	nop
		switch (captureState) {
 80010c6:	e741      	b.n	8000f4c <main+0x168>
 80010c8:	48000400 	.word	0x48000400
 80010cc:	3fdc28f6 	.word	0x3fdc28f6
 80010d0:	3f6a3678 	.word	0x3f6a3678
 80010d4:	080012fd 	.word	0x080012fd
 80010d8:	20018f38 	.word	0x20018f38
 80010dc:	0800137d 	.word	0x0800137d
 80010e0:	20018cb4 	.word	0x20018cb4
 80010e4:	0800139d 	.word	0x0800139d
 80010e8:	20019400 	.word	0x20019400
 80010ec:	080011cd 	.word	0x080011cd
 80010f0:	200000b4 	.word	0x200000b4
 80010f4:	20000248 	.word	0x20000248
 80010f8:	20019004 	.word	0x20019004
 80010fc:	20018da0 	.word	0x20018da0
 8001100:	2001919c 	.word	0x2001919c
 8001104:	20019334 	.word	0x20019334
 8001108:	20018474 	.word	0x20018474
 800110c:	20018c74 	.word	0x20018c74
 8001110:	20018c76 	.word	0x20018c76
 8001114:	20018c78 	.word	0x20018c78
 8001118:	2001846c 	.word	0x2001846c
 800111c:	20018470 	.word	0x20018470
 8001120:	20018c7a 	.word	0x20018c7a
 8001124:	20018c77 	.word	0x20018c77
 8001128:	40015000 	.word	0x40015000
 800112c:	2000046c 	.word	0x2000046c
 8001130:	48000814 	.word	0x48000814

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2238      	movs	r2, #56	; 0x38
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f008 ffba 	bl	800a0bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115a:	f005 fa25 	bl	80065a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001162:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001166:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116c:	2303      	movs	r3, #3
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001170:	2301      	movs	r3, #1
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001174:	2320      	movs	r3, #32
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001178:	2304      	movs	r3, #4
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fab1 	bl	80066f0 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001194:	f000 f936 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2303      	movs	r3, #3
 800119e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2103      	movs	r1, #3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 fdb5 	bl	8006d20 <HAL_RCC_ClockConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011bc:	f000 f922 	bl	8001404 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011c0:	f005 ff4c 	bl	800705c <HAL_RCC_EnableCSS>
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ADCCallback>:

/* USER CODE BEGIN 4 */

void ADCCallback(ADC_HandleTypeDef *hadc) {
 80011cc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	register uint8_t y;
	register uint8_t ry;
	register uint16_t bits;
	register uint8_t b;
	register uint16_t pixel = pix;
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <ADCCallback+0x108>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b29c      	uxth	r4, r3
	register uint16_t i = PIXELS_PER_LINE;
 80011dc:	f44f 7680 	mov.w	r6, #256	; 0x100
	line++;
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <ADCCallback+0x10c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <ADCCallback+0x10c>)
 80011f0:	801a      	strh	r2, [r3, #0]
	if (line > FRAME_LINES)
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <ADCCallback+0x10c>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80011fc:	db02      	blt.n	8001204 <ADCCallback+0x38>
		line = 1;
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <ADCCallback+0x10c>)
 8001200:	2201      	movs	r2, #1
 8001202:	801a      	strh	r2, [r3, #0]

	if (captureState != CAPTURE_STATE_GRABBING)
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <ADCCallback+0x110>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d15b      	bne.n	80012c6 <ADCCallback+0xfa>
		return;

	if (line > FIRST_VISIBLE_LINE && line < (LAST_VISIBLE_LINE + 2)) { // don't capture the previous line - it was part of frame blanking
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <ADCCallback+0x10c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b21b      	sxth	r3, r3
 8001214:	2b28      	cmp	r3, #40	; 0x28
 8001216:	dd4e      	ble.n	80012b6 <ADCCallback+0xea>
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <ADCCallback+0x10c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b21b      	sxth	r3, r3
 800121e:	2be8      	cmp	r3, #232	; 0xe8
 8001220:	dc49      	bgt.n	80012b6 <ADCCallback+0xea>

		while (i > 0) {
 8001222:	e046      	b.n	80012b2 <ADCCallback+0xe6>

			y = (((uint16_t*) adcbuf)[pixel] & 0xff) >> (8 - ADC_RESOLUTION_BITS);
 8001224:	4623      	mov	r3, r4
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <ADCCallback+0x114>)
 800122a:	4413      	add	r3, r2
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	109b      	asrs	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001236:	fa5f f883 	uxtb.w	r8, r3
			ry = (((uint16_t*) adcbuf)[pixel] >> (16 - ADC_RESOLUTION_BITS));
 800123a:	4623      	mov	r3, r4
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <ADCCallback+0x114>)
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	0a9b      	lsrs	r3, r3, #10
 8001246:	b29b      	uxth	r3, r3
 8001248:	b2dd      	uxtb	r5, r3

			bits = YMap[y] & RYMap[ry];
 800124a:	4642      	mov	r2, r8
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <ADCCallback+0x118>)
 800124e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001252:	4629      	mov	r1, r5
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <ADCCallback+0x11c>)
 8001256:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800125a:	4013      	ands	r3, r2
 800125c:	fa1f f883 	uxth.w	r8, r3

			b = bitMap[bits >> 8];
 8001260:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <ADCCallback+0x120>)
 800126a:	5c9d      	ldrb	r5, [r3, r2]
			if(b == 0) {
 800126c:	2d00      	cmp	r5, #0
 800126e:	d104      	bne.n	800127a <ADCCallback+0xae>
				b = bitMap[bits & 0xff];
 8001270:	4643      	mov	r3, r8
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <ADCCallback+0x120>)
 8001276:	5cd5      	ldrb	r5, [r2, r3]
 8001278:	e002      	b.n	8001280 <ADCCallback+0xb4>
			} else {
				b+=8;
 800127a:	f105 0308 	add.w	r3, r5, #8
 800127e:	b2dd      	uxtb	r5, r3
			}

			if (rgbBufIdx < RGB_BUF_LEN) {
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <ADCCallback+0x124>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001288:	d20d      	bcs.n	80012a6 <ADCCallback+0xda>

				rgbBuf[rgbBufIdx] = rgbMap[b];
 800128a:	4629      	mov	r1, r5
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <ADCCallback+0x124>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <ADCCallback+0x128>)
 8001292:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <ADCCallback+0x12c>)
 8001298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				rgbBufIdx++;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <ADCCallback+0x124>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <ADCCallback+0x124>)
 80012a4:	6013      	str	r3, [r2, #0]
			}
			pixel++;
 80012a6:	4623      	mov	r3, r4
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29c      	uxth	r4, r3
			i--;
 80012ac:	4633      	mov	r3, r6
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b29e      	uxth	r6, r3
		while (i > 0) {
 80012b2:	2e00      	cmp	r6, #0
 80012b4:	d1b6      	bne.n	8001224 <ADCCallback+0x58>
		}
	}

	if (pixel >= 512) {
 80012b6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80012ba:	d300      	bcc.n	80012be <ADCCallback+0xf2>
		pixel = 0;
 80012bc:	2400      	movs	r4, #0
	}

	pix = pixel;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <ADCCallback+0x108>)
 80012c0:	4622      	mov	r2, r4
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	e000      	b.n	80012c8 <ADCCallback+0xfc>
		return;
 80012c6:	bf00      	nop
}
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20018c7a 	.word	0x20018c7a
 80012d8:	20018c74 	.word	0x20018c74
 80012dc:	20018c76 	.word	0x20018c76
 80012e0:	20018474 	.word	0x20018474
 80012e4:	2000026c 	.word	0x2000026c
 80012e8:	200002ec 	.word	0x200002ec
 80012ec:	2000036c 	.word	0x2000036c
 80012f0:	2001846c 	.word	0x2001846c
 80012f4:	20000000 	.word	0x20000000
 80012f8:	2000046c 	.word	0x2000046c

080012fc <VSyncCallback>:

void VSyncCallback(TIM_HandleTypeDef *htim) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	line = LAST_VISIBLE_LINE + BOTTOM_BORDER;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <VSyncCallback+0x68>)
 8001306:	f240 1207 	movw	r2, #263	; 0x107
 800130a:	801a      	strh	r2, [r3, #0]
	pix = 0;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <VSyncCallback+0x6c>)
 800130e:	2200      	movs	r2, #0
 8001310:	801a      	strh	r2, [r3, #0]

	switch (captureState) {
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <VSyncCallback+0x70>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b03      	cmp	r3, #3
 800131a:	d017      	beq.n	800134c <VSyncCallback+0x50>
 800131c:	2b03      	cmp	r3, #3
 800131e:	dc1b      	bgt.n	8001358 <VSyncCallback+0x5c>
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <VSyncCallback+0x2e>
 8001324:	2b02      	cmp	r3, #2
 8001326:	d004      	beq.n	8001332 <VSyncCallback+0x36>
	case CAPTURE_STATE_GRABBING:
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		captureState = CAPTURE_STATE_GRABBED;

	default:
		break;
 8001328:	e016      	b.n	8001358 <VSyncCallback+0x5c>
		captureState = CAPTURE_STATE_FOUND_SYNC;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <VSyncCallback+0x70>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
		break;
 8001330:	e013      	b.n	800135a <VSyncCallback+0x5e>
		captureState = CAPTURE_STATE_GRABBING;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <VSyncCallback+0x70>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]
		rgbBufIdx = 0;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <VSyncCallback+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 800133e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001342:	490c      	ldr	r1, [pc, #48]	; (8001374 <VSyncCallback+0x78>)
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <VSyncCallback+0x7c>)
 8001346:	f003 fd01 	bl	8004d4c <HAL_ADCEx_MultiModeStart_DMA>
		break;
 800134a:	e006      	b.n	800135a <VSyncCallback+0x5e>
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <VSyncCallback+0x7c>)
 800134e:	f003 fdbf 	bl	8004ed0 <HAL_ADCEx_MultiModeStop_DMA>
		captureState = CAPTURE_STATE_GRABBED;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <VSyncCallback+0x70>)
 8001354:	2204      	movs	r2, #4
 8001356:	701a      	strb	r2, [r3, #0]
		break;
 8001358:	bf00      	nop

	}
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20018c74 	.word	0x20018c74
 8001368:	20018c7a 	.word	0x20018c7a
 800136c:	20018c76 	.word	0x20018c76
 8001370:	2001846c 	.word	0x2001846c
 8001374:	20018474 	.word	0x20018474
 8001378:	200000b4 	.word	0x200000b4

0800137c <SPIFullCallback>:

void SPIFullCallback(SPI_HandleTypeDef *spi) {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SPIFullCallback+0x1c>)
 8001386:	2203      	movs	r2, #3
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20018c78 	.word	0x20018c78

0800139c <GPIODMAComplete>:

void GPIODMAComplete(DMA_HandleTypeDef *dma) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <GPIODMAComplete+0x5c>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim8);
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <GPIODMAComplete+0x60>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <GPIODMAComplete+0x3e>
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <GPIODMAComplete+0x60>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	f244 4344 	movw	r3, #17476	; 0x4444
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <GPIODMAComplete+0x3e>
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <GPIODMAComplete+0x60>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <GPIODMAComplete+0x60>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <GPIODMAComplete+0x64>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <GPIODMAComplete+0x64>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6013      	str	r3, [r2, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20018c78 	.word	0x20018c78
 80013fc:	2001919c 	.word	0x2001919c
 8001400:	48000400 	.word	0x48000400

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <_ZN6GFX_HWC1Ev>:
#ifndef INC_GFX_HW_H_
#define INC_GFX_HW_H_

#include "main.h"

class GFX_HW {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <_ZN6GFX_HWC1Ev+0x1c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	0800a378 	.word	0x0800a378

08001430 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>:
#include "GFX_HW.h"

class GFX_HW_PAR16: public GFX_HW {
public:

	GFX_HW_PAR16(
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	807b      	strh	r3, [r7, #2]
			GPIO_TypeDef *dataPort,
			GPIO_TypeDef *csPort, uint16_t csPin,
			GPIO_TypeDef *dcPort, uint16_t dcPin,
			GPIO_TypeDef *wrPort, uint16_t wrPin,
			GPIO_TypeDef *rdPort, uint16_t rdPin,
			GPIO_TypeDef *rsPort, uint16_t rsPin) {
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffe5 	bl	8001410 <_ZN6GFX_HWC1Ev>
 8001446:	4a28      	ldr	r2, [pc, #160]	; (80014e8 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t+0xb8>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	601a      	str	r2, [r3, #0]

		_dataPort = dataPort;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	605a      	str	r2, [r3, #4]
		_csPort = csPort; _csPin = csPin;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	839a      	strh	r2, [r3, #28]
		_dcPort = dcPort; _dcPin = dcPin;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8bba      	ldrh	r2, [r7, #28]
 8001468:	83da      	strh	r2, [r3, #30]
		_wrPort = wrPort; _wrPin = wrPin;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001474:	841a      	strh	r2, [r3, #32]
		_rdPort = rdPort; _rdPin = rdPin;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001480:	845a      	strh	r2, [r3, #34]	; 0x22
		_rsPort = rsPort; _rsPin = rsPin;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001486:	619a      	str	r2, [r3, #24]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800148c:	849a      	strh	r2, [r3, #36]	; 0x24
		high(_dcPort, _dcPin);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8bdb      	ldrh	r3, [r3, #30]
 8001496:	461a      	mov	r2, r3
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 fc74 	bl	8001d86 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_csPort, _csPin);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6899      	ldr	r1, [r3, #8]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8b9b      	ldrh	r3, [r3, #28]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fc6c 	bl	8001d86 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_wrPort, _wrPin);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8c1b      	ldrh	r3, [r3, #32]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 fc64 	bl	8001d86 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rdPort, _rdPin);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6959      	ldr	r1, [r3, #20]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80014c6:	461a      	mov	r2, r3
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 fc5c 	bl	8001d86 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rsPort, _rsPin);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6999      	ldr	r1, [r3, #24]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014d6:	461a      	mov	r2, r3
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 fc54 	bl	8001d86 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
	}
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800a32c 	.word	0x0800a32c

080014ec <_ZN12GFX_HW_PAR165resetEm>:

	virtual void reset(uint32_t delay_us) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]

		high(_dcPort, _dcPin);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3338      	adds	r3, #56	; 0x38
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68d1      	ldr	r1, [r2, #12]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	8bd2      	ldrh	r2, [r2, #30]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
		high(_csPort, _csPin);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3338      	adds	r3, #56	; 0x38
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6891      	ldr	r1, [r2, #8]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	8b92      	ldrh	r2, [r2, #28]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	4798      	blx	r3
		high(_wrPort, _wrPin);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3338      	adds	r3, #56	; 0x38
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6911      	ldr	r1, [r2, #16]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	8c12      	ldrh	r2, [r2, #32]
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
		high(_rdPort, _rdPin);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3338      	adds	r3, #56	; 0x38
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6951      	ldr	r1, [r2, #20]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
		high(_rsPort, _rsPin);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3338      	adds	r3, #56	; 0x38
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6991      	ldr	r1, [r2, #24]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3

		low(_rsPort, _rsPin);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3334      	adds	r3, #52	; 0x34
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6991      	ldr	r1, [r2, #24]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
		MY_Delay1();
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3340      	adds	r3, #64	; 0x40
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
		high(_rsPort, _rsPin);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3338      	adds	r3, #56	; 0x38
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6991      	ldr	r1, [r2, #24]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
	}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_ZN12GFX_HW_PAR1611sendCommandEhPKhh>:



	virtual void sendCommand(uint8_t commandByte, const uint8_t *dataBytes =
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	461a      	mov	r2, r3
 80015a2:	460b      	mov	r3, r1
 80015a4:	72fb      	strb	r3, [r7, #11]
 80015a6:	4613      	mov	r3, r2
 80015a8:	72bb      	strb	r3, [r7, #10]
	NULL, uint8_t numDataBytes = 0) {
		MY_Delay();
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	333c      	adds	r3, #60	; 0x3c
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	4798      	blx	r3
		low(_csPort, _csPin);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3334      	adds	r3, #52	; 0x34
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	6891      	ldr	r1, [r2, #8]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	8b92      	ldrh	r2, [r2, #28]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	4798      	blx	r3
		MY_Delay();
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	333c      	adds	r3, #60	; 0x3c
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	4798      	blx	r3
		low(_dcPort, _dcPin);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3334      	adds	r3, #52	; 0x34
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	68d1      	ldr	r1, [r2, #12]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	8bd2      	ldrh	r2, [r2, #30]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	4798      	blx	r3
		MY_Delay();
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	333c      	adds	r3, #60	; 0x3c
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	4798      	blx	r3
		low(_wrPort, _wrPin);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3334      	adds	r3, #52	; 0x34
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	6911      	ldr	r1, [r2, #16]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	8c12      	ldrh	r2, [r2, #32]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	7afa      	ldrb	r2, [r7, #11]
 8001610:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	333c      	adds	r3, #60	; 0x3c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	4798      	blx	r3

		high(_wrPort, _wrPin);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3338      	adds	r3, #56	; 0x38
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6911      	ldr	r1, [r2, #16]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	8c12      	ldrh	r2, [r2, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	4798      	blx	r3
		MY_Delay();
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	333c      	adds	r3, #60	; 0x3c
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	4798      	blx	r3
		high(_dcPort, _dcPin);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3338      	adds	r3, #56	; 0x38
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	68d1      	ldr	r1, [r2, #12]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	8bd2      	ldrh	r2, [r2, #30]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3324      	adds	r3, #36	; 0x24
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	7aba      	ldrb	r2, [r7, #10]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	4798      	blx	r3

		high(_csPort, _csPin);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3338      	adds	r3, #56	; 0x38
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	6891      	ldr	r1, [r2, #8]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	8b92      	ldrh	r2, [r2, #28]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	4798      	blx	r3
	}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZN12GFX_HW_PAR1613sendCommand16EtPKhh>:

	virtual void sendCommand16(uint16_t commandWord, const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	461a      	mov	r2, r3
 800168a:	460b      	mov	r3, r1
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	4613      	mov	r3, r2
 8001690:	727b      	strb	r3, [r7, #9]
		MY_Delay();
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	333c      	adds	r3, #60	; 0x3c
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	4798      	blx	r3
		low(_csPort, _csPin);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3334      	adds	r3, #52	; 0x34
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	6891      	ldr	r1, [r2, #8]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	8b92      	ldrh	r2, [r2, #28]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	4798      	blx	r3
		MY_Delay();
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	333c      	adds	r3, #60	; 0x3c
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	4798      	blx	r3
		low(_dcPort, _dcPin);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3334      	adds	r3, #52	; 0x34
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	68d1      	ldr	r1, [r2, #12]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	8bd2      	ldrh	r2, [r2, #30]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	897a      	ldrh	r2, [r7, #10]
 80016d8:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3334      	adds	r3, #52	; 0x34
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	6911      	ldr	r1, [r2, #16]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	8c12      	ldrh	r2, [r2, #32]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	4798      	blx	r3
		MY_Delay();
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	333c      	adds	r3, #60	; 0x3c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3338      	adds	r3, #56	; 0x38
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	6911      	ldr	r1, [r2, #16]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	8c12      	ldrh	r2, [r2, #32]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	4798      	blx	r3

		MY_Delay();
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	333c      	adds	r3, #60	; 0x3c
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	4798      	blx	r3
		high(_dcPort, _dcPin);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	68d1      	ldr	r1, [r2, #12]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	8bd2      	ldrh	r2, [r2, #30]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3324      	adds	r3, #36	; 0x24
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	7a7a      	ldrb	r2, [r7, #9]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	4798      	blx	r3

		high(_csPort, _csPin);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3338      	adds	r3, #56	; 0x38
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6891      	ldr	r1, [r2, #8]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	8b92      	ldrh	r2, [r2, #28]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	4798      	blx	r3
	}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_ZN12GFX_HW_PAR1613sendCommand16Ett>:

	virtual void sendCommand16(uint16_t commandWord, uint16_t data) {
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	807b      	strh	r3, [r7, #2]
 8001766:	4613      	mov	r3, r2
 8001768:	803b      	strh	r3, [r7, #0]

		MY_Delay1();
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3340      	adds	r3, #64	; 0x40
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3334      	adds	r3, #52	; 0x34
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68d1      	ldr	r1, [r2, #12]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	8bd2      	ldrh	r2, [r2, #30]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	4798      	blx	r3
		MY_Delay1();
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3340      	adds	r3, #64	; 0x40
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
		low(_csPort, _csPin);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3334      	adds	r3, #52	; 0x34
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6891      	ldr	r1, [r2, #8]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	8b92      	ldrh	r2, [r2, #28]
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
		MY_Delay1();
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3340      	adds	r3, #64	; 0x40
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3334      	adds	r3, #52	; 0x34
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6911      	ldr	r1, [r2, #16]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	8c12      	ldrh	r2, [r2, #32]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
		MY_Delay1();
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3340      	adds	r3, #64	; 0x40
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3338      	adds	r3, #56	; 0x38
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6911      	ldr	r1, [r2, #16]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	8c12      	ldrh	r2, [r2, #32]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3

		MY_Delay1();
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3340      	adds	r3, #64	; 0x40
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3338      	adds	r3, #56	; 0x38
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68d1      	ldr	r1, [r2, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	8bd2      	ldrh	r2, [r2, #30]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
		MY_Delay1();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3340      	adds	r3, #64	; 0x40
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3

		_dataPort->ODR = data;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	883a      	ldrh	r2, [r7, #0]
 8001824:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3334      	adds	r3, #52	; 0x34
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6911      	ldr	r1, [r2, #16]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	8c12      	ldrh	r2, [r2, #32]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
		MY_Delay1();
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3340      	adds	r3, #64	; 0x40
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3338      	adds	r3, #56	; 0x38
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6911      	ldr	r1, [r2, #16]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	8c12      	ldrh	r2, [r2, #32]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3

		high(_csPort, _csPin);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3338      	adds	r3, #56	; 0x38
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6891      	ldr	r1, [r2, #8]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	8b92      	ldrh	r2, [r2, #28]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
		high(_dcPort, _dcPin);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3338      	adds	r3, #56	; 0x38
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68d1      	ldr	r1, [r2, #12]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	8bd2      	ldrh	r2, [r2, #30]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3

		MY_Delay();
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	333c      	adds	r3, #60	; 0x3c
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
	}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_ZN12GFX_HW_PAR1612readcommand8Ehh>:

	virtual uint8_t readcommand8(uint8_t commandByte, uint8_t index = 0) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]
 80018a2:	4613      	mov	r3, r2
 80018a4:	70bb      	strb	r3, [r7, #2]

		uint8_t result = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
		low(_dcPort, _dcPin);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3334      	adds	r3, #52	; 0x34
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68d1      	ldr	r1, [r2, #12]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	8bd2      	ldrh	r2, [r2, #30]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
		MY_Delay();
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	333c      	adds	r3, #60	; 0x3c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
		low(_csPort, _csPin);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3334      	adds	r3, #52	; 0x34
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6891      	ldr	r1, [r2, #8]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	8b92      	ldrh	r2, [r2, #28]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
		low(_wrPort, _wrPin);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3334      	adds	r3, #52	; 0x34
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6911      	ldr	r1, [r2, #16]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	8c12      	ldrh	r2, [r2, #32]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	615a      	str	r2, [r3, #20]
		MY_Delay();
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	333c      	adds	r3, #60	; 0x3c
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3338      	adds	r3, #56	; 0x38
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6911      	ldr	r1, [r2, #16]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	8c12      	ldrh	r2, [r2, #32]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
		MY_Delay();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	333c      	adds	r3, #60	; 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3338      	adds	r3, #56	; 0x38
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68d1      	ldr	r1, [r2, #12]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	8bd2      	ldrh	r2, [r2, #30]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

		while(index > 0) {
 8001942:	78bb      	ldrb	r3, [r7, #2]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d027      	beq.n	8001998 <_ZN12GFX_HW_PAR1612readcommand8Ehh+0x102>

			MY_Delay();
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	333c      	adds	r3, #60	; 0x3c
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
			low(_rdPort, _rdPin);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3334      	adds	r3, #52	; 0x34
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6951      	ldr	r1, [r2, #20]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
			MY_Delay();
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	333c      	adds	r3, #60	; 0x3c
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3

			result = _dataPort->IDR & 0x00ff;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	73fb      	strb	r3, [r7, #15]
			index--;
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	3b01      	subs	r3, #1
 8001980:	70bb      	strb	r3, [r7, #2]

			high(_rdPort, _rdPin);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3338      	adds	r3, #56	; 0x38
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6951      	ldr	r1, [r2, #20]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
		while(index > 0) {
 8001996:	e7d4      	b.n	8001942 <_ZN12GFX_HW_PAR1612readcommand8Ehh+0xac>
		}

		high(_csPort, _csPin);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3338      	adds	r3, #56	; 0x38
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6891      	ldr	r1, [r2, #8]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	8b92      	ldrh	r2, [r2, #28]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
		MY_Delay();
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	333c      	adds	r3, #60	; 0x3c
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
		_dataPort->MODER = 0x5555;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f245 5255 	movw	r2, #21845	; 0x5555
 80019c0:	601a      	str	r2, [r3, #0]

		return result;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
	}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN12GFX_HW_PAR1613readcommand16Eh>:

	virtual uint16_t readcommand16(uint8_t commandByte) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]

		uint16_t result = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	81fb      	strh	r3, [r7, #14]
		low(_dcPort, _dcPin);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3334      	adds	r3, #52	; 0x34
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68d1      	ldr	r1, [r2, #12]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	8bd2      	ldrh	r2, [r2, #30]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
		MY_Delay();
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	333c      	adds	r3, #60	; 0x3c
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
		low(_csPort, _csPin);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3334      	adds	r3, #52	; 0x34
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6891      	ldr	r1, [r2, #8]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	8b92      	ldrh	r2, [r2, #28]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
		low(_wrPort, _wrPin);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3334      	adds	r3, #52	; 0x34
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6911      	ldr	r1, [r2, #16]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	8c12      	ldrh	r2, [r2, #32]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	333c      	adds	r3, #60	; 0x3c
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3338      	adds	r3, #56	; 0x38
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6911      	ldr	r1, [r2, #16]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	8c12      	ldrh	r2, [r2, #32]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
		MY_Delay();
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	333c      	adds	r3, #60	; 0x3c
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3338      	adds	r3, #56	; 0x38
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68d1      	ldr	r1, [r2, #12]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	8bd2      	ldrh	r2, [r2, #30]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
		MY_Delay();
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	333c      	adds	r3, #60	; 0x3c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

		MY_Delay();
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	333c      	adds	r3, #60	; 0x3c
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
		low(_rdPort, _rdPin);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3334      	adds	r3, #52	; 0x34
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6951      	ldr	r1, [r2, #20]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
		MY_Delay();
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	333c      	adds	r3, #60	; 0x3c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3

		result = _dataPort->IDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	81fb      	strh	r3, [r7, #14]

		high(_rdPort, _rdPin);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3338      	adds	r3, #56	; 0x38
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6951      	ldr	r1, [r2, #20]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
		high(_csPort, _csPin);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3338      	adds	r3, #56	; 0x38
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6891      	ldr	r1, [r2, #8]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	8b92      	ldrh	r2, [r2, #28]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
		MY_Delay();
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	333c      	adds	r3, #60	; 0x3c
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
		_dataPort->MODER = 0x55555555;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001af0:	601a      	str	r2, [r3, #0]

		return result;
 8001af2:	89fb      	ldrh	r3, [r7, #14]
	}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_ZN12GFX_HW_PAR1612beginCommandEv>:

	virtual void beginCommand() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
		MY_Delay();
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	333c      	adds	r3, #60	; 0x3c
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3334      	adds	r3, #52	; 0x34
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68d1      	ldr	r1, [r2, #12]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	8bd2      	ldrh	r2, [r2, #30]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
		MY_Delay();
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	333c      	adds	r3, #60	; 0x3c
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
		low(_csPort, _csPin);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3334      	adds	r3, #52	; 0x34
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6891      	ldr	r1, [r2, #8]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	8b92      	ldrh	r2, [r2, #28]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
		MY_Delay();
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	333c      	adds	r3, #60	; 0x3c
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
	}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZN12GFX_HW_PAR1612writeCommandEh>:

	virtual void writeCommand(uint8_t commandByte) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
		low(_dcPort, _dcPin);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3334      	adds	r3, #52	; 0x34
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68d1      	ldr	r1, [r2, #12]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	8bd2      	ldrh	r2, [r2, #30]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
		MY_Delay();
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	333c      	adds	r3, #60	; 0x3c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
		write(commandByte);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3328      	adds	r3, #40	; 0x28
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3338      	adds	r3, #56	; 0x38
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68d1      	ldr	r1, [r2, #12]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	8bd2      	ldrh	r2, [r2, #30]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
		MY_Delay();
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	333c      	adds	r3, #60	; 0x3c
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
	}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN12GFX_HW_PAR1614writeCommand16Et>:

	virtual void writeCommand16(uint16_t commandWord) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
		low(_wrPort, _wrPin);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3334      	adds	r3, #52	; 0x34
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6911      	ldr	r1, [r2, #16]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	8c12      	ldrh	r2, [r2, #32]
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
		_dataPort->ODR = commandWord;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	333c      	adds	r3, #60	; 0x3c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6911      	ldr	r1, [r2, #16]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	8c12      	ldrh	r2, [r2, #32]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3

		MY_Delay();
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	333c      	adds	r3, #60	; 0x3c
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3338      	adds	r3, #56	; 0x38
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68d1      	ldr	r1, [r2, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	8bd2      	ldrh	r2, [r2, #30]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
		MY_Delay();
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	333c      	adds	r3, #60	; 0x3c
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
	}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN12GFX_HW_PAR169writeDataEPKhh>:

	virtual void writeData(const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]

		while(numDataBytes > 0) {
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d02a      	beq.n	8001ca2 <_ZN12GFX_HW_PAR169writeDataEPKhh+0x6a>
			MY_Delay();
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	333c      	adds	r3, #60	; 0x3c
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	4798      	blx	r3

			low(_wrPort, _wrPin);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3334      	adds	r3, #52	; 0x34
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	6911      	ldr	r1, [r2, #16]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	8c12      	ldrh	r2, [r2, #32]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	4798      	blx	r3

			_dataPort->ODR = *dataBytes++ & 0x00ff;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	615a      	str	r2, [r3, #20]
			numDataBytes--;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]

			MY_Delay();
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	333c      	adds	r3, #60	; 0x3c
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	4798      	blx	r3
			high(_wrPort, _wrPin);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3338      	adds	r3, #56	; 0x38
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	6911      	ldr	r1, [r2, #16]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	8c12      	ldrh	r2, [r2, #32]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	4798      	blx	r3
		while(numDataBytes > 0) {
 8001ca0:	e7d1      	b.n	8001c46 <_ZN12GFX_HW_PAR169writeDataEPKhh+0xe>
		}
	}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN12GFX_HW_PAR165writeEh>:

	virtual void write(uint8_t data) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
		writeData(&data, 1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3324      	adds	r3, #36	; 0x24
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1cf9      	adds	r1, r7, #3
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	4798      	blx	r3
	}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZN12GFX_HW_PAR167write16Et>:

	virtual void write16(uint16_t data) {
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	807b      	strh	r3, [r7, #2]
		_dataPort->ODR = data;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3334      	adds	r3, #52	; 0x34
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6911      	ldr	r1, [r2, #16]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	8c12      	ldrh	r2, [r2, #32]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
		__NOP();
 8001cf6:	bf00      	nop
		__NOP();
 8001cf8:	bf00      	nop
		__NOP();
 8001cfa:	bf00      	nop
		__NOP();
 8001cfc:	bf00      	nop
		__NOP();
 8001cfe:	bf00      	nop
		__NOP();
 8001d00:	bf00      	nop
		high(_wrPort, _wrPin);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3338      	adds	r3, #56	; 0x38
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6911      	ldr	r1, [r2, #16]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	8c12      	ldrh	r2, [r2, #32]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
		__NOP();
 8001d16:	bf00      	nop
		__NOP();
 8001d18:	bf00      	nop
		__NOP();
 8001d1a:	bf00      	nop
		__NOP();
 8001d1c:	bf00      	nop
		__NOP();
 8001d1e:	bf00      	nop
		__NOP();
 8001d20:	bf00      	nop
		__NOP();
 8001d22:	bf00      	nop
		__NOP();
 8001d24:	bf00      	nop
	}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN12GFX_HW_PAR163endEv>:

	virtual void end() {
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
		high(_csPort, _csPin);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3338      	adds	r3, #56	; 0x38
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6891      	ldr	r1, [r2, #8]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	8b92      	ldrh	r2, [r2, #28]
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3338      	adds	r3, #56	; 0x38
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68d1      	ldr	r1, [r2, #12]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	8bd2      	ldrh	r2, [r2, #30]
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
	}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZN12GFX_HW_PAR163lowEP12GPIO_TypeDeft>:

	virtual inline void low(GPIO_TypeDef *port, uint16_t pin) {
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80fb      	strh	r3, [r7, #6]
		port->BRR = (uint32_t)pin;
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>:

	virtual inline void high(GPIO_TypeDef *port, uint16_t pin) {
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	4613      	mov	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]
		port->BSRR = (uint32_t)pin;
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	619a      	str	r2, [r3, #24]
	}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_ZN12GFX_HW_PAR168MY_DelayEv>:

	virtual void MY_Delay() {
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
		__NOP();
 8001dae:	bf00      	nop
	}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_ZN12GFX_HW_PAR169MY_Delay1Ev>:

	virtual void MY_Delay1() {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
		__NOP();
 8001dc4:	bf00      	nop
	}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_ZN3GFXC1ER6GFX_HW>:
#endif

class GFX {
public:

	GFX(GFX_HW &hw) : _hw(hw) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <_ZN3GFXC1ER6GFX_HW+0x24>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	605a      	str	r2, [r3, #4]
	}
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	0800a308 	.word	0x0800a308

08001dfc <_ZN11GFX_ILI9325C1ER6GFX_HW>:
// clang-format on

class GFX_ILI9325: public GFX {
public:

	GFX_ILI9325(GFX_HW &hw) :
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
			GFX(hw) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ffe2 	bl	8001dd4 <_ZN3GFXC1ER6GFX_HW>
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_ZN11GFX_ILI9325C1ER6GFX_HW+0x2c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	731a      	strb	r2, [r3, #12]
	}
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	0800a2e4 	.word	0x0800a2e4

08001e2c <_ZN11GFX_ILI93254initEv>:

	virtual void init() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

		uint16_t a, d, i;
		i = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	81fb      	strh	r3, [r7, #14]

		_hw.reset(300);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4798      	blx	r3
		HAL_Delay(30);
 8001e4c:	201e      	movs	r0, #30
 8001e4e:	f001 fbb7 	bl	80035c0 <HAL_Delay>

		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	2b65      	cmp	r3, #101	; 0x65
 8001e56:	d826      	bhi.n	8001ea6 <_ZN11GFX_ILI93254initEv+0x7a>
			a = ILI932x_regValues[i++];
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	81fa      	strh	r2, [r7, #14]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <_ZN11GFX_ILI93254initEv+0x90>)
 8001e62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e66:	81bb      	strh	r3, [r7, #12]
			d = ILI932x_regValues[i++];
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	81fa      	strh	r2, [r7, #14]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <_ZN11GFX_ILI93254initEv+0x90>)
 8001e72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e76:	817b      	strh	r3, [r7, #10]
			if (a == TFTLCD_DELAY)
 8001e78:	89bb      	ldrh	r3, [r7, #12]
 8001e7a:	2bff      	cmp	r3, #255	; 0xff
 8001e7c:	d105      	bne.n	8001e8a <_ZN11GFX_ILI93254initEv+0x5e>
				HAL_Delay(d * 4);
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fb9c 	bl	80035c0 <HAL_Delay>
 8001e88:	e009      	b.n	8001e9e <_ZN11GFX_ILI93254initEv+0x72>
			else
				_hw.sendCommand16(a, d);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6858      	ldr	r0, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	330c      	adds	r3, #12
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	897a      	ldrh	r2, [r7, #10]
 8001e9a:	89b9      	ldrh	r1, [r7, #12]
 8001e9c:	4798      	blx	r3
			HAL_Delay(10);
 8001e9e:	200a      	movs	r0, #10
 8001ea0:	f001 fb8e 	bl	80035c0 <HAL_Delay>
		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8001ea4:	e7d5      	b.n	8001e52 <_ZN11GFX_ILI93254initEv+0x26>
		}

		//uint16_t r = _hw.readcommand16(0);

		_width = ILI9325_TFTWIDTH;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eac:	811a      	strh	r2, [r3, #8]
		_height = ILI9325_TFTHEIGHT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	22f0      	movs	r2, #240	; 0xf0
 8001eb2:	815a      	strh	r2, [r3, #10]
	}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	0800a210 	.word	0x0800a210

08001ec0 <_ZN11GFX_ILI93253clsEv>:

	virtual void cls() {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

	}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN11GFX_ILI932511setRotationEh>:

	virtual void setRotation(uint8_t m) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
		_rotation = m % 4; // can't be higher than 3
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	731a      	strb	r2, [r3, #12]

		uint16_t cmd = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	81fb      	strh	r3, [r7, #14]

		switch (_rotation) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7b1b      	ldrb	r3, [r3, #12]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d837      	bhi.n	8001f68 <_ZN11GFX_ILI932511setRotationEh+0x94>
 8001ef8:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <_ZN11GFX_ILI932511setRotationEh+0x2c>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f27 	.word	0x08001f27
 8001f08:	08001f3d 	.word	0x08001f3d
 8001f0c:	08001f53 	.word	0x08001f53
		case 0:
			cmd = 0x1030;
 8001f10:	f241 0330 	movw	r3, #4144	; 0x1030
 8001f14:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f1c:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	22f0      	movs	r2, #240	; 0xf0
 8001f22:	815a      	strh	r2, [r3, #10]
			break;
 8001f24:	e020      	b.n	8001f68 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 1:
			cmd = 0x1028;
 8001f26:	f241 0328 	movw	r3, #4136	; 0x1028
 8001f2a:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	22f0      	movs	r2, #240	; 0xf0
 8001f30:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f38:	815a      	strh	r2, [r3, #10]
			break;
 8001f3a:	e015      	b.n	8001f68 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 2:
			cmd = 0x1000;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f48:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	22f0      	movs	r2, #240	; 0xf0
 8001f4e:	815a      	strh	r2, [r3, #10]
			break;
 8001f50:	e00a      	b.n	8001f68 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 3:
			cmd = 0x1018;
 8001f52:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f56:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	22f0      	movs	r2, #240	; 0xf0
 8001f5c:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f64:	815a      	strh	r2, [r3, #10]
			break;
 8001f66:	bf00      	nop
		}

		_hw.sendCommand16(ILI932X_ENTRY_MOD, cmd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6858      	ldr	r0, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	330c      	adds	r3, #12
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	89fa      	ldrh	r2, [r7, #14]
 8001f78:	2103      	movs	r1, #3
 8001f7a:	4798      	blx	r3
		HAL_Delay(10);
 8001f7c:	200a      	movs	r0, #10
 8001f7e:	f001 fb1f 	bl	80035c0 <HAL_Delay>
	}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop

08001f8c <_ZN11GFX_ILI932516setAddressWindowEtttt>:

	virtual void setAddressWindow(uint16_t left, uint16_t top, uint16_t width,
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	817b      	strh	r3, [r7, #10]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	813b      	strh	r3, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
			uint16_t height) {

		uint16_t t, l, w, h;

		switch (_rotation) {
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	7b1b      	ldrb	r3, [r3, #12]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d84c      	bhi.n	8002048 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbc>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <_ZN11GFX_ILI932516setAddressWindowEtttt+0x28>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fd7 	.word	0x08001fd7
 8001fbc:	08002001 	.word	0x08002001
 8001fc0:	0800202b 	.word	0x0800202b
		case 0: // (0,0) is top left
			t = top;
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	82fb      	strh	r3, [r7, #22]
			l = left;
 8001fc8:	897b      	ldrh	r3, [r7, #10]
 8001fca:	82bb      	strh	r3, [r7, #20]
			w = width;
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	827b      	strh	r3, [r7, #18]
			h = height;
 8001fd0:	8c3b      	ldrh	r3, [r7, #32]
 8001fd2:	823b      	strh	r3, [r7, #16]
			break;
 8001fd4:	e039      	b.n	800204a <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 1: // (0,0) is top right - portrait
			t = _height - (left + width);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	895a      	ldrh	r2, [r3, #10]
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	440b      	add	r3, r1
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	82fb      	strh	r3, [r7, #22]
			l = _width - (top + height);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	891a      	ldrh	r2, [r3, #8]
 8001fea:	8939      	ldrh	r1, [r7, #8]
 8001fec:	8c3b      	ldrh	r3, [r7, #32]
 8001fee:	440b      	add	r3, r1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	82bb      	strh	r3, [r7, #20]
			w = height;
 8001ff6:	8c3b      	ldrh	r3, [r7, #32]
 8001ff8:	827b      	strh	r3, [r7, #18]
			h = width;
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	823b      	strh	r3, [r7, #16]
			break;
 8001ffe:	e024      	b.n	800204a <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 2:
			t = _height - (top + height);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	895a      	ldrh	r2, [r3, #10]
 8002004:	8939      	ldrh	r1, [r7, #8]
 8002006:	8c3b      	ldrh	r3, [r7, #32]
 8002008:	440b      	add	r3, r1
 800200a:	b29b      	uxth	r3, r3
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	82fb      	strh	r3, [r7, #22]
			l = _width - (left + width);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	891a      	ldrh	r2, [r3, #8]
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	440b      	add	r3, r1
 800201a:	b29b      	uxth	r3, r3
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	82bb      	strh	r3, [r7, #20]
			w = width;
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	827b      	strh	r3, [r7, #18]
			h = height;
 8002024:	8c3b      	ldrh	r3, [r7, #32]
 8002026:	823b      	strh	r3, [r7, #16]
			break;
 8002028:	e00f      	b.n	800204a <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 3:
			t = _height - (left + width);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	895a      	ldrh	r2, [r3, #10]
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	440b      	add	r3, r1
 8002034:	b29b      	uxth	r3, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	82fb      	strh	r3, [r7, #22]
			l = top;
 800203a:	893b      	ldrh	r3, [r7, #8]
 800203c:	82bb      	strh	r3, [r7, #20]
			w = height;
 800203e:	8c3b      	ldrh	r3, [r7, #32]
 8002040:	827b      	strh	r3, [r7, #18]
			h = width;
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	823b      	strh	r3, [r7, #16]
			break;
 8002046:	e000      	b.n	800204a <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		default:
			break;
 8002048:	bf00      	nop

		}

		_hw.sendCommand16(ILI932X_HOR_START_AD, l);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6858      	ldr	r0, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	330c      	adds	r3, #12
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	8aba      	ldrh	r2, [r7, #20]
 800205a:	2150      	movs	r1, #80	; 0x50
 800205c:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_HOR_END_AD, l + w - 1);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6858      	ldr	r0, [r3, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	330c      	adds	r3, #12
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	8ab9      	ldrh	r1, [r7, #20]
 800206e:	8a7a      	ldrh	r2, [r7, #18]
 8002070:	440a      	add	r2, r1
 8002072:	b292      	uxth	r2, r2
 8002074:	3a01      	subs	r2, #1
 8002076:	b292      	uxth	r2, r2
 8002078:	2151      	movs	r1, #81	; 0x51
 800207a:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_VER_START_AD, t);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6858      	ldr	r0, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	8afa      	ldrh	r2, [r7, #22]
 800208c:	2152      	movs	r1, #82	; 0x52
 800208e:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_VER_END_AD, _height - left -1);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6858      	ldr	r0, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	8951      	ldrh	r1, [r2, #10]
 80020a2:	897a      	ldrh	r2, [r7, #10]
 80020a4:	1a8a      	subs	r2, r1, r2
 80020a6:	b292      	uxth	r2, r2
 80020a8:	3a01      	subs	r2, #1
 80020aa:	b292      	uxth	r2, r2
 80020ac:	2153      	movs	r1, #83	; 0x53
 80020ae:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_GRAM_HOR_AD, l);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6858      	ldr	r0, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	8aba      	ldrh	r2, [r7, #20]
 80020c0:	2120      	movs	r1, #32
 80020c2:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_GRAM_VER_AD, _height - left);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6858      	ldr	r0, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	330c      	adds	r3, #12
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	8951      	ldrh	r1, [r2, #10]
 80020d6:	897a      	ldrh	r2, [r7, #10]
 80020d8:	1a8a      	subs	r2, r1, r2
 80020da:	b292      	uxth	r2, r2
 80020dc:	2121      	movs	r1, #33	; 0x21
 80020de:	4798      	blx	r3

		_hw.beginCommand();
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3318      	adds	r3, #24
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4610      	mov	r0, r2
 80020f0:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3320      	adds	r3, #32
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2122      	movs	r1, #34	; 0x22
 8002102:	4610      	mov	r0, r2
 8002104:	4798      	blx	r3
	}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop

08002110 <_ZN11GFX_ILI93259drawPixelEttt>:

	virtual void drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b087      	sub	sp, #28
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	460b      	mov	r3, r1
 8002124:	813b      	strh	r3, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
		setAddressWindow(x, y, 1, 1);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	330c      	adds	r3, #12
 8002130:	681c      	ldr	r4, [r3, #0]
 8002132:	893a      	ldrh	r2, [r7, #8]
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	2301      	movs	r3, #1
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	47a0      	blx	r4
		_hw.beginCommand();
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3318      	adds	r3, #24
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4610      	mov	r0, r2
 8002150:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3320      	adds	r3, #32
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2122      	movs	r1, #34	; 0x22
 8002162:	4610      	mov	r0, r2
 8002164:	4798      	blx	r3
		pushPixel(color);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3314      	adds	r3, #20
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	4611      	mov	r1, r2
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	4798      	blx	r3
		_hw.end();
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3330      	adds	r3, #48	; 0x30
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4610      	mov	r0, r2
 8002186:	4798      	blx	r3
	}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <_ZN11GFX_ILI93259pushPixelEt>:

	virtual inline void pushPixel(uint16_t color) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
		_hw.write16(color);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	332c      	adds	r3, #44	; 0x2c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	8879      	ldrh	r1, [r7, #2]
 80021ac:	4610      	mov	r0, r2
 80021ae:	4798      	blx	r3
	}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN11GFX_ILI93253endEv>:

	virtual void end() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
		_hw.end();
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3330      	adds	r3, #48	; 0x30
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4610      	mov	r0, r2
 80021d0:	4798      	blx	r3
		_hw.readcommand16(ILI932X_GRAM_HOR_AD);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3314      	adds	r3, #20
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2120      	movs	r1, #32
 80021e2:	4610      	mov	r0, r2
 80021e4:	4798      	blx	r3
	}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <mysetup>:
	void startDMA();

	void pushpixel(uint16_t c);
}

void mysetup() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af02      	add	r7, sp, #8
	tft.init();
 80021f6:	4814      	ldr	r0, [pc, #80]	; (8002248 <mysetup+0x58>)
 80021f8:	f7ff fe18 	bl	8001e2c <_ZN11GFX_ILI93254initEv>
	tft.setRotation(3);
 80021fc:	2103      	movs	r1, #3
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <mysetup+0x58>)
 8002200:	f7ff fe68 	bl	8001ed4 <_ZN11GFX_ILI932511setRotationEh>
	HAL_Delay(10);
 8002204:	200a      	movs	r0, #10
 8002206:	f001 f9db 	bl	80035c0 <HAL_Delay>
	tft.setAddressWindow(0,0,320,240);
 800220a:	23f0      	movs	r3, #240	; 0xf0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	480c      	ldr	r0, [pc, #48]	; (8002248 <mysetup+0x58>)
 8002218:	f7ff feb8 	bl	8001f8c <_ZN11GFX_ILI932516setAddressWindowEtttt>
	HAL_Delay(10);
 800221c:	200a      	movs	r0, #10
 800221e:	f001 f9cf 	bl	80035c0 <HAL_Delay>
	for(int i=0; i<(320*240); i++) {
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800222c:	da08      	bge.n	8002240 <mysetup+0x50>

		tft.pushPixel(0xffff);
 800222e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <mysetup+0x58>)
 8002234:	f7ff ffac 	bl	8002190 <_ZN11GFX_ILI93259pushPixelEt>
	for(int i=0; i<(320*240); i++) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	e7f2      	b.n	8002226 <mysetup+0x36>
	}
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20018ca4 	.word	0x20018ca4

0800224c <setLeftWindow>:
#define MAP(R,G,B) (((R & 0xf8) << 8) | ((G & 0xfc) << 3) | ((B & 0xF8) >> 3))
void setLeftWindow() {
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b090      	sub	sp, #64	; 0x40
 8002250:	af02      	add	r7, sp, #8
	uint16_t rgbMap[17] = { MAP(0, 0, 0), MAP(0, 0, 0), MAP(0, 0, 0), MAP(33, 200,
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <setLeftWindow+0xb4>)
 8002254:	1d3c      	adds	r4, r7, #4
 8002256:	461d      	mov	r5, r3
 8002258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	8023      	strh	r3, [r4, #0]
			66), MAP(94, 220, 120), MAP(84, 85, 237), MAP(125, 118, 252), MAP(212,
			82, 77), MAP(66, 235, 245), MAP(252, 85, 84), MAP(255, 121, 120), MAP(
			212, 193, 84), MAP(230, 206, 128), MAP(33, 176, 59), MAP(201, 91, 186),
			MAP(204, 204, 204), MAP(255, 255, 255) };

	tft.setAddressWindow(10,30,10,160);
 8002264:	23a0      	movs	r3, #160	; 0xa0
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	230a      	movs	r3, #10
 800226a:	221e      	movs	r2, #30
 800226c:	210a      	movs	r1, #10
 800226e:	4825      	ldr	r0, [pc, #148]	; (8002304 <setLeftWindow+0xb8>)
 8002270:	f7ff fe8c 	bl	8001f8c <_ZN11GFX_ILI932516setAddressWindowEtttt>


	// write the colors as blocks down the left
	for(int i=0; i<15; i++) {
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
 8002278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227a:	2b0e      	cmp	r3, #14
 800227c:	dc3a      	bgt.n	80022f4 <setLeftWindow+0xa8>
		uint16_t color = rgbMap[i+1];
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	3338      	adds	r3, #56	; 0x38
 8002286:	443b      	add	r3, r7
 8002288:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800228c:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int y=0; y<8;y++) {
 800228e:	2300      	movs	r3, #0
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	2b07      	cmp	r3, #7
 8002296:	dc1b      	bgt.n	80022d0 <setLeftWindow+0x84>
			// fill the gaps
			tft.pushPixel(0xffff);
 8002298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800229c:	4819      	ldr	r0, [pc, #100]	; (8002304 <setLeftWindow+0xb8>)
 800229e:	f7ff ff77 	bl	8002190 <_ZN11GFX_ILI93259pushPixelEt>
			tft.pushPixel(0xffff);
 80022a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022a6:	4817      	ldr	r0, [pc, #92]	; (8002304 <setLeftWindow+0xb8>)
 80022a8:	f7ff ff72 	bl	8002190 <_ZN11GFX_ILI93259pushPixelEt>
			for(int x=0; x<8; x++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	dc08      	bgt.n	80022c8 <setLeftWindow+0x7c>
				tft.pushPixel(color);
 80022b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022b8:	4619      	mov	r1, r3
 80022ba:	4812      	ldr	r0, [pc, #72]	; (8002304 <setLeftWindow+0xb8>)
 80022bc:	f7ff ff68 	bl	8002190 <_ZN11GFX_ILI93259pushPixelEt>
			for(int x=0; x<8; x++) {
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	3301      	adds	r3, #1
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c6:	e7f3      	b.n	80022b0 <setLeftWindow+0x64>
		for(int y=0; y<8;y++) {
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	3301      	adds	r3, #1
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
 80022ce:	e7e0      	b.n	8002292 <setLeftWindow+0x46>
			}

		}

		for(int z = 0; z<20; z++) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	2b13      	cmp	r3, #19
 80022d8:	dc08      	bgt.n	80022ec <setLeftWindow+0xa0>
			tft.pushPixel(0xffff);
 80022da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022de:	4809      	ldr	r0, [pc, #36]	; (8002304 <setLeftWindow+0xb8>)
 80022e0:	f7ff ff56 	bl	8002190 <_ZN11GFX_ILI93259pushPixelEt>
		for(int z = 0; z<20; z++) {
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	3301      	adds	r3, #1
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ea:	e7f3      	b.n	80022d4 <setLeftWindow+0x88>
	for(int i=0; i<15; i++) {
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	3301      	adds	r3, #1
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
 80022f2:	e7c1      	b.n	8002278 <setLeftWindow+0x2c>
		}
	}

	vsync();
 80022f4:	f000 f808 	bl	8002308 <vsync>
}
 80022f8:	bf00      	nop
 80022fa:	3738      	adds	r7, #56	; 0x38
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002300:	0800a1ec 	.word	0x0800a1ec
 8002304:	20018ca4 	.word	0x20018ca4

08002308 <vsync>:

void vsync() {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af02      	add	r7, sp, #8
	tft.end();
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <vsync+0x24>)
 8002310:	f7ff ff52 	bl	80021b8 <_ZN11GFX_ILI93253endEv>
	tft.setAddressWindow((320-256)/2,(240-192)/2, 256, 192);
 8002314:	23c0      	movs	r3, #192	; 0xc0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231c:	2218      	movs	r2, #24
 800231e:	2120      	movs	r1, #32
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <vsync+0x24>)
 8002322:	f7ff fe33 	bl	8001f8c <_ZN11GFX_ILI932516setAddressWindowEtttt>
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20018ca4 	.word	0x20018ca4

08002330 <_Z41__static_initialization_and_destruction_0ii>:

}

void pushpixel(uint16_t c) {
	tft.pushPixel(c);
}
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af08      	add	r7, sp, #32
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d122      	bne.n	8002386 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002346:	4293      	cmp	r3, r2
 8002348:	d11d      	bne.n	8002386 <_Z41__static_initialization_and_destruction_0ii+0x56>
GFX_HW_PAR16 hwspi = GFX_HW_PAR16(GPIOC,
 800234a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234e:	9307      	str	r3, [sp, #28]
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002352:	9306      	str	r3, [sp, #24]
 8002354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800235c:	9304      	str	r3, [sp, #16]
 800235e:	2304      	movs	r3, #4
 8002360:	9303      	str	r3, [sp, #12]
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002376:	4907      	ldr	r1, [pc, #28]	; (8002394 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800237a:	f7ff f859 	bl	8001430 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>
GFX_ILI9325 tft = GFX_ILI9325(hwspi);
 800237e:	4906      	ldr	r1, [pc, #24]	; (8002398 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002382:	f7ff fd3b 	bl	8001dfc <_ZN11GFX_ILI9325C1ER6GFX_HW>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800
 8002398:	20018c7c 	.word	0x20018c7c
 800239c:	20018ca4 	.word	0x20018ca4

080023a0 <_GLOBAL__sub_I_hwspi>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7ff ffc1 	bl	8002330 <_Z41__static_initialization_and_destruction_0ii>
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_SPI1_Init+0x74>)
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <MX_SPI1_Init+0x78>)
 80023b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_SPI1_Init+0x74>)
 80023bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_SPI1_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <MX_SPI1_Init+0x74>)
 80023ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MX_SPI1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <MX_SPI1_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_SPI1_Init+0x74>)
 80023de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_SPI1_Init+0x74>)
 80023e6:	2208      	movs	r2, #8
 80023e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_SPI1_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_SPI1_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_SPI1_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_SPI1_Init+0x74>)
 80023fe:	2207      	movs	r2, #7
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_SPI1_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_SPI1_Init+0x74>)
 800240a:	2208      	movs	r2, #8
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_SPI1_Init+0x74>)
 8002410:	f005 f8e4 	bl	80075dc <HAL_SPI_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800241a:	f7fe fff3 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20018cb4 	.word	0x20018cb4
 8002428:	40013000 	.word	0x40013000

0800242c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_SPI_MspInit+0x128>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d17e      	bne.n	800254c <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	4a41      	ldr	r2, [pc, #260]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 8002454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002458:	6613      	str	r3, [r2, #96]	; 0x60
 800245a:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a35      	ldr	r2, [pc, #212]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_SPI_MspInit+0x12c>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a6:	2305      	movs	r3, #5
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b4:	f003 fede 	bl	8006274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024b8:	2308      	movs	r3, #8
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024c8:	2305      	movs	r3, #5
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4822      	ldr	r0, [pc, #136]	; (800255c <HAL_SPI_MspInit+0x130>)
 80024d4:	f003 fece 	bl	8006274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024d8:	2310      	movs	r3, #16
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e8:	2305      	movs	r3, #5
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <HAL_SPI_MspInit+0x130>)
 80024f4:	f003 febe 	bl	8006274 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_SPI_MspInit+0x134>)
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_SPI_MspInit+0x138>)
 80024fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002500:	220b      	movs	r2, #11
 8002502:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002506:	2210      	movs	r2, #16
 8002508:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_SPI_MspInit+0x134>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_SPI_MspInit+0x134>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_SPI_MspInit+0x134>)
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002532:	f003 fb39 	bl	8005ba8 <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 800253c:	f7fe ff62 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
 8002546:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_SPI_MspInit+0x134>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40013000 	.word	0x40013000
 8002558:	40021000 	.word	0x40021000
 800255c:	48000400 	.word	0x48000400
 8002560:	20018d40 	.word	0x20018d40
 8002564:	4002001c 	.word	0x4002001c

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x44>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_MspInit+0x44>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6613      	str	r3, [r2, #96]	; 0x60
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_MspInit+0x44>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_MspInit+0x44>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_MspInit+0x44>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_MspInit+0x44>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80025b4:	f004 fd62 	bl	800707c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <NMI_Handler+0x8>

080025ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <MemManage_Handler+0x4>

080025c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f000 ffc0 	bl	8003584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Channel1_IRQHandler+0x10>)
 800260e:	f003 fc47 	bl	8005ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200001e4 	.word	0x200001e4

0800261c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA1_Channel2_IRQHandler+0x10>)
 8002622:	f003 fc3d 	bl	8005ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20018d40 	.word	0x20018d40

08002630 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002636:	f005 fd3b 	bl	80080b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20018da0 	.word	0x20018da0

08002644 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <TIM3_IRQHandler+0x10>)
 800264a:	f005 fd31 	bl	80080b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20018f38 	.word	0x20018f38

08002658 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim20_ch1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <DMA2_Channel1_IRQHandler+0x10>)
 800265e:	f003 fc1f 	bl	8005ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20019400 	.word	0x20019400

0800266c <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <DMAMUX_OVR_IRQHandler+0x10>)
 8002672:	f003 fdad 	bl	80061d0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001e4 	.word	0x200001e4

08002680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	return 1;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_kill>:

int _kill(int pid, int sig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800269a:	f007 fce5 	bl	800a068 <__errno>
 800269e:	4603      	mov	r3, r0
 80026a0:	2216      	movs	r2, #22
 80026a2:	601a      	str	r2, [r3, #0]
	return -1;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_exit>:

void _exit (int status)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffe7 	bl	8002690 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026c2:	e7fe      	b.n	80026c2 <_exit+0x12>

080026c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <SystemInit+0x20>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <SystemInit+0x20>)
 80026d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim20;
DMA_HandleTypeDef hdma_tim20_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0a0      	sub	sp, #128	; 0x80
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002718:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800272c:	463b      	mov	r3, r7
 800272e:	2234      	movs	r2, #52	; 0x34
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f007 fcc2 	bl	800a0bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002738:	4b51      	ldr	r3, [pc, #324]	; (8002880 <MX_TIM1_Init+0x198>)
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <MX_TIM1_Init+0x19c>)
 800273c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800273e:	4b50      	ldr	r3, [pc, #320]	; (8002880 <MX_TIM1_Init+0x198>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <MX_TIM1_Init+0x198>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31;
 800274a:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <MX_TIM1_Init+0x198>)
 800274c:	221f      	movs	r2, #31
 800274e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <MX_TIM1_Init+0x198>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 255;
 8002756:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <MX_TIM1_Init+0x198>)
 8002758:	22ff      	movs	r2, #255	; 0xff
 800275a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <MX_TIM1_Init+0x198>)
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002762:	4847      	ldr	r0, [pc, #284]	; (8002880 <MX_TIM1_Init+0x198>)
 8002764:	f005 f912 	bl	800798c <HAL_TIM_Base_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800276e:	f7fe fe49 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002776:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002778:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800277c:	4619      	mov	r1, r3
 800277e:	4840      	ldr	r0, [pc, #256]	; (8002880 <MX_TIM1_Init+0x198>)
 8002780:	f005 fff0 	bl	8008764 <HAL_TIM_ConfigClockSource>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800278a:	f7fe fe3b 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800278e:	483c      	ldr	r0, [pc, #240]	; (8002880 <MX_TIM1_Init+0x198>)
 8002790:	f005 fa48 	bl	8007c24 <HAL_TIM_PWM_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800279a:	f7fe fe33 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800279e:	2108      	movs	r1, #8
 80027a0:	4837      	ldr	r0, [pc, #220]	; (8002880 <MX_TIM1_Init+0x198>)
 80027a2:	f005 fb1b 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80027ac:	f7fe fe2a 	bl	8001404 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 80027b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80027b6:	2330      	movs	r3, #48	; 0x30
 80027b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80027ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027be:	4619      	mov	r1, r3
 80027c0:	482f      	ldr	r0, [pc, #188]	; (8002880 <MX_TIM1_Init+0x198>)
 80027c2:	f006 f8e5 	bl	8008990 <HAL_TIM_SlaveConfigSynchro>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80027cc:	f7fe fe1a 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027e0:	4619      	mov	r1, r3
 80027e2:	4827      	ldr	r0, [pc, #156]	; (8002880 <MX_TIM1_Init+0x198>)
 80027e4:	f007 f9fe 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80027ee:	f7fe fe09 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80027f2:	2370      	movs	r3, #112	; 0x70
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 15;
 80027f6:	230f      	movs	r3, #15
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027fe:	2300      	movs	r3, #0
 8002800:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800280e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002812:	2200      	movs	r2, #0
 8002814:	4619      	mov	r1, r3
 8002816:	481a      	ldr	r0, [pc, #104]	; (8002880 <MX_TIM1_Init+0x198>)
 8002818:	f005 fe90 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8002822:	f7fe fdef 	bl	8001404 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800284c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800285e:	463b      	mov	r3, r7
 8002860:	4619      	mov	r1, r3
 8002862:	4807      	ldr	r0, [pc, #28]	; (8002880 <MX_TIM1_Init+0x198>)
 8002864:	f007 fa54 	bl	8009d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800286e:	f7fe fdc9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002872:	4803      	ldr	r0, [pc, #12]	; (8002880 <MX_TIM1_Init+0x198>)
 8002874:	f000 fd5a 	bl	800332c <HAL_TIM_MspPostInit>

}
 8002878:	bf00      	nop
 800287a:	3780      	adds	r7, #128	; 0x80
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20018da0 	.word	0x20018da0
 8002884:	40012c00 	.word	0x40012c00

08002888 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_TIM2_Init+0x70>)
 800289a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800289e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80028c0:	2108      	movs	r1, #8
 80028c2:	480d      	ldr	r0, [pc, #52]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028c4:	f005 fa8a 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 80028ce:	f7fe fd99 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	; (80028f8 <MX_TIM2_Init+0x70>)
 80028e0:	f007 f980 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80028ea:	f7fe fd8b 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20018e6c 	.word	0x20018e6c

080028fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b094      	sub	sp, #80	; 0x50
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002902:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002940:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <MX_TIM3_Init+0x164>)
 8002942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002944:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002946:	2200      	movs	r2, #0
 8002948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294a:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <MX_TIM3_Init+0x160>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002958:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <MX_TIM3_Init+0x160>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002964:	483d      	ldr	r0, [pc, #244]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002966:	f005 f811 	bl	800798c <HAL_TIM_Base_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002970:	f7fe fd48 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002974:	4839      	ldr	r0, [pc, #228]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002976:	f005 f955 	bl	8007c24 <HAL_TIM_PWM_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002980:	f7fe fd40 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002984:	4835      	ldr	r0, [pc, #212]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002986:	f005 f9bb 	bl	8007d00 <HAL_TIM_IC_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002990:	f7fe fd38 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002994:	2108      	movs	r1, #8
 8002996:	4831      	ldr	r0, [pc, #196]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002998:	f005 fa20 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80029a2:	f7fe fd2f 	bl	8001404 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 80029a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80029ac:	2360      	movs	r3, #96	; 0x60
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029b0:	2302      	movs	r3, #2
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80029b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029bc:	4619      	mov	r1, r3
 80029be:	4827      	ldr	r0, [pc, #156]	; (8002a5c <MX_TIM3_Init+0x160>)
 80029c0:	f005 ffe6 	bl	8008990 <HAL_TIM_SlaveConfigSynchro>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80029ca:	f7fe fd1b 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029da:	4619      	mov	r1, r3
 80029dc:	481f      	ldr	r0, [pc, #124]	; (8002a5c <MX_TIM3_Init+0x160>)
 80029de:	f007 f901 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80029e8:	f7fe fd0c 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80029ec:	2370      	movs	r3, #112	; 0x70
 80029ee:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 12000;
 80029f0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80029f4:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	2200      	movs	r2, #0
 8002a04:	4619      	mov	r1, r3
 8002a06:	4815      	ldr	r0, [pc, #84]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002a08:	f005 fd98 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002a12:	f7fe fcf7 	bl	8001404 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002a16:	2302      	movs	r3, #2
 8002a18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002a2e:	f005 fce8 	bl	8008402 <HAL_TIM_IC_ConfigChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x140>
  {
    Error_Handler();
 8002a38:	f7fe fce4 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim3, TIM_TIM3_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_TIM3_Init+0x160>)
 8002a44:	f007 fa16 	bl	8009e74 <HAL_TIMEx_TISelection>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM3_Init+0x156>
  {
    Error_Handler();
 8002a4e:	f7fe fcd9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	3750      	adds	r7, #80	; 0x50
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20018f38 	.word	0x20018f38
 8002a60:	40000400 	.word	0x40000400

08002a64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b098      	sub	sp, #96	; 0x60
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <MX_TIM4_Init+0x188>)
 8002ab6:	4a4e      	ldr	r2, [pc, #312]	; (8002bf0 <MX_TIM4_Init+0x18c>)
 8002ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002aba:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <MX_TIM4_Init+0x188>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <MX_TIM4_Init+0x188>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3800;
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <MX_TIM4_Init+0x188>)
 8002ac8:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002acc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <MX_TIM4_Init+0x188>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad4:	4b45      	ldr	r3, [pc, #276]	; (8002bec <MX_TIM4_Init+0x188>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ada:	4844      	ldr	r0, [pc, #272]	; (8002bec <MX_TIM4_Init+0x188>)
 8002adc:	f004 ff56 	bl	800798c <HAL_TIM_Base_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8002ae6:	f7fe fc8d 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002af4:	4619      	mov	r1, r3
 8002af6:	483d      	ldr	r0, [pc, #244]	; (8002bec <MX_TIM4_Init+0x188>)
 8002af8:	f005 fe34 	bl	8008764 <HAL_TIM_ConfigClockSource>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002b02:	f7fe fc7f 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b06:	4839      	ldr	r0, [pc, #228]	; (8002bec <MX_TIM4_Init+0x188>)
 8002b08:	f005 f88c 	bl	8007c24 <HAL_TIM_PWM_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002b12:	f7fe fc77 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b16:	4835      	ldr	r0, [pc, #212]	; (8002bec <MX_TIM4_Init+0x188>)
 8002b18:	f005 f8f2 	bl	8007d00 <HAL_TIM_IC_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8002b22:	f7fe fc6f 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002b26:	2108      	movs	r1, #8
 8002b28:	4830      	ldr	r0, [pc, #192]	; (8002bec <MX_TIM4_Init+0x188>)
 8002b2a:	f005 f957 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002b34:	f7fe fc66 	bl	8001404 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002b3e:	2360      	movs	r3, #96	; 0x60
 8002b40:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b42:	2300      	movs	r3, #0
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002b4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4826      	ldr	r0, [pc, #152]	; (8002bec <MX_TIM4_Init+0x188>)
 8002b52:	f005 ff1d 	bl	8008990 <HAL_TIM_SlaveConfigSynchro>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8002b5c:	f7fe fc52 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	481f      	ldr	r0, [pc, #124]	; (8002bec <MX_TIM4_Init+0x188>)
 8002b70:	f007 f838 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002b7a:	f7fe fc43 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002b7e:	2370      	movs	r3, #112	; 0x70
 8002b80:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 1148;
 8002b82:	f240 437c 	movw	r3, #1148	; 0x47c
 8002b86:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	2200      	movs	r2, #0
 8002b96:	4619      	mov	r1, r3
 8002b98:	4814      	ldr	r0, [pc, #80]	; (8002bec <MX_TIM4_Init+0x188>)
 8002b9a:	f005 fccf 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM4_Init+0x144>
  {
    Error_Handler();
 8002ba4:	f7fe fc2e 	bl	8001404 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bac:	2301      	movs	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	480b      	ldr	r0, [pc, #44]	; (8002bec <MX_TIM4_Init+0x188>)
 8002bc0:	f005 fc1f 	bl	8008402 <HAL_TIM_IC_ConfigChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_TIM4_Init+0x16a>
  {
    Error_Handler();
 8002bca:	f7fe fc1b 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim4, TIM_TIM4_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8002bce:	2204      	movs	r2, #4
 8002bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_TIM4_Init+0x188>)
 8002bd6:	f007 f94d 	bl	8009e74 <HAL_TIMEx_TISelection>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM4_Init+0x180>
  {
    Error_Handler();
 8002be0:	f7fe fc10 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	3760      	adds	r7, #96	; 0x60
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20019004 	.word	0x20019004
 8002bf0:	40000800 	.word	0x40000800

08002bf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <MX_TIM5_Init+0x70>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 160;
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c18:	22a0      	movs	r2, #160	; 0xa0
 8002c1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8002c28:	2108      	movs	r1, #8
 8002c2a:	480d      	ldr	r0, [pc, #52]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c2c:	f005 f8d6 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM5_Init+0x46>
  {
    Error_Handler();
 8002c36:	f7fe fbe5 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4806      	ldr	r0, [pc, #24]	; (8002c60 <MX_TIM5_Init+0x6c>)
 8002c48:	f006 ffcc 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8002c52:	f7fe fbd7 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200190d0 	.word	0x200190d0
 8002c64:	40000c00 	.word	0x40000c00

08002c68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09c      	sub	sp, #112	; 0x70
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2234      	movs	r2, #52	; 0x34
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f007 fa0a 	bl	800a0bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002caa:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <MX_TIM8_Init+0x170>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8002cae:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cb0:	2211      	movs	r2, #17
 8002cb2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 258;
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cbc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002cc0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 47;
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cca:	222f      	movs	r2, #47	; 0x2f
 8002ccc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cd4:	483f      	ldr	r0, [pc, #252]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cd6:	f004 fe59 	bl	800798c <HAL_TIM_Base_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002ce0:	f7fe fb90 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4838      	ldr	r0, [pc, #224]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002cf2:	f005 fd37 	bl	8008764 <HAL_TIM_ConfigClockSource>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002cfc:	f7fe fb82 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002d00:	4834      	ldr	r0, [pc, #208]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002d02:	f004 ff8f 	bl	8007c24 <HAL_TIM_PWM_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002d0c:	f7fe fb7a 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002d10:	2108      	movs	r1, #8
 8002d12:	4830      	ldr	r0, [pc, #192]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002d14:	f005 f862 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8002d1e:	f7fe fb71 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002d22:	2330      	movs	r3, #48	; 0x30
 8002d24:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d32:	4619      	mov	r1, r3
 8002d34:	4827      	ldr	r0, [pc, #156]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002d36:	f006 ff55 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002d40:	f7fe fb60 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002d44:	2370      	movs	r3, #112	; 0x70
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 150;
 8002d48:	2396      	movs	r3, #150	; 0x96
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d50:	2300      	movs	r3, #0
 8002d52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	481a      	ldr	r0, [pc, #104]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002d6a:	f005 fbe7 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002d74:	f7fe fb46 	bl	8001404 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002da8:	2300      	movs	r3, #0
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002db6:	f006 ffab 	bl	8009d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8002dc0:	f7fe fb20 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <MX_TIM8_Init+0x16c>)
 8002dc6:	f000 fab1 	bl	800332c <HAL_TIM_MspPostInit>

}
 8002dca:	bf00      	nop
 8002dcc:	3770      	adds	r7, #112	; 0x70
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2001919c 	.word	0x2001919c
 8002dd8:	40013400 	.word	0x40013400

08002ddc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b094      	sub	sp, #80	; 0x50
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	615a      	str	r2, [r3, #20]
 8002df4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002df6:	463b      	mov	r3, r7
 8002df8:	2234      	movs	r2, #52	; 0x34
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f007 f95d 	bl	800a0bc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e02:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e04:	4a35      	ldr	r2, [pc, #212]	; (8002edc <MX_TIM16_Init+0x100>)
 8002e06:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170;
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e0a:	22aa      	movs	r2, #170	; 0xaa
 8002e0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 260;
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e16:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e1a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 191;
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e24:	22bf      	movs	r2, #191	; 0xbf
 8002e26:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e2e:	482a      	ldr	r0, [pc, #168]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e30:	f004 fdac 	bl	800798c <HAL_TIM_Base_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002e3a:	f7fe fae3 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002e3e:	4826      	ldr	r0, [pc, #152]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e40:	f004 fef0 	bl	8007c24 <HAL_TIM_PWM_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002e4a:	f7fe fadb 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002e4e:	2108      	movs	r1, #8
 8002e50:	4821      	ldr	r0, [pc, #132]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e52:	f004 ffc3 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002e5c:	f7fe fad2 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002e60:	2370      	movs	r3, #112	; 0x70
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 130;
 8002e64:	2382      	movs	r3, #130	; 0x82
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e80:	2200      	movs	r2, #0
 8002e82:	4619      	mov	r1, r3
 8002e84:	4814      	ldr	r0, [pc, #80]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002e86:	f005 fb59 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM16_Init+0xb8>
  {
    Error_Handler();
 8002e90:	f7fe fab8 	bl	8001404 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002ebc:	f006 ff28 	bl	8009d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8002ec6:	f7fe fa9d 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <MX_TIM16_Init+0xfc>)
 8002ecc:	f000 fa2e 	bl	800332c <HAL_TIM_MspPostInit>

}
 8002ed0:	bf00      	nop
 8002ed2:	3750      	adds	r7, #80	; 0x50
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20019268 	.word	0x20019268
 8002edc:	40014400 	.word	0x40014400

08002ee0 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b0a0      	sub	sp, #128	; 0x80
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
 8002f20:	615a      	str	r2, [r3, #20]
 8002f22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f24:	463b      	mov	r3, r7
 8002f26:	2234      	movs	r2, #52	; 0x34
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f007 f8c6 	bl	800a0bc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002f30:	4b52      	ldr	r3, [pc, #328]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f32:	4a53      	ldr	r2, [pc, #332]	; (8003080 <MX_TIM20_Init+0x1a0>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002f36:	4b51      	ldr	r3, [pc, #324]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 17;
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f44:	2211      	movs	r2, #17
 8002f46:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 255;
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002f5a:	4848      	ldr	r0, [pc, #288]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f5c:	f004 fd16 	bl	800798c <HAL_TIM_Base_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 8002f66:	f7fe fa4d 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002f70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f74:	4619      	mov	r1, r3
 8002f76:	4841      	ldr	r0, [pc, #260]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f78:	f005 fbf4 	bl	8008764 <HAL_TIM_ConfigClockSource>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM20_Init+0xa6>
  {
    Error_Handler();
 8002f82:	f7fe fa3f 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002f86:	483d      	ldr	r0, [pc, #244]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f88:	f004 fe4c 	bl	8007c24 <HAL_TIM_PWM_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM20_Init+0xb6>
  {
    Error_Handler();
 8002f92:	f7fe fa37 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim20, TIM_OPMODE_SINGLE) != HAL_OK)
 8002f96:	2108      	movs	r1, #8
 8002f98:	4838      	ldr	r0, [pc, #224]	; (800307c <MX_TIM20_Init+0x19c>)
 8002f9a:	f004 ff1f 	bl	8007ddc <HAL_TIM_OnePulse_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 8002fa4:	f7fe fa2e 	bl	8001404 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 8002fae:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
 8002fb2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8002fb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4830      	ldr	r0, [pc, #192]	; (800307c <MX_TIM20_Init+0x19c>)
 8002fbc:	f005 fce8 	bl	8008990 <HAL_TIM_SlaveConfigSynchro>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 8002fc6:	f7fe fa1d 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002fca:	2330      	movs	r3, #48	; 0x30
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002fd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4827      	ldr	r0, [pc, #156]	; (800307c <MX_TIM20_Init+0x19c>)
 8002fde:	f006 fe01 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM20_Init+0x10c>
  {
    Error_Handler();
 8002fe8:	f7fe fa0c 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002fec:	2370      	movs	r3, #112	; 0x70
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 8;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003008:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800300c:	2200      	movs	r2, #0
 800300e:	4619      	mov	r1, r3
 8003010:	481a      	ldr	r0, [pc, #104]	; (800307c <MX_TIM20_Init+0x19c>)
 8003012:	f005 fa93 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM20_Init+0x140>
  {
    Error_Handler();
 800301c:	f7fe f9f2 	bl	8001404 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003038:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003054:	2300      	movs	r3, #0
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003058:	463b      	mov	r3, r7
 800305a:	4619      	mov	r1, r3
 800305c:	4807      	ldr	r0, [pc, #28]	; (800307c <MX_TIM20_Init+0x19c>)
 800305e:	f006 fe57 	bl	8009d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM20_Init+0x18c>
  {
    Error_Handler();
 8003068:	f7fe f9cc 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800306c:	4803      	ldr	r0, [pc, #12]	; (800307c <MX_TIM20_Init+0x19c>)
 800306e:	f000 f95d 	bl	800332c <HAL_TIM_MspPostInit>

}
 8003072:	bf00      	nop
 8003074:	3780      	adds	r7, #128	; 0x80
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20019334 	.word	0x20019334
 8003080:	40015000 	.word	0x40015000

08003084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b090      	sub	sp, #64	; 0x40
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <HAL_TIM_Base_MspInit+0x21c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d132      	bne.n	800310c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030a6:	4b7f      	ldr	r3, [pc, #508]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80030a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030aa:	4a7e      	ldr	r2, [pc, #504]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80030ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b0:	6613      	str	r3, [r2, #96]	; 0x60
 80030b2:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	4b79      	ldr	r3, [pc, #484]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	4a78      	ldr	r2, [pc, #480]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80030e8:	2306      	movs	r3, #6
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f0:	4619      	mov	r1, r3
 80030f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f6:	f003 f8bd 	bl	8006274 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	201a      	movs	r0, #26
 8003100:	f002 fd1d 	bl	8005b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003104:	201a      	movs	r0, #26
 8003106:	f002 fd34 	bl	8005b72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 800310a:	e0c4      	b.n	8003296 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_TIM_Base_MspInit+0x224>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d130      	bne.n	8003178 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a62      	ldr	r2, [pc, #392]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
 8003122:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313a:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003146:	2320      	movs	r3, #32
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003156:	2302      	movs	r3, #2
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800315e:	4619      	mov	r1, r3
 8003160:	4852      	ldr	r0, [pc, #328]	; (80032ac <HAL_TIM_Base_MspInit+0x228>)
 8003162:	f003 f887 	bl	8006274 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	201d      	movs	r0, #29
 800316c:	f002 fce7 	bl	8005b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003170:	201d      	movs	r0, #29
 8003172:	f002 fcfe 	bl	8005b72 <HAL_NVIC_EnableIRQ>
}
 8003176:	e08e      	b.n	8003296 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4c      	ldr	r2, [pc, #304]	; (80032b0 <HAL_TIM_Base_MspInit+0x22c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d128      	bne.n	80031d4 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003182:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
 800318e:	4b45      	ldr	r3, [pc, #276]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	4a41      	ldr	r2, [pc, #260]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031c2:	2302      	movs	r3, #2
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ca:	4619      	mov	r1, r3
 80031cc:	4837      	ldr	r0, [pc, #220]	; (80032ac <HAL_TIM_Base_MspInit+0x228>)
 80031ce:	f003 f851 	bl	8006274 <HAL_GPIO_Init>
}
 80031d2:	e060      	b.n	8003296 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM8)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a36      	ldr	r2, [pc, #216]	; (80032b4 <HAL_TIM_Base_MspInit+0x230>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10c      	bne.n	80031f8 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031de:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	4a30      	ldr	r2, [pc, #192]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80031e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031e8:	6613      	str	r3, [r2, #96]	; 0x60
 80031ea:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
}
 80031f6:	e04e      	b.n	8003296 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM16)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_TIM_Base_MspInit+0x234>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10c      	bne.n	800321c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003202:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	6613      	str	r3, [r2, #96]	; 0x60
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
}
 800321a:	e03c      	b.n	8003296 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM20)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <HAL_TIM_Base_MspInit+0x238>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d137      	bne.n	8003296 <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322a:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 800322c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003230:	6613      	str	r3, [r2, #96]	; 0x60
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <HAL_TIM_Base_MspInit+0x220>)
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim20_ch1.Instance = DMA2_Channel1;
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003240:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <HAL_TIM_Base_MspInit+0x240>)
 8003242:	601a      	str	r2, [r3, #0]
    hdma_tim20_ch1.Init.Request = DMA_REQUEST_TIM20_CH1;
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003246:	2256      	movs	r2, #86	; 0x56
 8003248:	605a      	str	r2, [r3, #4]
    hdma_tim20_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 800324c:	2210      	movs	r2, #16
 800324e:	609a      	str	r2, [r3, #8]
    hdma_tim20_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
    hdma_tim20_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	611a      	str	r2, [r3, #16]
    hdma_tim20_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800325c:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 800325e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003262:	615a      	str	r2, [r3, #20]
    hdma_tim20_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326a:	619a      	str	r2, [r3, #24]
    hdma_tim20_ch1.Init.Mode = DMA_NORMAL;
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
    hdma_tim20_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003278:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim20_ch1) != HAL_OK)
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 800327c:	f002 fc94 	bl	8005ba8 <HAL_DMA_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_TIM_Base_MspInit+0x206>
      Error_Handler();
 8003286:	f7fe f8bd 	bl	8001404 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim20_ch1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
 8003290:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_TIM_Base_MspInit+0x23c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003296:	bf00      	nop
 8003298:	3740      	adds	r7, #64	; 0x40
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	48000400 	.word	0x48000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40013400 	.word	0x40013400
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40015000 	.word	0x40015000
 80032c0:	20019400 	.word	0x20019400
 80032c4:	40020408 	.word	0x40020408

080032c8 <HAL_TIM_OnePulse_MspInit>:

void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* tim_onepulseHandle)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  if(tim_onepulseHandle->Instance==TIM2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d10c      	bne.n	80032f4 <HAL_TIM_OnePulse_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80032f2:	e010      	b.n	8003316 <HAL_TIM_OnePulse_MspInit+0x4e>
  else if(tim_onepulseHandle->Instance==TIM5)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <HAL_TIM_OnePulse_MspInit+0x60>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10b      	bne.n	8003316 <HAL_TIM_OnePulse_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_TIM_OnePulse_MspInit+0x5c>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	40000c00 	.word	0x40000c00

0800332c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a46      	ldr	r2, [pc, #280]	; (8003464 <HAL_TIM_MspPostInit+0x138>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d11e      	bne.n	800338c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	4a45      	ldr	r2, [pc, #276]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800335a:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003378:	2306      	movs	r3, #6
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003386:	f002 ff75 	bl	8006274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800338a:	e066      	b.n	800345a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a36      	ldr	r2, [pc, #216]	; (800346c <HAL_TIM_MspPostInit+0x140>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d11c      	bne.n	80033d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033ae:	2340      	movs	r3, #64	; 0x40
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80033be:	2305      	movs	r3, #5
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	4829      	ldr	r0, [pc, #164]	; (8003470 <HAL_TIM_MspPostInit+0x144>)
 80033ca:	f002 ff53 	bl	8006274 <HAL_GPIO_Init>
}
 80033ce:	e044      	b.n	800345a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM16)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <HAL_TIM_MspPostInit+0x148>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d11e      	bne.n	8003418 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003404:	2301      	movs	r3, #1
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003412:	f002 ff2f 	bl	8006274 <HAL_GPIO_Init>
}
 8003416:	e020      	b.n	800345a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM20)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_TIM_MspPostInit+0x14c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11b      	bne.n	800345a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_TIM_MspPostInit+0x13c>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800343a:	2304      	movs	r3, #4
 800343c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003446:	2302      	movs	r3, #2
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800344a:	2303      	movs	r3, #3
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	4619      	mov	r1, r3
 8003454:	4806      	ldr	r0, [pc, #24]	; (8003470 <HAL_TIM_MspPostInit+0x144>)
 8003456:	f002 ff0d 	bl	8006274 <HAL_GPIO_Init>
}
 800345a:	bf00      	nop
 800345c:	3730      	adds	r7, #48	; 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40021000 	.word	0x40021000
 800346c:	40013400 	.word	0x40013400
 8003470:	48000400 	.word	0x48000400
 8003474:	40014400 	.word	0x40014400
 8003478:	40015000 	.word	0x40015000

0800347c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800347c:	480d      	ldr	r0, [pc, #52]	; (80034b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800347e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003480:	480d      	ldr	r0, [pc, #52]	; (80034b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003482:	490e      	ldr	r1, [pc, #56]	; (80034bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <LoopForever+0xe>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003498:	4c0b      	ldr	r4, [pc, #44]	; (80034c8 <LoopForever+0x16>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034a6:	f7ff f90d 	bl	80026c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034aa:	f006 fde3 	bl	800a074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ae:	f7fd fc99 	bl	8000de4 <main>

080034b2 <LoopForever>:

LoopForever:
    b LoopForever
 80034b2:	e7fe      	b.n	80034b2 <LoopForever>
  ldr   r0, =_estack
 80034b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034bc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80034c0:	0800a3c8 	.word	0x0800a3c8
  ldr r2, =_sbss
 80034c4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80034c8:	20019468 	.word	0x20019468

080034cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC1_2_IRQHandler>
	...

080034d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_Init+0x3c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_Init+0x3c>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e6:	2003      	movs	r0, #3
 80034e8:	f002 fb1e 	bl	8005b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ec:	200f      	movs	r0, #15
 80034ee:	f000 f80f 	bl	8003510 <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	e001      	b.n	8003502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034fe:	f7ff f833 	bl	8002568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003502:	79fb      	ldrb	r3, [r7, #7]

}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40022000 	.word	0x40022000

08003510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <HAL_InitTick+0x68>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d022      	beq.n	800356a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_InitTick+0x6c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <HAL_InitTick+0x68>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003530:	fbb1 f3f3 	udiv	r3, r1, r3
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	4618      	mov	r0, r3
 800353a:	f002 fb28 	bl	8005b8e <HAL_SYSTICK_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	d809      	bhi.n	800355e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800354a:	2200      	movs	r2, #0
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	f04f 30ff 	mov.w	r0, #4294967295
 8003552:	f002 faf4 	bl	8005b3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_InitTick+0x70>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e007      	b.n	800356e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	e004      	b.n	800356e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	e001      	b.n	800356e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	2000002c 	.word	0x2000002c
 800357c:	20000024 	.word	0x20000024
 8003580:	20000028 	.word	0x20000028

08003584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_IncTick+0x1c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_IncTick+0x20>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4413      	add	r3, r2
 8003592:	4a03      	ldr	r2, [pc, #12]	; (80035a0 <HAL_IncTick+0x1c>)
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20019460 	.word	0x20019460
 80035a4:	2000002c 	.word	0x2000002c

080035a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return uwTick;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_GetTick+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20019460 	.word	0x20019460

080035c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c8:	f7ff ffee 	bl	80035a8 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d004      	beq.n	80035e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_Delay+0x40>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035e4:	bf00      	nop
 80035e6:	f7ff ffdf 	bl	80035a8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d8f7      	bhi.n	80035e6 <HAL_Delay+0x26>
  {
  }
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	2000002c 	.word	0x2000002c

08003604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3360      	adds	r3, #96	; 0x60
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <LL_ADC_SetOffset+0x44>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	03fff000 	.word	0x03fff000

080036b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3360      	adds	r3, #96	; 0x60
 80036c2:	461a      	mov	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3360      	adds	r3, #96	; 0x60
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	431a      	orrs	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3360      	adds	r3, #96	; 0x60
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3360      	adds	r3, #96	; 0x60
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	615a      	str	r2, [r3, #20]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b087      	sub	sp, #28
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3330      	adds	r3, #48	; 0x30
 80037de:	461a      	mov	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	4413      	add	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	211f      	movs	r1, #31
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	401a      	ands	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	f003 011f 	and.w	r1, r3, #31
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003826:	b480      	push	{r7}
 8003828:	b087      	sub	sp, #28
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3314      	adds	r3, #20
 8003836:	461a      	mov	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0e5b      	lsrs	r3, r3, #25
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	0d1b      	lsrs	r3, r3, #20
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2107      	movs	r1, #7
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	401a      	ands	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	0d1b      	lsrs	r3, r3, #20
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	431a      	orrs	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10a      	bne.n	80038a6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80038a4:	e00a      	b.n	80038bc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	43db      	mvns	r3, r3
 80038b4:	401a      	ands	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	407f0000 	.word	0x407f0000

080038cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6093      	str	r3, [r2, #8]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003904:	d101      	bne.n	800390a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800392c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003954:	d101      	bne.n	800395a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039a4:	f043 0202 	orr.w	r2, r3, #2
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <LL_ADC_IsEnabled+0x18>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <LL_ADC_IsEnabled+0x1a>
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d101      	bne.n	80039f6 <LL_ADC_IsDisableOngoing+0x18>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <LL_ADC_IsDisableOngoing+0x1a>
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a18:	f043 0210 	orr.w	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d101      	bne.n	8003a44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a66:	f043 0220 	orr.w	r2, r3, #32
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d101      	bne.n	8003a92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1ea      	b.n	8003e90 <HAL_ADC_Init+0x3f0>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d133      	bne.n	8003b30 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <HAL_ADC_Init+0x1cc>)
 8003acc:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a67      	ldr	r2, [pc, #412]	; (8003c70 <HAL_ADC_Init+0x1d0>)
 8003ad2:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <HAL_ADC_Init+0x1d4>)
 8003ad8:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a66      	ldr	r2, [pc, #408]	; (8003c78 <HAL_ADC_Init+0x1d8>)
 8003ade:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_ADC_Init+0x1dc>)
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_ADC_Init+0x1e0>)
 8003aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a64      	ldr	r2, [pc, #400]	; (8003c84 <HAL_ADC_Init+0x1e4>)
 8003af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a63      	ldr	r2, [pc, #396]	; (8003c88 <HAL_ADC_Init+0x1e8>)
 8003afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a62      	ldr	r2, [pc, #392]	; (8003c8c <HAL_ADC_Init+0x1ec>)
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a5f      	ldr	r2, [pc, #380]	; (8003c90 <HAL_ADC_Init+0x1f0>)
 8003b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fedb 	bl	80038f0 <LL_ADC_IsDeepPowerDownEnabled>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fec1 	bl	80038cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fef6 	bl	8003940 <LL_ADC_IsInternalRegulatorEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff feda 	bl	8003918 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_ADC_Init+0x1f4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <HAL_ADC_Init+0x1f8>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b78:	e002      	b.n	8003b80 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f9      	bne.n	8003b7a <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fed8 	bl	8003940 <LL_ADC_IsInternalRegulatorEnabled>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	f043 0210 	orr.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff38 	bl	8003a2c <LL_ADC_REG_IsConversionOngoing>
 8003bbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 8159 	bne.w	8003e7e <HAL_ADC_Init+0x3de>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8155 	bne.w	8003e7e <HAL_ADC_Init+0x3de>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003bdc:	f043 0202 	orr.w	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fee5 	bl	80039b8 <LL_ADC_IsEnabled>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d164      	bne.n	8003cbe <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bfc:	d004      	beq.n	8003c08 <HAL_ADC_Init+0x168>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <HAL_ADC_Init+0x1fc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10f      	bne.n	8003c28 <HAL_ADC_Init+0x188>
 8003c08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c0c:	f7ff fed4 	bl	80039b8 <LL_ADC_IsEnabled>
 8003c10:	4604      	mov	r4, r0
 8003c12:	4822      	ldr	r0, [pc, #136]	; (8003c9c <HAL_ADC_Init+0x1fc>)
 8003c14:	f7ff fed0 	bl	80039b8 <LL_ADC_IsEnabled>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4323      	orrs	r3, r4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e012      	b.n	8003c4e <HAL_ADC_Init+0x1ae>
 8003c28:	481d      	ldr	r0, [pc, #116]	; (8003ca0 <HAL_ADC_Init+0x200>)
 8003c2a:	f7ff fec5 	bl	80039b8 <LL_ADC_IsEnabled>
 8003c2e:	4604      	mov	r4, r0
 8003c30:	481c      	ldr	r0, [pc, #112]	; (8003ca4 <HAL_ADC_Init+0x204>)
 8003c32:	f7ff fec1 	bl	80039b8 <LL_ADC_IsEnabled>
 8003c36:	4603      	mov	r3, r0
 8003c38:	431c      	orrs	r4, r3
 8003c3a:	481b      	ldr	r0, [pc, #108]	; (8003ca8 <HAL_ADC_Init+0x208>)
 8003c3c:	f7ff febc 	bl	80039b8 <LL_ADC_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4323      	orrs	r3, r4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d035      	beq.n	8003cbe <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5a:	d004      	beq.n	8003c66 <HAL_ADC_Init+0x1c6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <HAL_ADC_Init+0x1fc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d124      	bne.n	8003cb0 <HAL_ADC_Init+0x210>
 8003c66:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_ADC_Init+0x20c>)
 8003c68:	e023      	b.n	8003cb2 <HAL_ADC_Init+0x212>
 8003c6a:	bf00      	nop
 8003c6c:	08003fdd 	.word	0x08003fdd
 8003c70:	08003ff1 	.word	0x08003ff1
 8003c74:	08004005 	.word	0x08004005
 8003c78:	08004019 	.word	0x08004019
 8003c7c:	08005091 	.word	0x08005091
 8003c80:	080050a5 	.word	0x080050a5
 8003c84:	080050b9 	.word	0x080050b9
 8003c88:	080050cd 	.word	0x080050cd
 8003c8c:	080050e1 	.word	0x080050e1
 8003c90:	080003d9 	.word	0x080003d9
 8003c94:	20000024 	.word	0x20000024
 8003c98:	053e2d63 	.word	0x053e2d63
 8003c9c:	50000100 	.word	0x50000100
 8003ca0:	50000400 	.word	0x50000400
 8003ca4:	50000500 	.word	0x50000500
 8003ca8:	50000600 	.word	0x50000600
 8003cac:	50000300 	.word	0x50000300
 8003cb0:	4a79      	ldr	r2, [pc, #484]	; (8003e98 <HAL_ADC_Init+0x3f8>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7ff fca3 	bl	8003604 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7f5b      	ldrb	r3, [r3, #29]
 8003cc2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cc8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003cce:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003cd4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cdc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_ADC_Init+0x25a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	045b      	lsls	r3, r3, #17
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_ADC_Init+0x276>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <HAL_ADC_Init+0x3fc>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	430b      	orrs	r3, r1
 8003d28:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe71 	bl	8003a2c <LL_ADC_REG_IsConversionOngoing>
 8003d4a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fe92 	bl	8003a7a <LL_ADC_INJ_IsConversionOngoing>
 8003d56:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d16d      	bne.n	8003e3a <HAL_ADC_Init+0x39a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d16a      	bne.n	8003e3a <HAL_ADC_Init+0x39a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d68:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d70:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d80:	f023 0302 	bic.w	r3, r3, #2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	69b9      	ldr	r1, [r7, #24]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d017      	beq.n	8003dc6 <HAL_ADC_Init+0x326>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003da4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003db2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003dc4:	e013      	b.n	8003dee <HAL_ADC_Init+0x34e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dd4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003de6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d118      	bne.n	8003e2a <HAL_ADC_Init+0x38a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e14:	4311      	orrs	r1, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	611a      	str	r2, [r3, #16]
 8003e28:	e007      	b.n	8003e3a <HAL_ADC_Init+0x39a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10c      	bne.n	8003e5c <HAL_ADC_Init+0x3bc>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f023 010f 	bic.w	r1, r3, #15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	1e5a      	subs	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
 8003e5a:	e007      	b.n	8003e6c <HAL_ADC_Init+0x3cc>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 020f 	bic.w	r2, r2, #15
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f023 0303 	bic.w	r3, r3, #3
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e7c:	e007      	b.n	8003e8e <HAL_ADC_Init+0x3ee>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3724      	adds	r7, #36	; 0x24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}
 8003e98:	50000700 	.word	0x50000700
 8003e9c:	fff04007 	.word	0xfff04007

08003ea0 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	f043 0210 	orr.w	r2, r3, #16
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e082      	b.n	8003fce <HAL_ADC_RegisterCallback+0x12e>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d056      	beq.n	8003f82 <HAL_ADC_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	2b0a      	cmp	r3, #10
 8003ed8:	d84a      	bhi.n	8003f70 <HAL_ADC_RegisterCallback+0xd0>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_ADC_RegisterCallback+0x40>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f15 	.word	0x08003f15
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f25 	.word	0x08003f25
 8003ef0:	08003f2d 	.word	0x08003f2d
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f3f 	.word	0x08003f3f
 8003efc:	08003f49 	.word	0x08003f49
 8003f00:	08003f53 	.word	0x08003f53
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f67 	.word	0x08003f67
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003f12:	e05b      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003f1a:	e057      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003f22:	e053      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003f2a:	e04f      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003f32:	e04b      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
        hadc->InjectedQueueOverflowCallback = pCallback;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003f3c:	e046      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003f46:	e041      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003f50:	e03c      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003f5a:	e037      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003f64:	e032      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003f6e:	e02d      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f80:	e024      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_ADC_RegisterCallback+0x11c>
  {
    switch (CallbackID)
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d002      	beq.n	8003f96 <HAL_ADC_RegisterCallback+0xf6>
 8003f90:	2b0a      	cmp	r3, #10
 8003f92:	d005      	beq.n	8003fa0 <HAL_ADC_RegisterCallback+0x100>
 8003f94:	e009      	b.n	8003faa <HAL_ADC_RegisterCallback+0x10a>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003f9e:	e015      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003fa8:	e010      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
        break;
 8003fba:	e007      	b.n	8003fcc <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	f043 0210 	orr.w	r2, r3, #16
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b0b6      	sub	sp, #216	; 0xd8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x24>
 800404a:	2302      	movs	r3, #2
 800404c:	f000 bc13 	b.w	8004876 <HAL_ADC_ConfigChannel+0x84a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fce5 	bl	8003a2c <LL_ADC_REG_IsConversionOngoing>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 83f3 	bne.w	8004850 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7ff fba9 	bl	80037ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fcd3 	bl	8003a2c <LL_ADC_REG_IsConversionOngoing>
 8004086:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fcf3 	bl	8003a7a <LL_ADC_INJ_IsConversionOngoing>
 8004094:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004098:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 81d9 	bne.w	8004454 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 81d4 	bne.w	8004454 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040b4:	d10f      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	4619      	mov	r1, r3
 80040c2:	f7ff fbb0 	bl	8003826 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fb57 	bl	8003782 <LL_ADC_SetSamplingTimeCommonConfig>
 80040d4:	e00e      	b.n	80040f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7ff fb9f 	bl	8003826 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fb47 	bl	8003782 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	08db      	lsrs	r3, r3, #3
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b04      	cmp	r3, #4
 8004114:	d022      	beq.n	800415c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6919      	ldr	r1, [r3, #16]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004126:	f7ff faa1 	bl	800366c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6919      	ldr	r1, [r3, #16]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	461a      	mov	r2, r3
 8004138:	f7ff faed 	bl	8003716 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6919      	ldr	r1, [r3, #16]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	7f1b      	ldrb	r3, [r3, #28]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x126>
 800414c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004150:	e000      	b.n	8004154 <HAL_ADC_ConfigChannel+0x128>
 8004152:	2300      	movs	r3, #0
 8004154:	461a      	mov	r2, r3
 8004156:	f7ff faf9 	bl	800374c <LL_ADC_SetOffsetSaturation>
 800415a:	e17b      	b.n	8004454 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff faa6 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 8004168:	4603      	mov	r3, r0
 800416a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x15c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fa9b 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 800417e:	4603      	mov	r3, r0
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	f003 021f 	and.w	r2, r3, #31
 8004186:	e01e      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x19a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fa90 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 8004194:	4603      	mov	r3, r0
 8004196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e004      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80041ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <HAL_ADC_ConfigChannel+0x1b2>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	e018      	b.n	8004210 <HAL_ADC_ConfigChannel+0x1e4>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80041f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80041fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004202:	2320      	movs	r3, #32
 8004204:	e004      	b.n	8004210 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004210:	429a      	cmp	r2, r3
 8004212:	d106      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2200      	movs	r2, #0
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fa5f 	bl	80036e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2101      	movs	r1, #1
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fa43 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 800422e:	4603      	mov	r3, r0
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_ADC_ConfigChannel+0x222>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2101      	movs	r1, #1
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fa38 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	0e9b      	lsrs	r3, r3, #26
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	e01e      	b.n	800428c <HAL_ADC_ConfigChannel+0x260>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fa2d 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 800425a:	4603      	mov	r3, r0
 800425c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800426c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800427c:	2320      	movs	r3, #32
 800427e:	e004      	b.n	800428a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x278>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	e018      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x2aa>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80042b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80042c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80042c8:	2320      	movs	r3, #32
 80042ca:	e004      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80042cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d106      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	2101      	movs	r1, #1
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f9fc 	bl	80036e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f9e0 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x2e8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff f9d5 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	f003 021f 	and.w	r2, r3, #31
 8004312:	e01e      	b.n	8004352 <HAL_ADC_ConfigChannel+0x326>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f9ca 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 8004320:	4603      	mov	r3, r0
 8004322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800433a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004342:	2320      	movs	r3, #32
 8004344:	e004      	b.n	8004350 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <HAL_ADC_ConfigChannel+0x33e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	0e9b      	lsrs	r3, r3, #26
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	e016      	b.n	8004398 <HAL_ADC_ConfigChannel+0x36c>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800437c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800437e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e004      	b.n	8004398 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800438e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004398:	429a      	cmp	r2, r3
 800439a:	d106      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff f99b 	bl	80036e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2103      	movs	r1, #3
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff f97f 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x3aa>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2103      	movs	r1, #3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f974 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 80043cc:	4603      	mov	r3, r0
 80043ce:	0e9b      	lsrs	r3, r3, #26
 80043d0:	f003 021f 	and.w	r2, r3, #31
 80043d4:	e017      	b.n	8004406 <HAL_ADC_ConfigChannel+0x3da>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2103      	movs	r1, #3
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff f969 	bl	80036b4 <LL_ADC_GetOffsetChannel>
 80043e2:	4603      	mov	r3, r0
 80043e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80043ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80043f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80043f8:	2320      	movs	r3, #32
 80043fa:	e003      	b.n	8004404 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80043fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <HAL_ADC_ConfigChannel+0x3f2>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	e011      	b.n	8004442 <HAL_ADC_ConfigChannel+0x416>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800442c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e003      	b.n	8004442 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004442:	429a      	cmp	r2, r3
 8004444:	d106      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	2103      	movs	r1, #3
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f946 	bl	80036e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff faad 	bl	80039b8 <LL_ADC_IsEnabled>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 813d 	bne.w	80046e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	461a      	mov	r2, r3
 8004474:	f7ff fa02 	bl	800387c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4aa2      	ldr	r2, [pc, #648]	; (8004708 <HAL_ADC_ConfigChannel+0x6dc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	f040 812e 	bne.w	80046e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x480>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	3301      	adds	r3, #1
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	bf94      	ite	ls
 80044a4:	2301      	movls	r3, #1
 80044a6:	2300      	movhi	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e019      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x4b4>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80044ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80044be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80044c4:	2320      	movs	r3, #32
 80044c6:	e003      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80044c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	bf94      	ite	ls
 80044da:	2301      	movls	r3, #1
 80044dc:	2300      	movhi	r3, #0
 80044de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d079      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x4d4>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0e9b      	lsrs	r3, r3, #26
 80044f6:	3301      	adds	r3, #1
 80044f8:	069b      	lsls	r3, r3, #26
 80044fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044fe:	e015      	b.n	800452c <HAL_ADC_ConfigChannel+0x500>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004518:	2320      	movs	r3, #32
 800451a:	e003      	b.n	8004524 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800451c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451e:	fab3 f383 	clz	r3, r3
 8004522:	b2db      	uxtb	r3, r3
 8004524:	3301      	adds	r3, #1
 8004526:	069b      	lsls	r3, r3, #26
 8004528:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <HAL_ADC_ConfigChannel+0x520>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	3301      	adds	r3, #1
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	e017      	b.n	800457c <HAL_ADC_ConfigChannel+0x550>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800455a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800455e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004564:	2320      	movs	r3, #32
 8004566:	e003      	b.n	8004570 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	3301      	adds	r3, #1
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	ea42 0103 	orr.w	r1, r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x576>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0e9b      	lsrs	r3, r3, #26
 8004592:	3301      	adds	r3, #1
 8004594:	f003 021f 	and.w	r2, r3, #31
 8004598:	4613      	mov	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	051b      	lsls	r3, r3, #20
 80045a0:	e018      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x5a8>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80045b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80045ba:	2320      	movs	r3, #32
 80045bc:	e003      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80045be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c0:	fab3 f383 	clz	r3, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	f003 021f 	and.w	r2, r3, #31
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045d4:	430b      	orrs	r3, r1
 80045d6:	e07e      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d107      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x5c8>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0e9b      	lsrs	r3, r3, #26
 80045ea:	3301      	adds	r3, #1
 80045ec:	069b      	lsls	r3, r3, #26
 80045ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045f2:	e015      	b.n	8004620 <HAL_ADC_ConfigChannel+0x5f4>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800460c:	2320      	movs	r3, #32
 800460e:	e003      	b.n	8004618 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	3301      	adds	r3, #1
 800461a:	069b      	lsls	r3, r3, #26
 800461c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x614>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	0e9b      	lsrs	r3, r3, #26
 8004632:	3301      	adds	r3, #1
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	e017      	b.n	8004670 <HAL_ADC_ConfigChannel+0x644>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	61fb      	str	r3, [r7, #28]
  return result;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004658:	2320      	movs	r3, #32
 800465a:	e003      	b.n	8004664 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3301      	adds	r3, #1
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f303 	lsl.w	r3, r1, r3
 8004670:	ea42 0103 	orr.w	r1, r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <HAL_ADC_ConfigChannel+0x670>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0e9b      	lsrs	r3, r3, #26
 8004686:	3301      	adds	r3, #1
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4613      	mov	r3, r2
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	3b1e      	subs	r3, #30
 8004694:	051b      	lsls	r3, r3, #20
 8004696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800469a:	e01b      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x6a8>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa93 f3a3 	rbit	r3, r3
 80046a8:	613b      	str	r3, [r7, #16]
  return result;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80046b4:	2320      	movs	r3, #32
 80046b6:	e003      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	f003 021f 	and.w	r2, r3, #31
 80046c6:	4613      	mov	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	3b1e      	subs	r3, #30
 80046ce:	051b      	lsls	r3, r3, #20
 80046d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d4:	430b      	orrs	r3, r1
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	6892      	ldr	r2, [r2, #8]
 80046da:	4619      	mov	r1, r3
 80046dc:	f7ff f8a3 	bl	8003826 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_ADC_ConfigChannel+0x6e0>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80be 	beq.w	800486a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f6:	d004      	beq.n	8004702 <HAL_ADC_ConfigChannel+0x6d6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_ADC_ConfigChannel+0x6e4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10a      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x6ec>
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_ADC_ConfigChannel+0x6e8>)
 8004704:	e009      	b.n	800471a <HAL_ADC_ConfigChannel+0x6ee>
 8004706:	bf00      	nop
 8004708:	407f0000 	.word	0x407f0000
 800470c:	80080000 	.word	0x80080000
 8004710:	50000100 	.word	0x50000100
 8004714:	50000300 	.word	0x50000300
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_ADC_ConfigChannel+0x854>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe ff98 	bl	8003650 <LL_ADC_GetCommonPathInternalCh>
 8004720:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a56      	ldr	r2, [pc, #344]	; (8004884 <HAL_ADC_ConfigChannel+0x858>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <HAL_ADC_ConfigChannel+0x70c>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a55      	ldr	r2, [pc, #340]	; (8004888 <HAL_ADC_ConfigChannel+0x85c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d13a      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800473c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d134      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800474c:	d005      	beq.n	800475a <HAL_ADC_ConfigChannel+0x72e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a4e      	ldr	r2, [pc, #312]	; (800488c <HAL_ADC_ConfigChannel+0x860>)
 8004754:	4293      	cmp	r3, r2
 8004756:	f040 8085 	bne.w	8004864 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004762:	d004      	beq.n	800476e <HAL_ADC_ConfigChannel+0x742>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a49      	ldr	r2, [pc, #292]	; (8004890 <HAL_ADC_ConfigChannel+0x864>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x746>
 800476e:	4a49      	ldr	r2, [pc, #292]	; (8004894 <HAL_ADC_ConfigChannel+0x868>)
 8004770:	e000      	b.n	8004774 <HAL_ADC_ConfigChannel+0x748>
 8004772:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_ADC_ConfigChannel+0x854>)
 8004774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe ff53 	bl	800362a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004784:	4b44      	ldr	r3, [pc, #272]	; (8004898 <HAL_ADC_ConfigChannel+0x86c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	4a44      	ldr	r2, [pc, #272]	; (800489c <HAL_ADC_ConfigChannel+0x870>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800479e:	e002      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f9      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047ac:	e05a      	b.n	8004864 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <HAL_ADC_ConfigChannel+0x874>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d125      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x7d8>
 80047b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d11f      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a31      	ldr	r2, [pc, #196]	; (8004890 <HAL_ADC_ConfigChannel+0x864>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d104      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x7ac>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <HAL_ADC_ConfigChannel+0x878>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d047      	beq.n	8004868 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e0:	d004      	beq.n	80047ec <HAL_ADC_ConfigChannel+0x7c0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <HAL_ADC_ConfigChannel+0x864>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x7c4>
 80047ec:	4a29      	ldr	r2, [pc, #164]	; (8004894 <HAL_ADC_ConfigChannel+0x868>)
 80047ee:	e000      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x7c6>
 80047f0:	4a23      	ldr	r2, [pc, #140]	; (8004880 <HAL_ADC_ConfigChannel+0x854>)
 80047f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7fe ff14 	bl	800362a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004802:	e031      	b.n	8004868 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <HAL_ADC_ConfigChannel+0x87c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d12d      	bne.n	800486a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800480e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d127      	bne.n	800486a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <HAL_ADC_ConfigChannel+0x864>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800482c:	d004      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x80c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_ADC_ConfigChannel+0x864>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x810>
 8004838:	4a16      	ldr	r2, [pc, #88]	; (8004894 <HAL_ADC_ConfigChannel+0x868>)
 800483a:	e000      	b.n	800483e <HAL_ADC_ConfigChannel+0x812>
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <HAL_ADC_ConfigChannel+0x854>)
 800483e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fe feee 	bl	800362a <LL_ADC_SetCommonPathInternalCh>
 800484e:	e00c      	b.n	800486a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004862:	e002      	b.n	800486a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004868:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004872:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004876:	4618      	mov	r0, r3
 8004878:	37d8      	adds	r7, #216	; 0xd8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	50000700 	.word	0x50000700
 8004884:	c3210000 	.word	0xc3210000
 8004888:	90c00010 	.word	0x90c00010
 800488c:	50000600 	.word	0x50000600
 8004890:	50000100 	.word	0x50000100
 8004894:	50000300 	.word	0x50000300
 8004898:	20000024 	.word	0x20000024
 800489c:	053e2d63 	.word	0x053e2d63
 80048a0:	c7520000 	.word	0xc7520000
 80048a4:	50000500 	.word	0x50000500
 80048a8:	cb840000 	.word	0xcb840000

080048ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff f8b2 	bl	8003a2c <LL_ADC_REG_IsConversionOngoing>
 80048c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff f8d3 	bl	8003a7a <LL_ADC_INJ_IsConversionOngoing>
 80048d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8098 	beq.w	8004a14 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02a      	beq.n	8004948 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7f5b      	ldrb	r3, [r3, #29]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d126      	bne.n	8004948 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7f1b      	ldrb	r3, [r3, #28]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d122      	bne.n	8004948 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004902:	2301      	movs	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004906:	e014      	b.n	8004932 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4a45      	ldr	r2, [pc, #276]	; (8004a20 <ADC_ConversionStop+0x174>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d90d      	bls.n	800492c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004914:	f043 0210 	orr.w	r2, r3, #16
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e074      	b.n	8004a16 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3301      	adds	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d1e3      	bne.n	8004908 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d014      	beq.n	8004978 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f86a 	bl	8003a2c <LL_ADC_REG_IsConversionOngoing>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff f83b 	bl	80039de <LL_ADC_IsDisableOngoing>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f846 	bl	8003a04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d014      	beq.n	80049a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff f879 	bl	8003a7a <LL_ADC_INJ_IsConversionOngoing>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f823 	bl	80039de <LL_ADC_IsDisableOngoing>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f855 	bl	8003a52 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d005      	beq.n	80049ba <ADC_ConversionStop+0x10e>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d105      	bne.n	80049c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049b4:	230c      	movs	r3, #12
 80049b6:	617b      	str	r3, [r7, #20]
        break;
 80049b8:	e005      	b.n	80049c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049ba:	2308      	movs	r3, #8
 80049bc:	617b      	str	r3, [r7, #20]
        break;
 80049be:	e002      	b.n	80049c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80049c0:	2304      	movs	r3, #4
 80049c2:	617b      	str	r3, [r7, #20]
        break;
 80049c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80049c6:	f7fe fdef 	bl	80035a8 <HAL_GetTick>
 80049ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049cc:	e01b      	b.n	8004a06 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049ce:	f7fe fdeb 	bl	80035a8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d914      	bls.n	8004a06 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	f043 0210 	orr.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	f043 0201 	orr.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e007      	b.n	8004a16 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1dc      	bne.n	80049ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	a33fffff 	.word	0xa33fffff

08004a24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe ffc1 	bl	80039b8 <LL_ADC_IsEnabled>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14d      	bne.n	8004ad8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <ADC_Enable+0xc0>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e039      	b.n	8004ada <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe ff7c 	bl	8003968 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a70:	f7fe fd9a 	bl	80035a8 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a76:	e028      	b.n	8004aca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe ff9b 	bl	80039b8 <LL_ADC_IsEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe ff6b 	bl	8003968 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a92:	f7fe fd89 	bl	80035a8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d914      	bls.n	8004aca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d00d      	beq.n	8004aca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	f043 0210 	orr.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e007      	b.n	8004ada <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d1cf      	bne.n	8004a78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	8000003f 	.word	0x8000003f

08004ae8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe ff72 	bl	80039de <LL_ADC_IsDisableOngoing>
 8004afa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe ff59 	bl	80039b8 <LL_ADC_IsEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d047      	beq.n	8004b9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d144      	bne.n	8004b9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030d 	and.w	r3, r3, #13
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10c      	bne.n	8004b3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe ff33 	bl	8003990 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2203      	movs	r2, #3
 8004b30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b32:	f7fe fd39 	bl	80035a8 <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b38:	e029      	b.n	8004b8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	f043 0210 	orr.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e023      	b.n	8004b9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b56:	f7fe fd27 	bl	80035a8 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d914      	bls.n	8004b8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e007      	b.n	8004b9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1dc      	bne.n	8004b56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d14c      	bne.n	8004c5a <ADC_DMAConvCplt+0xb4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d021      	beq.n	8004c1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fde2 	bl	80037a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d032      	beq.n	8004c50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d12b      	bne.n	8004c50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d11f      	bne.n	8004c50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	f043 0201 	orr.w	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c1c:	e018      	b.n	8004c50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d111      	bne.n	8004c50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c58:	e00f      	b.n	8004c7a <ADC_DMAConvCplt+0xd4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <ADC_DMAConvCplt+0xca>
      hadc->ErrorCallback(hadc);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	4798      	blx	r3
}
 8004c6e:	e004      	b.n	8004c7a <ADC_DMAConvCplt+0xd4>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <LL_ADC_IsEnabled>:
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <LL_ADC_IsEnabled+0x18>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <LL_ADC_IsEnabled+0x1a>
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_ADC_REG_StartConversion>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d101      	bne.n	8004d3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b0ac      	sub	sp, #176	; 0xb0
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ffe1 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e09c      	b.n	8004ea6 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e095      	b.n	8004ea6 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004d82:	2300      	movs	r3, #0
 8004d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d86:	2300      	movs	r3, #0
 8004d88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004d92:	2300      	movs	r3, #0
 8004d94:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d9e:	d102      	bne.n	8004da6 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 8004da0:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	e009      	b.n	8004dba <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a42      	ldr	r2, [pc, #264]	; (8004eb4 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d102      	bne.n	8004db6 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8004db0:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e001      	b.n	8004dba <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e066      	b.n	8004ea6 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff fe23 	bl	8004a24 <ADC_Enable>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    if (tmp_hal_status == HAL_OK)
 8004de4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_ADCEx_MultiModeStart_DMA+0xb0>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004dec:	f107 0310 	add.w	r3, r7, #16
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fe17 	bl	8004a24 <ADC_Enable>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8004dfc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d14a      	bne.n	8004e9a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e3e:	d004      	beq.n	8004e4a <HAL_ADCEx_MultiModeStart_DMA+0xfe>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_ADCEx_MultiModeStart_DMA+0x102>
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8004e4c:	e000      	b.n	8004e50 <HAL_ADCEx_MultiModeStart_DMA+0x104>
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8004e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	221c      	movs	r2, #28
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0210 	orr.w	r2, r2, #16
 8004e72:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	4619      	mov	r1, r3
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f000 ff38 	bl	8005cf8 <HAL_DMA_Start_IT>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff ff32 	bl	8004cfc <LL_ADC_REG_StartConversion>
 8004e98:	e003      	b.n	8004ea2 <HAL_ADCEx_MultiModeStart_DMA+0x156>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004ea2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	37b0      	adds	r7, #176	; 0xb0
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	50000100 	.word	0x50000100
 8004eb4:	50000400 	.word	0x50000400
 8004eb8:	50000500 	.word	0x50000500
 8004ebc:	08004ba7 	.word	0x08004ba7
 8004ec0:	08004c83 	.word	0x08004c83
 8004ec4:	08004ca1 	.word	0x08004ca1
 8004ec8:	50000300 	.word	0x50000300
 8004ecc:	50000700 	.word	0x50000700

08004ed0 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0ac      	sub	sp, #176	; 0xb0
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0c9      	b.n	800507a <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004eee:	2103      	movs	r1, #3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fcdb 	bl	80048ac <ADC_ConversionStop>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004efc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 80b4 	bne.w	800506e <HAL_ADCEx_MultiModeStop_DMA+0x19e>
  {
    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004f06:	2300      	movs	r3, #0
 8004f08:	667b      	str	r3, [r7, #100]	; 0x64
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004f16:	2300      	movs	r3, #0
 8004f18:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f22:	d102      	bne.n	8004f2a <HAL_ADCEx_MultiModeStop_DMA+0x5a>
 8004f24:	4b57      	ldr	r3, [pc, #348]	; (8005084 <HAL_ADCEx_MultiModeStop_DMA+0x1b4>)
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	e009      	b.n	8004f3e <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a56      	ldr	r2, [pc, #344]	; (8005088 <HAL_ADCEx_MultiModeStop_DMA+0x1b8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d102      	bne.n	8004f3a <HAL_ADCEx_MultiModeStop_DMA+0x6a>
 8004f34:	4b55      	ldr	r3, [pc, #340]	; (800508c <HAL_ADCEx_MultiModeStop_DMA+0x1bc>)
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	e001      	b.n	8004f3e <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]

    if (tmphadcSlave.Instance == NULL)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <HAL_ADCEx_MultiModeStop_DMA+0x8c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e08e      	b.n	800507a <HAL_ADCEx_MultiModeStop_DMA+0x1aa>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8004f5c:	f7fe fb24 	bl	80035a8 <HAL_GetTick>
 8004f60:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fedc 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8004f6c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8004f70:	e02b      	b.n	8004fca <HAL_ADCEx_MultiModeStop_DMA+0xfa>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004f72:	f7fe fb19 	bl	80035a8 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b05      	cmp	r3, #5
 8004f80:	d91d      	bls.n	8004fbe <HAL_ADCEx_MultiModeStop_DMA+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fecd 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8004f8a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fec6 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d003      	beq.n	8004fa6 <HAL_ADCEx_MultiModeStop_DMA+0xd6>
            || (tmphadcSlave_conversion_on_going == 1UL)
 8004f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d10b      	bne.n	8004fbe <HAL_ADCEx_MultiModeStop_DMA+0xee>
           )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f043 0210 	orr.w	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e05d      	b.n	800507a <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff feaf 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8004fc6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fea8 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d0cb      	beq.n	8004f72 <HAL_ADCEx_MultiModeStop_DMA+0xa2>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8004fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d0c7      	beq.n	8004f72 <HAL_ADCEx_MultiModeStop_DMA+0xa2>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ff01 	bl	8005dee <HAL_DMA_Abort>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8004ff2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d105      	bne.n	8005006 <HAL_ADCEx_MultiModeStop_DMA+0x136>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0210 	bic.w	r2, r2, #16
 8005014:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8005016:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800501a:	2b00      	cmp	r3, #0
 800501c:	d115      	bne.n	800504a <HAL_ADCEx_MultiModeStop_DMA+0x17a>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fd60 	bl	8004ae8 <ADC_Disable>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fd5a 	bl	8004ae8 <ADC_Disable>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10f      	bne.n	800505a <HAL_ADCEx_MultiModeStop_DMA+0x18a>
 800503a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10b      	bne.n	800505a <HAL_ADCEx_MultiModeStop_DMA+0x18a>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8005048:	e007      	b.n	800505a <HAL_ADCEx_MultiModeStop_DMA+0x18a>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fd4c 	bl	8004ae8 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fd47 	bl	8004ae8 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005076:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 800507a:	4618      	mov	r0, r3
 800507c:	37b0      	adds	r7, #176	; 0xb0
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	50000100 	.word	0x50000100
 8005088:	50000400 	.word	0x50000400
 800508c:	50000500 	.word	0x50000500

08005090 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050f4:	b590      	push	{r4, r7, lr}
 80050f6:	b0ad      	sub	sp, #180	; 0xb4
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800510e:	2302      	movs	r3, #2
 8005110:	e0f8      	b.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800511a:	2300      	movs	r3, #0
 800511c:	66bb      	str	r3, [r7, #104]	; 0x68
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005124:	2300      	movs	r3, #0
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800512a:	2300      	movs	r3, #0
 800512c:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005136:	d102      	bne.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8005138:	4b74      	ldr	r3, [pc, #464]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e009      	b.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a73      	ldr	r2, [pc, #460]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d102      	bne.n	800514e <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8005148:	4b72      	ldr	r3, [pc, #456]	; (8005314 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e001      	b.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10b      	bne.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0c9      	b.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fdd6 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8005178:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fdcf 	bl	8004d24 <LL_ADC_REG_IsConversionOngoing>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	f040 80aa 	bne.w	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800518e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005192:	2b00      	cmp	r3, #0
 8005194:	f040 80a5 	bne.w	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051a0:	d004      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a59      	ldr	r2, [pc, #356]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 80051ac:	4b5a      	ldr	r3, [pc, #360]	; (8005318 <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 80051ae:	e000      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80051b0:	4b5a      	ldr	r3, [pc, #360]	; (800531c <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 80051b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d04f      	beq.n	800525e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80051be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051d2:	035b      	lsls	r3, r3, #13
 80051d4:	430b      	orrs	r3, r1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051dc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e6:	d004      	beq.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a47      	ldr	r2, [pc, #284]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10f      	bne.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 80051f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80051f6:	f7ff fd6e 	bl	8004cd6 <LL_ADC_IsEnabled>
 80051fa:	4604      	mov	r4, r0
 80051fc:	4843      	ldr	r0, [pc, #268]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80051fe:	f7ff fd6a 	bl	8004cd6 <LL_ADC_IsEnabled>
 8005202:	4603      	mov	r3, r0
 8005204:	4323      	orrs	r3, r4
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e012      	b.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8005212:	483f      	ldr	r0, [pc, #252]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005214:	f7ff fd5f 	bl	8004cd6 <LL_ADC_IsEnabled>
 8005218:	4604      	mov	r4, r0
 800521a:	483e      	ldr	r0, [pc, #248]	; (8005314 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 800521c:	f7ff fd5b 	bl	8004cd6 <LL_ADC_IsEnabled>
 8005220:	4603      	mov	r3, r0
 8005222:	431c      	orrs	r4, r3
 8005224:	483e      	ldr	r0, [pc, #248]	; (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8005226:	f7ff fd56 	bl	8004cd6 <LL_ADC_IsEnabled>
 800522a:	4603      	mov	r3, r0
 800522c:	4323      	orrs	r3, r4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d05c      	beq.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800523c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005246:	f023 030f 	bic.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	6811      	ldr	r1, [r2, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	430a      	orrs	r2, r1
 8005254:	431a      	orrs	r2, r3
 8005256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800525a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800525c:	e04b      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800525e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800526c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005276:	d004      	beq.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10f      	bne.n	80052a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8005282:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005286:	f7ff fd26 	bl	8004cd6 <LL_ADC_IsEnabled>
 800528a:	4604      	mov	r4, r0
 800528c:	481f      	ldr	r0, [pc, #124]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800528e:	f7ff fd22 	bl	8004cd6 <LL_ADC_IsEnabled>
 8005292:	4603      	mov	r3, r0
 8005294:	4323      	orrs	r3, r4
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e012      	b.n	80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 80052a2:	481b      	ldr	r0, [pc, #108]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80052a4:	f7ff fd17 	bl	8004cd6 <LL_ADC_IsEnabled>
 80052a8:	4604      	mov	r4, r0
 80052aa:	481a      	ldr	r0, [pc, #104]	; (8005314 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80052ac:	f7ff fd13 	bl	8004cd6 <LL_ADC_IsEnabled>
 80052b0:	4603      	mov	r3, r0
 80052b2:	431c      	orrs	r4, r3
 80052b4:	481a      	ldr	r0, [pc, #104]	; (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 80052b6:	f7ff fd0e 	bl	8004cd6 <LL_ADC_IsEnabled>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4323      	orrs	r3, r4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d014      	beq.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052d6:	f023 030f 	bic.w	r3, r3, #15
 80052da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80052de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052e0:	e009      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80052f4:	e000      	b.n	80052f8 <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005300:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8005304:	4618      	mov	r0, r3
 8005306:	37b4      	adds	r7, #180	; 0xb4
 8005308:	46bd      	mov	sp, r7
 800530a:	bd90      	pop	{r4, r7, pc}
 800530c:	50000100 	.word	0x50000100
 8005310:	50000400 	.word	0x50000400
 8005314:	50000500 	.word	0x50000500
 8005318:	50000300 	.word	0x50000300
 800531c:	50000700 	.word	0x50000700
 8005320:	50000600 	.word	0x50000600

08005324 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <LL_EXTI_EnableIT_0_31+0x20>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4904      	ldr	r1, [pc, #16]	; (8005344 <LL_EXTI_EnableIT_0_31+0x20>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40010400 	.word	0x40010400

08005348 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <LL_EXTI_EnableIT_32_63+0x20>)
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	4904      	ldr	r1, [pc, #16]	; (8005368 <LL_EXTI_EnableIT_32_63+0x20>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4313      	orrs	r3, r2
 800535a:	620b      	str	r3, [r1, #32]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	40010400 	.word	0x40010400

0800536c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <LL_EXTI_DisableIT_0_31+0x24>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	43db      	mvns	r3, r3
 800537c:	4904      	ldr	r1, [pc, #16]	; (8005390 <LL_EXTI_DisableIT_0_31+0x24>)
 800537e:	4013      	ands	r3, r2
 8005380:	600b      	str	r3, [r1, #0]
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010400 	.word	0x40010400

08005394 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <LL_EXTI_DisableIT_32_63+0x24>)
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	4904      	ldr	r1, [pc, #16]	; (80053b8 <LL_EXTI_DisableIT_32_63+0x24>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	620b      	str	r3, [r1, #32]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010400 	.word	0x40010400

080053bc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <LL_EXTI_EnableEvent_0_31+0x20>)
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4904      	ldr	r1, [pc, #16]	; (80053dc <LL_EXTI_EnableEvent_0_31+0x20>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]

}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40010400 	.word	0x40010400

080053e0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <LL_EXTI_EnableEvent_32_63+0x20>)
 80053ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ec:	4904      	ldr	r1, [pc, #16]	; (8005400 <LL_EXTI_EnableEvent_32_63+0x20>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40010400 	.word	0x40010400

08005404 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <LL_EXTI_DisableEvent_0_31+0x24>)
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	43db      	mvns	r3, r3
 8005414:	4904      	ldr	r1, [pc, #16]	; (8005428 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005416:	4013      	ands	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40010400 	.word	0x40010400

0800542c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	43db      	mvns	r3, r3
 800543c:	4904      	ldr	r1, [pc, #16]	; (8005450 <LL_EXTI_DisableEvent_32_63+0x24>)
 800543e:	4013      	ands	r3, r2
 8005440:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010400 	.word	0x40010400

08005454 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	4904      	ldr	r1, [pc, #16]	; (8005474 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40010400 	.word	0x40010400

08005478 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005484:	4904      	ldr	r1, [pc, #16]	; (8005498 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4313      	orrs	r3, r2
 800548a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40010400 	.word	0x40010400

0800549c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	43db      	mvns	r3, r3
 80054ac:	4904      	ldr	r1, [pc, #16]	; (80054c0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]

}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010400 	.word	0x40010400

080054c4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80054ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	4904      	ldr	r1, [pc, #16]	; (80054e8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010400 	.word	0x40010400

080054ec <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	4904      	ldr	r1, [pc, #16]	; (800550c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60cb      	str	r3, [r1, #12]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40010400 	.word	0x40010400

08005510 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	4904      	ldr	r1, [pc, #16]	; (8005530 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4313      	orrs	r3, r2
 8005522:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40010400 	.word	0x40010400

08005534 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	43db      	mvns	r3, r3
 8005544:	4904      	ldr	r1, [pc, #16]	; (8005558 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005546:	4013      	ands	r3, r2
 8005548:	60cb      	str	r3, [r1, #12]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010400 	.word	0x40010400

0800555c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	43db      	mvns	r3, r3
 800556c:	4904      	ldr	r1, [pc, #16]	; (8005580 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800556e:	4013      	ands	r3, r2
 8005570:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010400 	.word	0x40010400

08005584 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800558c:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6153      	str	r3, [r2, #20]
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010400 	.word	0x40010400

080055a4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80055ac:	4a04      	ldr	r2, [pc, #16]	; (80055c0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010400 	.word	0x40010400

080055c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e181      	b.n	80058e4 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ee:	d102      	bne.n	80055f6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e176      	b.n	80058e4 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7f5b      	ldrb	r3, [r3, #29]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fa ffdf 	bl	80005d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b90      	ldr	r3, [pc, #576]	; (8005884 <HAL_COMP_Init+0x2c0>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	430b      	orrs	r3, r1
 800564e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_COMP_Init+0xc8>
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d113      	bne.n	800568c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <HAL_COMP_Init+0x2c4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	099b      	lsrs	r3, r3, #6
 800566a:	4a88      	ldr	r2, [pc, #544]	; (800588c <HAL_COMP_Init+0x2c8>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	099b      	lsrs	r3, r3, #6
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800567e:	e002      	b.n	8005686 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f9      	bne.n	8005680 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a7f      	ldr	r2, [pc, #508]	; (8005890 <HAL_COMP_Init+0x2cc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d028      	beq.n	80056e8 <HAL_COMP_Init+0x124>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7e      	ldr	r2, [pc, #504]	; (8005894 <HAL_COMP_Init+0x2d0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d020      	beq.n	80056e2 <HAL_COMP_Init+0x11e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a7c      	ldr	r2, [pc, #496]	; (8005898 <HAL_COMP_Init+0x2d4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_COMP_Init+0x118>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a7b      	ldr	r2, [pc, #492]	; (800589c <HAL_COMP_Init+0x2d8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d010      	beq.n	80056d6 <HAL_COMP_Init+0x112>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a79      	ldr	r2, [pc, #484]	; (80058a0 <HAL_COMP_Init+0x2dc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d008      	beq.n	80056d0 <HAL_COMP_Init+0x10c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a78      	ldr	r2, [pc, #480]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_COMP_Init+0x108>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e00f      	b.n	80056ec <HAL_COMP_Init+0x128>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e00d      	b.n	80056ec <HAL_COMP_Init+0x128>
 80056d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d4:	e00a      	b.n	80056ec <HAL_COMP_Init+0x128>
 80056d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056da:	e007      	b.n	80056ec <HAL_COMP_Init+0x128>
 80056dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80056e0:	e004      	b.n	80056ec <HAL_COMP_Init+0x128>
 80056e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056e6:	e001      	b.n	80056ec <HAL_COMP_Init+0x128>
 80056e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056ec:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80b6 	beq.w	8005868 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a65      	ldr	r2, [pc, #404]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_COMP_Init+0x158>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a64      	ldr	r2, [pc, #400]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d103      	bne.n	8005724 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800571c:	6938      	ldr	r0, [r7, #16]
 800571e:	f7ff feab 	bl	8005478 <LL_EXTI_EnableRisingTrig_32_63>
 8005722:	e014      	b.n	800574e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005724:	6938      	ldr	r0, [r7, #16]
 8005726:	f7ff fe95 	bl	8005454 <LL_EXTI_EnableRisingTrig_0_31>
 800572a:	e010      	b.n	800574e <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5c      	ldr	r2, [pc, #368]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_COMP_Init+0x17c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a5b      	ldr	r2, [pc, #364]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005740:	6938      	ldr	r0, [r7, #16]
 8005742:	f7ff febf 	bl	80054c4 <LL_EXTI_DisableRisingTrig_32_63>
 8005746:	e002      	b.n	800574e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005748:	6938      	ldr	r0, [r7, #16]
 800574a:	f7ff fea7 	bl	800549c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d011      	beq.n	800577e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a51      	ldr	r2, [pc, #324]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_COMP_Init+0x1aa>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4f      	ldr	r2, [pc, #316]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d103      	bne.n	8005776 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800576e:	6938      	ldr	r0, [r7, #16]
 8005770:	f7ff fece 	bl	8005510 <LL_EXTI_EnableFallingTrig_32_63>
 8005774:	e014      	b.n	80057a0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005776:	6938      	ldr	r0, [r7, #16]
 8005778:	f7ff feb8 	bl	80054ec <LL_EXTI_EnableFallingTrig_0_31>
 800577c:	e010      	b.n	80057a0 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a48      	ldr	r2, [pc, #288]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_COMP_Init+0x1ce>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a46      	ldr	r2, [pc, #280]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d103      	bne.n	800579a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005792:	6938      	ldr	r0, [r7, #16]
 8005794:	f7ff fee2 	bl	800555c <LL_EXTI_DisableFallingTrig_32_63>
 8005798:	e002      	b.n	80057a0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800579a:	6938      	ldr	r0, [r7, #16]
 800579c:	f7ff feca 	bl	8005534 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a3f      	ldr	r2, [pc, #252]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_COMP_Init+0x1f0>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a3e      	ldr	r2, [pc, #248]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d103      	bne.n	80057bc <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80057b4:	6938      	ldr	r0, [r7, #16]
 80057b6:	f7ff fef5 	bl	80055a4 <LL_EXTI_ClearFlag_32_63>
 80057ba:	e002      	b.n	80057c2 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80057bc:	6938      	ldr	r0, [r7, #16]
 80057be:	f7ff fee1 	bl	8005584 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d011      	beq.n	80057f2 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_COMP_Init+0x21e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a32      	ldr	r2, [pc, #200]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d103      	bne.n	80057ea <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80057e2:	6938      	ldr	r0, [r7, #16]
 80057e4:	f7ff fdfc 	bl	80053e0 <LL_EXTI_EnableEvent_32_63>
 80057e8:	e014      	b.n	8005814 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80057ea:	6938      	ldr	r0, [r7, #16]
 80057ec:	f7ff fde6 	bl	80053bc <LL_EXTI_EnableEvent_0_31>
 80057f0:	e010      	b.n	8005814 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2b      	ldr	r2, [pc, #172]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_COMP_Init+0x242>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a29      	ldr	r2, [pc, #164]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d103      	bne.n	800580e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005806:	6938      	ldr	r0, [r7, #16]
 8005808:	f7ff fe10 	bl	800542c <LL_EXTI_DisableEvent_32_63>
 800580c:	e002      	b.n	8005814 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800580e:	6938      	ldr	r0, [r7, #16]
 8005810:	f7ff fdf8 	bl	8005404 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_COMP_Init+0x270>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d103      	bne.n	800583c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8005834:	6938      	ldr	r0, [r7, #16]
 8005836:	f7ff fd87 	bl	8005348 <LL_EXTI_EnableIT_32_63>
 800583a:	e04b      	b.n	80058d4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800583c:	6938      	ldr	r0, [r7, #16]
 800583e:	f7ff fd71 	bl	8005324 <LL_EXTI_EnableIT_0_31>
 8005842:	e047      	b.n	80058d4 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_COMP_Init+0x294>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d103      	bne.n	8005860 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005858:	6938      	ldr	r0, [r7, #16]
 800585a:	f7ff fd9b 	bl	8005394 <LL_EXTI_DisableIT_32_63>
 800585e:	e039      	b.n	80058d4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005860:	6938      	ldr	r0, [r7, #16]
 8005862:	f7ff fd83 	bl	800536c <LL_EXTI_DisableIT_0_31>
 8005866:	e035      	b.n	80058d4 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0d      	ldr	r2, [pc, #52]	; (80058a4 <HAL_COMP_Init+0x2e0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_COMP_Init+0x2b8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <HAL_COMP_Init+0x2e4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d117      	bne.n	80058ac <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800587c:	6938      	ldr	r0, [r7, #16]
 800587e:	f7ff fdd5 	bl	800542c <LL_EXTI_DisableEvent_32_63>
 8005882:	e016      	b.n	80058b2 <HAL_COMP_Init+0x2ee>
 8005884:	ff007e0f 	.word	0xff007e0f
 8005888:	20000024 	.word	0x20000024
 800588c:	053e2d63 	.word	0x053e2d63
 8005890:	40010200 	.word	0x40010200
 8005894:	40010204 	.word	0x40010204
 8005898:	40010208 	.word	0x40010208
 800589c:	4001020c 	.word	0x4001020c
 80058a0:	40010210 	.word	0x40010210
 80058a4:	40010214 	.word	0x40010214
 80058a8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80058ac:	6938      	ldr	r0, [r7, #16]
 80058ae:	f7ff fda9 	bl	8005404 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a0e      	ldr	r2, [pc, #56]	; (80058f0 <HAL_COMP_Init+0x32c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_COMP_Init+0x302>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <HAL_COMP_Init+0x330>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d103      	bne.n	80058ce <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80058c6:	6938      	ldr	r0, [r7, #16]
 80058c8:	f7ff fd64 	bl	8005394 <LL_EXTI_DisableIT_32_63>
 80058cc:	e002      	b.n	80058d4 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80058ce:	6938      	ldr	r0, [r7, #16]
 80058d0:	f7ff fd4c 	bl	800536c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7f5b      	ldrb	r3, [r3, #29]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40010214 	.word	0x40010214
 80058f4:	40010218 	.word	0x40010218

080058f8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005900:	2300      	movs	r3, #0
 8005902:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
 8005912:	e02e      	b.n	8005972 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800591e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005922:	d102      	bne.n	800592a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
 8005928:	e023      	b.n	8005972 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7f5b      	ldrb	r3, [r3, #29]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11c      	bne.n	800596e <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <HAL_COMP_Start+0x88>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a0d      	ldr	r2, [pc, #52]	; (8005984 <HAL_COMP_Start+0x8c>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	0cda      	lsrs	r2, r3, #19
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800595e:	e002      	b.n	8005966 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3b01      	subs	r3, #1
 8005964:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f9      	bne.n	8005960 <HAL_COMP_Start+0x68>
 800596c:	e001      	b.n	8005972 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000024 	.word	0x20000024
 8005984:	431bde83 	.word	0x431bde83

08005988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <__NVIC_SetPriorityGrouping+0x44>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059a4:	4013      	ands	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ba:	4a04      	ldr	r2, [pc, #16]	; (80059cc <__NVIC_SetPriorityGrouping+0x44>)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	60d3      	str	r3, [r2, #12]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	e000ed00 	.word	0xe000ed00

080059d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d4:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <__NVIC_GetPriorityGrouping+0x18>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 0307 	and.w	r3, r3, #7
}
 80059de:	4618      	mov	r0, r3
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	e000ed00 	.word	0xe000ed00

080059ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	db0b      	blt.n	8005a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	f003 021f 	and.w	r2, r3, #31
 8005a04:	4907      	ldr	r1, [pc, #28]	; (8005a24 <__NVIC_EnableIRQ+0x38>)
 8005a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000e100 	.word	0xe000e100

08005a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	6039      	str	r1, [r7, #0]
 8005a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	db0a      	blt.n	8005a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	490c      	ldr	r1, [pc, #48]	; (8005a74 <__NVIC_SetPriority+0x4c>)
 8005a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a46:	0112      	lsls	r2, r2, #4
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a50:	e00a      	b.n	8005a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4908      	ldr	r1, [pc, #32]	; (8005a78 <__NVIC_SetPriority+0x50>)
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	3b04      	subs	r3, #4
 8005a60:	0112      	lsls	r2, r2, #4
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	440b      	add	r3, r1
 8005a66:	761a      	strb	r2, [r3, #24]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000e100 	.word	0xe000e100
 8005a78:	e000ed00 	.word	0xe000ed00

08005a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	; 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f1c3 0307 	rsb	r3, r3, #7
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	bf28      	it	cs
 8005a9a:	2304      	movcs	r3, #4
 8005a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	2b06      	cmp	r3, #6
 8005aa4:	d902      	bls.n	8005aac <NVIC_EncodePriority+0x30>
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3b03      	subs	r3, #3
 8005aaa:	e000      	b.n	8005aae <NVIC_EncodePriority+0x32>
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43da      	mvns	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	401a      	ands	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	43d9      	mvns	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad4:	4313      	orrs	r3, r2
         );
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3724      	adds	r7, #36	; 0x24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af4:	d301      	bcc.n	8005afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005af6:	2301      	movs	r3, #1
 8005af8:	e00f      	b.n	8005b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <SysTick_Config+0x40>)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b02:	210f      	movs	r1, #15
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	f7ff ff8e 	bl	8005a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <SysTick_Config+0x40>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b12:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <SysTick_Config+0x40>)
 8005b14:	2207      	movs	r2, #7
 8005b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	e000e010 	.word	0xe000e010

08005b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ff29 	bl	8005988 <__NVIC_SetPriorityGrouping>
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	4603      	mov	r3, r0
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b4c:	f7ff ff40 	bl	80059d0 <__NVIC_GetPriorityGrouping>
 8005b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	6978      	ldr	r0, [r7, #20]
 8005b58:	f7ff ff90 	bl	8005a7c <NVIC_EncodePriority>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b62:	4611      	mov	r1, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff ff5f 	bl	8005a28 <__NVIC_SetPriority>
}
 8005b6a:	bf00      	nop
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	4603      	mov	r3, r0
 8005b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff ff33 	bl	80059ec <__NVIC_EnableIRQ>
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff ffa4 	bl	8005ae4 <SysTick_Config>
 8005b9c:	4603      	mov	r3, r0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e08d      	b.n	8005cd6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_DMA_Init+0x138>)
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d80f      	bhi.n	8005be6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b45      	ldr	r3, [pc, #276]	; (8005ce4 <HAL_DMA_Init+0x13c>)
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a45      	ldr	r2, [pc, #276]	; (8005ce8 <HAL_DMA_Init+0x140>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	009a      	lsls	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a42      	ldr	r2, [pc, #264]	; (8005cec <HAL_DMA_Init+0x144>)
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
 8005be4:	e00e      	b.n	8005c04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <HAL_DMA_Init+0x148>)
 8005bee:	4413      	add	r3, r2
 8005bf0:	4a3d      	ldr	r2, [pc, #244]	; (8005ce8 <HAL_DMA_Init+0x140>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	091b      	lsrs	r3, r3, #4
 8005bf8:	009a      	lsls	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a3c      	ldr	r2, [pc, #240]	; (8005cf4 <HAL_DMA_Init+0x14c>)
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa58 	bl	800610c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c64:	d102      	bne.n	8005c6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c80:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d010      	beq.n	8005cac <HAL_DMA_Init+0x104>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d80c      	bhi.n	8005cac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa78 	bl	8006188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	e008      	b.n	8005cbe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40020407 	.word	0x40020407
 8005ce4:	bffdfff8 	.word	0xbffdfff8
 8005ce8:	cccccccd 	.word	0xcccccccd
 8005cec:	40020000 	.word	0x40020000
 8005cf0:	bffdfbf8 	.word	0xbffdfbf8
 8005cf4:	40020400 	.word	0x40020400

08005cf8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_DMA_Start_IT+0x20>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e066      	b.n	8005de6 <HAL_DMA_Start_IT+0xee>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d155      	bne.n	8005dd8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f99d 	bl	8006090 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 020e 	orr.w	r2, r2, #14
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e00f      	b.n	8005d90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0204 	bic.w	r2, r2, #4
 8005d7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 020a 	orr.w	r2, r2, #10
 8005d8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e005      	b.n	8005de4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
 8005de2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d005      	beq.n	8005e12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
 8005e10:	e037      	b.n	8005e82 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 020e 	bic.w	r2, r2, #14
 8005e20:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e30:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f003 021f 	and.w	r2, r3, #31
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2101      	movs	r1, #1
 8005e50:	fa01 f202 	lsl.w	r2, r1, r2
 8005e54:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e5e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00c      	beq.n	8005e82 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e76:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e80:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d026      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x7a>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d021      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d107      	bne.n	8005ef4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0204 	bic.w	r2, r2, #4
 8005ef2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef8:	f003 021f 	and.w	r2, r3, #31
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2104      	movs	r1, #4
 8005f02:	fa01 f202 	lsl.w	r2, r1, r2
 8005f06:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d071      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f18:	e06c      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2202      	movs	r2, #2
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d02e      	beq.n	8005f8c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d029      	beq.n	8005f8c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 020a 	bic.w	r2, r2, #10
 8005f54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f62:	f003 021f 	and.w	r2, r3, #31
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d038      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f8a:	e033      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	2208      	movs	r2, #8
 8005f96:	409a      	lsls	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d02a      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d025      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 020e 	bic.w	r2, r2, #14
 8005fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f003 021f 	and.w	r2, r3, #31
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
}
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	460b      	mov	r3, r1
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_DMA_RegisterCallback+0x20>
 800601c:	2302      	movs	r3, #2
 800601e:	e031      	b.n	8006084 <HAL_DMA_RegisterCallback+0x84>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d120      	bne.n	8006076 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d81a      	bhi.n	8006070 <HAL_DMA_RegisterCallback+0x70>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <HAL_DMA_RegisterCallback+0x40>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006051 	.word	0x08006051
 8006044:	08006059 	.word	0x08006059
 8006048:	08006061 	.word	0x08006061
 800604c:	08006069 	.word	0x08006069
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8006056:	e010      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800605e:	e00c      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8006066:	e008      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800606e:	e004      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
        break;
 8006074:	e001      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80060a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f003 021f 	and.w	r2, r3, #31
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2101      	movs	r1, #1
 80060c8:	fa01 f202 	lsl.w	r2, r1, r2
 80060cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d108      	bne.n	80060f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060ee:	e007      	b.n	8006100 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
}
 8006100:	bf00      	nop
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800611c:	429a      	cmp	r2, r3
 800611e:	d802      	bhi.n	8006126 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e001      	b.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006128:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	3b08      	subs	r3, #8
 8006136:	4a12      	ldr	r2, [pc, #72]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	009a      	lsls	r2, r3, #2
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a0b      	ldr	r2, [pc, #44]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006156:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2201      	movs	r2, #1
 8006160:	409a      	lsls	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40020407 	.word	0x40020407
 8006178:	40020800 	.word	0x40020800
 800617c:	40020820 	.word	0x40020820
 8006180:	cccccccd 	.word	0xcccccccd
 8006184:	40020880 	.word	0x40020880

08006188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a08      	ldr	r2, [pc, #32]	; (80061cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061aa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2201      	movs	r2, #1
 80061b6:	409a      	lsls	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	1000823f 	.word	0x1000823f
 80061cc:	40020940 	.word	0x40020940

080061d0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01a      	beq.n	800621e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006200:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	2b00      	cmp	r3, #0
 8006224:	d022      	beq.n	800626c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01a      	beq.n	800626c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006244:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800624e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
      }
    }
  }
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006282:	e15a      	b.n	800653a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	2101      	movs	r1, #1
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	4013      	ands	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 814c 	beq.w	8006534 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d005      	beq.n	80062b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d130      	bne.n	8006316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	2203      	movs	r2, #3
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43db      	mvns	r3, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4013      	ands	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062ea:	2201      	movs	r2, #1
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43db      	mvns	r3, r3
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	091b      	lsrs	r3, r3, #4
 8006300:	f003 0201 	and.w	r2, r3, #1
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b03      	cmp	r3, #3
 8006320:	d017      	beq.n	8006352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	2203      	movs	r2, #3
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43db      	mvns	r3, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4013      	ands	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	fa02 f303 	lsl.w	r3, r2, r3
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d123      	bne.n	80063a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	08da      	lsrs	r2, r3, #3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3208      	adds	r2, #8
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	220f      	movs	r2, #15
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4013      	ands	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	08da      	lsrs	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3208      	adds	r2, #8
 80063a0:	6939      	ldr	r1, [r7, #16]
 80063a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	2203      	movs	r2, #3
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4013      	ands	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f003 0203 	and.w	r2, r3, #3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a6 	beq.w	8006534 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e8:	4b5b      	ldr	r3, [pc, #364]	; (8006558 <HAL_GPIO_Init+0x2e4>)
 80063ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ec:	4a5a      	ldr	r2, [pc, #360]	; (8006558 <HAL_GPIO_Init+0x2e4>)
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	6613      	str	r3, [r2, #96]	; 0x60
 80063f4:	4b58      	ldr	r3, [pc, #352]	; (8006558 <HAL_GPIO_Init+0x2e4>)
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006400:	4a56      	ldr	r2, [pc, #344]	; (800655c <HAL_GPIO_Init+0x2e8>)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	089b      	lsrs	r3, r3, #2
 8006406:	3302      	adds	r3, #2
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	220f      	movs	r2, #15
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	43db      	mvns	r3, r3
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4013      	ands	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800642a:	d01f      	beq.n	800646c <HAL_GPIO_Init+0x1f8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a4c      	ldr	r2, [pc, #304]	; (8006560 <HAL_GPIO_Init+0x2ec>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d019      	beq.n	8006468 <HAL_GPIO_Init+0x1f4>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a4b      	ldr	r2, [pc, #300]	; (8006564 <HAL_GPIO_Init+0x2f0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d013      	beq.n	8006464 <HAL_GPIO_Init+0x1f0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a4a      	ldr	r2, [pc, #296]	; (8006568 <HAL_GPIO_Init+0x2f4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00d      	beq.n	8006460 <HAL_GPIO_Init+0x1ec>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a49      	ldr	r2, [pc, #292]	; (800656c <HAL_GPIO_Init+0x2f8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <HAL_GPIO_Init+0x1e8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a48      	ldr	r2, [pc, #288]	; (8006570 <HAL_GPIO_Init+0x2fc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d101      	bne.n	8006458 <HAL_GPIO_Init+0x1e4>
 8006454:	2305      	movs	r3, #5
 8006456:	e00a      	b.n	800646e <HAL_GPIO_Init+0x1fa>
 8006458:	2306      	movs	r3, #6
 800645a:	e008      	b.n	800646e <HAL_GPIO_Init+0x1fa>
 800645c:	2304      	movs	r3, #4
 800645e:	e006      	b.n	800646e <HAL_GPIO_Init+0x1fa>
 8006460:	2303      	movs	r3, #3
 8006462:	e004      	b.n	800646e <HAL_GPIO_Init+0x1fa>
 8006464:	2302      	movs	r3, #2
 8006466:	e002      	b.n	800646e <HAL_GPIO_Init+0x1fa>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <HAL_GPIO_Init+0x1fa>
 800646c:	2300      	movs	r3, #0
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	f002 0203 	and.w	r2, r2, #3
 8006474:	0092      	lsls	r2, r2, #2
 8006476:	4093      	lsls	r3, r2
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800647e:	4937      	ldr	r1, [pc, #220]	; (800655c <HAL_GPIO_Init+0x2e8>)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3302      	adds	r3, #2
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800648c:	4b39      	ldr	r3, [pc, #228]	; (8006574 <HAL_GPIO_Init+0x300>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	43db      	mvns	r3, r3
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4013      	ands	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064b0:	4a30      	ldr	r2, [pc, #192]	; (8006574 <HAL_GPIO_Init+0x300>)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <HAL_GPIO_Init+0x300>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	43db      	mvns	r3, r3
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4013      	ands	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80064da:	4a26      	ldr	r2, [pc, #152]	; (8006574 <HAL_GPIO_Init+0x300>)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80064e0:	4b24      	ldr	r3, [pc, #144]	; (8006574 <HAL_GPIO_Init+0x300>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4013      	ands	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006504:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <HAL_GPIO_Init+0x300>)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800650a:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <HAL_GPIO_Init+0x300>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	43db      	mvns	r3, r3
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4013      	ands	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800652e:	4a11      	ldr	r2, [pc, #68]	; (8006574 <HAL_GPIO_Init+0x300>)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f ae9d 	bne.w	8006284 <HAL_GPIO_Init+0x10>
  }
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40021000 	.word	0x40021000
 800655c:	40010000 	.word	0x40010000
 8006560:	48000400 	.word	0x48000400
 8006564:	48000800 	.word	0x48000800
 8006568:	48000c00 	.word	0x48000c00
 800656c:	48001000 	.word	0x48001000
 8006570:	48001400 	.word	0x48001400
 8006574:	40010400 	.word	0x40010400

08006578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	807b      	strh	r3, [r7, #2]
 8006584:	4613      	mov	r3, r2
 8006586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006588:	787b      	ldrb	r3, [r7, #1]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006594:	e002      	b.n	800659c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006596:	887a      	ldrh	r2, [r7, #2]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d141      	bne.n	800663a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065b6:	4b4b      	ldr	r3, [pc, #300]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c2:	d131      	bne.n	8006628 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065c4:	4b47      	ldr	r3, [pc, #284]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ca:	4a46      	ldr	r2, [pc, #280]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065dc:	4a41      	ldr	r2, [pc, #260]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065e4:	4b40      	ldr	r3, [pc, #256]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2232      	movs	r2, #50	; 0x32
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	4a3f      	ldr	r2, [pc, #252]	; (80066ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	0c9b      	lsrs	r3, r3, #18
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065fa:	e002      	b.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b01      	subs	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006602:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660e:	d102      	bne.n	8006616 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f2      	bne.n	80065fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006616:	4b33      	ldr	r3, [pc, #204]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006622:	d158      	bne.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e057      	b.n	80066d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006628:	4b2e      	ldr	r3, [pc, #184]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662e:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006638:	e04d      	b.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006640:	d141      	bne.n	80066c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006642:	4b28      	ldr	r3, [pc, #160]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d131      	bne.n	80066b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006650:	4b24      	ldr	r3, [pc, #144]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006656:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006660:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006668:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800666a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800666e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006670:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2232      	movs	r2, #50	; 0x32
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	0c9b      	lsrs	r3, r3, #18
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006686:	e002      	b.n	800668e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3b01      	subs	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800668e:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669a:	d102      	bne.n	80066a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f2      	bne.n	8006688 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066a2:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ae:	d112      	bne.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e011      	b.n	80066d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ba:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066c4:	e007      	b.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066c6:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066ce:	4a05      	ldr	r2, [pc, #20]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40007000 	.word	0x40007000
 80066e8:	20000024 	.word	0x20000024
 80066ec:	431bde83 	.word	0x431bde83

080066f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e306      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d075      	beq.n	80067fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800670e:	4b97      	ldr	r3, [pc, #604]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
 8006716:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006718:	4b94      	ldr	r3, [pc, #592]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d102      	bne.n	800672e <HAL_RCC_OscConfig+0x3e>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d002      	beq.n	8006734 <HAL_RCC_OscConfig+0x44>
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d10b      	bne.n	800674c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006734:	4b8d      	ldr	r3, [pc, #564]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05b      	beq.n	80067f8 <HAL_RCC_OscConfig+0x108>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d157      	bne.n	80067f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e2e1      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d106      	bne.n	8006764 <HAL_RCC_OscConfig+0x74>
 8006756:	4b85      	ldr	r3, [pc, #532]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a84      	ldr	r2, [pc, #528]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800675c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e01d      	b.n	80067a0 <HAL_RCC_OscConfig+0xb0>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800676c:	d10c      	bne.n	8006788 <HAL_RCC_OscConfig+0x98>
 800676e:	4b7f      	ldr	r3, [pc, #508]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a7e      	ldr	r2, [pc, #504]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b7c      	ldr	r3, [pc, #496]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7b      	ldr	r2, [pc, #492]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e00b      	b.n	80067a0 <HAL_RCC_OscConfig+0xb0>
 8006788:	4b78      	ldr	r3, [pc, #480]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a77      	ldr	r2, [pc, #476]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800678e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b75      	ldr	r3, [pc, #468]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a74      	ldr	r2, [pc, #464]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800679a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800679e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d013      	beq.n	80067d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fc fefe 	bl	80035a8 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fc fefa 	bl	80035a8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e2a6      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067c2:	4b6a      	ldr	r3, [pc, #424]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0xc0>
 80067ce:	e014      	b.n	80067fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fc feea 	bl	80035a8 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d8:	f7fc fee6 	bl	80035a8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b64      	cmp	r3, #100	; 0x64
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e292      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067ea:	4b60      	ldr	r3, [pc, #384]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0xe8>
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d075      	beq.n	80068f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006806:	4b59      	ldr	r3, [pc, #356]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006810:	4b56      	ldr	r3, [pc, #344]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b0c      	cmp	r3, #12
 800681e:	d102      	bne.n	8006826 <HAL_RCC_OscConfig+0x136>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d002      	beq.n	800682c <HAL_RCC_OscConfig+0x13c>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d11f      	bne.n	800686c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800682c:	4b4f      	ldr	r3, [pc, #316]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_OscConfig+0x154>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e265      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006844:	4b49      	ldr	r3, [pc, #292]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	061b      	lsls	r3, r3, #24
 8006852:	4946      	ldr	r1, [pc, #280]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006858:	4b45      	ldr	r3, [pc, #276]	; (8006970 <HAL_RCC_OscConfig+0x280>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7fc fe57 	bl	8003510 <HAL_InitTick>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d043      	beq.n	80068f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e251      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d023      	beq.n	80068bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006874:	4b3d      	ldr	r3, [pc, #244]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3c      	ldr	r2, [pc, #240]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800687a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fc fe92 	bl	80035a8 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006888:	f7fc fe8e 	bl	80035a8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e23a      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800689a:	4b34      	ldr	r3, [pc, #208]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a6:	4b31      	ldr	r3, [pc, #196]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	492d      	ldr	r1, [pc, #180]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	604b      	str	r3, [r1, #4]
 80068ba:	e01a      	b.n	80068f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068bc:	4b2b      	ldr	r3, [pc, #172]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2a      	ldr	r2, [pc, #168]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80068c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fc fe6e 	bl	80035a8 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d0:	f7fc fe6a 	bl	80035a8 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e216      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x1e0>
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d041      	beq.n	8006982 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01c      	beq.n	8006940 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800690c:	4a17      	ldr	r2, [pc, #92]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fc fe47 	bl	80035a8 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800691e:	f7fc fe43 	bl	80035a8 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1ef      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <HAL_RCC_OscConfig+0x22e>
 800693e:	e020      	b.n	8006982 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <HAL_RCC_OscConfig+0x27c>)
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fc fe2a 	bl	80035a8 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006956:	e00d      	b.n	8006974 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006958:	f7fc fe26 	bl	80035a8 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d906      	bls.n	8006974 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e1d2      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000
 8006970:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006974:	4b8c      	ldr	r3, [pc, #560]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1ea      	bne.n	8006958 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a6 	beq.w	8006adc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006994:	4b84      	ldr	r3, [pc, #528]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_OscConfig+0x2b4>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x2b6>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069aa:	4b7f      	ldr	r3, [pc, #508]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	4a7e      	ldr	r2, [pc, #504]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 80069b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b4:	6593      	str	r3, [r2, #88]	; 0x58
 80069b6:	4b7c      	ldr	r3, [pc, #496]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069c2:	2301      	movs	r3, #1
 80069c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c6:	4b79      	ldr	r3, [pc, #484]	; (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d118      	bne.n	8006a04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d2:	4b76      	ldr	r3, [pc, #472]	; (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a75      	ldr	r2, [pc, #468]	; (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069de:	f7fc fde3 	bl	80035a8 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fc fddf 	bl	80035a8 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e18b      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f8:	4b6c      	ldr	r3, [pc, #432]	; (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d108      	bne.n	8006a1e <HAL_RCC_OscConfig+0x32e>
 8006a0c:	4b66      	ldr	r3, [pc, #408]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	4a65      	ldr	r2, [pc, #404]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a1c:	e024      	b.n	8006a68 <HAL_RCC_OscConfig+0x378>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b05      	cmp	r3, #5
 8006a24:	d110      	bne.n	8006a48 <HAL_RCC_OscConfig+0x358>
 8006a26:	4b60      	ldr	r3, [pc, #384]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2c:	4a5e      	ldr	r2, [pc, #376]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a2e:	f043 0304 	orr.w	r3, r3, #4
 8006a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a36:	4b5c      	ldr	r3, [pc, #368]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3c:	4a5a      	ldr	r2, [pc, #360]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a46:	e00f      	b.n	8006a68 <HAL_RCC_OscConfig+0x378>
 8006a48:	4b57      	ldr	r3, [pc, #348]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	4a56      	ldr	r2, [pc, #344]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a58:	4b53      	ldr	r3, [pc, #332]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	4a52      	ldr	r2, [pc, #328]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a60:	f023 0304 	bic.w	r3, r3, #4
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a70:	f7fc fd9a 	bl	80035a8 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a76:	e00a      	b.n	8006a8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a78:	f7fc fd96 	bl	80035a8 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e140      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8e:	4b46      	ldr	r3, [pc, #280]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0ed      	beq.n	8006a78 <HAL_RCC_OscConfig+0x388>
 8006a9c:	e015      	b.n	8006aca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9e:	f7fc fd83 	bl	80035a8 <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aa4:	e00a      	b.n	8006abc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa6:	f7fc fd7f 	bl	80035a8 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e129      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006abc:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1ed      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d105      	bne.n	8006adc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad0:	4b35      	ldr	r3, [pc, #212]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad4:	4a34      	ldr	r2, [pc, #208]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03c      	beq.n	8006b62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01c      	beq.n	8006b2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006af0:	4b2d      	ldr	r3, [pc, #180]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006af6:	4a2c      	ldr	r2, [pc, #176]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fc fd52 	bl	80035a8 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b08:	f7fc fd4e 	bl	80035a8 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0fa      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b1a:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ef      	beq.n	8006b08 <HAL_RCC_OscConfig+0x418>
 8006b28:	e01b      	b.n	8006b62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b2a:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fc fd35 	bl	80035a8 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b42:	f7fc fd31 	bl	80035a8 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0dd      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b54:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80d1 	beq.w	8006d0e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 030c 	and.w	r3, r3, #12
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	f000 808b 	beq.w	8006c90 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d15e      	bne.n	8006c40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8e:	f7fc fd0b 	bl	80035a8 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b94:	e00c      	b.n	8006bb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b96:	f7fc fd07 	bl	80035a8 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d905      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e0b3      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb0:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ec      	bne.n	8006b96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bbc:	4b56      	ldr	r3, [pc, #344]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	4b56      	ldr	r3, [pc, #344]	; (8006d1c <HAL_RCC_OscConfig+0x62c>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6a11      	ldr	r1, [r2, #32]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bcc:	3a01      	subs	r2, #1
 8006bce:	0112      	lsls	r2, r2, #4
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006bd6:	0212      	lsls	r2, r2, #8
 8006bd8:	4311      	orrs	r1, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006bde:	0852      	lsrs	r2, r2, #1
 8006be0:	3a01      	subs	r2, #1
 8006be2:	0552      	lsls	r2, r2, #21
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bea:	0852      	lsrs	r2, r2, #1
 8006bec:	3a01      	subs	r2, #1
 8006bee:	0652      	lsls	r2, r2, #25
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bf6:	06d2      	lsls	r2, r2, #27
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	4947      	ldr	r1, [pc, #284]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c00:	4b45      	ldr	r3, [pc, #276]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a44      	ldr	r2, [pc, #272]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c0c:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	4a41      	ldr	r2, [pc, #260]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c18:	f7fc fcc6 	bl	80035a8 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fc fcc2 	bl	80035a8 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e06e      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c32:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0x530>
 8006c3e:	e066      	b.n	8006d0e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c40:	4b35      	ldr	r3, [pc, #212]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a34      	ldr	r2, [pc, #208]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c4c:	4b32      	ldr	r3, [pc, #200]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a31      	ldr	r2, [pc, #196]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c58:	4b2f      	ldr	r3, [pc, #188]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a2e      	ldr	r2, [pc, #184]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fc fc9e 	bl	80035a8 <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c70:	f7fc fc9a 	bl	80035a8 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e046      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c82:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x580>
 8006c8e:	e03e      	b.n	8006d0e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e039      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c9c:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <HAL_RCC_OscConfig+0x628>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f003 0203 	and.w	r2, r3, #3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d12c      	bne.n	8006d0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d123      	bne.n	8006d0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d11b      	bne.n	8006d0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d113      	bne.n	8006d0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d109      	bne.n	8006d0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	3b01      	subs	r3, #1
 8006d04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d001      	beq.n	8006d0e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	019f800c 	.word	0x019f800c

08006d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e11e      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d38:	4b91      	ldr	r3, [pc, #580]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d910      	bls.n	8006d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b8e      	ldr	r3, [pc, #568]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	498c      	ldr	r1, [pc, #560]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d56:	4b8a      	ldr	r3, [pc, #552]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d001      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e106      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d073      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d129      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7c:	4b81      	ldr	r3, [pc, #516]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0f4      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d8c:	f000 f992 	bl	80070b4 <RCC_GetSysClockFreqFromPLLSource>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4a7c      	ldr	r2, [pc, #496]	; (8006f88 <HAL_RCC_ClockConfig+0x268>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d93f      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d9a:	4b7a      	ldr	r3, [pc, #488]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d033      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12f      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dba:	4b72      	ldr	r3, [pc, #456]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc2:	4a70      	ldr	r2, [pc, #448]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e024      	b.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd8:	4b6a      	ldr	r3, [pc, #424]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0c6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006df8:	f000 f8ce 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4a61      	ldr	r2, [pc, #388]	; (8006f88 <HAL_RCC_ClockConfig+0x268>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d909      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e06:	4b5f      	ldr	r3, [pc, #380]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e0e:	4a5d      	ldr	r2, [pc, #372]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e16:	2380      	movs	r3, #128	; 0x80
 8006e18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e1a:	4b5a      	ldr	r3, [pc, #360]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 0203 	bic.w	r2, r3, #3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	4957      	ldr	r1, [pc, #348]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2c:	f7fc fbbc 	bl	80035a8 <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e34:	f7fc fbb8 	bl	80035a8 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e095      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4a:	4b4e      	ldr	r3, [pc, #312]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 020c 	and.w	r2, r3, #12
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d1eb      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e74:	4b43      	ldr	r3, [pc, #268]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a42      	ldr	r2, [pc, #264]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e94:	4a3b      	ldr	r2, [pc, #236]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b39      	ldr	r3, [pc, #228]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4936      	ldr	r1, [pc, #216]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006eb6:	4b33      	ldr	r3, [pc, #204]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4a32      	ldr	r2, [pc, #200]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d21d      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 020f 	bic.w	r2, r3, #15
 8006ed8:	4929      	ldr	r1, [pc, #164]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ee0:	f7fc fb62 	bl	80035a8 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee8:	f7fc fb5e 	bl	80035a8 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e03b      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1ed      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f18:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4917      	ldr	r1, [pc, #92]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	490f      	ldr	r1, [pc, #60]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f4a:	f000 f825 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	490c      	ldr	r1, [pc, #48]	; (8006f8c <HAL_RCC_ClockConfig+0x26c>)
 8006f5c:	5ccb      	ldrb	r3, [r1, r3]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	fa22 f303 	lsr.w	r3, r2, r3
 8006f66:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x270>)
 8006f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <HAL_RCC_ClockConfig+0x274>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fc face 	bl	8003510 <HAL_InitTick>
 8006f74:	4603      	mov	r3, r0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40022000 	.word	0x40022000
 8006f84:	40021000 	.word	0x40021000
 8006f88:	04c4b400 	.word	0x04c4b400
 8006f8c:	0800a3ac 	.word	0x0800a3ac
 8006f90:	20000024 	.word	0x20000024
 8006f94:	20000028 	.word	0x20000028

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006faa:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	e047      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fb0:	4b27      	ldr	r3, [pc, #156]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fbc:	4b26      	ldr	r3, [pc, #152]	; (8007058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	e03e      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006fc2:	4b23      	ldr	r3, [pc, #140]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d136      	bne.n	800703c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fce:	4b20      	ldr	r3, [pc, #128]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d10c      	bne.n	8007006 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fec:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	4a16      	ldr	r2, [pc, #88]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff6:	68d2      	ldr	r2, [r2, #12]
 8006ff8:	0a12      	lsrs	r2, r2, #8
 8006ffa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	617b      	str	r3, [r7, #20]
      break;
 8007004:	e00c      	b.n	8007020 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007006:	4a13      	ldr	r2, [pc, #76]	; (8007054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	4a10      	ldr	r2, [pc, #64]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007010:	68d2      	ldr	r2, [r2, #12]
 8007012:	0a12      	lsrs	r2, r2, #8
 8007014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007018:	fb02 f303 	mul.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]
      break;
 800701e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	0e5b      	lsrs	r3, r3, #25
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e001      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007040:	693b      	ldr	r3, [r7, #16]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40021000 	.word	0x40021000
 8007054:	00f42400 	.word	0x00f42400
 8007058:	007270e0 	.word	0x007270e0

0800705c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <HAL_RCC_EnableCSS+0x1c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a04      	ldr	r2, [pc, #16]	; (8007078 <HAL_RCC_EnableCSS+0x1c>)
 8007066:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40021000 	.word	0x40021000

0800707c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708c:	d105      	bne.n	800709a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800708e:	f000 f809 	bl	80070a4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007098:	621a      	str	r2, [r3, #32]
  }
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40021000 	.word	0x40021000

080070a4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ba:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070c4:	4b1b      	ldr	r3, [pc, #108]	; (8007134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	091b      	lsrs	r3, r3, #4
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d10c      	bne.n	80070f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070d8:	4a17      	ldr	r2, [pc, #92]	; (8007138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e0:	4a14      	ldr	r2, [pc, #80]	; (8007134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070e2:	68d2      	ldr	r2, [r2, #12]
 80070e4:	0a12      	lsrs	r2, r2, #8
 80070e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	617b      	str	r3, [r7, #20]
    break;
 80070f0:	e00c      	b.n	800710c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070f2:	4a12      	ldr	r2, [pc, #72]	; (800713c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	4a0e      	ldr	r2, [pc, #56]	; (8007134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070fc:	68d2      	ldr	r2, [r2, #12]
 80070fe:	0a12      	lsrs	r2, r2, #8
 8007100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007104:	fb02 f303 	mul.w	r3, r2, r3
 8007108:	617b      	str	r3, [r7, #20]
    break;
 800710a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	0e5b      	lsrs	r3, r3, #25
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	3301      	adds	r3, #1
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007126:	687b      	ldr	r3, [r7, #4]
}
 8007128:	4618      	mov	r0, r3
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	40021000 	.word	0x40021000
 8007138:	007270e0 	.word	0x007270e0
 800713c:	00f42400 	.word	0x00f42400

08007140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007148:	2300      	movs	r3, #0
 800714a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800714c:	2300      	movs	r3, #0
 800714e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8098 	beq.w	800728e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800715e:	2300      	movs	r3, #0
 8007160:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007162:	4b43      	ldr	r3, [pc, #268]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800716e:	4b40      	ldr	r3, [pc, #256]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007172:	4a3f      	ldr	r2, [pc, #252]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007178:	6593      	str	r3, [r2, #88]	; 0x58
 800717a:	4b3d      	ldr	r3, [pc, #244]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007186:	2301      	movs	r3, #1
 8007188:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800718a:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a39      	ldr	r2, [pc, #228]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007196:	f7fc fa07 	bl	80035a8 <HAL_GetTick>
 800719a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800719c:	e009      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800719e:	f7fc fa03 	bl	80035a8 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d902      	bls.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	74fb      	strb	r3, [r7, #19]
        break;
 80071b0:	e005      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b2:	4b30      	ldr	r3, [pc, #192]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ef      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80071be:	7cfb      	ldrb	r3, [r7, #19]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d159      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071c4:	4b2a      	ldr	r3, [pc, #168]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01e      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d019      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071e0:	4b23      	ldr	r3, [pc, #140]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071ec:	4b20      	ldr	r3, [pc, #128]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007202:	4a1b      	ldr	r2, [pc, #108]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721e:	f7fc f9c3 	bl	80035a8 <HAL_GetTick>
 8007222:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007224:	e00b      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f7fc f9bf 	bl	80035a8 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	f241 3288 	movw	r2, #5000	; 0x1388
 8007234:	4293      	cmp	r3, r2
 8007236:	d902      	bls.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	74fb      	strb	r3, [r7, #19]
            break;
 800723c:	e006      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723e:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0ec      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800724c:	7cfb      	ldrb	r3, [r7, #19]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10b      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	4903      	ldr	r1, [pc, #12]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007268:	e008      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800726a:	7cfb      	ldrb	r3, [r7, #19]
 800726c:	74bb      	strb	r3, [r7, #18]
 800726e:	e005      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007270:	40021000 	.word	0x40021000
 8007274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	7cfb      	ldrb	r3, [r7, #19]
 800727a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800727c:	7c7b      	ldrb	r3, [r7, #17]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d105      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007282:	4ba7      	ldr	r3, [pc, #668]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	4aa6      	ldr	r2, [pc, #664]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800728c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800729a:	4ba1      	ldr	r3, [pc, #644]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f023 0203 	bic.w	r2, r3, #3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	499d      	ldr	r1, [pc, #628]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072bc:	4b98      	ldr	r3, [pc, #608]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c2:	f023 020c 	bic.w	r2, r3, #12
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	4995      	ldr	r1, [pc, #596]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072de:	4b90      	ldr	r3, [pc, #576]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	498c      	ldr	r1, [pc, #560]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007300:	4b87      	ldr	r3, [pc, #540]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	4984      	ldr	r1, [pc, #528]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007322:	4b7f      	ldr	r3, [pc, #508]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	497b      	ldr	r1, [pc, #492]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007344:	4b76      	ldr	r3, [pc, #472]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	4973      	ldr	r1, [pc, #460]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007366:	4b6e      	ldr	r3, [pc, #440]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	496a      	ldr	r1, [pc, #424]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007388:	4b65      	ldr	r3, [pc, #404]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	4962      	ldr	r1, [pc, #392]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073aa:	4b5d      	ldr	r3, [pc, #372]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	4959      	ldr	r1, [pc, #356]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073cc:	4b54      	ldr	r3, [pc, #336]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073d2:	f023 0203 	bic.w	r2, r3, #3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	4951      	ldr	r1, [pc, #324]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073ee:	4b4c      	ldr	r3, [pc, #304]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4948      	ldr	r1, [pc, #288]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800740c:	2b00      	cmp	r3, #0
 800740e:	d015      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007410:	4b43      	ldr	r3, [pc, #268]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	4940      	ldr	r1, [pc, #256]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007420:	4313      	orrs	r3, r2
 8007422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800742e:	d105      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007430:	4b3b      	ldr	r3, [pc, #236]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	4a3a      	ldr	r2, [pc, #232]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800743a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	4932      	ldr	r1, [pc, #200]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007466:	d105      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007468:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a2c      	ldr	r2, [pc, #176]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007472:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d015      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007486:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	4924      	ldr	r1, [pc, #144]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800749e:	d105      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074a0:	4b1f      	ldr	r3, [pc, #124]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d015      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074b8:	4b19      	ldr	r3, [pc, #100]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c6:	4916      	ldr	r1, [pc, #88]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074d6:	d105      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4a10      	ldr	r2, [pc, #64]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d019      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	4908      	ldr	r1, [pc, #32]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800750e:	d109      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007510:	4b03      	ldr	r3, [pc, #12]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4a02      	ldr	r2, [pc, #8]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800751a:	60d3      	str	r3, [r2, #12]
 800751c:	e002      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800751e:	bf00      	nop
 8007520:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007530:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	4926      	ldr	r1, [pc, #152]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800754e:	d105      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007550:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a20      	ldr	r2, [pc, #128]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007568:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007576:	4918      	ldr	r1, [pc, #96]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007586:	d105      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4a12      	ldr	r2, [pc, #72]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800758e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007592:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075a0:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ae:	490a      	ldr	r1, [pc, #40]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075be:	d105      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80075cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40021000 	.word	0x40021000

080075dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e0c1      	b.n	8007772 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d108      	bne.n	8007608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fe:	d009      	beq.n	8007614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	61da      	str	r2, [r3, #28]
 8007606:	e005      	b.n	8007614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12a      	bne.n	800767c <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a52      	ldr	r2, [pc, #328]	; (800777c <HAL_SPI_Init+0x1a0>)
 8007632:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a52      	ldr	r2, [pc, #328]	; (8007780 <HAL_SPI_Init+0x1a4>)
 8007638:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a51      	ldr	r2, [pc, #324]	; (8007784 <HAL_SPI_Init+0x1a8>)
 800763e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a51      	ldr	r2, [pc, #324]	; (8007788 <HAL_SPI_Init+0x1ac>)
 8007644:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a50      	ldr	r2, [pc, #320]	; (800778c <HAL_SPI_Init+0x1b0>)
 800764a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a50      	ldr	r2, [pc, #320]	; (8007790 <HAL_SPI_Init+0x1b4>)
 8007650:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a4f      	ldr	r2, [pc, #316]	; (8007794 <HAL_SPI_Init+0x1b8>)
 8007656:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a4f      	ldr	r2, [pc, #316]	; (8007798 <HAL_SPI_Init+0x1bc>)
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a4b      	ldr	r2, [pc, #300]	; (800779c <HAL_SPI_Init+0x1c0>)
 800766e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800769c:	d902      	bls.n	80076a4 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e002      	b.n	80076aa <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80076a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80076b2:	d007      	beq.n	80076c4 <HAL_SPI_Init+0xe8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	ea42 0103 	orr.w	r1, r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	0c1b      	lsrs	r3, r3, #16
 8007720:	f003 0204 	and.w	r2, r3, #4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007740:	ea42 0103 	orr.w	r1, r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	080078ed 	.word	0x080078ed
 8007780:	08007901 	.word	0x08007901
 8007784:	08007915 	.word	0x08007915
 8007788:	08007929 	.word	0x08007929
 800778c:	0800793d 	.word	0x0800793d
 8007790:	08007951 	.word	0x08007951
 8007794:	08007965 	.word	0x08007965
 8007798:	08007979 	.word	0x08007979
 800779c:	0800242d 	.word	0x0800242d

080077a0 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	460b      	mov	r3, r1
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d107      	bne.n	80077c8 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e08b      	b.n	80078e0 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_SPI_RegisterCallback+0x36>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e084      	b.n	80078e0 <HAL_SPI_RegisterCallback+0x140>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d14e      	bne.n	8007888 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 80077ea:	7afb      	ldrb	r3, [r7, #11]
 80077ec:	2b09      	cmp	r3, #9
 80077ee:	d842      	bhi.n	8007876 <HAL_SPI_RegisterCallback+0xd6>
 80077f0:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <HAL_SPI_RegisterCallback+0x58>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007821 	.word	0x08007821
 80077fc:	08007829 	.word	0x08007829
 8007800:	08007831 	.word	0x08007831
 8007804:	08007839 	.word	0x08007839
 8007808:	08007841 	.word	0x08007841
 800780c:	08007849 	.word	0x08007849
 8007810:	08007851 	.word	0x08007851
 8007814:	08007859 	.word	0x08007859
 8007818:	08007863 	.word	0x08007863
 800781c:	0800786d 	.word	0x0800786d
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007826:	e056      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800782e:	e052      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007836:	e04e      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800783e:	e04a      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007846:	e046      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800784e:	e042      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007856:	e03e      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007860:	e039      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800786a:	e034      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007874:	e02f      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
        break;
 8007886:	e026      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d118      	bne.n	80078c6 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	2b08      	cmp	r3, #8
 8007898:	d002      	beq.n	80078a0 <HAL_SPI_RegisterCallback+0x100>
 800789a:	2b09      	cmp	r3, #9
 800789c:	d005      	beq.n	80078aa <HAL_SPI_RegisterCallback+0x10a>
 800789e:	e009      	b.n	80078b4 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80078a8:	e015      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80078b2:	e010      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
        break;
 80078c4:	e007      	b.n	80078d6 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e054      	b.n	8007a48 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d111      	bne.n	80079ce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f002 f8a0 	bl	8009af8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a23      	ldr	r2, [pc, #140]	; (8007a50 <HAL_TIM_Base_Init+0xc4>)
 80079c4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f001 f9eb 	bl	8008dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08003085 	.word	0x08003085

08007a54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e04c      	b.n	8007b06 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a26      	ldr	r2, [pc, #152]	; (8007b14 <HAL_TIM_Base_Start+0xc0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d022      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a86:	d01d      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a22      	ldr	r2, [pc, #136]	; (8007b18 <HAL_TIM_Base_Start+0xc4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d018      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a21      	ldr	r2, [pc, #132]	; (8007b1c <HAL_TIM_Base_Start+0xc8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d013      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1f      	ldr	r2, [pc, #124]	; (8007b20 <HAL_TIM_Base_Start+0xcc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00e      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <HAL_TIM_Base_Start+0xd0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d009      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <HAL_TIM_Base_Start+0xd4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d004      	beq.n	8007ac4 <HAL_TIM_Base_Start+0x70>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <HAL_TIM_Base_Start+0xd8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d115      	bne.n	8007af0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	4b19      	ldr	r3, [pc, #100]	; (8007b30 <HAL_TIM_Base_Start+0xdc>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d015      	beq.n	8007b02 <HAL_TIM_Base_Start+0xae>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007adc:	d011      	beq.n	8007b02 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aee:	e008      	b.n	8007b02 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e000      	b.n	8007b04 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40013400 	.word	0x40013400
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	40015000 	.word	0x40015000
 8007b30:	00010007 	.word	0x00010007

08007b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d001      	beq.n	8007b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e054      	b.n	8007bf6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d022      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b76:	d01d      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <HAL_TIM_Base_Start_IT+0xe4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x80>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <HAL_TIM_Base_Start_IT+0xe8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d115      	bne.n	8007be0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <HAL_TIM_Base_Start_IT+0xec>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b06      	cmp	r3, #6
 8007bc4:	d015      	beq.n	8007bf2 <HAL_TIM_Base_Start_IT+0xbe>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bcc:	d011      	beq.n	8007bf2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0201 	orr.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bde:	e008      	b.n	8007bf2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e000      	b.n	8007bf4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40000800 	.word	0x40000800
 8007c10:	40000c00 	.word	0x40000c00
 8007c14:	40013400 	.word	0x40013400
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40015000 	.word	0x40015000
 8007c20:	00010007 	.word	0x00010007

08007c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e054      	b.n	8007ce0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d111      	bne.n	8007c66 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 ff54 	bl	8009af8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a23      	ldr	r2, [pc, #140]	; (8007ce8 <HAL_TIM_PWM_Init+0xc4>)
 8007c5c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f001 f89f 	bl	8008dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	08007ced 	.word	0x08007ced

08007cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e054      	b.n	8007dbc <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d111      	bne.n	8007d42 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 fee6 	bl	8009af8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a23      	ldr	r2, [pc, #140]	; (8007dc4 <HAL_TIM_IC_Init+0xc4>)
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f001 f831 	bl	8008dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	08007dc9 	.word	0x08007dc9

08007dc8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e04c      	b.n	8007e8a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d111      	bne.n	8007e20 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fe77 	bl	8009af8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <HAL_TIM_OnePulse_Init+0xb8>)
 8007e16:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f000 ffc2 	bl	8008dbc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0208 	bic.w	r2, r2, #8
 8007e46:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6819      	ldr	r1, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	080032c9 	.word	0x080032c9

08007e98 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d108      	bne.n	8007eda <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d105      	bne.n	8007eda <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ece:	7b7b      	ldrb	r3, [r7, #13]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d102      	bne.n	8007eda <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed4:	7b3b      	ldrb	r3, [r7, #12]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d001      	beq.n	8007ede <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e049      	b.n	8007f72 <HAL_TIM_OnePulse_Start+0xda>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2201      	movs	r2, #1
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 fdd0 	bl	8009aac <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2201      	movs	r2, #1
 8007f12:	2104      	movs	r1, #4
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 fdc9 	bl	8009aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <HAL_TIM_OnePulse_Start+0xe4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d018      	beq.n	8007f56 <HAL_TIM_OnePulse_Start+0xbe>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a15      	ldr	r2, [pc, #84]	; (8007f80 <HAL_TIM_OnePulse_Start+0xe8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_TIM_OnePulse_Start+0xbe>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a14      	ldr	r2, [pc, #80]	; (8007f84 <HAL_TIM_OnePulse_Start+0xec>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <HAL_TIM_OnePulse_Start+0xbe>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <HAL_TIM_OnePulse_Start+0xf0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_TIM_OnePulse_Start+0xbe>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <HAL_TIM_OnePulse_Start+0xf4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_TIM_OnePulse_Start+0xbe>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <HAL_TIM_OnePulse_Start+0xf8>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_OnePulse_Start+0xc2>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <HAL_TIM_OnePulse_Start+0xc4>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <HAL_TIM_OnePulse_Start+0xd8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40013400 	.word	0x40013400
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400
 8007f8c:	40014800 	.word	0x40014800
 8007f90:	40015000 	.word	0x40015000

08007f94 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fbc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d108      	bne.n	8007fd6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d105      	bne.n	8007fd6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fca:	7b7b      	ldrb	r3, [r7, #13]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d102      	bne.n	8007fd6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fd0:	7b3b      	ldrb	r3, [r7, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d001      	beq.n	8007fda <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e059      	b.n	800808e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0202 	orr.w	r2, r2, #2
 8008008:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0204 	orr.w	r2, r2, #4
 8008018:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	2100      	movs	r1, #0
 8008022:	4618      	mov	r0, r3
 8008024:	f001 fd42 	bl	8009aac <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2201      	movs	r2, #1
 800802e:	2104      	movs	r1, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fd3b 	bl	8009aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a17      	ldr	r2, [pc, #92]	; (8008098 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a15      	ldr	r2, [pc, #84]	; (800809c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIM_OnePulse_Start_IT+0xde>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a14      	ldr	r2, [pc, #80]	; (80080a0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIM_OnePulse_Start_IT+0xde>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a11      	ldr	r2, [pc, #68]	; (80080a8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a0f      	ldr	r2, [pc, #60]	; (80080ac <HAL_TIM_OnePulse_Start_IT+0x118>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800808a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	40012c00 	.word	0x40012c00
 800809c:	40013400 	.word	0x40013400
 80080a0:	40014000 	.word	0x40014000
 80080a4:	40014400 	.word	0x40014400
 80080a8:	40014800 	.word	0x40014800
 80080ac:	40015000 	.word	0x40015000

080080b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d128      	bne.n	8008118 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d121      	bne.n	8008118 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f06f 0202 	mvn.w	r2, #2
 80080dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
 80080fc:	e009      	b.n	8008112 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0304 	and.w	r3, r3, #4
 8008122:	2b04      	cmp	r3, #4
 8008124:	d128      	bne.n	8008178 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b04      	cmp	r3, #4
 8008132:	d121      	bne.n	8008178 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0204 	mvn.w	r2, #4
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
 800815c:	e009      	b.n	8008172 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b08      	cmp	r3, #8
 8008184:	d128      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b08      	cmp	r3, #8
 8008192:	d121      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0208 	mvn.w	r2, #8
 800819c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2204      	movs	r2, #4
 80081a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
 80081bc:	e009      	b.n	80081d2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b10      	cmp	r3, #16
 80081e4:	d128      	bne.n	8008238 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b10      	cmp	r3, #16
 80081f2:	d121      	bne.n	8008238 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0210 	mvn.w	r2, #16
 80081fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2208      	movs	r2, #8
 8008202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
 800821c:	e009      	b.n	8008232 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b01      	cmp	r3, #1
 8008244:	d110      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b01      	cmp	r3, #1
 8008252:	d109      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f06f 0201 	mvn.w	r2, #1
 800825c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d110      	bne.n	8008298 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d109      	bne.n	8008298 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a6:	d110      	bne.n	80082ca <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d109      	bne.n	80082ca <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d4:	2b40      	cmp	r3, #64	; 0x40
 80082d6:	d110      	bne.n	80082fa <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d109      	bne.n	80082fa <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b20      	cmp	r3, #32
 8008306:	d110      	bne.n	800832a <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b20      	cmp	r3, #32
 8008314:	d109      	bne.n	800832a <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0220 	mvn.w	r2, #32
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008338:	d111      	bne.n	800835e <HAL_TIM_IRQHandler+0x2ae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008348:	d109      	bne.n	800835e <HAL_TIM_IRQHandler+0x2ae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800836c:	d111      	bne.n	8008392 <HAL_TIM_IRQHandler+0x2e2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800837c:	d109      	bne.n	8008392 <HAL_TIM_IRQHandler+0x2e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800839c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a0:	d111      	bne.n	80083c6 <HAL_TIM_IRQHandler+0x316>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083b0:	d109      	bne.n	80083c6 <HAL_TIM_IRQHandler+0x316>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80083ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d4:	d111      	bne.n	80083fa <HAL_TIM_IRQHandler+0x34a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083e4:	d109      	bne.n	80083fa <HAL_TIM_IRQHandler+0x34a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_TIM_IC_ConfigChannel+0x1e>
 800841c:	2302      	movs	r3, #2
 800841e:	e088      	b.n	8008532 <HAL_TIM_IC_ConfigChannel+0x130>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d11b      	bne.n	8008466 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6819      	ldr	r1, [r3, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f001 f96f 	bl	8009720 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 020c 	bic.w	r2, r2, #12
 8008450:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6999      	ldr	r1, [r3, #24]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	619a      	str	r2, [r3, #24]
 8008464:	e060      	b.n	8008528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b04      	cmp	r3, #4
 800846a:	d11c      	bne.n	80084a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f001 f9f3 	bl	8009866 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800848e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6999      	ldr	r1, [r3, #24]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	021a      	lsls	r2, r3, #8
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	619a      	str	r2, [r3, #24]
 80084a4:	e040      	b.n	8008528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d11b      	bne.n	80084e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f001 fa40 	bl	8009940 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	69da      	ldr	r2, [r3, #28]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 020c 	bic.w	r2, r2, #12
 80084ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	69d9      	ldr	r1, [r3, #28]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	61da      	str	r2, [r3, #28]
 80084e2:	e021      	b.n	8008528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b0c      	cmp	r3, #12
 80084e8:	d11c      	bne.n	8008524 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f001 fa5d 	bl	80099b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800850c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69d9      	ldr	r1, [r3, #28]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	021a      	lsls	r2, r3, #8
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	61da      	str	r2, [r3, #28]
 8008522:	e001      	b.n	8008528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008556:	2302      	movs	r3, #2
 8008558:	e0ff      	b.n	800875a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b14      	cmp	r3, #20
 8008566:	f200 80f0 	bhi.w	800874a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	080085c5 	.word	0x080085c5
 8008574:	0800874b 	.word	0x0800874b
 8008578:	0800874b 	.word	0x0800874b
 800857c:	0800874b 	.word	0x0800874b
 8008580:	08008605 	.word	0x08008605
 8008584:	0800874b 	.word	0x0800874b
 8008588:	0800874b 	.word	0x0800874b
 800858c:	0800874b 	.word	0x0800874b
 8008590:	08008647 	.word	0x08008647
 8008594:	0800874b 	.word	0x0800874b
 8008598:	0800874b 	.word	0x0800874b
 800859c:	0800874b 	.word	0x0800874b
 80085a0:	08008687 	.word	0x08008687
 80085a4:	0800874b 	.word	0x0800874b
 80085a8:	0800874b 	.word	0x0800874b
 80085ac:	0800874b 	.word	0x0800874b
 80085b0:	080086c9 	.word	0x080086c9
 80085b4:	0800874b 	.word	0x0800874b
 80085b8:	0800874b 	.word	0x0800874b
 80085bc:	0800874b 	.word	0x0800874b
 80085c0:	08008709 	.word	0x08008709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fc9e 	bl	8008f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0208 	orr.w	r2, r2, #8
 80085de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0204 	bic.w	r2, r2, #4
 80085ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6999      	ldr	r1, [r3, #24]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	619a      	str	r2, [r3, #24]
      break;
 8008602:	e0a5      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68b9      	ldr	r1, [r7, #8]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fd18 	bl	8009040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800861e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800862e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6999      	ldr	r1, [r3, #24]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	021a      	lsls	r2, r3, #8
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	619a      	str	r2, [r3, #24]
      break;
 8008644:	e084      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fd8b 	bl	8009168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0208 	orr.w	r2, r2, #8
 8008660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0204 	bic.w	r2, r2, #4
 8008670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69d9      	ldr	r1, [r3, #28]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	61da      	str	r2, [r3, #28]
      break;
 8008684:	e064      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fdfd 	bl	800928c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69da      	ldr	r2, [r3, #28]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69d9      	ldr	r1, [r3, #28]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	021a      	lsls	r2, r3, #8
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	61da      	str	r2, [r3, #28]
      break;
 80086c6:	e043      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fe70 	bl	80093b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0208 	orr.w	r2, r2, #8
 80086e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0204 	bic.w	r2, r2, #4
 80086f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008706:	e023      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 feba 	bl	8009488 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008722:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008732:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	021a      	lsls	r2, r3, #8
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008748:	e002      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	75fb      	strb	r3, [r7, #23]
      break;
 800874e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIM_ConfigClockSource+0x1c>
 800877c:	2302      	movs	r3, #2
 800877e:	e0f6      	b.n	800896e <HAL_TIM_ConfigClockSource+0x20a>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800879e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a6f      	ldr	r2, [pc, #444]	; (8008978 <HAL_TIM_ConfigClockSource+0x214>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	f000 80c1 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 80087c0:	4a6d      	ldr	r2, [pc, #436]	; (8008978 <HAL_TIM_ConfigClockSource+0x214>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	f200 80c6 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 80087c8:	4a6c      	ldr	r2, [pc, #432]	; (800897c <HAL_TIM_ConfigClockSource+0x218>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f000 80b9 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 80087d0:	4a6a      	ldr	r2, [pc, #424]	; (800897c <HAL_TIM_ConfigClockSource+0x218>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	f200 80be 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 80087d8:	4a69      	ldr	r2, [pc, #420]	; (8008980 <HAL_TIM_ConfigClockSource+0x21c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	f000 80b1 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 80087e0:	4a67      	ldr	r2, [pc, #412]	; (8008980 <HAL_TIM_ConfigClockSource+0x21c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f200 80b6 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 80087e8:	4a66      	ldr	r2, [pc, #408]	; (8008984 <HAL_TIM_ConfigClockSource+0x220>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f000 80a9 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 80087f0:	4a64      	ldr	r2, [pc, #400]	; (8008984 <HAL_TIM_ConfigClockSource+0x220>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f200 80ae 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 80087f8:	4a63      	ldr	r2, [pc, #396]	; (8008988 <HAL_TIM_ConfigClockSource+0x224>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f000 80a1 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008800:	4a61      	ldr	r2, [pc, #388]	; (8008988 <HAL_TIM_ConfigClockSource+0x224>)
 8008802:	4293      	cmp	r3, r2
 8008804:	f200 80a6 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008808:	4a60      	ldr	r2, [pc, #384]	; (800898c <HAL_TIM_ConfigClockSource+0x228>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f000 8099 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008810:	4a5e      	ldr	r2, [pc, #376]	; (800898c <HAL_TIM_ConfigClockSource+0x228>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f200 809e 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008818:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800881c:	f000 8091 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008820:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008824:	f200 8096 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800882c:	f000 8089 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008834:	f200 808e 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883c:	d03e      	beq.n	80088bc <HAL_TIM_ConfigClockSource+0x158>
 800883e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008842:	f200 8087 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884a:	f000 8086 	beq.w	800895a <HAL_TIM_ConfigClockSource+0x1f6>
 800884e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008852:	d87f      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008854:	2b70      	cmp	r3, #112	; 0x70
 8008856:	d01a      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x12a>
 8008858:	2b70      	cmp	r3, #112	; 0x70
 800885a:	d87b      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 800885c:	2b60      	cmp	r3, #96	; 0x60
 800885e:	d050      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x19e>
 8008860:	2b60      	cmp	r3, #96	; 0x60
 8008862:	d877      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008864:	2b50      	cmp	r3, #80	; 0x50
 8008866:	d03c      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x17e>
 8008868:	2b50      	cmp	r3, #80	; 0x50
 800886a:	d873      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 800886c:	2b40      	cmp	r3, #64	; 0x40
 800886e:	d058      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x1be>
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d86f      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008874:	2b30      	cmp	r3, #48	; 0x30
 8008876:	d064      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008878:	2b30      	cmp	r3, #48	; 0x30
 800887a:	d86b      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 800887c:	2b20      	cmp	r3, #32
 800887e:	d060      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d867      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d05c      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 8008888:	2b10      	cmp	r3, #16
 800888a:	d05a      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1de>
 800888c:	e062      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6899      	ldr	r1, [r3, #8]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f001 f8e5 	bl	8009a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	609a      	str	r2, [r3, #8]
      break;
 80088ba:	e04f      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	6899      	ldr	r1, [r3, #8]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f001 f8ce 	bl	8009a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088de:	609a      	str	r2, [r3, #8]
      break;
 80088e0:	e03c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6859      	ldr	r1, [r3, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f000 ff8a 	bl	8009808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2150      	movs	r1, #80	; 0x50
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 f899 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 8008900:	e02c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	6859      	ldr	r1, [r3, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	461a      	mov	r2, r3
 8008910:	f000 ffe6 	bl	80098e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2160      	movs	r1, #96	; 0x60
 800891a:	4618      	mov	r0, r3
 800891c:	f001 f889 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 8008920:	e01c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6859      	ldr	r1, [r3, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	461a      	mov	r2, r3
 8008930:	f000 ff6a 	bl	8009808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2140      	movs	r1, #64	; 0x40
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f879 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 8008940:	e00c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f001 f870 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 8008952:	e003      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e000      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800895a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	00100070 	.word	0x00100070
 800897c:	00100060 	.word	0x00100060
 8008980:	00100050 	.word	0x00100050
 8008984:	00100040 	.word	0x00100040
 8008988:	00100030 	.word	0x00100030
 800898c:	00100020 	.word	0x00100020

08008990 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80089a4:	2302      	movs	r3, #2
 80089a6:	e031      	b.n	8008a0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fdd0 	bl	8009560 <TIM_SlaveTimer_SetConfig>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e018      	b.n	8008a0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e15a      	b.n	8008dae <HAL_TIM_RegisterCallback+0x2d2>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_TIM_RegisterCallback+0x2a>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e153      	b.n	8008dae <HAL_TIM_RegisterCallback+0x2d2>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	f040 80de 	bne.w	8008cd8 <HAL_TIM_RegisterCallback+0x1fc>
  {
    switch (CallbackID)
 8008b1c:	7afb      	ldrb	r3, [r7, #11]
 8008b1e:	2b1f      	cmp	r3, #31
 8008b20:	f200 80d7 	bhi.w	8008cd2 <HAL_TIM_RegisterCallback+0x1f6>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <HAL_TIM_RegisterCallback+0x50>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008bad 	.word	0x08008bad
 8008b30:	08008bb5 	.word	0x08008bb5
 8008b34:	08008bbd 	.word	0x08008bbd
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bcd 	.word	0x08008bcd
 8008b40:	08008bd5 	.word	0x08008bd5
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008be5 	.word	0x08008be5
 8008b4c:	08008bed 	.word	0x08008bed
 8008b50:	08008bf5 	.word	0x08008bf5
 8008b54:	08008bfd 	.word	0x08008bfd
 8008b58:	08008c05 	.word	0x08008c05
 8008b5c:	08008c0d 	.word	0x08008c0d
 8008b60:	08008c15 	.word	0x08008c15
 8008b64:	08008c1f 	.word	0x08008c1f
 8008b68:	08008c29 	.word	0x08008c29
 8008b6c:	08008c33 	.word	0x08008c33
 8008b70:	08008c3d 	.word	0x08008c3d
 8008b74:	08008c47 	.word	0x08008c47
 8008b78:	08008c51 	.word	0x08008c51
 8008b7c:	08008c5b 	.word	0x08008c5b
 8008b80:	08008c65 	.word	0x08008c65
 8008b84:	08008c6f 	.word	0x08008c6f
 8008b88:	08008c79 	.word	0x08008c79
 8008b8c:	08008c83 	.word	0x08008c83
 8008b90:	08008c8d 	.word	0x08008c8d
 8008b94:	08008c97 	.word	0x08008c97
 8008b98:	08008ca1 	.word	0x08008ca1
 8008b9c:	08008cab 	.word	0x08008cab
 8008ba0:	08008cb5 	.word	0x08008cb5
 8008ba4:	08008cbf 	.word	0x08008cbf
 8008ba8:	08008cc9 	.word	0x08008cc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008bb2:	e0f7      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008bba:	e0f3      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008bc2:	e0ef      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008bca:	e0eb      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008bd2:	e0e7      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008bda:	e0e3      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008be2:	e0df      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008bea:	e0db      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008bf2:	e0d7      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008bfa:	e0d3      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008c02:	e0cf      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008c0a:	e0cb      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008c12:	e0c7      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008c1c:	e0c2      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008c26:	e0bd      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008c30:	e0b8      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008c3a:	e0b3      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008c44:	e0ae      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008c4e:	e0a9      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008c58:	e0a4      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008c62:	e09f      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008c6c:	e09a      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008c76:	e095      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008c80:	e090      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008c8a:	e08b      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008c94:	e086      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8008c9e:	e081      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8008ca8:	e07c      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8008cb2:	e077      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8008cbc:	e072      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8008cc6:	e06d      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8008cd0:	e068      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
        break;
 8008cd6:	e065      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d15d      	bne.n	8008da0 <HAL_TIM_RegisterCallback+0x2c4>
  {
    switch (CallbackID)
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	2b0d      	cmp	r3, #13
 8008ce8:	d857      	bhi.n	8008d9a <HAL_TIM_RegisterCallback+0x2be>
 8008cea:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <HAL_TIM_RegisterCallback+0x214>)
 8008cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf0:	08008d29 	.word	0x08008d29
 8008cf4:	08008d31 	.word	0x08008d31
 8008cf8:	08008d39 	.word	0x08008d39
 8008cfc:	08008d41 	.word	0x08008d41
 8008d00:	08008d49 	.word	0x08008d49
 8008d04:	08008d51 	.word	0x08008d51
 8008d08:	08008d59 	.word	0x08008d59
 8008d0c:	08008d61 	.word	0x08008d61
 8008d10:	08008d69 	.word	0x08008d69
 8008d14:	08008d71 	.word	0x08008d71
 8008d18:	08008d79 	.word	0x08008d79
 8008d1c:	08008d81 	.word	0x08008d81
 8008d20:	08008d89 	.word	0x08008d89
 8008d24:	08008d91 	.word	0x08008d91
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008d2e:	e039      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008d36:	e035      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d3e:	e031      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d46:	e02d      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d4e:	e029      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008d56:	e025      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008d5e:	e021      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008d66:	e01d      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d6e:	e019      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d76:	e015      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008d7e:	e011      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008d86:	e00d      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008d8e:	e009      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008d98:	e004      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8008d9e:	e001      	b.n	8008da4 <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop

08008dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a46      	ldr	r2, [pc, #280]	; (8008ee8 <TIM_Base_SetConfig+0x12c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d017      	beq.n	8008e04 <TIM_Base_SetConfig+0x48>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dda:	d013      	beq.n	8008e04 <TIM_Base_SetConfig+0x48>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a43      	ldr	r2, [pc, #268]	; (8008eec <TIM_Base_SetConfig+0x130>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_Base_SetConfig+0x48>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a42      	ldr	r2, [pc, #264]	; (8008ef0 <TIM_Base_SetConfig+0x134>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_Base_SetConfig+0x48>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a41      	ldr	r2, [pc, #260]	; (8008ef4 <TIM_Base_SetConfig+0x138>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_Base_SetConfig+0x48>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a40      	ldr	r2, [pc, #256]	; (8008ef8 <TIM_Base_SetConfig+0x13c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_Base_SetConfig+0x48>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a3f      	ldr	r2, [pc, #252]	; (8008efc <TIM_Base_SetConfig+0x140>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d108      	bne.n	8008e16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a33      	ldr	r2, [pc, #204]	; (8008ee8 <TIM_Base_SetConfig+0x12c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d023      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e24:	d01f      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a30      	ldr	r2, [pc, #192]	; (8008eec <TIM_Base_SetConfig+0x130>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d01b      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a2f      	ldr	r2, [pc, #188]	; (8008ef0 <TIM_Base_SetConfig+0x134>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d017      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a2e      	ldr	r2, [pc, #184]	; (8008ef4 <TIM_Base_SetConfig+0x138>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d013      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a2d      	ldr	r2, [pc, #180]	; (8008ef8 <TIM_Base_SetConfig+0x13c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00f      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a2d      	ldr	r2, [pc, #180]	; (8008f00 <TIM_Base_SetConfig+0x144>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00b      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a2c      	ldr	r2, [pc, #176]	; (8008f04 <TIM_Base_SetConfig+0x148>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d007      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a2b      	ldr	r2, [pc, #172]	; (8008f08 <TIM_Base_SetConfig+0x14c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d003      	beq.n	8008e66 <TIM_Base_SetConfig+0xaa>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a26      	ldr	r2, [pc, #152]	; (8008efc <TIM_Base_SetConfig+0x140>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d108      	bne.n	8008e78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a12      	ldr	r2, [pc, #72]	; (8008ee8 <TIM_Base_SetConfig+0x12c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d013      	beq.n	8008ecc <TIM_Base_SetConfig+0x110>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a14      	ldr	r2, [pc, #80]	; (8008ef8 <TIM_Base_SetConfig+0x13c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00f      	beq.n	8008ecc <TIM_Base_SetConfig+0x110>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a14      	ldr	r2, [pc, #80]	; (8008f00 <TIM_Base_SetConfig+0x144>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00b      	beq.n	8008ecc <TIM_Base_SetConfig+0x110>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a13      	ldr	r2, [pc, #76]	; (8008f04 <TIM_Base_SetConfig+0x148>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d007      	beq.n	8008ecc <TIM_Base_SetConfig+0x110>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a12      	ldr	r2, [pc, #72]	; (8008f08 <TIM_Base_SetConfig+0x14c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d003      	beq.n	8008ecc <TIM_Base_SetConfig+0x110>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a0d      	ldr	r2, [pc, #52]	; (8008efc <TIM_Base_SetConfig+0x140>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d103      	bne.n	8008ed4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	615a      	str	r2, [r3, #20]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40000400 	.word	0x40000400
 8008ef0:	40000800 	.word	0x40000800
 8008ef4:	40000c00 	.word	0x40000c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40015000 	.word	0x40015000
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800

08008f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	f023 0201 	bic.w	r2, r3, #1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f023 0302 	bic.w	r3, r3, #2
 8008f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a30      	ldr	r2, [pc, #192]	; (8009028 <TIM_OC1_SetConfig+0x11c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d013      	beq.n	8008f94 <TIM_OC1_SetConfig+0x88>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a2f      	ldr	r2, [pc, #188]	; (800902c <TIM_OC1_SetConfig+0x120>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00f      	beq.n	8008f94 <TIM_OC1_SetConfig+0x88>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a2e      	ldr	r2, [pc, #184]	; (8009030 <TIM_OC1_SetConfig+0x124>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00b      	beq.n	8008f94 <TIM_OC1_SetConfig+0x88>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <TIM_OC1_SetConfig+0x128>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d007      	beq.n	8008f94 <TIM_OC1_SetConfig+0x88>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a2c      	ldr	r2, [pc, #176]	; (8009038 <TIM_OC1_SetConfig+0x12c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d003      	beq.n	8008f94 <TIM_OC1_SetConfig+0x88>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a2b      	ldr	r2, [pc, #172]	; (800903c <TIM_OC1_SetConfig+0x130>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d10c      	bne.n	8008fae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f023 0308 	bic.w	r3, r3, #8
 8008f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f023 0304 	bic.w	r3, r3, #4
 8008fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1d      	ldr	r2, [pc, #116]	; (8009028 <TIM_OC1_SetConfig+0x11c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d013      	beq.n	8008fde <TIM_OC1_SetConfig+0xd2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a1c      	ldr	r2, [pc, #112]	; (800902c <TIM_OC1_SetConfig+0x120>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00f      	beq.n	8008fde <TIM_OC1_SetConfig+0xd2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <TIM_OC1_SetConfig+0x124>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d00b      	beq.n	8008fde <TIM_OC1_SetConfig+0xd2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <TIM_OC1_SetConfig+0x128>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d007      	beq.n	8008fde <TIM_OC1_SetConfig+0xd2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a19      	ldr	r2, [pc, #100]	; (8009038 <TIM_OC1_SetConfig+0x12c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d003      	beq.n	8008fde <TIM_OC1_SetConfig+0xd2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a18      	ldr	r2, [pc, #96]	; (800903c <TIM_OC1_SetConfig+0x130>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d111      	bne.n	8009002 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	621a      	str	r2, [r3, #32]
}
 800901c:	bf00      	nop
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	40012c00 	.word	0x40012c00
 800902c:	40013400 	.word	0x40013400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800
 800903c:	40015000 	.word	0x40015000

08009040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	f023 0210 	bic.w	r2, r3, #16
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800906e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800907a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f023 0320 	bic.w	r3, r3, #32
 800908e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a2c      	ldr	r2, [pc, #176]	; (8009150 <TIM_OC2_SetConfig+0x110>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d007      	beq.n	80090b4 <TIM_OC2_SetConfig+0x74>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a2b      	ldr	r2, [pc, #172]	; (8009154 <TIM_OC2_SetConfig+0x114>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d003      	beq.n	80090b4 <TIM_OC2_SetConfig+0x74>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a2a      	ldr	r2, [pc, #168]	; (8009158 <TIM_OC2_SetConfig+0x118>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d10d      	bne.n	80090d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a1f      	ldr	r2, [pc, #124]	; (8009150 <TIM_OC2_SetConfig+0x110>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d013      	beq.n	8009100 <TIM_OC2_SetConfig+0xc0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <TIM_OC2_SetConfig+0x114>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00f      	beq.n	8009100 <TIM_OC2_SetConfig+0xc0>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a1e      	ldr	r2, [pc, #120]	; (800915c <TIM_OC2_SetConfig+0x11c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00b      	beq.n	8009100 <TIM_OC2_SetConfig+0xc0>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a1d      	ldr	r2, [pc, #116]	; (8009160 <TIM_OC2_SetConfig+0x120>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d007      	beq.n	8009100 <TIM_OC2_SetConfig+0xc0>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a1c      	ldr	r2, [pc, #112]	; (8009164 <TIM_OC2_SetConfig+0x124>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d003      	beq.n	8009100 <TIM_OC2_SetConfig+0xc0>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a17      	ldr	r2, [pc, #92]	; (8009158 <TIM_OC2_SetConfig+0x118>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d113      	bne.n	8009128 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800910e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	4313      	orrs	r3, r2
 800911a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	621a      	str	r2, [r3, #32]
}
 8009142:	bf00      	nop
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40012c00 	.word	0x40012c00
 8009154:	40013400 	.word	0x40013400
 8009158:	40015000 	.word	0x40015000
 800915c:	40014000 	.word	0x40014000
 8009160:	40014400 	.word	0x40014400
 8009164:	40014800 	.word	0x40014800

08009168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	021b      	lsls	r3, r3, #8
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2b      	ldr	r2, [pc, #172]	; (8009274 <TIM_OC3_SetConfig+0x10c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d007      	beq.n	80091da <TIM_OC3_SetConfig+0x72>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2a      	ldr	r2, [pc, #168]	; (8009278 <TIM_OC3_SetConfig+0x110>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d003      	beq.n	80091da <TIM_OC3_SetConfig+0x72>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a29      	ldr	r2, [pc, #164]	; (800927c <TIM_OC3_SetConfig+0x114>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d10d      	bne.n	80091f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a1e      	ldr	r2, [pc, #120]	; (8009274 <TIM_OC3_SetConfig+0x10c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d013      	beq.n	8009226 <TIM_OC3_SetConfig+0xbe>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <TIM_OC3_SetConfig+0x110>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00f      	beq.n	8009226 <TIM_OC3_SetConfig+0xbe>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a1d      	ldr	r2, [pc, #116]	; (8009280 <TIM_OC3_SetConfig+0x118>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00b      	beq.n	8009226 <TIM_OC3_SetConfig+0xbe>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a1c      	ldr	r2, [pc, #112]	; (8009284 <TIM_OC3_SetConfig+0x11c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d007      	beq.n	8009226 <TIM_OC3_SetConfig+0xbe>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <TIM_OC3_SetConfig+0x120>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d003      	beq.n	8009226 <TIM_OC3_SetConfig+0xbe>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a16      	ldr	r2, [pc, #88]	; (800927c <TIM_OC3_SetConfig+0x114>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d113      	bne.n	800924e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800922c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	621a      	str	r2, [r3, #32]
}
 8009268:	bf00      	nop
 800926a:	371c      	adds	r7, #28
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	40012c00 	.word	0x40012c00
 8009278:	40013400 	.word	0x40013400
 800927c:	40015000 	.word	0x40015000
 8009280:	40014000 	.word	0x40014000
 8009284:	40014400 	.word	0x40014400
 8009288:	40014800 	.word	0x40014800

0800928c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	031b      	lsls	r3, r3, #12
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a2c      	ldr	r2, [pc, #176]	; (800939c <TIM_OC4_SetConfig+0x110>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d007      	beq.n	8009300 <TIM_OC4_SetConfig+0x74>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a2b      	ldr	r2, [pc, #172]	; (80093a0 <TIM_OC4_SetConfig+0x114>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <TIM_OC4_SetConfig+0x74>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a2a      	ldr	r2, [pc, #168]	; (80093a4 <TIM_OC4_SetConfig+0x118>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10d      	bne.n	800931c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	031b      	lsls	r3, r3, #12
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	4313      	orrs	r3, r2
 8009312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800931a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a1f      	ldr	r2, [pc, #124]	; (800939c <TIM_OC4_SetConfig+0x110>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <TIM_OC4_SetConfig+0xc0>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a1e      	ldr	r2, [pc, #120]	; (80093a0 <TIM_OC4_SetConfig+0x114>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00f      	beq.n	800934c <TIM_OC4_SetConfig+0xc0>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a1e      	ldr	r2, [pc, #120]	; (80093a8 <TIM_OC4_SetConfig+0x11c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_OC4_SetConfig+0xc0>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a1d      	ldr	r2, [pc, #116]	; (80093ac <TIM_OC4_SetConfig+0x120>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_OC4_SetConfig+0xc0>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a1c      	ldr	r2, [pc, #112]	; (80093b0 <TIM_OC4_SetConfig+0x124>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC4_SetConfig+0xc0>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a17      	ldr	r2, [pc, #92]	; (80093a4 <TIM_OC4_SetConfig+0x118>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d113      	bne.n	8009374 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009352:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800935a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	019b      	lsls	r3, r3, #6
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	019b      	lsls	r3, r3, #6
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	4313      	orrs	r3, r2
 8009372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40013400 	.word	0x40013400
 80093a4:	40015000 	.word	0x40015000
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400
 80093b0:	40014800 	.word	0x40014800

080093b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	4313      	orrs	r3, r2
 8009404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a19      	ldr	r2, [pc, #100]	; (8009470 <TIM_OC5_SetConfig+0xbc>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d013      	beq.n	8009436 <TIM_OC5_SetConfig+0x82>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a18      	ldr	r2, [pc, #96]	; (8009474 <TIM_OC5_SetConfig+0xc0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00f      	beq.n	8009436 <TIM_OC5_SetConfig+0x82>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a17      	ldr	r2, [pc, #92]	; (8009478 <TIM_OC5_SetConfig+0xc4>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00b      	beq.n	8009436 <TIM_OC5_SetConfig+0x82>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a16      	ldr	r2, [pc, #88]	; (800947c <TIM_OC5_SetConfig+0xc8>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d007      	beq.n	8009436 <TIM_OC5_SetConfig+0x82>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a15      	ldr	r2, [pc, #84]	; (8009480 <TIM_OC5_SetConfig+0xcc>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d003      	beq.n	8009436 <TIM_OC5_SetConfig+0x82>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a14      	ldr	r2, [pc, #80]	; (8009484 <TIM_OC5_SetConfig+0xd0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d109      	bne.n	800944a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800943c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	4313      	orrs	r3, r2
 8009448:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	621a      	str	r2, [r3, #32]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40013400 	.word	0x40013400
 8009478:	40014000 	.word	0x40014000
 800947c:	40014400 	.word	0x40014400
 8009480:	40014800 	.word	0x40014800
 8009484:	40015000 	.word	0x40015000

08009488 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	051b      	lsls	r3, r3, #20
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a1a      	ldr	r2, [pc, #104]	; (8009548 <TIM_OC6_SetConfig+0xc0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d013      	beq.n	800950c <TIM_OC6_SetConfig+0x84>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a19      	ldr	r2, [pc, #100]	; (800954c <TIM_OC6_SetConfig+0xc4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00f      	beq.n	800950c <TIM_OC6_SetConfig+0x84>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a18      	ldr	r2, [pc, #96]	; (8009550 <TIM_OC6_SetConfig+0xc8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00b      	beq.n	800950c <TIM_OC6_SetConfig+0x84>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a17      	ldr	r2, [pc, #92]	; (8009554 <TIM_OC6_SetConfig+0xcc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d007      	beq.n	800950c <TIM_OC6_SetConfig+0x84>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a16      	ldr	r2, [pc, #88]	; (8009558 <TIM_OC6_SetConfig+0xd0>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d003      	beq.n	800950c <TIM_OC6_SetConfig+0x84>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a15      	ldr	r2, [pc, #84]	; (800955c <TIM_OC6_SetConfig+0xd4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d109      	bne.n	8009520 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	029b      	lsls	r3, r3, #10
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	4313      	orrs	r3, r2
 800951e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	621a      	str	r2, [r3, #32]
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40012c00 	.word	0x40012c00
 800954c:	40013400 	.word	0x40013400
 8009550:	40014000 	.word	0x40014000
 8009554:	40014400 	.word	0x40014400
 8009558:	40014800 	.word	0x40014800
 800955c:	40015000 	.word	0x40015000

08009560 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800957c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009580:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4a56      	ldr	r2, [pc, #344]	; (8009708 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	f000 80a2 	beq.w	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 80095b6:	4a54      	ldr	r2, [pc, #336]	; (8009708 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	f200 809b 	bhi.w	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 80095be:	4a53      	ldr	r2, [pc, #332]	; (800970c <TIM_SlaveTimer_SetConfig+0x1ac>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	f000 809a 	beq.w	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 80095c6:	4a51      	ldr	r2, [pc, #324]	; (800970c <TIM_SlaveTimer_SetConfig+0x1ac>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	f200 8093 	bhi.w	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 80095ce:	4a50      	ldr	r2, [pc, #320]	; (8009710 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	f000 8092 	beq.w	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 80095d6:	4a4e      	ldr	r2, [pc, #312]	; (8009710 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	f200 808b 	bhi.w	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 80095de:	4a4d      	ldr	r2, [pc, #308]	; (8009714 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	f000 808a 	beq.w	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 80095e6:	4a4b      	ldr	r2, [pc, #300]	; (8009714 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	f200 8083 	bhi.w	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 80095ee:	4a4a      	ldr	r2, [pc, #296]	; (8009718 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	f000 8082 	beq.w	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 80095f6:	4a48      	ldr	r2, [pc, #288]	; (8009718 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d87b      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 80095fc:	4a47      	ldr	r2, [pc, #284]	; (800971c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d07b      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 8009602:	4a46      	ldr	r2, [pc, #280]	; (800971c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d875      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009608:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800960c:	d075      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 800960e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009612:	d86f      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009618:	d06f      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 800961a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800961e:	d869      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009620:	2b70      	cmp	r3, #112	; 0x70
 8009622:	d01a      	beq.n	800965a <TIM_SlaveTimer_SetConfig+0xfa>
 8009624:	2b70      	cmp	r3, #112	; 0x70
 8009626:	d865      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009628:	2b60      	cmp	r3, #96	; 0x60
 800962a:	d059      	beq.n	80096e0 <TIM_SlaveTimer_SetConfig+0x180>
 800962c:	2b60      	cmp	r3, #96	; 0x60
 800962e:	d861      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009630:	2b50      	cmp	r3, #80	; 0x50
 8009632:	d04b      	beq.n	80096cc <TIM_SlaveTimer_SetConfig+0x16c>
 8009634:	2b50      	cmp	r3, #80	; 0x50
 8009636:	d85d      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d019      	beq.n	8009670 <TIM_SlaveTimer_SetConfig+0x110>
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d859      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009640:	2b30      	cmp	r3, #48	; 0x30
 8009642:	d05a      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 8009644:	2b30      	cmp	r3, #48	; 0x30
 8009646:	d855      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009648:	2b20      	cmp	r3, #32
 800964a:	d056      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 800964c:	2b20      	cmp	r3, #32
 800964e:	d851      	bhi.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d052      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 8009654:	2b10      	cmp	r3, #16
 8009656:	d050      	beq.n	80096fa <TIM_SlaveTimer_SetConfig+0x19a>
 8009658:	e04c      	b.n	80096f4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	68d9      	ldr	r1, [r3, #12]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f000 f9ff 	bl	8009a6c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800966e:	e045      	b.n	80096fc <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b05      	cmp	r3, #5
 8009676:	d004      	beq.n	8009682 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800967c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009680:	d101      	bne.n	8009686 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e03b      	b.n	80096fe <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6a1a      	ldr	r2, [r3, #32]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096ac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	621a      	str	r2, [r3, #32]
      break;
 80096ca:	e017      	b.n	80096fc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	6899      	ldr	r1, [r3, #8]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	461a      	mov	r2, r3
 80096da:	f000 f895 	bl	8009808 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80096de:	e00d      	b.n	80096fc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	6899      	ldr	r1, [r3, #8]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	461a      	mov	r2, r3
 80096ee:	f000 f8f7 	bl	80098e0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80096f2:	e003      	b.n	80096fc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
      break;
 80096f8:	e000      	b.n	80096fc <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80096fa:	bf00      	nop
  }

  return status;
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	00100070 	.word	0x00100070
 800970c:	00100060 	.word	0x00100060
 8009710:	00100050 	.word	0x00100050
 8009714:	00100040 	.word	0x00100040
 8009718:	00100030 	.word	0x00100030
 800971c:	00100020 	.word	0x00100020

08009720 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	f023 0201 	bic.w	r2, r3, #1
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4a28      	ldr	r2, [pc, #160]	; (80097ec <TIM_TI1_SetConfig+0xcc>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01b      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009754:	d017      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a25      	ldr	r2, [pc, #148]	; (80097f0 <TIM_TI1_SetConfig+0xd0>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d013      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4a24      	ldr	r2, [pc, #144]	; (80097f4 <TIM_TI1_SetConfig+0xd4>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d00f      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4a23      	ldr	r2, [pc, #140]	; (80097f8 <TIM_TI1_SetConfig+0xd8>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00b      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4a22      	ldr	r2, [pc, #136]	; (80097fc <TIM_TI1_SetConfig+0xdc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d007      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4a21      	ldr	r2, [pc, #132]	; (8009800 <TIM_TI1_SetConfig+0xe0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d003      	beq.n	8009786 <TIM_TI1_SetConfig+0x66>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a20      	ldr	r2, [pc, #128]	; (8009804 <TIM_TI1_SetConfig+0xe4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d101      	bne.n	800978a <TIM_TI1_SetConfig+0x6a>
 8009786:	2301      	movs	r3, #1
 8009788:	e000      	b.n	800978c <TIM_TI1_SetConfig+0x6c>
 800978a:	2300      	movs	r3, #0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f023 0303 	bic.w	r3, r3, #3
 8009796:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e003      	b.n	80097aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f043 0301 	orr.w	r3, r3, #1
 80097a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f023 030a 	bic.w	r3, r3, #10
 80097c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f003 030a 	and.w	r3, r3, #10
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	621a      	str	r2, [r3, #32]
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	40012c00 	.word	0x40012c00
 80097f0:	40000400 	.word	0x40000400
 80097f4:	40000800 	.word	0x40000800
 80097f8:	40000c00 	.word	0x40000c00
 80097fc:	40013400 	.word	0x40013400
 8009800:	40014000 	.word	0x40014000
 8009804:	40015000 	.word	0x40015000

08009808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	f023 0201 	bic.w	r2, r3, #1
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4313      	orrs	r3, r2
 800983c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f023 030a 	bic.w	r3, r3, #10
 8009844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009866:	b480      	push	{r7}
 8009868:	b087      	sub	sp, #28
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	f023 0210 	bic.w	r2, r3, #16
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009892:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	021b      	lsls	r3, r3, #8
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	031b      	lsls	r3, r3, #12
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	621a      	str	r2, [r3, #32]
}
 80098d4:	bf00      	nop
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f023 0210 	bic.w	r2, r3, #16
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800990a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	031b      	lsls	r3, r3, #12
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800991c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	621a      	str	r2, [r3, #32]
}
 8009934:	bf00      	nop
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800997c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	b2db      	uxtb	r3, r3
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009990:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	021b      	lsls	r3, r3, #8
 8009996:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	621a      	str	r2, [r3, #32]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	031b      	lsls	r3, r3, #12
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	031b      	lsls	r3, r3, #12
 8009a10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	621a      	str	r2, [r3, #32]
}
 8009a26:	bf00      	nop
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f043 0307 	orr.w	r3, r3, #7
 8009a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	609a      	str	r2, [r3, #8]
}
 8009a60:	bf00      	nop
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	021a      	lsls	r2, r3, #8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	609a      	str	r2, [r3, #8]
}
 8009aa0:	bf00      	nop
 8009aa2:	371c      	adds	r7, #28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	f003 031f 	and.w	r3, r3, #31
 8009abe:	2201      	movs	r2, #1
 8009ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1a      	ldr	r2, [r3, #32]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	43db      	mvns	r3, r3
 8009ace:	401a      	ands	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a1a      	ldr	r2, [r3, #32]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	621a      	str	r2, [r3, #32]
}
 8009aea:	bf00      	nop
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a26      	ldr	r2, [pc, #152]	; (8009b9c <TIM_ResetCallback+0xa4>)
 8009b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a25      	ldr	r2, [pc, #148]	; (8009ba0 <TIM_ResetCallback+0xa8>)
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a24      	ldr	r2, [pc, #144]	; (8009ba4 <TIM_ResetCallback+0xac>)
 8009b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a23      	ldr	r2, [pc, #140]	; (8009ba8 <TIM_ResetCallback+0xb0>)
 8009b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a22      	ldr	r2, [pc, #136]	; (8009bac <TIM_ResetCallback+0xb4>)
 8009b24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a21      	ldr	r2, [pc, #132]	; (8009bb0 <TIM_ResetCallback+0xb8>)
 8009b2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a20      	ldr	r2, [pc, #128]	; (8009bb4 <TIM_ResetCallback+0xbc>)
 8009b34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a1f      	ldr	r2, [pc, #124]	; (8009bb8 <TIM_ResetCallback+0xc0>)
 8009b3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a1e      	ldr	r2, [pc, #120]	; (8009bbc <TIM_ResetCallback+0xc4>)
 8009b44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1d      	ldr	r2, [pc, #116]	; (8009bc0 <TIM_ResetCallback+0xc8>)
 8009b4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a1c      	ldr	r2, [pc, #112]	; (8009bc4 <TIM_ResetCallback+0xcc>)
 8009b54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a1b      	ldr	r2, [pc, #108]	; (8009bc8 <TIM_ResetCallback+0xd0>)
 8009b5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a1a      	ldr	r2, [pc, #104]	; (8009bcc <TIM_ResetCallback+0xd4>)
 8009b64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a19      	ldr	r2, [pc, #100]	; (8009bd0 <TIM_ResetCallback+0xd8>)
 8009b6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <TIM_ResetCallback+0xdc>)
 8009b74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <TIM_ResetCallback+0xe0>)
 8009b7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a16      	ldr	r2, [pc, #88]	; (8009bdc <TIM_ResetCallback+0xe4>)
 8009b84:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <TIM_ResetCallback+0xe8>)
 8009b8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	08008a15 	.word	0x08008a15
 8009ba0:	08008a29 	.word	0x08008a29
 8009ba4:	08008aa1 	.word	0x08008aa1
 8009ba8:	08008ab5 	.word	0x08008ab5
 8009bac:	08008a51 	.word	0x08008a51
 8009bb0:	08008a65 	.word	0x08008a65
 8009bb4:	08008a3d 	.word	0x08008a3d
 8009bb8:	08008a79 	.word	0x08008a79
 8009bbc:	08008a8d 	.word	0x08008a8d
 8009bc0:	08008ac9 	.word	0x08008ac9
 8009bc4:	08009f91 	.word	0x08009f91
 8009bc8:	08009fa5 	.word	0x08009fa5
 8009bcc:	08009fb9 	.word	0x08009fb9
 8009bd0:	08009fcd 	.word	0x08009fcd
 8009bd4:	08009fe1 	.word	0x08009fe1
 8009bd8:	08009ff5 	.word	0x08009ff5
 8009bdc:	0800a009 	.word	0x0800a009
 8009be0:	0800a01d 	.word	0x0800a01d

08009be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e074      	b.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a34      	ldr	r2, [pc, #208]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d009      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a33      	ldr	r2, [pc, #204]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d004      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a31      	ldr	r2, [pc, #196]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d108      	bne.n	8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a21      	ldr	r2, [pc, #132]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d022      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c7c:	d01d      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a1f      	ldr	r2, [pc, #124]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d018      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a1d      	ldr	r2, [pc, #116]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a1c      	ldr	r2, [pc, #112]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d00e      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a15      	ldr	r2, [pc, #84]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d009      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a18      	ldr	r2, [pc, #96]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a11      	ldr	r2, [pc, #68]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10c      	bne.n	8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40012c00 	.word	0x40012c00
 8009cf8:	40013400 	.word	0x40013400
 8009cfc:	40015000 	.word	0x40015000
 8009d00:	40000400 	.word	0x40000400
 8009d04:	40000800 	.word	0x40000800
 8009d08:	40000c00 	.word	0x40000c00
 8009d0c:	40014000 	.word	0x40014000

08009d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e096      	b.n	8009e5a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a2f      	ldr	r2, [pc, #188]	; (8009e68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a2d      	ldr	r2, [pc, #180]	; (8009e6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d004      	beq.n	8009dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a2c      	ldr	r2, [pc, #176]	; (8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d106      	bne.n	8009dd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a24      	ldr	r2, [pc, #144]	; (8009e68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d009      	beq.n	8009df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a22      	ldr	r2, [pc, #136]	; (8009e6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a21      	ldr	r2, [pc, #132]	; (8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d12b      	bne.n	8009e48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfa:	051b      	lsls	r3, r3, #20
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a11      	ldr	r2, [pc, #68]	; (8009e68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d009      	beq.n	8009e3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a10      	ldr	r2, [pc, #64]	; (8009e6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d004      	beq.n	8009e3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0e      	ldr	r2, [pc, #56]	; (8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d106      	bne.n	8009e48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	40012c00 	.word	0x40012c00
 8009e6c:	40013400 	.word	0x40013400
 8009e70:	40015000 	.word	0x40015000

08009e74 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d101      	bne.n	8009e92 <HAL_TIMEx_TISelection+0x1e>
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e073      	b.n	8009f7a <HAL_TIMEx_TISelection+0x106>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b0c      	cmp	r3, #12
 8009e9e:	d864      	bhi.n	8009f6a <HAL_TIMEx_TISelection+0xf6>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <HAL_TIMEx_TISelection+0x34>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009edd 	.word	0x08009edd
 8009eac:	08009f6b 	.word	0x08009f6b
 8009eb0:	08009f6b 	.word	0x08009f6b
 8009eb4:	08009f6b 	.word	0x08009f6b
 8009eb8:	08009f29 	.word	0x08009f29
 8009ebc:	08009f6b 	.word	0x08009f6b
 8009ec0:	08009f6b 	.word	0x08009f6b
 8009ec4:	08009f6b 	.word	0x08009f6b
 8009ec8:	08009f3f 	.word	0x08009f3f
 8009ecc:	08009f6b 	.word	0x08009f6b
 8009ed0:	08009f6b 	.word	0x08009f6b
 8009ed4:	08009f6b 	.word	0x08009f6b
 8009ed8:	08009f55 	.word	0x08009f55
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee2:	f023 010f 	bic.w	r1, r3, #15
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a24      	ldr	r2, [pc, #144]	; (8009f88 <HAL_TIMEx_TISelection+0x114>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_TIMEx_TISelection+0x90>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a23      	ldr	r2, [pc, #140]	; (8009f8c <HAL_TIMEx_TISelection+0x118>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d108      	bne.n	8009f16 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8009f14:	e02c      	b.n	8009f70 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0201 	bic.w	r2, r2, #1
 8009f24:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8009f26:	e023      	b.n	8009f70 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f2e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f3c:	e018      	b.n	8009f70 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f44:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f52:	e00d      	b.n	8009f70 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f5a:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f68:	e002      	b.n	8009f70 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	371c      	adds	r7, #28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40014400 	.word	0x40014400
 8009f8c:	40014800 	.word	0x40014800

08009f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <__cxa_pure_virtual>:
 800a030:	b508      	push	{r3, lr}
 800a032:	f000 f80d 	bl	800a050 <_ZSt9terminatev>

0800a036 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a036:	b508      	push	{r3, lr}
 800a038:	4780      	blx	r0
 800a03a:	f000 f80e 	bl	800a05a <abort>
	...

0800a040 <_ZSt13get_terminatev>:
 800a040:	4b02      	ldr	r3, [pc, #8]	; (800a04c <_ZSt13get_terminatev+0xc>)
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	f3bf 8f5b 	dmb	ish
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000030 	.word	0x20000030

0800a050 <_ZSt9terminatev>:
 800a050:	b508      	push	{r3, lr}
 800a052:	f7ff fff5 	bl	800a040 <_ZSt13get_terminatev>
 800a056:	f7ff ffee 	bl	800a036 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a05a <abort>:
 800a05a:	b508      	push	{r3, lr}
 800a05c:	2006      	movs	r0, #6
 800a05e:	f000 f85d 	bl	800a11c <raise>
 800a062:	2001      	movs	r0, #1
 800a064:	f7f8 fb24 	bl	80026b0 <_exit>

0800a068 <__errno>:
 800a068:	4b01      	ldr	r3, [pc, #4]	; (800a070 <__errno+0x8>)
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	20000034 	.word	0x20000034

0800a074 <__libc_init_array>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	4d0d      	ldr	r5, [pc, #52]	; (800a0ac <__libc_init_array+0x38>)
 800a078:	4c0d      	ldr	r4, [pc, #52]	; (800a0b0 <__libc_init_array+0x3c>)
 800a07a:	1b64      	subs	r4, r4, r5
 800a07c:	10a4      	asrs	r4, r4, #2
 800a07e:	2600      	movs	r6, #0
 800a080:	42a6      	cmp	r6, r4
 800a082:	d109      	bne.n	800a098 <__libc_init_array+0x24>
 800a084:	4d0b      	ldr	r5, [pc, #44]	; (800a0b4 <__libc_init_array+0x40>)
 800a086:	4c0c      	ldr	r4, [pc, #48]	; (800a0b8 <__libc_init_array+0x44>)
 800a088:	f000 f864 	bl	800a154 <_init>
 800a08c:	1b64      	subs	r4, r4, r5
 800a08e:	10a4      	asrs	r4, r4, #2
 800a090:	2600      	movs	r6, #0
 800a092:	42a6      	cmp	r6, r4
 800a094:	d105      	bne.n	800a0a2 <__libc_init_array+0x2e>
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09c:	4798      	blx	r3
 800a09e:	3601      	adds	r6, #1
 800a0a0:	e7ee      	b.n	800a080 <__libc_init_array+0xc>
 800a0a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a6:	4798      	blx	r3
 800a0a8:	3601      	adds	r6, #1
 800a0aa:	e7f2      	b.n	800a092 <__libc_init_array+0x1e>
 800a0ac:	0800a3bc 	.word	0x0800a3bc
 800a0b0:	0800a3bc 	.word	0x0800a3bc
 800a0b4:	0800a3bc 	.word	0x0800a3bc
 800a0b8:	0800a3c4 	.word	0x0800a3c4

0800a0bc <memset>:
 800a0bc:	4402      	add	r2, r0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d100      	bne.n	800a0c6 <memset+0xa>
 800a0c4:	4770      	bx	lr
 800a0c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ca:	e7f9      	b.n	800a0c0 <memset+0x4>

0800a0cc <_raise_r>:
 800a0cc:	291f      	cmp	r1, #31
 800a0ce:	b538      	push	{r3, r4, r5, lr}
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	d904      	bls.n	800a0e0 <_raise_r+0x14>
 800a0d6:	2316      	movs	r3, #22
 800a0d8:	6003      	str	r3, [r0, #0]
 800a0da:	f04f 30ff 	mov.w	r0, #4294967295
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0e2:	b112      	cbz	r2, 800a0ea <_raise_r+0x1e>
 800a0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0e8:	b94b      	cbnz	r3, 800a0fe <_raise_r+0x32>
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 f830 	bl	800a150 <_getpid_r>
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fa:	f000 b817 	b.w	800a12c <_kill_r>
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d00a      	beq.n	800a118 <_raise_r+0x4c>
 800a102:	1c59      	adds	r1, r3, #1
 800a104:	d103      	bne.n	800a10e <_raise_r+0x42>
 800a106:	2316      	movs	r3, #22
 800a108:	6003      	str	r3, [r0, #0]
 800a10a:	2001      	movs	r0, #1
 800a10c:	e7e7      	b.n	800a0de <_raise_r+0x12>
 800a10e:	2400      	movs	r4, #0
 800a110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a114:	4628      	mov	r0, r5
 800a116:	4798      	blx	r3
 800a118:	2000      	movs	r0, #0
 800a11a:	e7e0      	b.n	800a0de <_raise_r+0x12>

0800a11c <raise>:
 800a11c:	4b02      	ldr	r3, [pc, #8]	; (800a128 <raise+0xc>)
 800a11e:	4601      	mov	r1, r0
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	f7ff bfd3 	b.w	800a0cc <_raise_r>
 800a126:	bf00      	nop
 800a128:	20000034 	.word	0x20000034

0800a12c <_kill_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d07      	ldr	r5, [pc, #28]	; (800a14c <_kill_r+0x20>)
 800a130:	2300      	movs	r3, #0
 800a132:	4604      	mov	r4, r0
 800a134:	4608      	mov	r0, r1
 800a136:	4611      	mov	r1, r2
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	f7f8 faa9 	bl	8002690 <_kill>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	d102      	bne.n	800a148 <_kill_r+0x1c>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	b103      	cbz	r3, 800a148 <_kill_r+0x1c>
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	bd38      	pop	{r3, r4, r5, pc}
 800a14a:	bf00      	nop
 800a14c:	20019464 	.word	0x20019464

0800a150 <_getpid_r>:
 800a150:	f7f8 ba96 	b.w	8002680 <_getpid>

0800a154 <_init>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr

0800a160 <_fini>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr
