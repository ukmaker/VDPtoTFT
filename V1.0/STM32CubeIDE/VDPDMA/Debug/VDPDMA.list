
VDPDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a40c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a834  0800a834  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800a834  0800a834  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a834  0800a834  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a83c  0800a83c  0001a83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193d4  20000098  0800a8d8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001946c  0800a8d8  0002946c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c90a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b53  00000000  00000000  0003c9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00040528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  00041d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8df  00000000  00000000  000433a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b68b  00000000  00000000  00070c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bc9a  00000000  00000000  0008c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b8  00000000  00000000  001a7ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000098 	.word	0x20000098
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a5cc 	.word	0x0800a5cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000009c 	.word	0x2000009c
 8000214:	0800a5cc 	.word	0x0800a5cc

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f00a f97f 	bl	800a534 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b36      	ldr	r3, [pc, #216]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800023e:	4b34      	ldr	r3, [pc, #208]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000246:	4b32      	ldr	r3, [pc, #200]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000248:	2210      	movs	r2, #16
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b30      	ldr	r3, [pc, #192]	; (8000310 <MX_ADC1_Init+0xf8>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <MX_ADC1_Init+0xf8>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <MX_ADC1_Init+0xf8>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000272:	2201      	movs	r2, #1
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b26      	ldr	r3, [pc, #152]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800028e:	4b20      	ldr	r3, [pc, #128]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000290:	2201      	movs	r2, #1
 8000292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800029c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800029e:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a6:	481a      	ldr	r0, [pc, #104]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002a8:	f003 fcf4 	bl	8003c94 <HAL_ADC_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80002b2:	f001 f8e3 	bl	800147c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80002b6:	2306      	movs	r3, #6
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 80002ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002c8:	4619      	mov	r1, r3
 80002ca:	4811      	ldr	r0, [pc, #68]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002cc:	f005 f80c 	bl	80052e8 <HAL_ADCEx_MultiModeConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002d6:	f001 f8d1 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_ADC1_Init+0xfc>)
 80002dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002de:	2306      	movs	r3, #6
 80002e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002e6:	237f      	movs	r3, #127	; 0x7f
 80002e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002ea:	2304      	movs	r3, #4
 80002ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002f8:	f003 ff92 	bl	8004220 <HAL_ADC_ConfigChannel>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000302:	f001 f8bb 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3730      	adds	r7, #48	; 0x30
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000b4 	.word	0x200000b4
 8000314:	04300002 	.word	0x04300002

08000318 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	463b      	mov	r3, r7
 8000320:	2220      	movs	r2, #32
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f00a f905 	bl	800a534 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800032a:	4b28      	ldr	r3, [pc, #160]	; (80003cc <MX_ADC2_Init+0xb4>)
 800032c:	4a28      	ldr	r2, [pc, #160]	; (80003d0 <MX_ADC2_Init+0xb8>)
 800032e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000336:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC2_Init+0xb4>)
 800033a:	2210      	movs	r2, #16
 800033c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC2_Init+0xb4>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000352:	2204      	movs	r2, #4
 8000354:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000358:	2200      	movs	r2, #0
 800035a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_ADC2_Init+0xb4>)
 800035e:	2200      	movs	r2, #0
 8000360:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000364:	2201      	movs	r2, #1
 8000366:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_ADC2_Init+0xb4>)
 800036a:	2200      	movs	r2, #0
 800036c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC2_Init+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000388:	f003 fc84 	bl	8003c94 <HAL_ADC_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000392:	f001 f873 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC2_Init+0xbc>)
 8000398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	; 0x7f
 80003a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ae:	463b      	mov	r3, r7
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <MX_ADC2_Init+0xb4>)
 80003b4:	f003 ff34 	bl	8004220 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003be:	f001 f85d 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000014c 	.word	0x2000014c
 80003d0:	50000100 	.word	0x50000100
 80003d4:	08600004 	.word	0x08600004

080003d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0a0      	sub	sp, #128	; 0x80
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	2254      	movs	r2, #84	; 0x54
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f00a f89b 	bl	800a534 <memset>
  if(adcHandle->Instance==ADC1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000406:	d16a      	bne.n	80004de <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800040e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000412:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f006 ff8b 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000424:	f001 f82a 	bl	800147c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000428:	4b50      	ldr	r3, [pc, #320]	; (800056c <HAL_ADC_MspInit+0x194>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a4f      	ldr	r2, [pc, #316]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000430:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000432:	4b4e      	ldr	r3, [pc, #312]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d10b      	bne.n	8000452 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800043a:	4b4d      	ldr	r3, [pc, #308]	; (8000570 <HAL_ADC_MspInit+0x198>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a4c      	ldr	r2, [pc, #304]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b4a      	ldr	r3, [pc, #296]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b47      	ldr	r3, [pc, #284]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a46      	ldr	r2, [pc, #280]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b44      	ldr	r3, [pc, #272]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800046a:	2301      	movs	r3, #1
 800046c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	2303      	movs	r3, #3
 8000470:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f005 fff2 	bl	8006468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000486:	4a3c      	ldr	r2, [pc, #240]	; (8000578 <HAL_ADC_MspInit+0x1a0>)
 8000488:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800048a:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 800048c:	2205      	movs	r2, #5
 800048e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800049c:	4b35      	ldr	r3, [pc, #212]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004a2:	4b34      	ldr	r3, [pc, #208]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004b4:	2220      	movs	r2, #32
 80004b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80004be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004c0:	482c      	ldr	r0, [pc, #176]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004c2:	f005 fc6b 	bl	8005d9c <HAL_DMA_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80004cc:	f000 ffd6 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a28      	ldr	r2, [pc, #160]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004d4:	655a      	str	r2, [r3, #84]	; 0x54
 80004d6:	4a27      	ldr	r2, [pc, #156]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80004dc:	e042      	b.n	8000564 <HAL_ADC_MspInit+0x18c>
  else if(adcHandle->Instance==ADC2)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <HAL_ADC_MspInit+0x1a4>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d13d      	bne.n	8000564 <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80004ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	4618      	mov	r0, r3
 80004fa:	f006 ff1b 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000504:	f000 ffba 	bl	800147c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_ADC_MspInit+0x194>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000510:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d10b      	bne.n	8000532 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_ADC_MspInit+0x198>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800054a:	2302      	movs	r3, #2
 800054c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	2303      	movs	r3, #3
 8000550:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f005 ff82 	bl	8006468 <HAL_GPIO_Init>
}
 8000564:	bf00      	nop
 8000566:	3780      	adds	r7, #128	; 0x80
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000244 	.word	0x20000244
 8000570:	40021000 	.word	0x40021000
 8000574:	200001e4 	.word	0x200001e4
 8000578:	40020008 	.word	0x40020008
 800057c:	50000100 	.word	0x50000100

08000580 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_COMP1_Init+0x48>)
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <MX_COMP1_Init+0x4c>)
 8000588:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_COMP1_Init+0x48>)
 800058c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000590:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_COMP1_Init+0x48>)
 8000594:	2260      	movs	r2, #96	; 0x60
 8000596:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_COMP1_Init+0x48>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005a0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80005a4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005b4:	f005 f900 	bl	80057b8 <HAL_COMP_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 80005be:	f000 ff5d 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000248 	.word	0x20000248
 80005cc:	40010200 	.word	0x40010200

080005d0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a24      	ldr	r2, [pc, #144]	; (8000680 <HAL_COMP_MspInit+0xb0>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d141      	bne.n	8000676 <HAL_COMP_MspInit+0xa6>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PA4     ------> COMP1_INM
    PA6     ------> COMP1_OUT
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000626:	2303      	movs	r3, #3
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f005 ff16 	bl	8006468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 800064c:	2308      	movs	r3, #8
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f005 ff05 	bl	8006468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_COMP_MspInit+0xb8>)
 8000672:	f005 fef9 	bl	8006468 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40010200 	.word	0x40010200
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_DMA_Init+0x98>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	4a23      	ldr	r2, [pc, #140]	; (8000724 <MX_DMA_Init+0x98>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6493      	str	r3, [r2, #72]	; 0x48
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_DMA_Init+0x98>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_DMA_Init+0x98>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_DMA_Init+0x98>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6493      	str	r3, [r2, #72]	; 0x48
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_DMA_Init+0x98>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_DMA_Init+0x98>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_DMA_Init+0x98>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_DMA_Init+0x98>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f005 fb27 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f005 fb3e 	bl	8005d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	200c      	movs	r0, #12
 80006f0:	f005 fb1f 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006f4:	200c      	movs	r0, #12
 80006f6:	f005 fb36 	bl	8005d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2038      	movs	r0, #56	; 0x38
 8000700:	f005 fb17 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000704:	2038      	movs	r0, #56	; 0x38
 8000706:	f005 fb2e 	bl	8005d66 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	205e      	movs	r0, #94	; 0x5e
 8000710:	f005 fb0f 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000714:	205e      	movs	r0, #94	; 0x5e
 8000716:	f005 fb26 	bl	8005d66 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b64      	ldr	r3, [pc, #400]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a63      	ldr	r2, [pc, #396]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b5e      	ldr	r3, [pc, #376]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a5d      	ldr	r2, [pc, #372]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b5b      	ldr	r3, [pc, #364]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b58      	ldr	r3, [pc, #352]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a57      	ldr	r2, [pc, #348]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b55      	ldr	r3, [pc, #340]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b52      	ldr	r3, [pc, #328]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a51      	ldr	r2, [pc, #324]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b4f      	ldr	r3, [pc, #316]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a4b      	ldr	r2, [pc, #300]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b49      	ldr	r3, [pc, #292]	; (80008d0 <MX_GPIO_Init+0x1a8>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007b6:	2200      	movs	r2, #0
 80007b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007bc:	4845      	ldr	r0, [pc, #276]	; (80008d4 <MX_GPIO_Init+0x1ac>)
 80007be:	f005 ffd5 	bl	800676c <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f005 ffcf 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80007d4:	4840      	ldr	r0, [pc, #256]	; (80008d8 <MX_GPIO_Init+0x1b0>)
 80007d6:	f005 ffc9 	bl	800676c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2104      	movs	r1, #4
 80007de:	483f      	ldr	r0, [pc, #252]	; (80008dc <MX_GPIO_Init+0x1b4>)
 80007e0:	f005 ffc4 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	483b      	ldr	r0, [pc, #236]	; (80008d8 <MX_GPIO_Init+0x1b0>)
 80007ec:	f005 ffbe 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4832      	ldr	r0, [pc, #200]	; (80008d4 <MX_GPIO_Init+0x1ac>)
 800080a:	f005 fe2d 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f005 fe1e 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800082c:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4824      	ldr	r0, [pc, #144]	; (80008d8 <MX_GPIO_Init+0x1b0>)
 8000846:	f005 fe0f 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000850:	2311      	movs	r3, #17
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <MX_GPIO_Init+0x1b0>)
 8000864:	f005 fe00 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4817      	ldr	r0, [pc, #92]	; (80008dc <MX_GPIO_Init+0x1b4>)
 8000880:	f005 fdf2 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000884:	2310      	movs	r3, #16
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4810      	ldr	r0, [pc, #64]	; (80008d8 <MX_GPIO_Init+0x1b0>)
 8000898:	f005 fde6 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_GPIO_Init+0x1b0>)
 80008b6:	f005 fdd7 	bl	8006468 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80008c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c4:	6053      	str	r3, [r2, #4]

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000800 	.word	0x48000800
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000c00 	.word	0x48000c00
 80008e0:	40010000 	.word	0x40010000

080008e4 <initBitMap>:
// 00000000 -> 0
// 00000001 -> 1
// 00000010 -> 2
// 00000011 -> 2
// etc
void initBitMap() {
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e01a      	b.n	8000926 <initBitMap+0x42>
		int bit = 1 << i;
 80008f0:	2201      	movs	r2, #1
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	607b      	str	r3, [r7, #4]
		for (int j = 0; j < bit; j++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	e00b      	b.n	8000918 <initBitMap+0x34>
			bitMap[bit + j] = i + 1;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	440b      	add	r3, r1
 800090a:	3201      	adds	r2, #1
 800090c:	b2d1      	uxtb	r1, r2
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <initBitMap+0x58>)
 8000910:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < bit; j++) {
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	3301      	adds	r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbef      	blt.n	8000900 <initBitMap+0x1c>
	for (int i = 0; i < 8; i++) {
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3301      	adds	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2b07      	cmp	r3, #7
 800092a:	dde1      	ble.n	80008f0 <initBitMap+0xc>
		}
	}
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000036c 	.word	0x2000036c

08000940 <initColorMaps>:
		uint16_t rgb = rgbMap[i];
		rgbMap[i] = (rgb >> 8) | ((rgb & 0xff) << 8);
	}
}

void initColorMaps(float scaleFactor, float offset) {
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b0a4      	sub	sp, #144	; 0x90
 8000944:	af00      	add	r7, sp, #0
 8000946:	ed87 0a01 	vstr	s0, [r7, #4]
 800094a:	edc7 0a00 	vstr	s1, [r7]

	float RY[16] = { 0, 0.47, 0.07, 0.17, 0.4, 0.43, 0.83, 0, 0.93, 0.93, 0.57,
			0.57, 0.13, 0.73, 0.47, 0.47 };
			*/

	float Y[16] = { 0, 0, 0.5, 0.6, 0.36, 0.5, 0.44, 0.66, 0.5, 0.62, 0.68,
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <initColorMaps+0xd8>)
 8000950:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.78, 0.42, 0.48, 0.72, 0.92 };

	float RY[16] = { 0, 0.42, 0.06, 0.14, 0.34, 0.38, 0.76, 0, 0.84, 0.84, 0.5,
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <initColorMaps+0xdc>)
 800096c:	f107 040c 	add.w	r4, r7, #12
 8000970:	461d      	mov	r5, r3
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.5, 0.12, 0.66, 0.42, 0.42 };

	// multiply by the initial scale factor and add the offset
	for(int i=0; i< 16; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800098c:	e034      	b.n	80009f8 <initColorMaps+0xb8>
		Y[i] = (Y[i] * scaleFactor) + offset;
 800098e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	3390      	adds	r3, #144	; 0x90
 8000996:	443b      	add	r3, r7
 8000998:	3b44      	subs	r3, #68	; 0x44
 800099a:	ed93 7a00 	vldr	s14, [r3]
 800099e:	edd7 7a01 	vldr	s15, [r7, #4]
 80009a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009a6:	edd7 7a00 	vldr	s15, [r7]
 80009aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	3390      	adds	r3, #144	; 0x90
 80009b6:	443b      	add	r3, r7
 80009b8:	3b44      	subs	r3, #68	; 0x44
 80009ba:	edc3 7a00 	vstr	s15, [r3]
		RY[i] = (RY[i] * scaleFactor) + offset;
 80009be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	3390      	adds	r3, #144	; 0x90
 80009c6:	443b      	add	r3, r7
 80009c8:	3b84      	subs	r3, #132	; 0x84
 80009ca:	ed93 7a00 	vldr	s14, [r3]
 80009ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80009d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d6:	edd7 7a00 	vldr	s15, [r7]
 80009da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	3390      	adds	r3, #144	; 0x90
 80009e6:	443b      	add	r3, r7
 80009e8:	3b84      	subs	r3, #132	; 0x84
 80009ea:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i< 16; i++) {
 80009ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009f2:	3301      	adds	r3, #1
 80009f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80009f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	ddc6      	ble.n	800098e <initColorMaps+0x4e>
	}

	setColorLevels(Y, RY);
 8000a00:	f107 020c 	add.w	r2, r7, #12
 8000a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f808 	bl	8000a20 <setColorLevels>
}
 8000a10:	bf00      	nop
 8000a12:	3790      	adds	r7, #144	; 0x90
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}
 8000a18:	0800a5e4 	.word	0x0800a5e4
 8000a1c:	0800a624 	.word	0x0800a624

08000a20 <setColorLevels>:

void setColorLevels(float yLevels[16], float ryLevels[16]) {
 8000a20:	b480      	push	{r7}
 8000a22:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a2c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000a30:	6018      	str	r0, [r3, #0]
 8000a32:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a36:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000a3a:	6019      	str	r1, [r3, #0]
	float v = 0;
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	float oneBit = VREF / ADC_RESOLUTION_STEPS;
 8000a44:	4ba4      	ldr	r3, [pc, #656]	; (8000cd8 <setColorLevels+0x2b8>)
 8000a46:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	uint16_t RYmap1[ADC_RESOLUTION_STEPS];

	float voltages[ADC_RESOLUTION_STEPS];

	// voltage to adc reading map
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a50:	e017      	b.n	8000a82 <setColorLevels+0x62>
		voltages[i] = v;
 8000a52:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a56:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000a5a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000a66:	601a      	str	r2, [r3, #0]
		v += oneBit;
 8000a68:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000a6c:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8000a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a74:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8000a78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a82:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a86:	2b3f      	cmp	r3, #63	; 0x3f
 8000a88:	dde3      	ble.n	8000a52 <setColorLevels+0x32>
	}

	// Clear the color maps
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a90:	e022      	b.n	8000ad8 <setColorLevels+0xb8>
		YMap[j] = 0;
 8000a92:	4a92      	ldr	r2, [pc, #584]	; (8000cdc <setColorLevels+0x2bc>)
 8000a94:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RYMap[j] = 0;
 8000a9e:	4a90      	ldr	r2, [pc, #576]	; (8000ce0 <setColorLevels+0x2c0>)
 8000aa0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Ymap1[j] = 0;
 8000aaa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000ab4:	443b      	add	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f823 2ca0 	strh.w	r2, [r3, #-160]
		RYmap1[j] = 0;
 8000abc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ac0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ac4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8000ace:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000ad8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000adc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ade:	ddd8      	ble.n	8000a92 <setColorLevels+0x72>
	}

	// Create the voltage to color name bitmaps
	for (int i = 0; i < 16; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000ae6:	e0ee      	b.n	8000cc6 <setColorLevels+0x2a6>

		v = yLevels[i];
 8000ae8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000af2:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000b06:	e041      	b.n	8000b8c <setColorLevels+0x16c>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8000b08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b0c:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000b10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b28:	db2b      	blt.n	8000b82 <setColorLevels+0x162>
 8000b2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b2e:	3301      	adds	r3, #1
 8000b30:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000b34:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	edd3 7a00 	vldr	s15, [r3]
 8000b40:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4c:	d519      	bpl.n	8000b82 <setColorLevels+0x162>
				Ymap1[j] |= (1 << i);
 8000b4e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b58:	443b      	add	r3, r7
 8000b5a:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	2101      	movs	r1, #1
 8000b62:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b7c:	443b      	add	r3, r7
 8000b7e:	f823 2ca0 	strh.w	r2, [r3, #-160]
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000b82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b86:	3301      	adds	r3, #1
 8000b88:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000b8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b90:	2b3e      	cmp	r3, #62	; 0x3e
 8000b92:	ddb9      	ble.n	8000b08 <setColorLevels+0xe8>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS-1] <= v) {
 8000b94:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b98:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000b9c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000ba0:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bac:	db0d      	blt.n	8000bca <setColorLevels+0x1aa>
			Ymap1[ADC_RESOLUTION_STEPS-1] |= (1 << i);
 8000bae:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		}
		v = ryLevels[i];
 8000bca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000bd4:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000be8:	e041      	b.n	8000c6e <setColorLevels+0x24e>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8000bea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000bee:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000bf2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
 8000bfe:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0a:	db2b      	blt.n	8000c64 <setColorLevels+0x244>
 8000c0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c10:	3301      	adds	r3, #1
 8000c12:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000c16:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	d519      	bpl.n	8000c64 <setColorLevels+0x244>
				RYmap1[j] |= (1 << i);
 8000c30:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c38:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000c3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	2101      	movs	r1, #1
 8000c44:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b299      	uxth	r1, r3
 8000c54:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c5c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000c60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000c64:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000c6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c72:	2b3e      	cmp	r3, #62	; 0x3e
 8000c74:	ddb9      	ble.n	8000bea <setColorLevels+0x1ca>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS-1] <= v) {
 8000c76:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c7a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000c7e:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000c82:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8e:	db15      	blt.n	8000cbc <setColorLevels+0x29c>
			RYmap1[ADC_RESOLUTION_STEPS-1] |= (1 << i);
 8000c90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c98:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cb4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	for (int i = 0; i < 16; i++) {
 8000cbc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000cc6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	f77f af0c 	ble.w	8000ae8 <setColorLevels+0xc8>
	}

	// now propagate the map to each neighbouring entry
	// to allow for noise and inaccuracy

	for(uint16_t i=0; i<ADC_RESOLUTION_STEPS-1; i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000cd6:	e080      	b.n	8000dda <setColorLevels+0x3ba>
 8000cd8:	3d39999a 	.word	0x3d39999a
 8000cdc:	2000026c 	.word	0x2000026c
 8000ce0:	200002ec 	.word	0x200002ec

		YMap[i] = Ymap1[i];
 8000ce4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000ce8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000cf2:	443b      	add	r3, r7
 8000cf4:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 8000cf8:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <setColorLevels+0x3d4>)
 8000cfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		RYMap[i] = RYmap1[i];
 8000cfe:	f8b7 120e 	ldrh.w	r1, [r7, #526]	; 0x20e
 8000d02:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d06:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000d0a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000d0e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d12:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <setColorLevels+0x3d8>)
 8000d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(i>0) {
 8000d18:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d029      	beq.n	8000d74 <setColorLevels+0x354>
			YMap[i] |= Ymap1[i-1];
 8000d20:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d24:	4a33      	ldr	r2, [pc, #204]	; (8000df4 <setColorLevels+0x3d4>)
 8000d26:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d2a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d36:	443b      	add	r3, r7
 8000d38:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8000d3c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d40:	430a      	orrs	r2, r1
 8000d42:	b291      	uxth	r1, r2
 8000d44:	4a2b      	ldr	r2, [pc, #172]	; (8000df4 <setColorLevels+0x3d4>)
 8000d46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i-1];
 8000d4a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d4e:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <setColorLevels+0x3d8>)
 8000d50:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d54:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d62:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d66:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	b291      	uxth	r1, r2
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <setColorLevels+0x3d8>)
 8000d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if(i<ADC_RESOLUTION_STEPS-1) {
 8000d74:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d78:	2b3e      	cmp	r3, #62	; 0x3e
 8000d7a:	d829      	bhi.n	8000dd0 <setColorLevels+0x3b0>
			YMap[i] |= Ymap1[i+1];
 8000d7c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <setColorLevels+0x3d4>)
 8000d82:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d86:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d92:	443b      	add	r3, r7
 8000d94:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8000d98:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	b291      	uxth	r1, r2
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <setColorLevels+0x3d4>)
 8000da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i+1];
 8000da6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <setColorLevels+0x3d8>)
 8000dac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000db0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000dba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dbe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000dc2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	b291      	uxth	r1, r2
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <setColorLevels+0x3d8>)
 8000dcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<ADC_RESOLUTION_STEPS-1; i++) {
 8000dd0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000dda:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dde:	2b3e      	cmp	r3, #62	; 0x3e
 8000de0:	d980      	bls.n	8000ce4 <setColorLevels+0x2c4>

	//white = (0.47 / VREF * ADC_RESOLUTION_STEPS) + offsetBinary;
	//RYMap[white-1] |= 0x8000;
	//RYMap[white] |= 0x8000;
	//RYMap[white+1] |= 0x8000;
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000026c 	.word	0x2000026c
 8000df8:	200002ec 	.word	0x200002ec

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f002 fc14 	bl	800362c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f9d2 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f7ff fc8e 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0c:	f7ff fc3e 	bl	800068c <MX_DMA_Init>
  MX_TIM8_Init();
 8000e10:	f001 ff82 	bl	8002d18 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000e14:	f001 fca6 	bl	8002764 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000e18:	f7ff f9fe 	bl	8000218 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e1c:	f7ff fa7c 	bl	8000318 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000e20:	f001 fdc4 	bl	80029ac <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e24:	f001 fd6e 	bl	8002904 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e28:	f001 fe74 	bl	8002b14 <MX_TIM4_Init>
  MX_COMP1_Init();
 8000e2c:	f7ff fba8 	bl	8000580 <MX_COMP1_Init>
  MX_TIM5_Init();
 8000e30:	f001 ff38 	bl	8002ca4 <MX_TIM5_Init>
  MX_TIM16_Init();
 8000e34:	f002 f82a 	bl	8002e8c <MX_TIM16_Init>
  MX_TIM20_Init();
 8000e38:	f002 f8aa 	bl	8002f90 <MX_TIM20_Init>
  MX_SPI2_Init();
 8000e3c:	f001 faf4 	bl	8002428 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8000e40:	4b99      	ldr	r3, [pc, #612]	; (80010a8 <main+0x2ac>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e48:	4a97      	ldr	r2, [pc, #604]	; (80010a8 <main+0x2ac>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]
	mysetup();
 8000e50:	f001 fa0a 	bl	8002268 <mysetup>

	initBitMap();
 8000e54:	f7ff fd46 	bl	80008e4 <initBitMap>
	initColorMaps(0.43/0.47, 1.72);
 8000e58:	eddf 0a94 	vldr	s1, [pc, #592]	; 80010ac <main+0x2b0>
 8000e5c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80010b0 <main+0x2b4>
 8000e60:	f7ff fd6e 	bl	8000940 <initColorMaps>

#ifndef PAR_TFT
	swapRGBBytes();
#endif

	setLeftWindow();
 8000e64:	f001 fa2e 	bl	80022c4 <setLeftWindow>

	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID,
 8000e68:	4a92      	ldr	r2, [pc, #584]	; (80010b4 <main+0x2b8>)
 8000e6a:	2114      	movs	r1, #20
 8000e6c:	4892      	ldr	r0, [pc, #584]	; (80010b8 <main+0x2bc>)
 8000e6e:	f008 f871 	bl	8008f54 <HAL_TIM_RegisterCallback>
			VSyncCallback);

	HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_TX_COMPLETE_CB_ID,
 8000e72:	4a92      	ldr	r2, [pc, #584]	; (80010bc <main+0x2c0>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4892      	ldr	r0, [pc, #584]	; (80010c0 <main+0x2c4>)
 8000e78:	f006 fd8c 	bl	8007994 <HAL_SPI_RegisterCallback>
			SPIFullCallback);
	HAL_DMA_RegisterCallback(&hdma_tim20_ch1, HAL_DMA_XFER_CPLT_CB_ID,
 8000e7c:	4a91      	ldr	r2, [pc, #580]	; (80010c4 <main+0x2c8>)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4891      	ldr	r0, [pc, #580]	; (80010c8 <main+0x2cc>)
 8000e82:	f005 f9b7 	bl	80061f4 <HAL_DMA_RegisterCallback>
			GPIODMAComplete);

	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID,
 8000e86:	4a91      	ldr	r2, [pc, #580]	; (80010cc <main+0x2d0>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4891      	ldr	r0, [pc, #580]	; (80010d0 <main+0x2d4>)
 8000e8c:	f003 f902 	bl	8004094 <HAL_ADC_RegisterCallback>
			ADCCallback);
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_HALF_CB_ID,
 8000e90:	4a8e      	ldr	r2, [pc, #568]	; (80010cc <main+0x2d0>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	488e      	ldr	r0, [pc, #568]	; (80010d0 <main+0x2d4>)
 8000e96:	f003 f8fd 	bl	8004094 <HAL_ADC_RegisterCallback>
			ADCCallback);

	HAL_COMP_Start(&hcomp1);
 8000e9a:	488e      	ldr	r0, [pc, #568]	; (80010d4 <main+0x2d8>)
 8000e9c:	f004 fe26 	bl	8005aec <HAL_COMP_Start>
	HAL_TIM_Base_Start(&htim4); // hysnc
 8000ea0:	488d      	ldr	r0, [pc, #564]	; (80010d8 <main+0x2dc>)
 8000ea2:	f006 fed1 	bl	8007c48 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1); // sample clock
 8000ea6:	488d      	ldr	r0, [pc, #564]	; (80010dc <main+0x2e0>)
 8000ea8:	f006 fece 	bl	8007c48 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3); // vsync
 8000eac:	4882      	ldr	r0, [pc, #520]	; (80010b8 <main+0x2bc>)
 8000eae:	f006 ff3b 	bl	8007d28 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8); // Parallel TFT DMA line clock
 8000eb2:	488b      	ldr	r0, [pc, #556]	; (80010e0 <main+0x2e4>)
 8000eb4:	f006 fec8 	bl	8007c48 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim20); // Parallel TFT DMA pixel clock
 8000eb8:	488a      	ldr	r0, [pc, #552]	; (80010e4 <main+0x2e8>)
 8000eba:	f006 fec5 	bl	8007c48 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim2);
 8000ebe:	488a      	ldr	r0, [pc, #552]	; (80010e8 <main+0x2ec>)
 8000ec0:	f006 fec2 	bl	8007c48 <HAL_TIM_Base_Start>

	//HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_LEN);
	__HAL_TIM_ENABLE_DMA(&htim20, TIM_DMA_CC1);
 8000ec4:	4b87      	ldr	r3, [pc, #540]	; (80010e4 <main+0x2e8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	4b86      	ldr	r3, [pc, #536]	; (80010e4 <main+0x2e8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ed2:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_OnePulse_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4880      	ldr	r0, [pc, #512]	; (80010d8 <main+0x2dc>)
 8000ed8:	f007 f8d8 	bl	800808c <HAL_TIM_OnePulse_Start>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <main+0xea>
		/* Starting Error */
		Error_Handler();
 8000ee2:	f000 facb 	bl	800147c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	487c      	ldr	r0, [pc, #496]	; (80010dc <main+0x2e0>)
 8000eea:	f007 f8cf 	bl	800808c <HAL_TIM_OnePulse_Start>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <main+0xfc>
		/* Starting Error */
		Error_Handler();
 8000ef4:	f000 fac2 	bl	800147c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK) {
 8000ef8:	2100      	movs	r1, #0
 8000efa:	486f      	ldr	r0, [pc, #444]	; (80010b8 <main+0x2bc>)
 8000efc:	f007 f944 	bl	8008188 <HAL_TIM_OnePulse_Start_IT>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <main+0x10e>
		/* Starting Error */
		Error_Handler();
 8000f06:	f000 fab9 	bl	800147c <Error_Handler>
	}

	if (HAL_TIM_OnePulse_Start_IT(&htim20, TIM_CHANNEL_1) != HAL_OK) {
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4875      	ldr	r0, [pc, #468]	; (80010e4 <main+0x2e8>)
 8000f0e:	f007 f93b 	bl	8008188 <HAL_TIM_OnePulse_Start_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <main+0x120>
		/* Starting Error */
		Error_Handler();
 8000f18:	f000 fab0 	bl	800147c <Error_Handler>
	}
	HAL_TIM_OnePulse_Start(&htim8, TIM_CHANNEL_1);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4870      	ldr	r0, [pc, #448]	; (80010e0 <main+0x2e4>)
 8000f20:	f007 f8b4 	bl	800808c <HAL_TIM_OnePulse_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f24:	213c      	movs	r1, #60	; 0x3c
 8000f26:	4870      	ldr	r0, [pc, #448]	; (80010e8 <main+0x2ec>)
 8000f28:	f007 fa70 	bl	800840c <HAL_TIM_Encoder_Start>

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	496e      	ldr	r1, [pc, #440]	; (80010ec <main+0x2f0>)
 8000f32:	4867      	ldr	r0, [pc, #412]	; (80010d0 <main+0x2d4>)
 8000f34:	f004 f804 	bl	8004f40 <HAL_ADCEx_MultiModeStart_DMA>

	line = BLANKING_LINES; // Line 0 is when we detect vsync at the end of a frame
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <main+0x2f4>)
 8000f3a:	2227      	movs	r2, #39	; 0x27
 8000f3c:	801a      	strh	r2, [r3, #0]
	captureState = CAPTURE_STATE_SEEKING_SYNC;
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <main+0x2f8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]

	dmaState = DMA_CAPTURE_STATE_IDLE;
 8000f44:	4b6c      	ldr	r3, [pc, #432]	; (80010f8 <main+0x2fc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]

	rgbBufIdx = 0;
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <main+0x300>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
	rgbBufchunk = 0;
 8000f50:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <main+0x304>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	pix = 0;
 8000f56:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <main+0x308>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	801a      	strh	r2, [r3, #0]
	frameReady = 0;
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <main+0x30c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]

	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8000f62:	4b51      	ldr	r3, [pc, #324]	; (80010a8 <main+0x2ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f6a:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <main+0x2ac>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6013      	str	r3, [r2, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(htim2.Instance->CNT != encoderPosition) {
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <main+0x2ec>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	4a64      	ldr	r2, [pc, #400]	; (800110c <main+0x310>)
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d008      	beq.n	8000f94 <main+0x198>
			encoderPosition = htim2.Instance->CNT;
 8000f82:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <main+0x2ec>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b60      	ldr	r3, [pc, #384]	; (800110c <main+0x310>)
 8000f8c:	701a      	strb	r2, [r3, #0]
			encoderChanged = 1;
 8000f8e:	4b60      	ldr	r3, [pc, #384]	; (8001110 <main+0x314>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
		}

		switch (captureState) {
 8000f94:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <main+0x2f8>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d825      	bhi.n	8000fea <main+0x1ee>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <main+0x1a8>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000feb 	.word	0x08000feb
 8000fa8:	08000fbd 	.word	0x08000fbd
 8000fac:	08000feb 	.word	0x08000feb
 8000fb0:	08000feb 	.word	0x08000feb
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fd3 	.word	0x08000fd3

		case CAPTURE_STATE_SEEKING_SYNC:
			break;

		case CAPTURE_STATE_FOUND_SYNC:
			captureState = CAPTURE_STATE_START_GRAB;
 8000fbc:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <main+0x2f8>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
			break;
 8000fc2:	e015      	b.n	8000ff0 <main+0x1f4>

		case CAPTURE_STATE_GRABBED:
			captureState = CAPTURE_STATE_IDLE;
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <main+0x2f8>)
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	701a      	strb	r2, [r3, #0]
			frameReady = 1;
 8000fca:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <main+0x30c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
			break;
 8000fd0:	e00e      	b.n	8000ff0 <main+0x1f4>

		case CAPTURE_STATE_IDLE:

			if (frameReady == 0) {
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <main+0x30c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d108      	bne.n	8000fee <main+0x1f2>
				captureState = CAPTURE_STATE_START_GRAB;
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <main+0x2f8>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	701a      	strb	r2, [r3, #0]
				pix=0;
 8000fe2:	4b48      	ldr	r3, [pc, #288]	; (8001104 <main+0x308>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	801a      	strh	r2, [r3, #0]
			}

			break;
 8000fe8:	e001      	b.n	8000fee <main+0x1f2>

		default:
			break;
 8000fea:	bf00      	nop
 8000fec:	e000      	b.n	8000ff0 <main+0x1f4>
			break;
 8000fee:	bf00      	nop
		}

		switch (dmaState) {
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <main+0x2fc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	f200 80c3 	bhi.w	8001182 <main+0x386>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <main+0x208>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	08001015 	.word	0x08001015
 8001008:	08001029 	.word	0x08001029
 800100c:	08001183 	.word	0x08001183
 8001010:	08001087 	.word	0x08001087

		case DMA_CAPTURE_STATE_IDLE:
			if (frameReady == 1) {
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <main+0x30c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	f040 80b3 	bne.w	8001186 <main+0x38a>
				dmaState = DMA_STATE_START;
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <main+0x2fc>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001026:	e0ae      	b.n	8001186 <main+0x38a>
			vsync();
			while(SPI2->SR & SPI_SR_BSY) {
				__NOP();
			}
#else
			vsync();
 8001028:	f001 f9aa 	bl	8002380 <vsync>
#endif

			rgbBufchunk = 0;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <main+0x304>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
			rgbBufIdx = 0;
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <main+0x300>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
			dmaState = DMA_STATE_RUNNING;
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <main+0x2fc>)
 800103a:	2202      	movs	r2, #2
 800103c:	701a      	strb	r2, [r3, #0]
#ifndef PAR_TFT
			HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&rgbBuf, RGB_BUF_CHUNK_BYTES);
#else
			TIM20->DIER &= ~ TIM_DIER_CC1DE;
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <main+0x318>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	4a34      	ldr	r2, [pc, #208]	; (8001114 <main+0x318>)
 8001044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001048:	60d3      	str	r3, [r2, #12]
			TIM20->DIER |= TIM_DIER_CC1DE;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <main+0x318>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <main+0x318>)
 8001050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001054:	60d3      	str	r3, [r2, #12]
			HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 8001056:	4930      	ldr	r1, [pc, #192]	; (8001118 <main+0x31c>)
 8001058:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800105c:	4a2f      	ldr	r2, [pc, #188]	; (800111c <main+0x320>)
 800105e:	481a      	ldr	r0, [pc, #104]	; (80010c8 <main+0x2cc>)
 8001060:	f004 ff44 	bl	8005eec <HAL_DMA_Start_IT>

			GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <main+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <main+0x2ac>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6013      	str	r3, [r2, #0]

			__HAL_TIM_ENABLE(&htim8);
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <main+0x2e4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <main+0x2e4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
#endif
			break;
 8001084:	e080      	b.n	8001188 <main+0x38c>

		case DMA_STATE_RUNNING:
			break;

		case DMA_STATE_CHUNK_COMPLETE:
			rgbBufchunk++;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <main+0x304>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x304>)
 8001090:	701a      	strb	r2, [r3, #0]

			if (rgbBufchunk == RGB_BUF_CHUNKS) {
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <main+0x304>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d142      	bne.n	8001120 <main+0x324>
				dmaState = DMA_CAPTURE_STATE_IDLE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <main+0x2fc>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				frameReady = 0;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <main+0x30c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
				__HAL_TIM_ENABLE(&htim8);
#endif
				}
			break;
 80010a6:	e06f      	b.n	8001188 <main+0x38c>
 80010a8:	48000400 	.word	0x48000400
 80010ac:	3fdc28f6 	.word	0x3fdc28f6
 80010b0:	3f6a3678 	.word	0x3f6a3678
 80010b4:	08001375 	.word	0x08001375
 80010b8:	20018f3c 	.word	0x20018f3c
 80010bc:	080013f5 	.word	0x080013f5
 80010c0:	20018cb8 	.word	0x20018cb8
 80010c4:	08001415 	.word	0x08001415
 80010c8:	20019404 	.word	0x20019404
 80010cc:	08001245 	.word	0x08001245
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	20000248 	.word	0x20000248
 80010d8:	20019008 	.word	0x20019008
 80010dc:	20018da4 	.word	0x20018da4
 80010e0:	200191a0 	.word	0x200191a0
 80010e4:	20019338 	.word	0x20019338
 80010e8:	20018e70 	.word	0x20018e70
 80010ec:	20018474 	.word	0x20018474
 80010f0:	20018c74 	.word	0x20018c74
 80010f4:	20018c76 	.word	0x20018c76
 80010f8:	20018c78 	.word	0x20018c78
 80010fc:	2001846c 	.word	0x2001846c
 8001100:	20018470 	.word	0x20018470
 8001104:	20018c7a 	.word	0x20018c7a
 8001108:	20018c77 	.word	0x20018c77
 800110c:	20018c7d 	.word	0x20018c7d
 8001110:	20018c7c 	.word	0x20018c7c
 8001114:	40015000 	.word	0x40015000
 8001118:	2000046c 	.word	0x2000046c
 800111c:	48000814 	.word	0x48000814
				dmaState = DMA_STATE_RUNNING;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <main+0x390>)
 8001122:	2202      	movs	r2, #2
 8001124:	701a      	strb	r2, [r3, #0]
				TIM20->DIER &= ~ TIM_DIER_CC1DE;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <main+0x394>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <main+0x394>)
 800112c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001130:	60d3      	str	r3, [r2, #12]
				TIM20->DIER |= TIM_DIER_CC1DE;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <main+0x394>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <main+0x394>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113c:	60d3      	str	r3, [r2, #12]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <main+0x398>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	039b      	lsls	r3, r3, #14
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <main+0x39c>)
 8001150:	4413      	add	r3, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <main+0x3a0>)
 800115a:	4811      	ldr	r0, [pc, #68]	; (80011a0 <main+0x3a4>)
 800115c:	f004 fec6 	bl	8005eec <HAL_DMA_Start_IT>
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <main+0x3a8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <main+0x3a8>)
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	6013      	str	r3, [r2, #0]
				__HAL_TIM_ENABLE(&htim8);
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <main+0x3ac>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <main+0x3ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
			break;
 8001180:	e002      	b.n	8001188 <main+0x38c>

		default:
			break;
 8001182:	bf00      	nop
 8001184:	e6f5      	b.n	8000f72 <main+0x176>
			break;
 8001186:	bf00      	nop
		if(htim2.Instance->CNT != encoderPosition) {
 8001188:	e6f3      	b.n	8000f72 <main+0x176>
 800118a:	bf00      	nop
 800118c:	20018c78 	.word	0x20018c78
 8001190:	40015000 	.word	0x40015000
 8001194:	20018470 	.word	0x20018470
 8001198:	2000046c 	.word	0x2000046c
 800119c:	48000814 	.word	0x48000814
 80011a0:	20019404 	.word	0x20019404
 80011a4:	48000400 	.word	0x48000400
 80011a8:	200191a0 	.word	0x200191a0

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2238      	movs	r2, #56	; 0x38
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 f9ba 	bl	800a534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d2:	f005 fae3 	bl	800679c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e4:	2303      	movs	r3, #3
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011ec:	2320      	movs	r3, #32
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fb6f 	bl	80068e4 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800120c:	f000 f936 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2303      	movs	r3, #3
 8001216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2103      	movs	r1, #3
 8001228:	4618      	mov	r0, r3
 800122a:	f005 fe73 	bl	8006f14 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001234:	f000 f922 	bl	800147c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001238:	f006 f80a 	bl	8007250 <HAL_RCC_EnableCSS>
}
 800123c:	bf00      	nop
 800123e:	3750      	adds	r7, #80	; 0x50
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <ADCCallback>:

/* USER CODE BEGIN 4 */

void ADCCallback(ADC_HandleTypeDef *hadc) {
 8001244:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	register uint8_t y;
	register uint8_t ry;
	register uint16_t bits;
	register uint8_t b;
	register uint16_t pixel = pix;
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <ADCCallback+0x108>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29c      	uxth	r4, r3
	register uint16_t i = PIXELS_PER_LINE;
 8001254:	f44f 7680 	mov.w	r6, #256	; 0x100
	line++;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <ADCCallback+0x10c>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	3301      	adds	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <ADCCallback+0x10c>)
 8001268:	801a      	strh	r2, [r3, #0]
	if (line > FRAME_LINES)
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <ADCCallback+0x10c>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b21b      	sxth	r3, r3
 8001270:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001274:	db02      	blt.n	800127c <ADCCallback+0x38>
		line = 1;
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <ADCCallback+0x10c>)
 8001278:	2201      	movs	r2, #1
 800127a:	801a      	strh	r2, [r3, #0]

	if (captureState != CAPTURE_STATE_GRABBING)
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <ADCCallback+0x110>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b03      	cmp	r3, #3
 8001284:	d15b      	bne.n	800133e <ADCCallback+0xfa>
		return;

	if (line > FIRST_VISIBLE_LINE && line < (LAST_VISIBLE_LINE + 2)) { // don't capture the previous line - it was part of frame blanking
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <ADCCallback+0x10c>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	b21b      	sxth	r3, r3
 800128c:	2b28      	cmp	r3, #40	; 0x28
 800128e:	dd4e      	ble.n	800132e <ADCCallback+0xea>
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <ADCCallback+0x10c>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	b21b      	sxth	r3, r3
 8001296:	2be8      	cmp	r3, #232	; 0xe8
 8001298:	dc49      	bgt.n	800132e <ADCCallback+0xea>

		while (i > 0) {
 800129a:	e046      	b.n	800132a <ADCCallback+0xe6>

			y = (((uint16_t*) adcbuf)[pixel] & 0xff) >> (8 - ADC_RESOLUTION_BITS);
 800129c:	4623      	mov	r3, r4
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4a2d      	ldr	r2, [pc, #180]	; (8001358 <ADCCallback+0x114>)
 80012a2:	4413      	add	r3, r2
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	109b      	asrs	r3, r3, #2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ae:	fa5f f883 	uxtb.w	r8, r3
			ry = (((uint16_t*) adcbuf)[pixel] >> (16 - ADC_RESOLUTION_BITS));
 80012b2:	4623      	mov	r3, r4
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4a28      	ldr	r2, [pc, #160]	; (8001358 <ADCCallback+0x114>)
 80012b8:	4413      	add	r3, r2
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	0a9b      	lsrs	r3, r3, #10
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b2dd      	uxtb	r5, r3

			bits = YMap[y] & RYMap[ry];
 80012c2:	4642      	mov	r2, r8
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <ADCCallback+0x118>)
 80012c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80012ca:	4629      	mov	r1, r5
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <ADCCallback+0x11c>)
 80012ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80012d2:	4013      	ands	r3, r2
 80012d4:	fa1f f883 	uxth.w	r8, r3

			b = bitMap[bits >> 8];
 80012d8:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <ADCCallback+0x120>)
 80012e2:	5c9d      	ldrb	r5, [r3, r2]
			if(b == 0) {
 80012e4:	2d00      	cmp	r5, #0
 80012e6:	d104      	bne.n	80012f2 <ADCCallback+0xae>
				b = bitMap[bits & 0xff];
 80012e8:	4643      	mov	r3, r8
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <ADCCallback+0x120>)
 80012ee:	5cd5      	ldrb	r5, [r2, r3]
 80012f0:	e002      	b.n	80012f8 <ADCCallback+0xb4>
			} else {
				b+=8;
 80012f2:	f105 0308 	add.w	r3, r5, #8
 80012f6:	b2dd      	uxtb	r5, r3
			}

			if (rgbBufIdx < RGB_BUF_LEN) {
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <ADCCallback+0x124>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001300:	d20d      	bcs.n	800131e <ADCCallback+0xda>

				rgbBuf[rgbBufIdx] = rgbMap[b];
 8001302:	4629      	mov	r1, r5
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <ADCCallback+0x124>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <ADCCallback+0x128>)
 800130a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800130e:	4a18      	ldr	r2, [pc, #96]	; (8001370 <ADCCallback+0x12c>)
 8001310:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				rgbBufIdx++;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <ADCCallback+0x124>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <ADCCallback+0x124>)
 800131c:	6013      	str	r3, [r2, #0]
			}
			pixel++;
 800131e:	4623      	mov	r3, r4
 8001320:	3301      	adds	r3, #1
 8001322:	b29c      	uxth	r4, r3
			i--;
 8001324:	4633      	mov	r3, r6
 8001326:	3b01      	subs	r3, #1
 8001328:	b29e      	uxth	r6, r3
		while (i > 0) {
 800132a:	2e00      	cmp	r6, #0
 800132c:	d1b6      	bne.n	800129c <ADCCallback+0x58>
		}
	}

	if (pixel >= 512) {
 800132e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8001332:	d300      	bcc.n	8001336 <ADCCallback+0xf2>
		pixel = 0;
 8001334:	2400      	movs	r4, #0
	}

	pix = pixel;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <ADCCallback+0x108>)
 8001338:	4622      	mov	r2, r4
 800133a:	801a      	strh	r2, [r3, #0]
 800133c:	e000      	b.n	8001340 <ADCCallback+0xfc>
		return;
 800133e:	bf00      	nop
}
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20018c7a 	.word	0x20018c7a
 8001350:	20018c74 	.word	0x20018c74
 8001354:	20018c76 	.word	0x20018c76
 8001358:	20018474 	.word	0x20018474
 800135c:	2000026c 	.word	0x2000026c
 8001360:	200002ec 	.word	0x200002ec
 8001364:	2000036c 	.word	0x2000036c
 8001368:	2001846c 	.word	0x2001846c
 800136c:	20000000 	.word	0x20000000
 8001370:	2000046c 	.word	0x2000046c

08001374 <VSyncCallback>:

void VSyncCallback(TIM_HandleTypeDef *htim) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

	line = LAST_VISIBLE_LINE + BOTTOM_BORDER;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <VSyncCallback+0x68>)
 800137e:	f240 1207 	movw	r2, #263	; 0x107
 8001382:	801a      	strh	r2, [r3, #0]
	pix = 0;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <VSyncCallback+0x6c>)
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]

	switch (captureState) {
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <VSyncCallback+0x70>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <VSyncCallback+0x50>
 8001394:	2b03      	cmp	r3, #3
 8001396:	dc1b      	bgt.n	80013d0 <VSyncCallback+0x5c>
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <VSyncCallback+0x2e>
 800139c:	2b02      	cmp	r3, #2
 800139e:	d004      	beq.n	80013aa <VSyncCallback+0x36>
	case CAPTURE_STATE_GRABBING:
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		captureState = CAPTURE_STATE_GRABBED;

	default:
		break;
 80013a0:	e016      	b.n	80013d0 <VSyncCallback+0x5c>
		captureState = CAPTURE_STATE_FOUND_SYNC;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <VSyncCallback+0x70>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
		break;
 80013a8:	e013      	b.n	80013d2 <VSyncCallback+0x5e>
		captureState = CAPTURE_STATE_GRABBING;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <VSyncCallback+0x70>)
 80013ac:	2203      	movs	r2, #3
 80013ae:	701a      	strb	r2, [r3, #0]
		rgbBufIdx = 0;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <VSyncCallback+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 80013b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ba:	490c      	ldr	r1, [pc, #48]	; (80013ec <VSyncCallback+0x78>)
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <VSyncCallback+0x7c>)
 80013be:	f003 fdbf 	bl	8004f40 <HAL_ADCEx_MultiModeStart_DMA>
		break;
 80013c2:	e006      	b.n	80013d2 <VSyncCallback+0x5e>
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <VSyncCallback+0x7c>)
 80013c6:	f003 fe7d 	bl	80050c4 <HAL_ADCEx_MultiModeStop_DMA>
		captureState = CAPTURE_STATE_GRABBED;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <VSyncCallback+0x70>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	701a      	strb	r2, [r3, #0]
		break;
 80013d0:	bf00      	nop

	}
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20018c74 	.word	0x20018c74
 80013e0:	20018c7a 	.word	0x20018c7a
 80013e4:	20018c76 	.word	0x20018c76
 80013e8:	2001846c 	.word	0x2001846c
 80013ec:	20018474 	.word	0x20018474
 80013f0:	200000b4 	.word	0x200000b4

080013f4 <SPIFullCallback>:

void SPIFullCallback(SPI_HandleTypeDef *spi) {
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SPIFullCallback+0x1c>)
 80013fe:	2203      	movs	r2, #3
 8001400:	701a      	strb	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20018c78 	.word	0x20018c78

08001414 <GPIODMAComplete>:

void GPIODMAComplete(DMA_HandleTypeDef *dma) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <GPIODMAComplete+0x5c>)
 800141e:	2203      	movs	r2, #3
 8001420:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim8);
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <GPIODMAComplete+0x60>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	f241 1311 	movw	r3, #4369	; 0x1111
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10f      	bne.n	8001452 <GPIODMAComplete+0x3e>
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <GPIODMAComplete+0x60>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	f244 4344 	movw	r3, #17476	; 0x4444
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <GPIODMAComplete+0x3e>
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <GPIODMAComplete+0x60>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <GPIODMAComplete+0x60>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <GPIODMAComplete+0x64>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <GPIODMAComplete+0x64>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20018c78 	.word	0x20018c78
 8001474:	200191a0 	.word	0x200191a0
 8001478:	48000400 	.word	0x48000400

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>
	...

08001488 <_ZN6GFX_HWC1Ev>:
#ifndef INC_GFX_HW_H_
#define INC_GFX_HW_H_

#include "main.h"

class GFX_HW {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <_ZN6GFX_HWC1Ev+0x1c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	0800a7f0 	.word	0x0800a7f0

080014a8 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>:
#include "GFX_HW.h"

class GFX_HW_PAR16: public GFX_HW {
public:

	GFX_HW_PAR16(
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	807b      	strh	r3, [r7, #2]
			GPIO_TypeDef *dataPort,
			GPIO_TypeDef *csPort, uint16_t csPin,
			GPIO_TypeDef *dcPort, uint16_t dcPin,
			GPIO_TypeDef *wrPort, uint16_t wrPin,
			GPIO_TypeDef *rdPort, uint16_t rdPin,
			GPIO_TypeDef *rsPort, uint16_t rsPin) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ffe5 	bl	8001488 <_ZN6GFX_HWC1Ev>
 80014be:	4a28      	ldr	r2, [pc, #160]	; (8001560 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t+0xb8>)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	601a      	str	r2, [r3, #0]

		_dataPort = dataPort;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	605a      	str	r2, [r3, #4]
		_csPort = csPort; _csPin = csPin;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	839a      	strh	r2, [r3, #28]
		_dcPort = dcPort; _dcPin = dcPin;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8bba      	ldrh	r2, [r7, #28]
 80014e0:	83da      	strh	r2, [r3, #30]
		_wrPort = wrPort; _wrPin = wrPin;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a3a      	ldr	r2, [r7, #32]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014ec:	841a      	strh	r2, [r3, #32]
		_rdPort = rdPort; _rdPin = rdPin;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80014f8:	845a      	strh	r2, [r3, #34]	; 0x22
		_rsPort = rsPort; _rsPin = rsPin;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001504:	849a      	strh	r2, [r3, #36]	; 0x24
		high(_dcPort, _dcPin);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	68d9      	ldr	r1, [r3, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8bdb      	ldrh	r3, [r3, #30]
 800150e:	461a      	mov	r2, r3
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 fc74 	bl	8001dfe <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_csPort, _csPin);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6899      	ldr	r1, [r3, #8]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8b9b      	ldrh	r3, [r3, #28]
 800151e:	461a      	mov	r2, r3
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fc6c 	bl	8001dfe <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_wrPort, _wrPin);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8c1b      	ldrh	r3, [r3, #32]
 800152e:	461a      	mov	r2, r3
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fc64 	bl	8001dfe <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rdPort, _rdPin);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6959      	ldr	r1, [r3, #20]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800153e:	461a      	mov	r2, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 fc5c 	bl	8001dfe <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rsPort, _rsPin);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6999      	ldr	r1, [r3, #24]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800154e:	461a      	mov	r2, r3
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fc54 	bl	8001dfe <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
	}
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	0800a7a4 	.word	0x0800a7a4

08001564 <_ZN12GFX_HW_PAR165resetEm>:

	virtual void reset(uint32_t delay_us) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]

		high(_dcPort, _dcPin);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3338      	adds	r3, #56	; 0x38
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68d1      	ldr	r1, [r2, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	8bd2      	ldrh	r2, [r2, #30]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
		high(_csPort, _csPin);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3338      	adds	r3, #56	; 0x38
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6891      	ldr	r1, [r2, #8]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	8b92      	ldrh	r2, [r2, #28]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3338      	adds	r3, #56	; 0x38
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6911      	ldr	r1, [r2, #16]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	8c12      	ldrh	r2, [r2, #32]
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
		high(_rdPort, _rdPin);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3338      	adds	r3, #56	; 0x38
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6951      	ldr	r1, [r2, #20]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
		high(_rsPort, _rsPin);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3338      	adds	r3, #56	; 0x38
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6991      	ldr	r1, [r2, #24]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3

		low(_rsPort, _rsPin);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3334      	adds	r3, #52	; 0x34
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6991      	ldr	r1, [r2, #24]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
		MY_Delay1();
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3340      	adds	r3, #64	; 0x40
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
		high(_rsPort, _rsPin);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3338      	adds	r3, #56	; 0x38
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6991      	ldr	r1, [r2, #24]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
	}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZN12GFX_HW_PAR1611sendCommandEhPKhh>:



	virtual void sendCommand(uint8_t commandByte, const uint8_t *dataBytes =
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	461a      	mov	r2, r3
 800161a:	460b      	mov	r3, r1
 800161c:	72fb      	strb	r3, [r7, #11]
 800161e:	4613      	mov	r3, r2
 8001620:	72bb      	strb	r3, [r7, #10]
	NULL, uint8_t numDataBytes = 0) {
		MY_Delay();
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	333c      	adds	r3, #60	; 0x3c
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	4798      	blx	r3
		low(_csPort, _csPin);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3334      	adds	r3, #52	; 0x34
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	6891      	ldr	r1, [r2, #8]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	8b92      	ldrh	r2, [r2, #28]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	4798      	blx	r3
		MY_Delay();
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	333c      	adds	r3, #60	; 0x3c
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	4798      	blx	r3
		low(_dcPort, _dcPin);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3334      	adds	r3, #52	; 0x34
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	68d1      	ldr	r1, [r2, #12]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	8bd2      	ldrh	r2, [r2, #30]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	4798      	blx	r3
		MY_Delay();
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	333c      	adds	r3, #60	; 0x3c
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	4798      	blx	r3
		low(_wrPort, _wrPin);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3334      	adds	r3, #52	; 0x34
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6911      	ldr	r1, [r2, #16]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	8c12      	ldrh	r2, [r2, #32]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	7afa      	ldrb	r2, [r7, #11]
 8001688:	615a      	str	r2, [r3, #20]
		MY_Delay();
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	333c      	adds	r3, #60	; 0x3c
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	4798      	blx	r3

		high(_wrPort, _wrPin);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3338      	adds	r3, #56	; 0x38
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6911      	ldr	r1, [r2, #16]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	8c12      	ldrh	r2, [r2, #32]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	4798      	blx	r3
		MY_Delay();
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	333c      	adds	r3, #60	; 0x3c
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3338      	adds	r3, #56	; 0x38
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	68d1      	ldr	r1, [r2, #12]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	8bd2      	ldrh	r2, [r2, #30]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3324      	adds	r3, #36	; 0x24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	7aba      	ldrb	r2, [r7, #10]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	4798      	blx	r3

		high(_csPort, _csPin);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3338      	adds	r3, #56	; 0x38
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	6891      	ldr	r1, [r2, #8]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	8b92      	ldrh	r2, [r2, #28]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	4798      	blx	r3
	}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN12GFX_HW_PAR1613sendCommand16EtPKhh>:

	virtual void sendCommand16(uint16_t commandWord, const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	461a      	mov	r2, r3
 8001702:	460b      	mov	r3, r1
 8001704:	817b      	strh	r3, [r7, #10]
 8001706:	4613      	mov	r3, r2
 8001708:	727b      	strb	r3, [r7, #9]
		MY_Delay();
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	333c      	adds	r3, #60	; 0x3c
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	4798      	blx	r3
		low(_csPort, _csPin);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3334      	adds	r3, #52	; 0x34
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6891      	ldr	r1, [r2, #8]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	8b92      	ldrh	r2, [r2, #28]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	4798      	blx	r3
		MY_Delay();
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	333c      	adds	r3, #60	; 0x3c
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3334      	adds	r3, #52	; 0x34
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	68d1      	ldr	r1, [r2, #12]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	8bd2      	ldrh	r2, [r2, #30]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	897a      	ldrh	r2, [r7, #10]
 8001750:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3334      	adds	r3, #52	; 0x34
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	6911      	ldr	r1, [r2, #16]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	8c12      	ldrh	r2, [r2, #32]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	4798      	blx	r3
		MY_Delay();
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	333c      	adds	r3, #60	; 0x3c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3338      	adds	r3, #56	; 0x38
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	6911      	ldr	r1, [r2, #16]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	8c12      	ldrh	r2, [r2, #32]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	4798      	blx	r3

		MY_Delay();
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	333c      	adds	r3, #60	; 0x3c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3338      	adds	r3, #56	; 0x38
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	68d1      	ldr	r1, [r2, #12]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	8bd2      	ldrh	r2, [r2, #30]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	7a7a      	ldrb	r2, [r7, #9]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	4798      	blx	r3

		high(_csPort, _csPin);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3338      	adds	r3, #56	; 0x38
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	6891      	ldr	r1, [r2, #8]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	8b92      	ldrh	r2, [r2, #28]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	4798      	blx	r3
	}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZN12GFX_HW_PAR1613sendCommand16Ett>:

	virtual void sendCommand16(uint16_t commandWord, uint16_t data) {
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]
 80017de:	4613      	mov	r3, r2
 80017e0:	803b      	strh	r3, [r7, #0]

		MY_Delay1();
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3340      	adds	r3, #64	; 0x40
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
		low(_dcPort, _dcPin);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3334      	adds	r3, #52	; 0x34
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68d1      	ldr	r1, [r2, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	8bd2      	ldrh	r2, [r2, #30]
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
		MY_Delay1();
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3340      	adds	r3, #64	; 0x40
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
		low(_csPort, _csPin);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3334      	adds	r3, #52	; 0x34
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6891      	ldr	r1, [r2, #8]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	8b92      	ldrh	r2, [r2, #28]
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
		MY_Delay1();
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3340      	adds	r3, #64	; 0x40
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3334      	adds	r3, #52	; 0x34
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6911      	ldr	r1, [r2, #16]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	8c12      	ldrh	r2, [r2, #32]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
		MY_Delay1();
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3340      	adds	r3, #64	; 0x40
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3338      	adds	r3, #56	; 0x38
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6911      	ldr	r1, [r2, #16]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	8c12      	ldrh	r2, [r2, #32]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3

		MY_Delay1();
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3340      	adds	r3, #64	; 0x40
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3338      	adds	r3, #56	; 0x38
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68d1      	ldr	r1, [r2, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	8bd2      	ldrh	r2, [r2, #30]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
		MY_Delay1();
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3340      	adds	r3, #64	; 0x40
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3

		_dataPort->ODR = data;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	883a      	ldrh	r2, [r7, #0]
 800189c:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3334      	adds	r3, #52	; 0x34
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6911      	ldr	r1, [r2, #16]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	8c12      	ldrh	r2, [r2, #32]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
		MY_Delay1();
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3340      	adds	r3, #64	; 0x40
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3338      	adds	r3, #56	; 0x38
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6911      	ldr	r1, [r2, #16]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	8c12      	ldrh	r2, [r2, #32]
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3

		high(_csPort, _csPin);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3338      	adds	r3, #56	; 0x38
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6891      	ldr	r1, [r2, #8]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	8b92      	ldrh	r2, [r2, #28]
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3338      	adds	r3, #56	; 0x38
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68d1      	ldr	r1, [r2, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	8bd2      	ldrh	r2, [r2, #30]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3

		MY_Delay();
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	333c      	adds	r3, #60	; 0x3c
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
	}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_ZN12GFX_HW_PAR1612readcommand8Ehh>:

	virtual uint8_t readcommand8(uint8_t commandByte, uint8_t index = 0) {
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	70fb      	strb	r3, [r7, #3]
 800191a:	4613      	mov	r3, r2
 800191c:	70bb      	strb	r3, [r7, #2]

		uint8_t result = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
		low(_dcPort, _dcPin);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3334      	adds	r3, #52	; 0x34
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68d1      	ldr	r1, [r2, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	8bd2      	ldrh	r2, [r2, #30]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
		MY_Delay();
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	333c      	adds	r3, #60	; 0x3c
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
		low(_csPort, _csPin);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3334      	adds	r3, #52	; 0x34
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6891      	ldr	r1, [r2, #8]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	8b92      	ldrh	r2, [r2, #28]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
		low(_wrPort, _wrPin);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3334      	adds	r3, #52	; 0x34
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6911      	ldr	r1, [r2, #16]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	8c12      	ldrh	r2, [r2, #32]
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	333c      	adds	r3, #60	; 0x3c
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
		high(_wrPort, _wrPin);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3338      	adds	r3, #56	; 0x38
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6911      	ldr	r1, [r2, #16]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	8c12      	ldrh	r2, [r2, #32]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
		MY_Delay();
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	333c      	adds	r3, #60	; 0x3c
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
		high(_dcPort, _dcPin);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3338      	adds	r3, #56	; 0x38
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68d1      	ldr	r1, [r2, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	8bd2      	ldrh	r2, [r2, #30]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

		while(index > 0) {
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d027      	beq.n	8001a10 <_ZN12GFX_HW_PAR1612readcommand8Ehh+0x102>

			MY_Delay();
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	333c      	adds	r3, #60	; 0x3c
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
			low(_rdPort, _rdPin);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3334      	adds	r3, #52	; 0x34
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6951      	ldr	r1, [r2, #20]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
			MY_Delay();
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	333c      	adds	r3, #60	; 0x3c
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3

			result = _dataPort->IDR & 0x00ff;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	73fb      	strb	r3, [r7, #15]
			index--;
 80019f4:	78bb      	ldrb	r3, [r7, #2]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	70bb      	strb	r3, [r7, #2]

			high(_rdPort, _rdPin);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3338      	adds	r3, #56	; 0x38
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6951      	ldr	r1, [r2, #20]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
		while(index > 0) {
 8001a0e:	e7d4      	b.n	80019ba <_ZN12GFX_HW_PAR1612readcommand8Ehh+0xac>
		}

		high(_csPort, _csPin);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3338      	adds	r3, #56	; 0x38
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6891      	ldr	r1, [r2, #8]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	8b92      	ldrh	r2, [r2, #28]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
		MY_Delay();
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	333c      	adds	r3, #60	; 0x3c
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
		_dataPort->MODER = 0x5555;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f245 5255 	movw	r2, #21845	; 0x5555
 8001a38:	601a      	str	r2, [r3, #0]

		return result;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_ZN12GFX_HW_PAR1613readcommand16Eh>:

	virtual uint16_t readcommand16(uint8_t commandByte) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]

		uint16_t result = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	81fb      	strh	r3, [r7, #14]
		low(_dcPort, _dcPin);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3334      	adds	r3, #52	; 0x34
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	68d1      	ldr	r1, [r2, #12]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	8bd2      	ldrh	r2, [r2, #30]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
		MY_Delay();
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	333c      	adds	r3, #60	; 0x3c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
		low(_csPort, _csPin);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3334      	adds	r3, #52	; 0x34
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6891      	ldr	r1, [r2, #8]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	8b92      	ldrh	r2, [r2, #28]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
		low(_wrPort, _wrPin);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3334      	adds	r3, #52	; 0x34
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6911      	ldr	r1, [r2, #16]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	8c12      	ldrh	r2, [r2, #32]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	333c      	adds	r3, #60	; 0x3c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3338      	adds	r3, #56	; 0x38
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6911      	ldr	r1, [r2, #16]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	8c12      	ldrh	r2, [r2, #32]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
		MY_Delay();
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	333c      	adds	r3, #60	; 0x3c
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3338      	adds	r3, #56	; 0x38
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68d1      	ldr	r1, [r2, #12]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	8bd2      	ldrh	r2, [r2, #30]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
		MY_Delay();
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	333c      	adds	r3, #60	; 0x3c
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

		MY_Delay();
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	333c      	adds	r3, #60	; 0x3c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
		low(_rdPort, _rdPin);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3334      	adds	r3, #52	; 0x34
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6951      	ldr	r1, [r2, #20]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
		MY_Delay();
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	333c      	adds	r3, #60	; 0x3c
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3

		result = _dataPort->IDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	81fb      	strh	r3, [r7, #14]

		high(_rdPort, _rdPin);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3338      	adds	r3, #56	; 0x38
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6951      	ldr	r1, [r2, #20]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
		high(_csPort, _csPin);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3338      	adds	r3, #56	; 0x38
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6891      	ldr	r1, [r2, #8]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	8b92      	ldrh	r2, [r2, #28]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
		MY_Delay();
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	333c      	adds	r3, #60	; 0x3c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
		_dataPort->MODER = 0x55555555;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001b68:	601a      	str	r2, [r3, #0]

		return result;
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
	}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_ZN12GFX_HW_PAR1612beginCommandEv>:

	virtual void beginCommand() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
		MY_Delay();
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	333c      	adds	r3, #60	; 0x3c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3334      	adds	r3, #52	; 0x34
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68d1      	ldr	r1, [r2, #12]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	8bd2      	ldrh	r2, [r2, #30]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
		MY_Delay();
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	333c      	adds	r3, #60	; 0x3c
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
		low(_csPort, _csPin);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3334      	adds	r3, #52	; 0x34
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6891      	ldr	r1, [r2, #8]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	8b92      	ldrh	r2, [r2, #28]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
		MY_Delay();
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	333c      	adds	r3, #60	; 0x3c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
	}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN12GFX_HW_PAR1612writeCommandEh>:

	virtual void writeCommand(uint8_t commandByte) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
		low(_dcPort, _dcPin);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3334      	adds	r3, #52	; 0x34
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68d1      	ldr	r1, [r2, #12]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	8bd2      	ldrh	r2, [r2, #30]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
		MY_Delay();
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	333c      	adds	r3, #60	; 0x3c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
		write(commandByte);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3328      	adds	r3, #40	; 0x28
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	4611      	mov	r1, r2
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3338      	adds	r3, #56	; 0x38
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	68d1      	ldr	r1, [r2, #12]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	8bd2      	ldrh	r2, [r2, #30]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
		MY_Delay();
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	333c      	adds	r3, #60	; 0x3c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
	}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_ZN12GFX_HW_PAR1614writeCommand16Et>:

	virtual void writeCommand16(uint16_t commandWord) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
		low(_wrPort, _wrPin);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3334      	adds	r3, #52	; 0x34
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6911      	ldr	r1, [r2, #16]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	8c12      	ldrh	r2, [r2, #32]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
		_dataPort->ODR = commandWord;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	333c      	adds	r3, #60	; 0x3c
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3338      	adds	r3, #56	; 0x38
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6911      	ldr	r1, [r2, #16]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	8c12      	ldrh	r2, [r2, #32]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3

		MY_Delay();
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	333c      	adds	r3, #60	; 0x3c
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3338      	adds	r3, #56	; 0x38
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68d1      	ldr	r1, [r2, #12]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	8bd2      	ldrh	r2, [r2, #30]
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
		MY_Delay();
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	333c      	adds	r3, #60	; 0x3c
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
	}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZN12GFX_HW_PAR169writeDataEPKhh>:

	virtual void writeData(const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]

		while(numDataBytes > 0) {
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02a      	beq.n	8001d1a <_ZN12GFX_HW_PAR169writeDataEPKhh+0x6a>
			MY_Delay();
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	333c      	adds	r3, #60	; 0x3c
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	4798      	blx	r3

			low(_wrPort, _wrPin);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3334      	adds	r3, #52	; 0x34
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6911      	ldr	r1, [r2, #16]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	8c12      	ldrh	r2, [r2, #32]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	4798      	blx	r3

			_dataPort->ODR = *dataBytes++ & 0x00ff;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	615a      	str	r2, [r3, #20]
			numDataBytes--;
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	71fb      	strb	r3, [r7, #7]

			MY_Delay();
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	333c      	adds	r3, #60	; 0x3c
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	4798      	blx	r3
			high(_wrPort, _wrPin);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3338      	adds	r3, #56	; 0x38
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6911      	ldr	r1, [r2, #16]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	8c12      	ldrh	r2, [r2, #32]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	4798      	blx	r3
		while(numDataBytes > 0) {
 8001d18:	e7d1      	b.n	8001cbe <_ZN12GFX_HW_PAR169writeDataEPKhh+0xe>
		}
	}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN12GFX_HW_PAR165writeEh>:

	virtual void write(uint8_t data) {
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
		writeData(&data, 1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3324      	adds	r3, #36	; 0x24
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1cf9      	adds	r1, r7, #3
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
	}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN12GFX_HW_PAR167write16Et>:

	virtual void write16(uint16_t data) {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	807b      	strh	r3, [r7, #2]
		_dataPort->ODR = data;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3334      	adds	r3, #52	; 0x34
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6911      	ldr	r1, [r2, #16]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	8c12      	ldrh	r2, [r2, #32]
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
		__NOP();
 8001d6e:	bf00      	nop
		__NOP();
 8001d70:	bf00      	nop
		__NOP();
 8001d72:	bf00      	nop
		__NOP();
 8001d74:	bf00      	nop
		__NOP();
 8001d76:	bf00      	nop
		__NOP();
 8001d78:	bf00      	nop
		high(_wrPort, _wrPin);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6911      	ldr	r1, [r2, #16]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	8c12      	ldrh	r2, [r2, #32]
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
		__NOP();
 8001d8e:	bf00      	nop
		__NOP();
 8001d90:	bf00      	nop
		__NOP();
 8001d92:	bf00      	nop
		__NOP();
 8001d94:	bf00      	nop
		__NOP();
 8001d96:	bf00      	nop
		__NOP();
 8001d98:	bf00      	nop
		__NOP();
 8001d9a:	bf00      	nop
		__NOP();
 8001d9c:	bf00      	nop
	}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_ZN12GFX_HW_PAR163endEv>:

	virtual void end() {
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
		high(_csPort, _csPin);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3338      	adds	r3, #56	; 0x38
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6891      	ldr	r1, [r2, #8]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	8b92      	ldrh	r2, [r2, #28]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3338      	adds	r3, #56	; 0x38
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68d1      	ldr	r1, [r2, #12]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	8bd2      	ldrh	r2, [r2, #30]
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
	}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_ZN12GFX_HW_PAR163lowEP12GPIO_TypeDeft>:

	virtual inline void low(GPIO_TypeDef *port, uint16_t pin) {
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	4613      	mov	r3, r2
 8001dea:	80fb      	strh	r3, [r7, #6]
		port->BRR = (uint32_t)pin;
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>:

	virtual inline void high(GPIO_TypeDef *port, uint16_t pin) {
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
		port->BSRR = (uint32_t)pin;
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	619a      	str	r2, [r3, #24]
	}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_ZN12GFX_HW_PAR168MY_DelayEv>:

	virtual void MY_Delay() {
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
		__NOP();
 8001e26:	bf00      	nop
	}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_ZN12GFX_HW_PAR169MY_Delay1Ev>:

	virtual void MY_Delay1() {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
		__NOP();
 8001e3c:	bf00      	nop
	}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <_ZN3GFXC1ER6GFX_HW>:
#endif

class GFX {
public:

	GFX(GFX_HW &hw) : _hw(hw) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <_ZN3GFXC1ER6GFX_HW+0x24>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	605a      	str	r2, [r3, #4]
	}
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	0800a780 	.word	0x0800a780

08001e74 <_ZN11GFX_ILI9325C1ER6GFX_HW>:
// clang-format on

class GFX_ILI9325: public GFX {
public:

	GFX_ILI9325(GFX_HW &hw) :
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
			GFX(hw) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ffe2 	bl	8001e4c <_ZN3GFXC1ER6GFX_HW>
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_ZN11GFX_ILI9325C1ER6GFX_HW+0x2c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	731a      	strb	r2, [r3, #12]
	}
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	0800a75c 	.word	0x0800a75c

08001ea4 <_ZN11GFX_ILI93254initEv>:

	virtual void init() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

		uint16_t a, d, i;
		i = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	81fb      	strh	r3, [r7, #14]

		_hw.reset(300);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4798      	blx	r3
		HAL_Delay(30);
 8001ec4:	201e      	movs	r0, #30
 8001ec6:	f001 fc29 	bl	800371c <HAL_Delay>

		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	2b65      	cmp	r3, #101	; 0x65
 8001ece:	d826      	bhi.n	8001f1e <_ZN11GFX_ILI93254initEv+0x7a>
			a = ILI932x_regValues[i++];
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	81fa      	strh	r2, [r7, #14]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <_ZN11GFX_ILI93254initEv+0x90>)
 8001eda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ede:	81bb      	strh	r3, [r7, #12]
			d = ILI932x_regValues[i++];
 8001ee0:	89fb      	ldrh	r3, [r7, #14]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	81fa      	strh	r2, [r7, #14]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <_ZN11GFX_ILI93254initEv+0x90>)
 8001eea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eee:	817b      	strh	r3, [r7, #10]
			if (a == TFTLCD_DELAY)
 8001ef0:	89bb      	ldrh	r3, [r7, #12]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d105      	bne.n	8001f02 <_ZN11GFX_ILI93254initEv+0x5e>
				HAL_Delay(d * 4);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 fc0e 	bl	800371c <HAL_Delay>
 8001f00:	e009      	b.n	8001f16 <_ZN11GFX_ILI93254initEv+0x72>
			else
				_hw.sendCommand16(a, d);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6858      	ldr	r0, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	897a      	ldrh	r2, [r7, #10]
 8001f12:	89b9      	ldrh	r1, [r7, #12]
 8001f14:	4798      	blx	r3
			HAL_Delay(10);
 8001f16:	200a      	movs	r0, #10
 8001f18:	f001 fc00 	bl	800371c <HAL_Delay>
		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8001f1c:	e7d5      	b.n	8001eca <_ZN11GFX_ILI93254initEv+0x26>
		}

		//uint16_t r = _hw.readcommand16(0);

		_width = ILI9325_TFTWIDTH;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f24:	811a      	strh	r2, [r3, #8]
		_height = ILI9325_TFTHEIGHT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	22f0      	movs	r2, #240	; 0xf0
 8001f2a:	815a      	strh	r2, [r3, #10]
	}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0800a688 	.word	0x0800a688

08001f38 <_ZN11GFX_ILI93253clsEv>:

	virtual void cls() {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

	}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_ZN11GFX_ILI932511setRotationEh>:

	virtual void setRotation(uint8_t m) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
		_rotation = m % 4; // can't be higher than 3
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	731a      	strb	r2, [r3, #12]

		uint16_t cmd = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	81fb      	strh	r3, [r7, #14]

		switch (_rotation) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7b1b      	ldrb	r3, [r3, #12]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d837      	bhi.n	8001fe0 <_ZN11GFX_ILI932511setRotationEh+0x94>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <_ZN11GFX_ILI932511setRotationEh+0x2c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001f9f 	.word	0x08001f9f
 8001f80:	08001fb5 	.word	0x08001fb5
 8001f84:	08001fcb 	.word	0x08001fcb
		case 0:
			cmd = 0x1030;
 8001f88:	f241 0330 	movw	r3, #4144	; 0x1030
 8001f8c:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f94:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	22f0      	movs	r2, #240	; 0xf0
 8001f9a:	815a      	strh	r2, [r3, #10]
			break;
 8001f9c:	e020      	b.n	8001fe0 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 1:
			cmd = 0x1028;
 8001f9e:	f241 0328 	movw	r3, #4136	; 0x1028
 8001fa2:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	22f0      	movs	r2, #240	; 0xf0
 8001fa8:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fb0:	815a      	strh	r2, [r3, #10]
			break;
 8001fb2:	e015      	b.n	8001fe0 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 2:
			cmd = 0x1000;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fc0:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	22f0      	movs	r2, #240	; 0xf0
 8001fc6:	815a      	strh	r2, [r3, #10]
			break;
 8001fc8:	e00a      	b.n	8001fe0 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 3:
			cmd = 0x1018;
 8001fca:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fce:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	22f0      	movs	r2, #240	; 0xf0
 8001fd4:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fdc:	815a      	strh	r2, [r3, #10]
			break;
 8001fde:	bf00      	nop
		}

		_hw.sendCommand16(ILI932X_ENTRY_MOD, cmd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6858      	ldr	r0, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	89fa      	ldrh	r2, [r7, #14]
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	4798      	blx	r3
		HAL_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f001 fb91 	bl	800371c <HAL_Delay>
	}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop

08002004 <_ZN11GFX_ILI932516setAddressWindowEtttt>:

	virtual void setAddressWindow(uint16_t left, uint16_t top, uint16_t width,
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
			uint16_t height) {

		uint16_t t, l, w, h;

		switch (_rotation) {
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	7b1b      	ldrb	r3, [r3, #12]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d84c      	bhi.n	80020c0 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbc>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <_ZN11GFX_ILI932516setAddressWindowEtttt+0x28>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	0800203d 	.word	0x0800203d
 8002030:	0800204f 	.word	0x0800204f
 8002034:	08002079 	.word	0x08002079
 8002038:	080020a3 	.word	0x080020a3
		case 0: // (0,0) is top left
			t = top;
 800203c:	893b      	ldrh	r3, [r7, #8]
 800203e:	82fb      	strh	r3, [r7, #22]
			l = left;
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	82bb      	strh	r3, [r7, #20]
			w = width;
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	827b      	strh	r3, [r7, #18]
			h = height;
 8002048:	8c3b      	ldrh	r3, [r7, #32]
 800204a:	823b      	strh	r3, [r7, #16]
			break;
 800204c:	e039      	b.n	80020c2 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 1: // (0,0) is top right - portrait
			t = _height - (left + width);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	895a      	ldrh	r2, [r3, #10]
 8002052:	8979      	ldrh	r1, [r7, #10]
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	440b      	add	r3, r1
 8002058:	b29b      	uxth	r3, r3
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	82fb      	strh	r3, [r7, #22]
			l = _width - (top + height);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	891a      	ldrh	r2, [r3, #8]
 8002062:	8939      	ldrh	r1, [r7, #8]
 8002064:	8c3b      	ldrh	r3, [r7, #32]
 8002066:	440b      	add	r3, r1
 8002068:	b29b      	uxth	r3, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	82bb      	strh	r3, [r7, #20]
			w = height;
 800206e:	8c3b      	ldrh	r3, [r7, #32]
 8002070:	827b      	strh	r3, [r7, #18]
			h = width;
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	823b      	strh	r3, [r7, #16]
			break;
 8002076:	e024      	b.n	80020c2 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 2:
			t = _height - (top + height);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	895a      	ldrh	r2, [r3, #10]
 800207c:	8939      	ldrh	r1, [r7, #8]
 800207e:	8c3b      	ldrh	r3, [r7, #32]
 8002080:	440b      	add	r3, r1
 8002082:	b29b      	uxth	r3, r3
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	82fb      	strh	r3, [r7, #22]
			l = _width - (left + width);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	891a      	ldrh	r2, [r3, #8]
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	440b      	add	r3, r1
 8002092:	b29b      	uxth	r3, r3
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	82bb      	strh	r3, [r7, #20]
			w = width;
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	827b      	strh	r3, [r7, #18]
			h = height;
 800209c:	8c3b      	ldrh	r3, [r7, #32]
 800209e:	823b      	strh	r3, [r7, #16]
			break;
 80020a0:	e00f      	b.n	80020c2 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 3:
			t = _height - (left + width);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	895a      	ldrh	r2, [r3, #10]
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	440b      	add	r3, r1
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	82fb      	strh	r3, [r7, #22]
			l = top;
 80020b2:	893b      	ldrh	r3, [r7, #8]
 80020b4:	82bb      	strh	r3, [r7, #20]
			w = height;
 80020b6:	8c3b      	ldrh	r3, [r7, #32]
 80020b8:	827b      	strh	r3, [r7, #18]
			h = width;
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	823b      	strh	r3, [r7, #16]
			break;
 80020be:	e000      	b.n	80020c2 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		default:
			break;
 80020c0:	bf00      	nop

		}

		_hw.sendCommand16(ILI932X_HOR_START_AD, l);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6858      	ldr	r0, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	8aba      	ldrh	r2, [r7, #20]
 80020d2:	2150      	movs	r1, #80	; 0x50
 80020d4:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_HOR_END_AD, l + w - 1);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6858      	ldr	r0, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	8ab9      	ldrh	r1, [r7, #20]
 80020e6:	8a7a      	ldrh	r2, [r7, #18]
 80020e8:	440a      	add	r2, r1
 80020ea:	b292      	uxth	r2, r2
 80020ec:	3a01      	subs	r2, #1
 80020ee:	b292      	uxth	r2, r2
 80020f0:	2151      	movs	r1, #81	; 0x51
 80020f2:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_VER_START_AD, t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6858      	ldr	r0, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	330c      	adds	r3, #12
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	8afa      	ldrh	r2, [r7, #22]
 8002104:	2152      	movs	r1, #82	; 0x52
 8002106:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_VER_END_AD, _height - left -1);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6858      	ldr	r0, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	330c      	adds	r3, #12
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	8951      	ldrh	r1, [r2, #10]
 800211a:	897a      	ldrh	r2, [r7, #10]
 800211c:	1a8a      	subs	r2, r1, r2
 800211e:	b292      	uxth	r2, r2
 8002120:	3a01      	subs	r2, #1
 8002122:	b292      	uxth	r2, r2
 8002124:	2153      	movs	r1, #83	; 0x53
 8002126:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_GRAM_HOR_AD, l);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6858      	ldr	r0, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	8aba      	ldrh	r2, [r7, #20]
 8002138:	2120      	movs	r1, #32
 800213a:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_GRAM_VER_AD, _height - left);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6858      	ldr	r0, [r3, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	330c      	adds	r3, #12
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	8951      	ldrh	r1, [r2, #10]
 800214e:	897a      	ldrh	r2, [r7, #10]
 8002150:	1a8a      	subs	r2, r1, r2
 8002152:	b292      	uxth	r2, r2
 8002154:	2121      	movs	r1, #33	; 0x21
 8002156:	4798      	blx	r3

		_hw.beginCommand();
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3318      	adds	r3, #24
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4610      	mov	r0, r2
 8002168:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3320      	adds	r3, #32
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2122      	movs	r1, #34	; 0x22
 800217a:	4610      	mov	r0, r2
 800217c:	4798      	blx	r3
	}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop

08002188 <_ZN11GFX_ILI93259drawPixelEttt>:

	virtual void drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4603      	mov	r3, r0
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	460b      	mov	r3, r1
 800219c:	813b      	strh	r3, [r7, #8]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
		setAddressWindow(x, y, 1, 1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	681c      	ldr	r4, [r3, #0]
 80021aa:	893a      	ldrh	r2, [r7, #8]
 80021ac:	8979      	ldrh	r1, [r7, #10]
 80021ae:	2301      	movs	r3, #1
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	47a0      	blx	r4
		_hw.beginCommand();
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3318      	adds	r3, #24
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3320      	adds	r3, #32
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2122      	movs	r1, #34	; 0x22
 80021da:	4610      	mov	r0, r2
 80021dc:	4798      	blx	r3
		pushPixel(color);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3314      	adds	r3, #20
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	4611      	mov	r1, r2
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	4798      	blx	r3
		_hw.end();
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3330      	adds	r3, #48	; 0x30
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4610      	mov	r0, r2
 80021fe:	4798      	blx	r3
	}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <_ZN11GFX_ILI93259pushPixelEt>:

	virtual inline void pushPixel(uint16_t color) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
		_hw.write16(color);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	332c      	adds	r3, #44	; 0x2c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	8879      	ldrh	r1, [r7, #2]
 8002224:	4610      	mov	r0, r2
 8002226:	4798      	blx	r3
	}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN11GFX_ILI93253endEv>:

	virtual void end() {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
		_hw.end();
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3330      	adds	r3, #48	; 0x30
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4610      	mov	r0, r2
 8002248:	4798      	blx	r3
		_hw.readcommand16(ILI932X_GRAM_HOR_AD);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3314      	adds	r3, #20
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2120      	movs	r1, #32
 800225a:	4610      	mov	r0, r2
 800225c:	4798      	blx	r3
	}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <mysetup>:
	void startDMA();

	void pushpixel(uint16_t c);
}

void mysetup() {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af02      	add	r7, sp, #8
	tft.init();
 800226e:	4814      	ldr	r0, [pc, #80]	; (80022c0 <mysetup+0x58>)
 8002270:	f7ff fe18 	bl	8001ea4 <_ZN11GFX_ILI93254initEv>
	tft.setRotation(3);
 8002274:	2103      	movs	r1, #3
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <mysetup+0x58>)
 8002278:	f7ff fe68 	bl	8001f4c <_ZN11GFX_ILI932511setRotationEh>
	HAL_Delay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f001 fa4d 	bl	800371c <HAL_Delay>
	tft.setAddressWindow(0,0,320,240);
 8002282:	23f0      	movs	r3, #240	; 0xf0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	480c      	ldr	r0, [pc, #48]	; (80022c0 <mysetup+0x58>)
 8002290:	f7ff feb8 	bl	8002004 <_ZN11GFX_ILI932516setAddressWindowEtttt>
	HAL_Delay(10);
 8002294:	200a      	movs	r0, #10
 8002296:	f001 fa41 	bl	800371c <HAL_Delay>
	for(int i=0; i<(320*240); i++) {
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80022a4:	da08      	bge.n	80022b8 <mysetup+0x50>

		tft.pushPixel(0xffff);
 80022a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <mysetup+0x58>)
 80022ac:	f7ff ffac 	bl	8002208 <_ZN11GFX_ILI93259pushPixelEt>
	for(int i=0; i<(320*240); i++) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	e7f2      	b.n	800229e <mysetup+0x36>
	}
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20018ca8 	.word	0x20018ca8

080022c4 <setLeftWindow>:
#define MAP(R,G,B) (((R & 0xf8) << 8) | ((G & 0xfc) << 3) | ((B & 0xF8) >> 3))
void setLeftWindow() {
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b090      	sub	sp, #64	; 0x40
 80022c8:	af02      	add	r7, sp, #8
	uint16_t rgbMap[17] = { MAP(0, 0, 0), MAP(0, 0, 0), MAP(0, 0, 0), MAP(33, 200,
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <setLeftWindow+0xb4>)
 80022cc:	1d3c      	adds	r4, r7, #4
 80022ce:	461d      	mov	r5, r3
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	8023      	strh	r3, [r4, #0]
			66), MAP(94, 220, 120), MAP(84, 85, 237), MAP(125, 118, 252), MAP(212,
			82, 77), MAP(66, 235, 245), MAP(252, 85, 84), MAP(255, 121, 120), MAP(
			212, 193, 84), MAP(230, 206, 128), MAP(33, 176, 59), MAP(201, 91, 186),
			MAP(204, 204, 204), MAP(255, 255, 255) };

	tft.setAddressWindow(10,30,10,160);
 80022dc:	23a0      	movs	r3, #160	; 0xa0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	230a      	movs	r3, #10
 80022e2:	221e      	movs	r2, #30
 80022e4:	210a      	movs	r1, #10
 80022e6:	4825      	ldr	r0, [pc, #148]	; (800237c <setLeftWindow+0xb8>)
 80022e8:	f7ff fe8c 	bl	8002004 <_ZN11GFX_ILI932516setAddressWindowEtttt>


	// write the colors as blocks down the left
	for(int i=0; i<15; i++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	2b0e      	cmp	r3, #14
 80022f4:	dc3a      	bgt.n	800236c <setLeftWindow+0xa8>
		uint16_t color = rgbMap[i+1];
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f8:	3301      	adds	r3, #1
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	3338      	adds	r3, #56	; 0x38
 80022fe:	443b      	add	r3, r7
 8002300:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8002304:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int y=0; y<8;y++) {
 8002306:	2300      	movs	r3, #0
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	2b07      	cmp	r3, #7
 800230e:	dc1b      	bgt.n	8002348 <setLeftWindow+0x84>
			// fill the gaps
			tft.pushPixel(0xffff);
 8002310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002314:	4819      	ldr	r0, [pc, #100]	; (800237c <setLeftWindow+0xb8>)
 8002316:	f7ff ff77 	bl	8002208 <_ZN11GFX_ILI93259pushPixelEt>
			tft.pushPixel(0xffff);
 800231a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800231e:	4817      	ldr	r0, [pc, #92]	; (800237c <setLeftWindow+0xb8>)
 8002320:	f7ff ff72 	bl	8002208 <_ZN11GFX_ILI93259pushPixelEt>
			for(int x=0; x<8; x++) {
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b07      	cmp	r3, #7
 800232c:	dc08      	bgt.n	8002340 <setLeftWindow+0x7c>
				tft.pushPixel(color);
 800232e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002330:	4619      	mov	r1, r3
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <setLeftWindow+0xb8>)
 8002334:	f7ff ff68 	bl	8002208 <_ZN11GFX_ILI93259pushPixelEt>
			for(int x=0; x<8; x++) {
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	3301      	adds	r3, #1
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233e:	e7f3      	b.n	8002328 <setLeftWindow+0x64>
		for(int y=0; y<8;y++) {
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	3301      	adds	r3, #1
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	e7e0      	b.n	800230a <setLeftWindow+0x46>
			}

		}

		for(int z = 0; z<20; z++) {
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	2b13      	cmp	r3, #19
 8002350:	dc08      	bgt.n	8002364 <setLeftWindow+0xa0>
			tft.pushPixel(0xffff);
 8002352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <setLeftWindow+0xb8>)
 8002358:	f7ff ff56 	bl	8002208 <_ZN11GFX_ILI93259pushPixelEt>
		for(int z = 0; z<20; z++) {
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	3301      	adds	r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
 8002362:	e7f3      	b.n	800234c <setLeftWindow+0x88>
	for(int i=0; i<15; i++) {
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	637b      	str	r3, [r7, #52]	; 0x34
 800236a:	e7c1      	b.n	80022f0 <setLeftWindow+0x2c>
		}
	}

	vsync();
 800236c:	f000 f808 	bl	8002380 <vsync>
}
 8002370:	bf00      	nop
 8002372:	3738      	adds	r7, #56	; 0x38
 8002374:	46bd      	mov	sp, r7
 8002376:	bdb0      	pop	{r4, r5, r7, pc}
 8002378:	0800a664 	.word	0x0800a664
 800237c:	20018ca8 	.word	0x20018ca8

08002380 <vsync>:

void vsync() {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af02      	add	r7, sp, #8
	tft.end();
 8002386:	4807      	ldr	r0, [pc, #28]	; (80023a4 <vsync+0x24>)
 8002388:	f7ff ff52 	bl	8002230 <_ZN11GFX_ILI93253endEv>
	tft.setAddressWindow((320-256)/2,(240-192)/2, 256, 192);
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002394:	2218      	movs	r2, #24
 8002396:	2120      	movs	r1, #32
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <vsync+0x24>)
 800239a:	f7ff fe33 	bl	8002004 <_ZN11GFX_ILI932516setAddressWindowEtttt>
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20018ca8 	.word	0x20018ca8

080023a8 <_Z41__static_initialization_and_destruction_0ii>:

}

void pushpixel(uint16_t c) {
	tft.pushPixel(c);
}
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af08      	add	r7, sp, #32
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d122      	bne.n	80023fe <_Z41__static_initialization_and_destruction_0ii+0x56>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11d      	bne.n	80023fe <_Z41__static_initialization_and_destruction_0ii+0x56>
GFX_HW_PAR16 hwspi = GFX_HW_PAR16(GPIOC,
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	9307      	str	r3, [sp, #28]
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80023ca:	9306      	str	r3, [sp, #24]
 80023cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023d0:	9305      	str	r3, [sp, #20]
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80023d4:	9304      	str	r3, [sp, #16]
 80023d6:	2304      	movs	r3, #4
 80023d8:	9303      	str	r3, [sp, #12]
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80023ee:	4907      	ldr	r1, [pc, #28]	; (800240c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80023f0:	4807      	ldr	r0, [pc, #28]	; (8002410 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80023f2:	f7ff f859 	bl	80014a8 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>
GFX_ILI9325 tft = GFX_ILI9325(hwspi);
 80023f6:	4906      	ldr	r1, [pc, #24]	; (8002410 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80023f8:	4806      	ldr	r0, [pc, #24]	; (8002414 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80023fa:	f7ff fd3b 	bl	8001e74 <_ZN11GFX_ILI9325C1ER6GFX_HW>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	48000400 	.word	0x48000400
 800240c:	48000800 	.word	0x48000800
 8002410:	20018c80 	.word	0x20018c80
 8002414:	20018ca8 	.word	0x20018ca8

08002418 <_GLOBAL__sub_I_hwspi>:
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
 800241c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002420:	2001      	movs	r0, #1
 8002422:	f7ff ffc1 	bl	80023a8 <_Z41__static_initialization_and_destruction_0ii>
 8002426:	bd80      	pop	{r7, pc}

08002428 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <MX_SPI2_Init+0x74>)
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <MX_SPI2_Init+0x78>)
 8002430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_SPI2_Init+0x74>)
 8002434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <MX_SPI2_Init+0x74>)
 800243c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002440:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_SPI2_Init+0x74>)
 8002444:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002448:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_SPI2_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <MX_SPI2_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_SPI2_Init+0x74>)
 8002458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI2_Init+0x74>)
 8002460:	2208      	movs	r2, #8
 8002462:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <MX_SPI2_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_SPI2_Init+0x74>)
 800246c:	2200      	movs	r2, #0
 800246e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MX_SPI2_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_SPI2_Init+0x74>)
 8002478:	2207      	movs	r2, #7
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <MX_SPI2_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI2_Init+0x74>)
 8002484:	2208      	movs	r2, #8
 8002486:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_SPI2_Init+0x74>)
 800248a:	f005 f9a1 	bl	80077d0 <HAL_SPI_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8002494:	f7fe fff2 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20018cb8 	.word	0x20018cb8
 80024a0:	40003800 	.word	0x40003800

080024a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_SPI_MspInit+0x10c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d16f      	bne.n	80025a6 <HAL_SPI_MspInit+0x102>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024de:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024e4:	f043 0320 	orr.w	r3, r3, #32
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_SPI_MspInit+0x110>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800250e:	2302      	movs	r3, #2
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2302      	movs	r3, #2
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800251e:	2305      	movs	r3, #5
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4823      	ldr	r0, [pc, #140]	; (80025b8 <HAL_SPI_MspInit+0x114>)
 800252a:	f003 ff9d 	bl	8006468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800252e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002540:	2305      	movs	r3, #5
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254e:	f003 ff8b 	bl	8006468 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_SPI_MspInit+0x118>)
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_SPI_MspInit+0x11c>)
 8002556:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_SPI_MspInit+0x118>)
 800255a:	220d      	movs	r2, #13
 800255c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_SPI_MspInit+0x118>)
 8002560:	2210      	movs	r2, #16
 8002562:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_SPI_MspInit+0x118>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_SPI_MspInit+0x118>)
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_SPI_MspInit+0x118>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_SPI_MspInit+0x118>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_SPI_MspInit+0x118>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_SPI_MspInit+0x118>)
 8002584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <HAL_SPI_MspInit+0x118>)
 800258c:	f003 fc06 	bl	8005d9c <HAL_DMA_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 8002596:	f7fe ff71 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_SPI_MspInit+0x118>)
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_SPI_MspInit+0x118>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40003800 	.word	0x40003800
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48001400 	.word	0x48001400
 80025bc:	20018d44 	.word	0x20018d44
 80025c0:	4002001c 	.word	0x4002001c

080025c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_MspInit+0x50>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_MspInit+0x50>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6613      	str	r3, [r2, #96]	; 0x60
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_MspInit+0x50>)
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_MspInit+0x50>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <HAL_MspInit+0x50>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_MspInit+0x50>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80025fa:	2020      	movs	r0, #32
 80025fc:	f001 f8b0 	bl	8003760 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002600:	f001 f8d6 	bl	80037b0 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002604:	2000      	movs	r0, #0
 8002606:	f001 f8bf 	bl	8003788 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800261c:	f004 fe28 	bl	8007270 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <NMI_Handler+0x8>

08002622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <HardFault_Handler+0x4>

08002628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <MemManage_Handler+0x4>

0800262e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <UsageFault_Handler+0x4>

0800263a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002668:	f001 f83a 	bl	80036e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}

08002670 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <DMA1_Channel1_IRQHandler+0x10>)
 8002676:	f003 fd0d 	bl	8006094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200001e4 	.word	0x200001e4

08002684 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA1_Channel2_IRQHandler+0x10>)
 800268a:	f003 fd03 	bl	8006094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20018d44 	.word	0x20018d44

08002698 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800269e:	f005 ff43 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20018da4 	.word	0x20018da4

080026ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM2_IRQHandler+0x10>)
 80026b2:	f005 ff39 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20018e70 	.word	0x20018e70

080026c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM3_IRQHandler+0x10>)
 80026c6:	f005 ff2f 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20018f3c 	.word	0x20018f3c

080026d4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim20_ch1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <DMA2_Channel1_IRQHandler+0x10>)
 80026da:	f003 fcdb 	bl	8006094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20019404 	.word	0x20019404

080026e8 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <DMAMUX_OVR_IRQHandler+0x10>)
 80026ee:	f003 fe69 	bl	80063c4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200001e4 	.word	0x200001e4

080026fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
	return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_kill>:

int _kill(int pid, int sig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002716:	f007 fee3 	bl	800a4e0 <__errno>
 800271a:	4603      	mov	r3, r0
 800271c:	2216      	movs	r2, #22
 800271e:	601a      	str	r2, [r3, #0]
	return -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_exit>:

void _exit (int status)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ffe7 	bl	800270c <_kill>
	while (1) {}		/* Make sure we hang here */
 800273e:	e7fe      	b.n	800273e <_exit+0x12>

08002740 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <SystemInit+0x20>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <SystemInit+0x20>)
 800274c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <MX_TIM1_Init>:
TIM_HandleTypeDef htim20;
DMA_HandleTypeDef hdma_tim20_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b0a0      	sub	sp, #128	; 0x80
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002778:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
 80027a4:	615a      	str	r2, [r3, #20]
 80027a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027a8:	463b      	mov	r3, r7
 80027aa:	2234      	movs	r2, #52	; 0x34
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f007 fec0 	bl	800a534 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027b4:	4b51      	ldr	r3, [pc, #324]	; (80028fc <MX_TIM1_Init+0x198>)
 80027b6:	4a52      	ldr	r2, [pc, #328]	; (8002900 <MX_TIM1_Init+0x19c>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ba:	4b50      	ldr	r3, [pc, #320]	; (80028fc <MX_TIM1_Init+0x198>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c0:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <MX_TIM1_Init+0x198>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31;
 80027c6:	4b4d      	ldr	r3, [pc, #308]	; (80028fc <MX_TIM1_Init+0x198>)
 80027c8:	221f      	movs	r2, #31
 80027ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <MX_TIM1_Init+0x198>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 255;
 80027d2:	4b4a      	ldr	r3, [pc, #296]	; (80028fc <MX_TIM1_Init+0x198>)
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027d8:	4b48      	ldr	r3, [pc, #288]	; (80028fc <MX_TIM1_Init+0x198>)
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027de:	4847      	ldr	r0, [pc, #284]	; (80028fc <MX_TIM1_Init+0x198>)
 80027e0:	f005 f9ce 	bl	8007b80 <HAL_TIM_Base_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80027ea:	f7fe fe47 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027f8:	4619      	mov	r1, r3
 80027fa:	4840      	ldr	r0, [pc, #256]	; (80028fc <MX_TIM1_Init+0x198>)
 80027fc:	f006 f9ee 	bl	8008bdc <HAL_TIM_ConfigClockSource>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002806:	f7fe fe39 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800280a:	483c      	ldr	r0, [pc, #240]	; (80028fc <MX_TIM1_Init+0x198>)
 800280c:	f005 fb04 	bl	8007e18 <HAL_TIM_PWM_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002816:	f7fe fe31 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800281a:	2108      	movs	r1, #8
 800281c:	4837      	ldr	r0, [pc, #220]	; (80028fc <MX_TIM1_Init+0x198>)
 800281e:	f005 fbd7 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002828:	f7fe fe28 	bl	800147c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800282c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002830:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8002832:	2330      	movs	r3, #48	; 0x30
 8002834:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002836:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800283a:	4619      	mov	r1, r3
 800283c:	482f      	ldr	r0, [pc, #188]	; (80028fc <MX_TIM1_Init+0x198>)
 800283e:	f006 fae3 	bl	8008e08 <HAL_TIM_SlaveConfigSynchro>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8002848:	f7fe fe18 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002858:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800285c:	4619      	mov	r1, r3
 800285e:	4827      	ldr	r0, [pc, #156]	; (80028fc <MX_TIM1_Init+0x198>)
 8002860:	f007 fbfc 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800286a:	f7fe fe07 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800286e:	2370      	movs	r3, #112	; 0x70
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 15;
 8002872:	230f      	movs	r3, #15
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002876:	2300      	movs	r3, #0
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800287a:	2300      	movs	r3, #0
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800288a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	481a      	ldr	r0, [pc, #104]	; (80028fc <MX_TIM1_Init+0x198>)
 8002894:	f006 f88e 	bl	80089b4 <HAL_TIM_PWM_ConfigChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800289e:	f7fe fded 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028da:	463b      	mov	r3, r7
 80028dc:	4619      	mov	r1, r3
 80028de:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM1_Init+0x198>)
 80028e0:	f007 fc52 	bl	800a188 <HAL_TIMEx_ConfigBreakDeadTime>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80028ea:	f7fe fdc7 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028ee:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM1_Init+0x198>)
 80028f0:	f000 fdca 	bl	8003488 <HAL_TIM_MspPostInit>

}
 80028f4:	bf00      	nop
 80028f6:	3780      	adds	r7, #128	; 0x80
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20018da4 	.word	0x20018da4
 8002900:	40012c00 	.word	0x40012c00

08002904 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f007 fe0e 	bl	800a534 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_TIM2_Init+0xa4>)
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002938:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800293c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800294a:	2301      	movs	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002952:	2301      	movs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002976:	f005 fc95 	bl	80082a4 <HAL_TIM_Encoder_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002980:	f7fe fd7c 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298c:	463b      	mov	r3, r7
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_TIM2_Init+0xa4>)
 8002992:	f007 fb63 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800299c:	f7fe fd6e 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20018e70 	.word	0x20018e70

080029ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b094      	sub	sp, #80	; 0x50
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	615a      	str	r2, [r3, #20]
 80029e0:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <MX_TIM3_Init+0x160>)
 80029f0:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <MX_TIM3_Init+0x164>)
 80029f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029f4:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <MX_TIM3_Init+0x160>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <MX_TIM3_Init+0x160>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a14:	483d      	ldr	r0, [pc, #244]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a16:	f005 f8b3 	bl	8007b80 <HAL_TIM_Base_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002a20:	f7fe fd2c 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a24:	4839      	ldr	r0, [pc, #228]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a26:	f005 f9f7 	bl	8007e18 <HAL_TIM_PWM_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002a30:	f7fe fd24 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002a34:	4835      	ldr	r0, [pc, #212]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a36:	f005 fa5d 	bl	8007ef4 <HAL_TIM_IC_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a40:	f7fe fd1c 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002a44:	2108      	movs	r1, #8
 8002a46:	4831      	ldr	r0, [pc, #196]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a48:	f005 fac2 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002a52:	f7fe fd13 	bl	800147c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002a5c:	2360      	movs	r3, #96	; 0x60
 8002a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002a60:	2302      	movs	r3, #2
 8002a62:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002a68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4827      	ldr	r0, [pc, #156]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a70:	f006 f9ca 	bl	8008e08 <HAL_TIM_SlaveConfigSynchro>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002a7a:	f7fe fcff 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	481f      	ldr	r0, [pc, #124]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002a8e:	f007 fae5 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002a98:	f7fe fcf0 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002a9c:	2370      	movs	r3, #112	; 0x70
 8002a9e:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 12000;
 8002aa0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002aa4:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4815      	ldr	r0, [pc, #84]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002ab8:	f005 ff7c 	bl	80089b4 <HAL_TIM_PWM_ConfigChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002ac2:	f7fe fcdb 	bl	800147c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002aca:	2301      	movs	r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002ade:	f005 fecc 	bl	800887a <HAL_TIM_IC_ConfigChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM3_Init+0x140>
  {
    Error_Handler();
 8002ae8:	f7fe fcc8 	bl	800147c <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim3, TIM_TIM3_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8002aec:	2204      	movs	r2, #4
 8002aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af2:	4806      	ldr	r0, [pc, #24]	; (8002b0c <MX_TIM3_Init+0x160>)
 8002af4:	f007 fbfa 	bl	800a2ec <HAL_TIMEx_TISelection>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM3_Init+0x156>
  {
    Error_Handler();
 8002afe:	f7fe fcbd 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	3750      	adds	r7, #80	; 0x50
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20018f3c 	.word	0x20018f3c
 8002b10:	40000400 	.word	0x40000400

08002b14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b098      	sub	sp, #96	; 0x60
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
 8002b54:	615a      	str	r2, [r3, #20]
 8002b56:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b64:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b66:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <MX_TIM4_Init+0x18c>)
 8002b68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b4a      	ldr	r3, [pc, #296]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3800;
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b78:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002b7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b8a:	4844      	ldr	r0, [pc, #272]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002b8c:	f004 fff8 	bl	8007b80 <HAL_TIM_Base_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8002b96:	f7fe fc71 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ba0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	483d      	ldr	r0, [pc, #244]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002ba8:	f006 f818 	bl	8008bdc <HAL_TIM_ConfigClockSource>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002bb2:	f7fe fc63 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bb6:	4839      	ldr	r0, [pc, #228]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002bb8:	f005 f92e 	bl	8007e18 <HAL_TIM_PWM_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002bc2:	f7fe fc5b 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002bc6:	4835      	ldr	r0, [pc, #212]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002bc8:	f005 f994 	bl	8007ef4 <HAL_TIM_IC_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8002bd2:	f7fe fc53 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	4830      	ldr	r0, [pc, #192]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002bda:	f005 f9f9 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002be4:	f7fe fc4a 	bl	800147c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002bee:	2360      	movs	r3, #96	; 0x60
 8002bf0:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002bfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4826      	ldr	r0, [pc, #152]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002c02:	f006 f901 	bl	8008e08 <HAL_TIM_SlaveConfigSynchro>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8002c0c:	f7fe fc36 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8002c10:	2340      	movs	r3, #64	; 0x40
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	481f      	ldr	r0, [pc, #124]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002c20:	f007 fa1c 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002c2a:	f7fe fc27 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002c2e:	2370      	movs	r3, #112	; 0x70
 8002c30:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 1148;
 8002c32:	f240 437c 	movw	r3, #1148	; 0x47c
 8002c36:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	4619      	mov	r1, r3
 8002c48:	4814      	ldr	r0, [pc, #80]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002c4a:	f005 feb3 	bl	80089b4 <HAL_TIM_PWM_ConfigChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM4_Init+0x144>
  {
    Error_Handler();
 8002c54:	f7fe fc12 	bl	800147c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	480b      	ldr	r0, [pc, #44]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002c70:	f005 fe03 	bl	800887a <HAL_TIM_IC_ConfigChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM4_Init+0x16a>
  {
    Error_Handler();
 8002c7a:	f7fe fbff 	bl	800147c <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim4, TIM_TIM4_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8002c7e:	2204      	movs	r2, #4
 8002c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c84:	4805      	ldr	r0, [pc, #20]	; (8002c9c <MX_TIM4_Init+0x188>)
 8002c86:	f007 fb31 	bl	800a2ec <HAL_TIMEx_TISelection>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM4_Init+0x180>
  {
    Error_Handler();
 8002c90:	f7fe fbf4 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3760      	adds	r7, #96	; 0x60
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20019008 	.word	0x20019008
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <MX_TIM5_Init+0x70>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 160;
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cc8:	22a0      	movs	r2, #160	; 0xa0
 8002cca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cd8:	2108      	movs	r1, #8
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cdc:	f005 f978 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM5_Init+0x46>
  {
    Error_Handler();
 8002ce6:	f7fe fbc9 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4806      	ldr	r0, [pc, #24]	; (8002d10 <MX_TIM5_Init+0x6c>)
 8002cf8:	f007 f9b0 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8002d02:	f7fe fbbb 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200190d4 	.word	0x200190d4
 8002d14:	40000c00 	.word	0x40000c00

08002d18 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b09c      	sub	sp, #112	; 0x70
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	2234      	movs	r2, #52	; 0x34
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f007 fbee 	bl	800a534 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002d58:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d5a:	4a4b      	ldr	r2, [pc, #300]	; (8002e88 <MX_TIM8_Init+0x170>)
 8002d5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d60:	2211      	movs	r2, #17
 8002d62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 258;
 8002d6a:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d6c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002d70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 191;
 8002d78:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d7a:	22bf      	movs	r2, #191	; 0xbf
 8002d7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002d84:	483f      	ldr	r0, [pc, #252]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002d86:	f004 fefb 	bl	8007b80 <HAL_TIM_Base_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002d90:	f7fe fb74 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d98:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002d9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4838      	ldr	r0, [pc, #224]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002da2:	f005 ff1b 	bl	8008bdc <HAL_TIM_ConfigClockSource>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002dac:	f7fe fb66 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002db0:	4834      	ldr	r0, [pc, #208]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002db2:	f005 f831 	bl	8007e18 <HAL_TIM_PWM_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002dbc:	f7fe fb5e 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002dc0:	2108      	movs	r1, #8
 8002dc2:	4830      	ldr	r0, [pc, #192]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002dc4:	f005 f904 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8002dce:	f7fe fb55 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002dd2:	2330      	movs	r3, #48	; 0x30
 8002dd4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002dde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002de2:	4619      	mov	r1, r3
 8002de4:	4827      	ldr	r0, [pc, #156]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002de6:	f007 f939 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002df0:	f7fe fb44 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002df4:	2370      	movs	r3, #112	; 0x70
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 150;
 8002df8:	2396      	movs	r3, #150	; 0x96
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e00:	2300      	movs	r3, #0
 8002e02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e14:	2200      	movs	r2, #0
 8002e16:	4619      	mov	r1, r3
 8002e18:	481a      	ldr	r0, [pc, #104]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002e1a:	f005 fdcb 	bl	80089b4 <HAL_TIM_PWM_ConfigChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002e24:	f7fe fb2a 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002e66:	f007 f98f 	bl	800a188 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8002e70:	f7fe fb04 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002e74:	4803      	ldr	r0, [pc, #12]	; (8002e84 <MX_TIM8_Init+0x16c>)
 8002e76:	f000 fb07 	bl	8003488 <HAL_TIM_MspPostInit>

}
 8002e7a:	bf00      	nop
 8002e7c:	3770      	adds	r7, #112	; 0x70
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200191a0 	.word	0x200191a0
 8002e88:	40013400 	.word	0x40013400

08002e8c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	; 0x50
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	615a      	str	r2, [r3, #20]
 8002ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	2234      	movs	r2, #52	; 0x34
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f007 fb41 	bl	800a534 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002eb2:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002eb4:	4a35      	ldr	r2, [pc, #212]	; (8002f8c <MX_TIM16_Init+0x100>)
 8002eb6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170;
 8002eb8:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002eba:	22aa      	movs	r2, #170	; 0xaa
 8002ebc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 260;
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002ec6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 191;
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002ed4:	22bf      	movs	r2, #191	; 0xbf
 8002ed6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ede:	482a      	ldr	r0, [pc, #168]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002ee0:	f004 fe4e 	bl	8007b80 <HAL_TIM_Base_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002eea:	f7fe fac7 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002eee:	4826      	ldr	r0, [pc, #152]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002ef0:	f004 ff92 	bl	8007e18 <HAL_TIM_PWM_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002efa:	f7fe fabf 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002efe:	2108      	movs	r1, #8
 8002f00:	4821      	ldr	r0, [pc, #132]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002f02:	f005 f865 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002f0c:	f7fe fab6 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002f10:	2370      	movs	r3, #112	; 0x70
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 130;
 8002f14:	2382      	movs	r3, #130	; 0x82
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f24:	2300      	movs	r3, #0
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f30:	2200      	movs	r2, #0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4814      	ldr	r0, [pc, #80]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002f36:	f005 fd3d 	bl	80089b4 <HAL_TIM_PWM_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM16_Init+0xb8>
  {
    Error_Handler();
 8002f40:	f7fe fa9c 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002f66:	463b      	mov	r3, r7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4807      	ldr	r0, [pc, #28]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002f6c:	f007 f90c 	bl	800a188 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8002f76:	f7fe fa81 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002f7a:	4803      	ldr	r0, [pc, #12]	; (8002f88 <MX_TIM16_Init+0xfc>)
 8002f7c:	f000 fa84 	bl	8003488 <HAL_TIM_MspPostInit>

}
 8002f80:	bf00      	nop
 8002f82:	3750      	adds	r7, #80	; 0x50
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2001926c 	.word	0x2001926c
 8002f8c:	40014400 	.word	0x40014400

08002f90 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0a0      	sub	sp, #128	; 0x80
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002fa4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
 8002fd0:	615a      	str	r2, [r3, #20]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	2234      	movs	r2, #52	; 0x34
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f007 faaa 	bl	800a534 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002fe0:	4b52      	ldr	r3, [pc, #328]	; (800312c <MX_TIM20_Init+0x19c>)
 8002fe2:	4a53      	ldr	r2, [pc, #332]	; (8003130 <MX_TIM20_Init+0x1a0>)
 8002fe4:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <MX_TIM20_Init+0x19c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <MX_TIM20_Init+0x19c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 17;
 8002ff2:	4b4e      	ldr	r3, [pc, #312]	; (800312c <MX_TIM20_Init+0x19c>)
 8002ff4:	2211      	movs	r2, #17
 8002ff6:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <MX_TIM20_Init+0x19c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 255;
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	; (800312c <MX_TIM20_Init+0x19c>)
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003004:	4b49      	ldr	r3, [pc, #292]	; (800312c <MX_TIM20_Init+0x19c>)
 8003006:	2200      	movs	r2, #0
 8003008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800300a:	4848      	ldr	r0, [pc, #288]	; (800312c <MX_TIM20_Init+0x19c>)
 800300c:	f004 fdb8 	bl	8007b80 <HAL_TIM_Base_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 8003016:	f7fe fa31 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8003020:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003024:	4619      	mov	r1, r3
 8003026:	4841      	ldr	r0, [pc, #260]	; (800312c <MX_TIM20_Init+0x19c>)
 8003028:	f005 fdd8 	bl	8008bdc <HAL_TIM_ConfigClockSource>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM20_Init+0xa6>
  {
    Error_Handler();
 8003032:	f7fe fa23 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8003036:	483d      	ldr	r0, [pc, #244]	; (800312c <MX_TIM20_Init+0x19c>)
 8003038:	f004 feee 	bl	8007e18 <HAL_TIM_PWM_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM20_Init+0xb6>
  {
    Error_Handler();
 8003042:	f7fe fa1b 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim20, TIM_OPMODE_SINGLE) != HAL_OK)
 8003046:	2108      	movs	r1, #8
 8003048:	4838      	ldr	r0, [pc, #224]	; (800312c <MX_TIM20_Init+0x19c>)
 800304a:	f004 ffc1 	bl	8007fd0 <HAL_TIM_OnePulse_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 8003054:	f7fe fa12 	bl	800147c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8003058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 800305e:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
 8003062:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8003064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003068:	4619      	mov	r1, r3
 800306a:	4830      	ldr	r0, [pc, #192]	; (800312c <MX_TIM20_Init+0x19c>)
 800306c:	f005 fecc 	bl	8008e08 <HAL_TIM_SlaveConfigSynchro>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 8003076:	f7fe fa01 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800307a:	2330      	movs	r3, #48	; 0x30
 800307c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003086:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800308a:	4619      	mov	r1, r3
 800308c:	4827      	ldr	r0, [pc, #156]	; (800312c <MX_TIM20_Init+0x19c>)
 800308e:	f006 ffe5 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_TIM20_Init+0x10c>
  {
    Error_Handler();
 8003098:	f7fe f9f0 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800309c:	2370      	movs	r3, #112	; 0x70
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 8;
 80030a0:	2308      	movs	r3, #8
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80030a4:	2302      	movs	r3, #2
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030a8:	2300      	movs	r3, #0
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030b0:	2300      	movs	r3, #0
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030b4:	2300      	movs	r3, #0
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030bc:	2200      	movs	r2, #0
 80030be:	4619      	mov	r1, r3
 80030c0:	481a      	ldr	r0, [pc, #104]	; (800312c <MX_TIM20_Init+0x19c>)
 80030c2:	f005 fc77 	bl	80089b4 <HAL_TIM_PWM_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM20_Init+0x140>
  {
    Error_Handler();
 80030cc:	f7fe f9d6 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003108:	463b      	mov	r3, r7
 800310a:	4619      	mov	r1, r3
 800310c:	4807      	ldr	r0, [pc, #28]	; (800312c <MX_TIM20_Init+0x19c>)
 800310e:	f007 f83b 	bl	800a188 <HAL_TIMEx_ConfigBreakDeadTime>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM20_Init+0x18c>
  {
    Error_Handler();
 8003118:	f7fe f9b0 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <MX_TIM20_Init+0x19c>)
 800311e:	f000 f9b3 	bl	8003488 <HAL_TIM_MspPostInit>

}
 8003122:	bf00      	nop
 8003124:	3780      	adds	r7, #128	; 0x80
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20019338 	.word	0x20019338
 8003130:	40015000 	.word	0x40015000

08003134 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b090      	sub	sp, #64	; 0x40
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a7f      	ldr	r2, [pc, #508]	; (8003350 <HAL_TIM_Base_MspInit+0x21c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d132      	bne.n	80031bc <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 800315c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003160:	6613      	str	r3, [r2, #96]	; 0x60
 8003162:	4b7c      	ldr	r3, [pc, #496]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003172:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003194:	2300      	movs	r3, #0
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003198:	2306      	movs	r3, #6
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a0:	4619      	mov	r1, r3
 80031a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a6:	f003 f95f 	bl	8006468 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	201a      	movs	r0, #26
 80031b0:	f002 fdbf 	bl	8005d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80031b4:	201a      	movs	r0, #26
 80031b6:	f002 fdd6 	bl	8005d66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80031ba:	e0c4      	b.n	8003346 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a65      	ldr	r2, [pc, #404]	; (8003358 <HAL_TIM_Base_MspInit+0x224>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d130      	bne.n	8003228 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	4a62      	ldr	r2, [pc, #392]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6593      	str	r3, [r2, #88]	; 0x58
 80031d2:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	4a5c      	ldr	r2, [pc, #368]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ea:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031f6:	2320      	movs	r3, #32
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003206:	2302      	movs	r3, #2
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800320e:	4619      	mov	r1, r3
 8003210:	4852      	ldr	r0, [pc, #328]	; (800335c <HAL_TIM_Base_MspInit+0x228>)
 8003212:	f003 f929 	bl	8006468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	201d      	movs	r0, #29
 800321c:	f002 fd89 	bl	8005d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003220:	201d      	movs	r0, #29
 8003222:	f002 fda0 	bl	8005d66 <HAL_NVIC_EnableIRQ>
}
 8003226:	e08e      	b.n	8003346 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM4)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_TIM_Base_MspInit+0x22c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d128      	bne.n	8003284 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a47      	ldr	r2, [pc, #284]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003272:	2302      	movs	r3, #2
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327a:	4619      	mov	r1, r3
 800327c:	4837      	ldr	r0, [pc, #220]	; (800335c <HAL_TIM_Base_MspInit+0x228>)
 800327e:	f003 f8f3 	bl	8006468 <HAL_GPIO_Init>
}
 8003282:	e060      	b.n	8003346 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM8)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a36      	ldr	r2, [pc, #216]	; (8003364 <HAL_TIM_Base_MspInit+0x230>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10c      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	4a30      	ldr	r2, [pc, #192]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 8003294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003298:	6613      	str	r3, [r2, #96]	; 0x60
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
}
 80032a6:	e04e      	b.n	8003346 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM16)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_TIM_Base_MspInit+0x234>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	4a27      	ldr	r2, [pc, #156]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80032b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032bc:	6613      	str	r3, [r2, #96]	; 0x60
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	e03c      	b.n	8003346 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM20)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a26      	ldr	r2, [pc, #152]	; (800336c <HAL_TIM_Base_MspInit+0x238>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d137      	bne.n	8003346 <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80032dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e0:	6613      	str	r3, [r2, #96]	; 0x60
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_TIM_Base_MspInit+0x220>)
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
    hdma_tim20_ch1.Instance = DMA2_Channel1;
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 80032f0:	4a20      	ldr	r2, [pc, #128]	; (8003374 <HAL_TIM_Base_MspInit+0x240>)
 80032f2:	601a      	str	r2, [r3, #0]
    hdma_tim20_ch1.Init.Request = DMA_REQUEST_TIM20_CH1;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 80032f6:	2256      	movs	r2, #86	; 0x56
 80032f8:	605a      	str	r2, [r3, #4]
    hdma_tim20_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 80032fc:	2210      	movs	r2, #16
 80032fe:	609a      	str	r2, [r3, #8]
    hdma_tim20_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    hdma_tim20_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003306:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	611a      	str	r2, [r3, #16]
    hdma_tim20_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 800330e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003312:	615a      	str	r2, [r3, #20]
    hdma_tim20_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	619a      	str	r2, [r3, #24]
    hdma_tim20_ch1.Init.Mode = DMA_NORMAL;
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
    hdma_tim20_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 8003324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003328:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim20_ch1) != HAL_OK)
 800332a:	4811      	ldr	r0, [pc, #68]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 800332c:	f002 fd36 	bl	8005d9c <HAL_DMA_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_Base_MspInit+0x206>
      Error_Handler();
 8003336:	f7fe f8a1 	bl	800147c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim20_ch1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 800333e:	625a      	str	r2, [r3, #36]	; 0x24
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_TIM_Base_MspInit+0x23c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003346:	bf00      	nop
 8003348:	3740      	adds	r7, #64	; 0x40
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40021000 	.word	0x40021000
 8003358:	40000400 	.word	0x40000400
 800335c:	48000400 	.word	0x48000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40013400 	.word	0x40013400
 8003368:	40014400 	.word	0x40014400
 800336c:	40015000 	.word	0x40015000
 8003370:	20019404 	.word	0x20019404
 8003374:	40020408 	.word	0x40020408

08003378 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d14d      	bne.n	8003436 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6593      	str	r3, [r2, #88]	; 0x58
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	4a22      	ldr	r2, [pc, #136]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_TIM_Encoder_MspInit+0xc8>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003402:	f003 f831 	bl	8006468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003406:	2308      	movs	r3, #8
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003416:	2301      	movs	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4808      	ldr	r0, [pc, #32]	; (8003444 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003422:	f003 f821 	bl	8006468 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	201c      	movs	r0, #28
 800342c:	f002 fc81 	bl	8005d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003430:	201c      	movs	r0, #28
 8003432:	f002 fc98 	bl	8005d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003436:	bf00      	nop
 8003438:	3728      	adds	r7, #40	; 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	48000400 	.word	0x48000400

08003448 <HAL_TIM_OnePulse_MspInit>:

void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* tim_onepulseHandle)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  if(tim_onepulseHandle->Instance==TIM5)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_TIM_OnePulse_MspInit+0x38>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10b      	bne.n	8003472 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	6593      	str	r3, [r2, #88]	; 0x58
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40021000 	.word	0x40021000

08003488 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a46      	ldr	r2, [pc, #280]	; (80035c0 <HAL_TIM_MspPostInit+0x138>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d11e      	bne.n	80034e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ae:	4a45      	ldr	r2, [pc, #276]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80034d4:	2306      	movs	r3, #6
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	4619      	mov	r1, r3
 80034de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034e2:	f002 ffc1 	bl	8006468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80034e6:	e066      	b.n	80035b6 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a36      	ldr	r2, [pc, #216]	; (80035c8 <HAL_TIM_MspPostInit+0x140>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11c      	bne.n	800352c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4a33      	ldr	r2, [pc, #204]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800351a:	2305      	movs	r3, #5
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f107 031c 	add.w	r3, r7, #28
 8003522:	4619      	mov	r1, r3
 8003524:	4829      	ldr	r0, [pc, #164]	; (80035cc <HAL_TIM_MspPostInit+0x144>)
 8003526:	f002 ff9f 	bl	8006468 <HAL_GPIO_Init>
}
 800352a:	e044      	b.n	80035b6 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM16)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_TIM_MspPostInit+0x148>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d11e      	bne.n	8003574 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800354e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356e:	f002 ff7b 	bl	8006468 <HAL_GPIO_Init>
}
 8003572:	e020      	b.n	80035b6 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM20)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_TIM_MspPostInit+0x14c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d11b      	bne.n	80035b6 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_TIM_MspPostInit+0x13c>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003596:	2304      	movs	r3, #4
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80035a6:	2303      	movs	r3, #3
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4619      	mov	r1, r3
 80035b0:	4806      	ldr	r0, [pc, #24]	; (80035cc <HAL_TIM_MspPostInit+0x144>)
 80035b2:	f002 ff59 	bl	8006468 <HAL_GPIO_Init>
}
 80035b6:	bf00      	nop
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40013400 	.word	0x40013400
 80035cc:	48000400 	.word	0x48000400
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40015000 	.word	0x40015000

080035d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <LoopForever+0x6>)
  ldr r1, =_edata
 80035de:	490e      	ldr	r1, [pc, #56]	; (8003618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035e0:	4a0e      	ldr	r2, [pc, #56]	; (800361c <LoopForever+0xe>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80035e4:	e002      	b.n	80035ec <LoopCopyDataInit>

080035e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ea:	3304      	adds	r3, #4

080035ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f0:	d3f9      	bcc.n	80035e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035f4:	4c0b      	ldr	r4, [pc, #44]	; (8003624 <LoopForever+0x16>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f8:	e001      	b.n	80035fe <LoopFillZerobss>

080035fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035fc:	3204      	adds	r2, #4

080035fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003600:	d3fb      	bcc.n	80035fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003602:	f7ff f89d 	bl	8002740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003606:	f006 ff71 	bl	800a4ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800360a:	f7fd fbf7 	bl	8000dfc <main>

0800360e <LoopForever>:

LoopForever:
    b LoopForever
 800360e:	e7fe      	b.n	800360e <LoopForever>
  ldr   r0, =_estack
 8003610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003618:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800361c:	0800a840 	.word	0x0800a840
  ldr r2, =_sbss
 8003620:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003624:	2001946c 	.word	0x2001946c

08003628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC1_2_IRQHandler>
	...

0800362c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_Init+0x3c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <HAL_Init+0x3c>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003642:	2003      	movs	r0, #3
 8003644:	f002 fb6a 	bl	8005d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003648:	200f      	movs	r0, #15
 800364a:	f000 f80f 	bl	800366c <HAL_InitTick>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	71fb      	strb	r3, [r7, #7]
 8003658:	e001      	b.n	800365e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800365a:	f7fe ffb3 	bl	80025c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800365e:	79fb      	ldrb	r3, [r7, #7]

}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40022000 	.word	0x40022000

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_InitTick+0x68>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_InitTick+0x6c>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_InitTick+0x68>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800368c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	4618      	mov	r0, r3
 8003696:	f002 fb74 	bl	8005d82 <HAL_SYSTICK_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10f      	bne.n	80036c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	d809      	bhi.n	80036ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a6:	2200      	movs	r2, #0
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	f04f 30ff 	mov.w	r0, #4294967295
 80036ae:	f002 fb40 	bl	8005d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_InitTick+0x70>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e007      	b.n	80036ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e004      	b.n	80036ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e001      	b.n	80036ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2000002c 	.word	0x2000002c
 80036d8:	20000024 	.word	0x20000024
 80036dc:	20000028 	.word	0x20000028

080036e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_IncTick+0x1c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_IncTick+0x20>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a03      	ldr	r2, [pc, #12]	; (80036fc <HAL_IncTick+0x1c>)
 80036f0:	6013      	str	r3, [r2, #0]
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	20019464 	.word	0x20019464
 8003700:	2000002c 	.word	0x2000002c

08003704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return uwTick;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_GetTick+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20019464 	.word	0x20019464

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff ffee 	bl	8003704 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d004      	beq.n	8003740 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_Delay+0x40>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003740:	bf00      	nop
 8003742:	f7ff ffdf 	bl	8003704 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	429a      	cmp	r2, r3
 8003750:	d8f7      	bhi.n	8003742 <HAL_Delay+0x26>
  {
  }
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	2000002c 	.word	0x2000002c

08003760 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40010030 	.word	0x40010030

08003788 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 0202 	bic.w	r2, r3, #2
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40010030 	.word	0x40010030

080037b0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037c2:	f7ff ff9f 	bl	8003704 <HAL_GetTick>
 80037c6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80037c8:	e008      	b.n	80037dc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80037ca:	f7ff ff9b 	bl	8003704 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b0a      	cmp	r3, #10
 80037d6:	d901      	bls.n	80037dc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e006      	b.n	80037ea <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40010030 	.word	0x40010030

080037f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3360      	adds	r3, #96	; 0x60
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <LL_ADC_SetOffset+0x44>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	03fff000 	.word	0x03fff000

080038a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3360      	adds	r3, #96	; 0x60
 80038b6:	461a      	mov	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3360      	adds	r3, #96	; 0x60
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800390a:	b480      	push	{r7}
 800390c:	b087      	sub	sp, #28
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3360      	adds	r3, #96	; 0x60
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	431a      	orrs	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3360      	adds	r3, #96	; 0x60
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	615a      	str	r2, [r3, #20]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b087      	sub	sp, #28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3330      	adds	r3, #48	; 0x30
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	211f      	movs	r1, #31
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0e9b      	lsrs	r3, r3, #26
 80039fa:	f003 011f 	and.w	r1, r3, #31
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b087      	sub	sp, #28
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	0e5b      	lsrs	r3, r3, #25
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	0d1b      	lsrs	r3, r3, #20
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2107      	movs	r1, #7
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0d1b      	lsrs	r3, r3, #20
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10a      	bne.n	8003a9a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	407f0000 	.word	0x407f0000

08003ac0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6093      	str	r3, [r2, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af8:	d101      	bne.n	8003afe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b48:	d101      	bne.n	8003b4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b70:	f043 0201 	orr.w	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <LL_ADC_IsEnabled+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_ADC_IsEnabled+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d101      	bne.n	8003bea <LL_ADC_IsDisableOngoing+0x18>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_ADC_IsDisableOngoing+0x1a>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c0c:	f043 0210 	orr.w	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d101      	bne.n	8003c38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d101      	bne.n	8003c86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1ea      	b.n	8004084 <HAL_ADC_Init+0x3f0>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d133      	bne.n	8003d24 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a68      	ldr	r2, [pc, #416]	; (8003e60 <HAL_ADC_Init+0x1cc>)
 8003cc0:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a67      	ldr	r2, [pc, #412]	; (8003e64 <HAL_ADC_Init+0x1d0>)
 8003cc6:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a67      	ldr	r2, [pc, #412]	; (8003e68 <HAL_ADC_Init+0x1d4>)
 8003ccc:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a66      	ldr	r2, [pc, #408]	; (8003e6c <HAL_ADC_Init+0x1d8>)
 8003cd2:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a66      	ldr	r2, [pc, #408]	; (8003e70 <HAL_ADC_Init+0x1dc>)
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a65      	ldr	r2, [pc, #404]	; (8003e74 <HAL_ADC_Init+0x1e0>)
 8003cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a64      	ldr	r2, [pc, #400]	; (8003e78 <HAL_ADC_Init+0x1e4>)
 8003ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a63      	ldr	r2, [pc, #396]	; (8003e7c <HAL_ADC_Init+0x1e8>)
 8003cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a62      	ldr	r2, [pc, #392]	; (8003e80 <HAL_ADC_Init+0x1ec>)
 8003cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a5f      	ldr	r2, [pc, #380]	; (8003e84 <HAL_ADC_Init+0x1f0>)
 8003d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fedb 	bl	8003ae4 <LL_ADC_IsDeepPowerDownEnabled>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fec1 	bl	8003ac0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fef6 	bl	8003b34 <LL_ADC_IsInternalRegulatorEnabled>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff feda 	bl	8003b0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d58:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_ADC_Init+0x1f4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	4a4b      	ldr	r2, [pc, #300]	; (8003e8c <HAL_ADC_Init+0x1f8>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d6c:	e002      	b.n	8003d74 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f9      	bne.n	8003d6e <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fed8 	bl	8003b34 <LL_ADC_IsInternalRegulatorEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	f043 0210 	orr.w	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff38 	bl	8003c20 <LL_ADC_REG_IsConversionOngoing>
 8003db0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 8159 	bne.w	8004072 <HAL_ADC_Init+0x3de>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 8155 	bne.w	8004072 <HAL_ADC_Init+0x3de>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003dd0:	f043 0202 	orr.w	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fee5 	bl	8003bac <LL_ADC_IsEnabled>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d164      	bne.n	8003eb2 <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df0:	d004      	beq.n	8003dfc <HAL_ADC_Init+0x168>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <HAL_ADC_Init+0x1fc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10f      	bne.n	8003e1c <HAL_ADC_Init+0x188>
 8003dfc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e00:	f7ff fed4 	bl	8003bac <LL_ADC_IsEnabled>
 8003e04:	4604      	mov	r4, r0
 8003e06:	4822      	ldr	r0, [pc, #136]	; (8003e90 <HAL_ADC_Init+0x1fc>)
 8003e08:	f7ff fed0 	bl	8003bac <LL_ADC_IsEnabled>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4323      	orrs	r3, r4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e012      	b.n	8003e42 <HAL_ADC_Init+0x1ae>
 8003e1c:	481d      	ldr	r0, [pc, #116]	; (8003e94 <HAL_ADC_Init+0x200>)
 8003e1e:	f7ff fec5 	bl	8003bac <LL_ADC_IsEnabled>
 8003e22:	4604      	mov	r4, r0
 8003e24:	481c      	ldr	r0, [pc, #112]	; (8003e98 <HAL_ADC_Init+0x204>)
 8003e26:	f7ff fec1 	bl	8003bac <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	431c      	orrs	r4, r3
 8003e2e:	481b      	ldr	r0, [pc, #108]	; (8003e9c <HAL_ADC_Init+0x208>)
 8003e30:	f7ff febc 	bl	8003bac <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4323      	orrs	r3, r4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d035      	beq.n	8003eb2 <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4e:	d004      	beq.n	8003e5a <HAL_ADC_Init+0x1c6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_ADC_Init+0x1fc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d124      	bne.n	8003ea4 <HAL_ADC_Init+0x210>
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_ADC_Init+0x20c>)
 8003e5c:	e023      	b.n	8003ea6 <HAL_ADC_Init+0x212>
 8003e5e:	bf00      	nop
 8003e60:	080041d1 	.word	0x080041d1
 8003e64:	080041e5 	.word	0x080041e5
 8003e68:	080041f9 	.word	0x080041f9
 8003e6c:	0800420d 	.word	0x0800420d
 8003e70:	08005285 	.word	0x08005285
 8003e74:	08005299 	.word	0x08005299
 8003e78:	080052ad 	.word	0x080052ad
 8003e7c:	080052c1 	.word	0x080052c1
 8003e80:	080052d5 	.word	0x080052d5
 8003e84:	080003d9 	.word	0x080003d9
 8003e88:	20000024 	.word	0x20000024
 8003e8c:	053e2d63 	.word	0x053e2d63
 8003e90:	50000100 	.word	0x50000100
 8003e94:	50000400 	.word	0x50000400
 8003e98:	50000500 	.word	0x50000500
 8003e9c:	50000600 	.word	0x50000600
 8003ea0:	50000300 	.word	0x50000300
 8003ea4:	4a79      	ldr	r2, [pc, #484]	; (800408c <HAL_ADC_Init+0x3f8>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7ff fca3 	bl	80037f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7f5b      	ldrb	r3, [r3, #29]
 8003eb6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ebc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ec2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003ec8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d106      	bne.n	8003eee <HAL_ADC_Init+0x25a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	045b      	lsls	r3, r3, #17
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_ADC_Init+0x276>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <HAL_ADC_Init+0x3fc>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fe71 	bl	8003c20 <LL_ADC_REG_IsConversionOngoing>
 8003f3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fe92 	bl	8003c6e <LL_ADC_INJ_IsConversionOngoing>
 8003f4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d16d      	bne.n	800402e <HAL_ADC_Init+0x39a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d16a      	bne.n	800402e <HAL_ADC_Init+0x39a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f5c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f64:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f74:	f023 0302 	bic.w	r3, r3, #2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d017      	beq.n	8003fba <HAL_ADC_Init+0x326>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f98:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fa2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6911      	ldr	r1, [r2, #16]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003fb8:	e013      	b.n	8003fe2 <HAL_ADC_Init+0x34e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fc8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fde:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d118      	bne.n	800401e <HAL_ADC_Init+0x38a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ff6:	f023 0304 	bic.w	r3, r3, #4
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004008:	4311      	orrs	r1, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800400e:	430a      	orrs	r2, r1
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	e007      	b.n	800402e <HAL_ADC_Init+0x39a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10c      	bne.n	8004050 <HAL_ADC_Init+0x3bc>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f023 010f 	bic.w	r1, r3, #15
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
 800404e:	e007      	b.n	8004060 <HAL_ADC_Init+0x3cc>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 020f 	bic.w	r2, r2, #15
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	f023 0303 	bic.w	r3, r3, #3
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004070:	e007      	b.n	8004082 <HAL_ADC_Init+0x3ee>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004076:	f043 0210 	orr.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004082:	7ffb      	ldrb	r3, [r7, #31]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3724      	adds	r7, #36	; 0x24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}
 800408c:	50000700 	.word	0x50000700
 8004090:	fff04007 	.word	0xfff04007

08004094 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	460b      	mov	r3, r1
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d107      	bne.n	80040bc <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	f043 0210 	orr.w	r2, r3, #16
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e082      	b.n	80041c2 <HAL_ADC_RegisterCallback+0x12e>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d056      	beq.n	8004176 <HAL_ADC_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 80040c8:	7afb      	ldrb	r3, [r7, #11]
 80040ca:	2b0a      	cmp	r3, #10
 80040cc:	d84a      	bhi.n	8004164 <HAL_ADC_RegisterCallback+0xd0>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_ADC_RegisterCallback+0x40>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004109 	.word	0x08004109
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004119 	.word	0x08004119
 80040e4:	08004121 	.word	0x08004121
 80040e8:	08004129 	.word	0x08004129
 80040ec:	08004133 	.word	0x08004133
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	08004147 	.word	0x08004147
 80040f8:	08004151 	.word	0x08004151
 80040fc:	0800415b 	.word	0x0800415b
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004106:	e05b      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800410e:	e057      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004116:	e053      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800411e:	e04f      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004126:	e04b      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
        hadc->InjectedQueueOverflowCallback = pCallback;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004130:	e046      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800413a:	e041      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8004144:	e03c      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800414e:	e037      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004158:	e032      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004162:	e02d      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	f043 0210 	orr.w	r2, r3, #16
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
        break;
 8004174:	e024      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_ADC_RegisterCallback+0x11c>
  {
    switch (CallbackID)
 800417e:	7afb      	ldrb	r3, [r7, #11]
 8004180:	2b09      	cmp	r3, #9
 8004182:	d002      	beq.n	800418a <HAL_ADC_RegisterCallback+0xf6>
 8004184:	2b0a      	cmp	r3, #10
 8004186:	d005      	beq.n	8004194 <HAL_ADC_RegisterCallback+0x100>
 8004188:	e009      	b.n	800419e <HAL_ADC_RegisterCallback+0x10a>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004192:	e015      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800419c:	e010      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	f043 0210 	orr.w	r2, r3, #16
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
        break;
 80041ae:	e007      	b.n	80041c0 <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b4:	f043 0210 	orr.w	r2, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop

080041d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b0b6      	sub	sp, #216	; 0xd8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x24>
 800423e:	2302      	movs	r3, #2
 8004240:	f000 bc13 	b.w	8004a6a <HAL_ADC_ConfigChannel+0x84a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fce5 	bl	8003c20 <LL_ADC_REG_IsConversionOngoing>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 83f3 	bne.w	8004a44 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	f7ff fba9 	bl	80039c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fcd3 	bl	8003c20 <LL_ADC_REG_IsConversionOngoing>
 800427a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fcf3 	bl	8003c6e <LL_ADC_INJ_IsConversionOngoing>
 8004288:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800428c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 81d9 	bne.w	8004648 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 81d4 	bne.w	8004648 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a8:	d10f      	bne.n	80042ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7ff fbb0 	bl	8003a1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fb57 	bl	8003976 <LL_ADC_SetSamplingTimeCommonConfig>
 80042c8:	e00e      	b.n	80042e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff fb9f 	bl	8003a1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fb47 	bl	8003976 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b04      	cmp	r3, #4
 8004308:	d022      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6919      	ldr	r1, [r3, #16]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800431a:	f7ff faa1 	bl	8003860 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	461a      	mov	r2, r3
 800432c:	f7ff faed 	bl	800390a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6919      	ldr	r1, [r3, #16]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	7f1b      	ldrb	r3, [r3, #28]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x126>
 8004340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004344:	e000      	b.n	8004348 <HAL_ADC_ConfigChannel+0x128>
 8004346:	2300      	movs	r3, #0
 8004348:	461a      	mov	r2, r3
 800434a:	f7ff faf9 	bl	8003940 <LL_ADC_SetOffsetSaturation>
 800434e:	e17b      	b.n	8004648 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff faa6 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x15c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fa9b 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	e01e      	b.n	80043ba <HAL_ADC_ConfigChannel+0x19a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fa90 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800439a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800439e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80043aa:	2320      	movs	r3, #32
 80043ac:	e004      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80043ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x1b2>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0e9b      	lsrs	r3, r3, #26
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	e018      	b.n	8004404 <HAL_ADC_ConfigChannel+0x1e4>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e004      	b.n	8004404 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80043fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004404:	429a      	cmp	r2, r3
 8004406:	d106      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fa5f 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa43 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x222>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fa38 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004438:	4603      	mov	r3, r0
 800443a:	0e9b      	lsrs	r3, r3, #26
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	e01e      	b.n	8004480 <HAL_ADC_ConfigChannel+0x260>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fa2d 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e004      	b.n	800447e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x278>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	e018      	b.n	80044ca <HAL_ADC_ConfigChannel+0x2aa>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80044ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80044b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e004      	b.n	80044ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80044c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d106      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f9fc 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f9e0 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x2e8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f9d5 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	0e9b      	lsrs	r3, r3, #26
 8004502:	f003 021f 	and.w	r2, r3, #31
 8004506:	e01e      	b.n	8004546 <HAL_ADC_ConfigChannel+0x326>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2102      	movs	r1, #2
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f9ca 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004514:	4603      	mov	r3, r0
 8004516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800452a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800452e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e004      	b.n	8004544 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800453a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <HAL_ADC_ConfigChannel+0x33e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0e9b      	lsrs	r3, r3, #26
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	e016      	b.n	800458c <HAL_ADC_ConfigChannel+0x36c>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800457e:	2320      	movs	r3, #32
 8004580:	e004      	b.n	800458c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	2102      	movs	r1, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f99b 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2103      	movs	r1, #3
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f97f 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x3aa>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2103      	movs	r1, #3
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f974 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	0e9b      	lsrs	r3, r3, #26
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	e017      	b.n	80045fa <HAL_ADC_ConfigChannel+0x3da>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2103      	movs	r1, #3
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff f969 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80045d6:	4603      	mov	r3, r0
 80045d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80045ec:	2320      	movs	r3, #32
 80045ee:	e003      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80045f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x3f2>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e9b      	lsrs	r3, r3, #26
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	e011      	b.n	8004636 <HAL_ADC_ConfigChannel+0x416>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004622:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800462a:	2320      	movs	r3, #32
 800462c:	e003      	b.n	8004636 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800462e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004636:	429a      	cmp	r2, r3
 8004638:	d106      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	2103      	movs	r1, #3
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f946 	bl	80038d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff faad 	bl	8003bac <LL_ADC_IsEnabled>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 813d 	bne.w	80048d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f7ff fa02 	bl	8003a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4aa2      	ldr	r2, [pc, #648]	; (80048fc <HAL_ADC_ConfigChannel+0x6dc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	f040 812e 	bne.w	80048d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x480>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0e9b      	lsrs	r3, r3, #26
 800468e:	3301      	adds	r3, #1
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2b09      	cmp	r3, #9
 8004696:	bf94      	ite	ls
 8004698:	2301      	movls	r3, #1
 800469a:	2300      	movhi	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e019      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x4b4>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80046ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80046b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80046bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	bf94      	ite	ls
 80046ce:	2301      	movls	r3, #1
 80046d0:	2300      	movhi	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d079      	beq.n	80047cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x4d4>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	3301      	adds	r3, #1
 80046ec:	069b      	lsls	r3, r3, #26
 80046ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f2:	e015      	b.n	8004720 <HAL_ADC_ConfigChannel+0x500>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e003      	b.n	8004718 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3301      	adds	r3, #1
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x520>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	e017      	b.n	8004770 <HAL_ADC_ConfigChannel+0x550>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004758:	2320      	movs	r3, #32
 800475a:	e003      	b.n	8004764 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x576>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	3301      	adds	r3, #1
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	051b      	lsls	r3, r3, #20
 8004794:	e018      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x5a8>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e003      	b.n	80047ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80047b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	4613      	mov	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c8:	430b      	orrs	r3, r1
 80047ca:	e07e      	b.n	80048ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x5c8>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	3301      	adds	r3, #1
 80047e0:	069b      	lsls	r3, r3, #26
 80047e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047e6:	e015      	b.n	8004814 <HAL_ADC_ConfigChannel+0x5f4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004800:	2320      	movs	r3, #32
 8004802:	e003      	b.n	800480c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3301      	adds	r3, #1
 800480e:	069b      	lsls	r3, r3, #26
 8004810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x614>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	3301      	adds	r3, #1
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	e017      	b.n	8004864 <HAL_ADC_ConfigChannel+0x644>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	61fb      	str	r3, [r7, #28]
  return result;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e003      	b.n	8004858 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	ea42 0103 	orr.w	r1, r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x670>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	3301      	adds	r3, #1
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	3b1e      	subs	r3, #30
 8004888:	051b      	lsls	r3, r3, #20
 800488a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488e:	e01b      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x6a8>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	613b      	str	r3, [r7, #16]
  return result;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80048a8:	2320      	movs	r3, #32
 80048aa:	e003      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3301      	adds	r3, #1
 80048b6:	f003 021f 	and.w	r2, r3, #31
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	3b1e      	subs	r3, #30
 80048c2:	051b      	lsls	r3, r3, #20
 80048c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c8:	430b      	orrs	r3, r1
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	6892      	ldr	r2, [r2, #8]
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7ff f8a3 	bl	8003a1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_ADC_ConfigChannel+0x6e0>)
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80be 	beq.w	8004a5e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ea:	d004      	beq.n	80048f6 <HAL_ADC_ConfigChannel+0x6d6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_ADC_ConfigChannel+0x6e4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10a      	bne.n	800490c <HAL_ADC_ConfigChannel+0x6ec>
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_ADC_ConfigChannel+0x6e8>)
 80048f8:	e009      	b.n	800490e <HAL_ADC_ConfigChannel+0x6ee>
 80048fa:	bf00      	nop
 80048fc:	407f0000 	.word	0x407f0000
 8004900:	80080000 	.word	0x80080000
 8004904:	50000100 	.word	0x50000100
 8004908:	50000300 	.word	0x50000300
 800490c:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe ff98 	bl	8003844 <LL_ADC_GetCommonPathInternalCh>
 8004914:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a56      	ldr	r2, [pc, #344]	; (8004a78 <HAL_ADC_ConfigChannel+0x858>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_ADC_ConfigChannel+0x70c>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_ADC_ConfigChannel+0x85c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d13a      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800492c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d134      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004940:	d005      	beq.n	800494e <HAL_ADC_ConfigChannel+0x72e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4e      	ldr	r2, [pc, #312]	; (8004a80 <HAL_ADC_ConfigChannel+0x860>)
 8004948:	4293      	cmp	r3, r2
 800494a:	f040 8085 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004956:	d004      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x742>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x746>
 8004962:	4a49      	ldr	r2, [pc, #292]	; (8004a88 <HAL_ADC_ConfigChannel+0x868>)
 8004964:	e000      	b.n	8004968 <HAL_ADC_ConfigChannel+0x748>
 8004966:	4a43      	ldr	r2, [pc, #268]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 8004968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800496c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fe ff53 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004978:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <HAL_ADC_ConfigChannel+0x86c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	099b      	lsrs	r3, r3, #6
 800497e:	4a44      	ldr	r2, [pc, #272]	; (8004a90 <HAL_ADC_ConfigChannel+0x870>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004992:	e002      	b.n	800499a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f9      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049a0:	e05a      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <HAL_ADC_ConfigChannel+0x874>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d125      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x7d8>
 80049ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11f      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a31      	ldr	r2, [pc, #196]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d104      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x7ac>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a34      	ldr	r2, [pc, #208]	; (8004a98 <HAL_ADC_ConfigChannel+0x878>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d047      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d4:	d004      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x7c0>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7c4>
 80049e0:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <HAL_ADC_ConfigChannel+0x868>)
 80049e2:	e000      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x7c6>
 80049e4:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 80049e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe ff14 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f6:	e031      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <HAL_ADC_ConfigChannel+0x87c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d12d      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d127      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a20:	d004      	beq.n	8004a2c <HAL_ADC_ConfigChannel+0x80c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x810>
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <HAL_ADC_ConfigChannel+0x868>)
 8004a2e:	e000      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x812>
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 8004a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7fe feee 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
 8004a42:	e00c      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a56:	e002      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	37d8      	adds	r7, #216	; 0xd8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	50000700 	.word	0x50000700
 8004a78:	c3210000 	.word	0xc3210000
 8004a7c:	90c00010 	.word	0x90c00010
 8004a80:	50000600 	.word	0x50000600
 8004a84:	50000100 	.word	0x50000100
 8004a88:	50000300 	.word	0x50000300
 8004a8c:	20000024 	.word	0x20000024
 8004a90:	053e2d63 	.word	0x053e2d63
 8004a94:	c7520000 	.word	0xc7520000
 8004a98:	50000500 	.word	0x50000500
 8004a9c:	cb840000 	.word	0xcb840000

08004aa0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff f8b2 	bl	8003c20 <LL_ADC_REG_IsConversionOngoing>
 8004abc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f8d3 	bl	8003c6e <LL_ADC_INJ_IsConversionOngoing>
 8004ac8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8098 	beq.w	8004c08 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02a      	beq.n	8004b3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7f5b      	ldrb	r3, [r3, #29]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d126      	bne.n	8004b3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7f1b      	ldrb	r3, [r3, #28]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d122      	bne.n	8004b3c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004afa:	e014      	b.n	8004b26 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4a45      	ldr	r2, [pc, #276]	; (8004c14 <ADC_ConversionStop+0x174>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d90d      	bls.n	8004b20 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	f043 0210 	orr.w	r2, r3, #16
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e074      	b.n	8004c0a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d1e3      	bne.n	8004afc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d014      	beq.n	8004b6c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f86a 	bl	8003c20 <LL_ADC_REG_IsConversionOngoing>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff f83b 	bl	8003bd2 <LL_ADC_IsDisableOngoing>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f846 	bl	8003bf8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d014      	beq.n	8004b9c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff f879 	bl	8003c6e <LL_ADC_INJ_IsConversionOngoing>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f823 	bl	8003bd2 <LL_ADC_IsDisableOngoing>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff f855 	bl	8003c46 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d005      	beq.n	8004bae <ADC_ConversionStop+0x10e>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d105      	bne.n	8004bb4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ba8:	230c      	movs	r3, #12
 8004baa:	617b      	str	r3, [r7, #20]
        break;
 8004bac:	e005      	b.n	8004bba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	617b      	str	r3, [r7, #20]
        break;
 8004bb2:	e002      	b.n	8004bba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	617b      	str	r3, [r7, #20]
        break;
 8004bb8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bba:	f7fe fda3 	bl	8003704 <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bc0:	e01b      	b.n	8004bfa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bc2:	f7fe fd9f 	bl	8003704 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b05      	cmp	r3, #5
 8004bce:	d914      	bls.n	8004bfa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	f043 0210 	orr.w	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1dc      	bne.n	8004bc2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	a33fffff 	.word	0xa33fffff

08004c18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe ffc1 	bl	8003bac <LL_ADC_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d14d      	bne.n	8004ccc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <ADC_Enable+0xc0>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e039      	b.n	8004cce <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe ff7c 	bl	8003b5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c64:	f7fe fd4e 	bl	8003704 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c6a:	e028      	b.n	8004cbe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe ff9b 	bl	8003bac <LL_ADC_IsEnabled>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe ff6b 	bl	8003b5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c86:	f7fe fd3d 	bl	8003704 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d914      	bls.n	8004cbe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d00d      	beq.n	8004cbe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e007      	b.n	8004cce <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d1cf      	bne.n	8004c6c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	8000003f 	.word	0x8000003f

08004cdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe ff72 	bl	8003bd2 <LL_ADC_IsDisableOngoing>
 8004cee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe ff59 	bl	8003bac <LL_ADC_IsEnabled>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d047      	beq.n	8004d90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d144      	bne.n	8004d90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030d 	and.w	r3, r3, #13
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d10c      	bne.n	8004d2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe ff33 	bl	8003b84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2203      	movs	r2, #3
 8004d24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d26:	f7fe fced 	bl	8003704 <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d2c:	e029      	b.n	8004d82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	f043 0210 	orr.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e023      	b.n	8004d92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d4a:	f7fe fcdb 	bl	8003704 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d914      	bls.n	8004d82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6a:	f043 0210 	orr.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d76:	f043 0201 	orr.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e007      	b.n	8004d92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1dc      	bne.n	8004d4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d14c      	bne.n	8004e4e <ADC_DMAConvCplt+0xb4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d021      	beq.n	8004e12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fde2 	bl	800399c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d032      	beq.n	8004e44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d12b      	bne.n	8004e44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11f      	bne.n	8004e44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e10:	e018      	b.n	8004e44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d111      	bne.n	8004e44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	f043 0201 	orr.w	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e4c:	e00f      	b.n	8004e6e <ADC_DMAConvCplt+0xd4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <ADC_DMAConvCplt+0xca>
      hadc->ErrorCallback(hadc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	4798      	blx	r3
}
 8004e62:	e004      	b.n	8004e6e <ADC_DMAConvCplt+0xd4>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <LL_ADC_IsEnabled>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <LL_ADC_IsEnabled+0x18>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <LL_ADC_IsEnabled+0x1a>
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <LL_ADC_REG_StartConversion>:
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f04:	f043 0204 	orr.w	r2, r3, #4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d101      	bne.n	8004f30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b0ac      	sub	sp, #176	; 0xb0
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ffe1 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e09c      	b.n	800509a <HAL_ADCEx_MultiModeStart_DMA+0x15a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e095      	b.n	800509a <HAL_ADCEx_MultiModeStart_DMA+0x15a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004f76:	2300      	movs	r3, #0
 8004f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004f86:	2300      	movs	r3, #0
 8004f88:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f92:	d102      	bne.n	8004f9a <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e009      	b.n	8004fae <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a42      	ldr	r2, [pc, #264]	; (80050a8 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d102      	bne.n	8004faa <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8004fa4:	4b41      	ldr	r3, [pc, #260]	; (80050ac <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e001      	b.n	8004fae <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e066      	b.n	800509a <HAL_ADCEx_MultiModeStart_DMA+0x15a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fe23 	bl	8004c18 <ADC_Enable>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    if (tmp_hal_status == HAL_OK)
 8004fd8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <HAL_ADCEx_MultiModeStart_DMA+0xb0>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004fe0:	f107 0310 	add.w	r3, r7, #16
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fe17 	bl	8004c18 <ADC_Enable>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8004ff0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d14a      	bne.n	800508e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8005020:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8005028:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005032:	d004      	beq.n	800503e <HAL_ADCEx_MultiModeStart_DMA+0xfe>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <HAL_ADCEx_MultiModeStart_DMA+0x102>
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8005040:	e000      	b.n	8005044 <HAL_ADCEx_MultiModeStart_DMA+0x104>
 8005042:	4b1f      	ldr	r3, [pc, #124]	; (80050c0 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8005044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	221c      	movs	r2, #28
 800504e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0210 	orr.w	r2, r2, #16
 8005066:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800506c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005070:	330c      	adds	r3, #12
 8005072:	4619      	mov	r1, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f000 ff38 	bl	8005eec <HAL_DMA_Start_IT>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff ff32 	bl	8004ef0 <LL_ADC_REG_StartConversion>
 800508c:	e003      	b.n	8005096 <HAL_ADCEx_MultiModeStart_DMA+0x156>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005096:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	37b0      	adds	r7, #176	; 0xb0
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	50000100 	.word	0x50000100
 80050a8:	50000400 	.word	0x50000400
 80050ac:	50000500 	.word	0x50000500
 80050b0:	08004d9b 	.word	0x08004d9b
 80050b4:	08004e77 	.word	0x08004e77
 80050b8:	08004e95 	.word	0x08004e95
 80050bc:	50000300 	.word	0x50000300
 80050c0:	50000700 	.word	0x50000700

080050c4 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b0ac      	sub	sp, #176	; 0xb0
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_MultiModeStop_DMA+0x16>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0c9      	b.n	800526e <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80050e2:	2103      	movs	r1, #3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fcdb 	bl	8004aa0 <ADC_ConversionStop>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80050f0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 80b4 	bne.w	8005262 <HAL_ADCEx_MultiModeStop_DMA+0x19e>
  {
    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80050fa:	2300      	movs	r3, #0
 80050fc:	667b      	str	r3, [r7, #100]	; 0x64
 80050fe:	2300      	movs	r3, #0
 8005100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005104:	2300      	movs	r3, #0
 8005106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800510a:	2300      	movs	r3, #0
 800510c:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005116:	d102      	bne.n	800511e <HAL_ADCEx_MultiModeStop_DMA+0x5a>
 8005118:	4b57      	ldr	r3, [pc, #348]	; (8005278 <HAL_ADCEx_MultiModeStop_DMA+0x1b4>)
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	e009      	b.n	8005132 <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a56      	ldr	r2, [pc, #344]	; (800527c <HAL_ADCEx_MultiModeStop_DMA+0x1b8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d102      	bne.n	800512e <HAL_ADCEx_MultiModeStop_DMA+0x6a>
 8005128:	4b55      	ldr	r3, [pc, #340]	; (8005280 <HAL_ADCEx_MultiModeStop_DMA+0x1bc>)
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	e001      	b.n	8005132 <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]

    if (tmphadcSlave.Instance == NULL)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <HAL_ADCEx_MultiModeStop_DMA+0x8c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e08e      	b.n	800526e <HAL_ADCEx_MultiModeStop_DMA+0x1aa>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8005150:	f7fe fad8 	bl	8003704 <HAL_GetTick>
 8005154:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fedc 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 8005160:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8005164:	e02b      	b.n	80051be <HAL_ADCEx_MultiModeStop_DMA+0xfa>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005166:	f7fe facd 	bl	8003704 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b05      	cmp	r3, #5
 8005174:	d91d      	bls.n	80051b2 <HAL_ADCEx_MultiModeStop_DMA+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fecd 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 800517e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fec6 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <HAL_ADCEx_MultiModeStop_DMA+0xd6>
            || (tmphadcSlave_conversion_on_going == 1UL)
 8005192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10b      	bne.n	80051b2 <HAL_ADCEx_MultiModeStop_DMA+0xee>
           )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	f043 0210 	orr.w	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e05d      	b.n	800526e <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff feaf 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 80051ba:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fea8 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d0cb      	beq.n	8005166 <HAL_ADCEx_MultiModeStop_DMA+0xa2>
           || (tmphadcSlave_conversion_on_going == 1UL)
 80051ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d0c7      	beq.n	8005166 <HAL_ADCEx_MultiModeStop_DMA+0xa2>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 ff01 	bl	8005fe2 <HAL_DMA_Abort>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 80051e6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_ADCEx_MultiModeStop_DMA+0x136>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0210 	bic.w	r2, r2, #16
 8005208:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 800520a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800520e:	2b00      	cmp	r3, #0
 8005210:	d115      	bne.n	800523e <HAL_ADCEx_MultiModeStop_DMA+0x17a>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fd60 	bl	8004cdc <ADC_Disable>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fd5a 	bl	8004cdc <ADC_Disable>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10f      	bne.n	800524e <HAL_ADCEx_MultiModeStop_DMA+0x18a>
 800522e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_ADCEx_MultiModeStop_DMA+0x18a>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800523c:	e007      	b.n	800524e <HAL_ADCEx_MultiModeStop_DMA+0x18a>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fd4c 	bl	8004cdc <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fd47 	bl	8004cdc <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800526a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 800526e:	4618      	mov	r0, r3
 8005270:	37b0      	adds	r7, #176	; 0xb0
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	50000100 	.word	0x50000100
 800527c:	50000400 	.word	0x50000400
 8005280:	50000500 	.word	0x50000500

08005284 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b0ad      	sub	sp, #180	; 0xb4
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005302:	2302      	movs	r3, #2
 8005304:	e0f8      	b.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800530e:	2300      	movs	r3, #0
 8005310:	66bb      	str	r3, [r7, #104]	; 0x68
 8005312:	2300      	movs	r3, #0
 8005314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800531e:	2300      	movs	r3, #0
 8005320:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800532a:	d102      	bne.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800532c:	4b74      	ldr	r3, [pc, #464]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	e009      	b.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a73      	ldr	r2, [pc, #460]	; (8005504 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d102      	bne.n	8005342 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 800533c:	4b72      	ldr	r3, [pc, #456]	; (8005508 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e001      	b.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	f043 0220 	orr.w	r2, r3, #32
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0c9      	b.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fdd6 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 800536c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fdcf 	bl	8004f18 <LL_ADC_REG_IsConversionOngoing>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	f040 80aa 	bne.w	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 80a5 	bne.w	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005394:	d004      	beq.n	80053a0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a59      	ldr	r2, [pc, #356]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 80053a0:	4b5a      	ldr	r3, [pc, #360]	; (800550c <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 80053a2:	e000      	b.n	80053a6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80053a4:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 80053a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04f      	beq.n	8005452 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80053b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053c6:	035b      	lsls	r3, r3, #13
 80053c8:	430b      	orrs	r3, r1
 80053ca:	431a      	orrs	r2, r3
 80053cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053da:	d004      	beq.n	80053e6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a47      	ldr	r2, [pc, #284]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10f      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 80053e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80053ea:	f7ff fd6e 	bl	8004eca <LL_ADC_IsEnabled>
 80053ee:	4604      	mov	r4, r0
 80053f0:	4843      	ldr	r0, [pc, #268]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80053f2:	f7ff fd6a 	bl	8004eca <LL_ADC_IsEnabled>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4323      	orrs	r3, r4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e012      	b.n	800542c <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8005406:	483f      	ldr	r0, [pc, #252]	; (8005504 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005408:	f7ff fd5f 	bl	8004eca <LL_ADC_IsEnabled>
 800540c:	4604      	mov	r4, r0
 800540e:	483e      	ldr	r0, [pc, #248]	; (8005508 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8005410:	f7ff fd5b 	bl	8004eca <LL_ADC_IsEnabled>
 8005414:	4603      	mov	r3, r0
 8005416:	431c      	orrs	r4, r3
 8005418:	483e      	ldr	r0, [pc, #248]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 800541a:	f7ff fd56 	bl	8004eca <LL_ADC_IsEnabled>
 800541e:	4603      	mov	r3, r0
 8005420:	4323      	orrs	r3, r4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05c      	beq.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800543a:	f023 030f 	bic.w	r3, r3, #15
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6811      	ldr	r1, [r2, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	430a      	orrs	r2, r1
 8005448:	431a      	orrs	r2, r3
 800544a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800544e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005450:	e04b      	b.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005460:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800546a:	d004      	beq.n	8005476 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a23      	ldr	r2, [pc, #140]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10f      	bne.n	8005496 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8005476:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800547a:	f7ff fd26 	bl	8004eca <LL_ADC_IsEnabled>
 800547e:	4604      	mov	r4, r0
 8005480:	481f      	ldr	r0, [pc, #124]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8005482:	f7ff fd22 	bl	8004eca <LL_ADC_IsEnabled>
 8005486:	4603      	mov	r3, r0
 8005488:	4323      	orrs	r3, r4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e012      	b.n	80054bc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 8005496:	481b      	ldr	r0, [pc, #108]	; (8005504 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005498:	f7ff fd17 	bl	8004eca <LL_ADC_IsEnabled>
 800549c:	4604      	mov	r4, r0
 800549e:	481a      	ldr	r0, [pc, #104]	; (8005508 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80054a0:	f7ff fd13 	bl	8004eca <LL_ADC_IsEnabled>
 80054a4:	4603      	mov	r3, r0
 80054a6:	431c      	orrs	r4, r3
 80054a8:	481a      	ldr	r0, [pc, #104]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 80054aa:	f7ff fd0e 	bl	8004eca <LL_ADC_IsEnabled>
 80054ae:	4603      	mov	r3, r0
 80054b0:	4323      	orrs	r3, r4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d014      	beq.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80054ca:	f023 030f 	bic.w	r3, r3, #15
 80054ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80054d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054d4:	e009      	b.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80054e8:	e000      	b.n	80054ec <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80054f4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	37b4      	adds	r7, #180	; 0xb4
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd90      	pop	{r4, r7, pc}
 8005500:	50000100 	.word	0x50000100
 8005504:	50000400 	.word	0x50000400
 8005508:	50000500 	.word	0x50000500
 800550c:	50000300 	.word	0x50000300
 8005510:	50000700 	.word	0x50000700
 8005514:	50000600 	.word	0x50000600

08005518 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <LL_EXTI_EnableIT_0_31+0x20>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4904      	ldr	r1, [pc, #16]	; (8005538 <LL_EXTI_EnableIT_0_31+0x20>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40010400 	.word	0x40010400

0800553c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <LL_EXTI_EnableIT_32_63+0x20>)
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	4904      	ldr	r1, [pc, #16]	; (800555c <LL_EXTI_EnableIT_32_63+0x20>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4313      	orrs	r3, r2
 800554e:	620b      	str	r3, [r1, #32]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40010400 	.word	0x40010400

08005560 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <LL_EXTI_DisableIT_0_31+0x24>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	43db      	mvns	r3, r3
 8005570:	4904      	ldr	r1, [pc, #16]	; (8005584 <LL_EXTI_DisableIT_0_31+0x24>)
 8005572:	4013      	ands	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010400 	.word	0x40010400

08005588 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <LL_EXTI_DisableIT_32_63+0x24>)
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	43db      	mvns	r3, r3
 8005598:	4904      	ldr	r1, [pc, #16]	; (80055ac <LL_EXTI_DisableIT_32_63+0x24>)
 800559a:	4013      	ands	r3, r2
 800559c:	620b      	str	r3, [r1, #32]
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010400 	.word	0x40010400

080055b0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4904      	ldr	r1, [pc, #16]	; (80055d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]

}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40010400 	.word	0x40010400

080055d4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80055de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e0:	4904      	ldr	r1, [pc, #16]	; (80055f4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40010400 	.word	0x40010400

080055f8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	43db      	mvns	r3, r3
 8005608:	4904      	ldr	r1, [pc, #16]	; (800561c <LL_EXTI_DisableEvent_0_31+0x24>)
 800560a:	4013      	ands	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010400 	.word	0x40010400

08005620 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <LL_EXTI_DisableEvent_32_63+0x24>)
 800562a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	43db      	mvns	r3, r3
 8005630:	4904      	ldr	r1, [pc, #16]	; (8005644 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005632:	4013      	ands	r3, r2
 8005634:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010400 	.word	0x40010400

08005648 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	4904      	ldr	r1, [pc, #16]	; (8005668 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4313      	orrs	r3, r2
 800565a:	608b      	str	r3, [r1, #8]

}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010400 	.word	0x40010400

0800566c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005678:	4904      	ldr	r1, [pc, #16]	; (800568c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4313      	orrs	r3, r2
 800567e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40010400 	.word	0x40010400

08005690 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	43db      	mvns	r3, r3
 80056a0:	4904      	ldr	r1, [pc, #16]	; (80056b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]

}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010400 	.word	0x40010400

080056b8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80056c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	43db      	mvns	r3, r3
 80056c8:	4904      	ldr	r1, [pc, #16]	; (80056dc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010400 	.word	0x40010400

080056e0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	4904      	ldr	r1, [pc, #16]	; (8005700 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60cb      	str	r3, [r1, #12]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40010400 	.word	0x40010400

08005704 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4904      	ldr	r1, [pc, #16]	; (8005724 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4313      	orrs	r3, r2
 8005716:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40010400 	.word	0x40010400

08005728 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	43db      	mvns	r3, r3
 8005738:	4904      	ldr	r1, [pc, #16]	; (800574c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800573a:	4013      	ands	r3, r2
 800573c:	60cb      	str	r3, [r1, #12]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010400 	.word	0x40010400

08005750 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	43db      	mvns	r3, r3
 8005760:	4904      	ldr	r1, [pc, #16]	; (8005774 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005762:	4013      	ands	r3, r2
 8005764:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010400 	.word	0x40010400

08005778 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005780:	4a04      	ldr	r2, [pc, #16]	; (8005794 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6153      	str	r3, [r2, #20]
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010400 	.word	0x40010400

08005798 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010400 	.word	0x40010400

080057b8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e181      	b.n	8005ad8 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e2:	d102      	bne.n	80057ea <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e176      	b.n	8005ad8 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7f5b      	ldrb	r3, [r3, #29]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fa fee5 	bl	80005d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005810:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b90      	ldr	r3, [pc, #576]	; (8005a78 <HAL_COMP_Init+0x2c0>)
 8005838:	4013      	ands	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	6979      	ldr	r1, [r7, #20]
 8005840:	430b      	orrs	r3, r1
 8005842:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <HAL_COMP_Init+0xc8>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d113      	bne.n	8005880 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005858:	4b88      	ldr	r3, [pc, #544]	; (8005a7c <HAL_COMP_Init+0x2c4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	099b      	lsrs	r3, r3, #6
 800585e:	4a88      	ldr	r2, [pc, #544]	; (8005a80 <HAL_COMP_Init+0x2c8>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	099b      	lsrs	r3, r3, #6
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005872:	e002      	b.n	800587a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3b01      	subs	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f9      	bne.n	8005874 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7f      	ldr	r2, [pc, #508]	; (8005a84 <HAL_COMP_Init+0x2cc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d028      	beq.n	80058dc <HAL_COMP_Init+0x124>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7e      	ldr	r2, [pc, #504]	; (8005a88 <HAL_COMP_Init+0x2d0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d020      	beq.n	80058d6 <HAL_COMP_Init+0x11e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a7c      	ldr	r2, [pc, #496]	; (8005a8c <HAL_COMP_Init+0x2d4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <HAL_COMP_Init+0x118>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a7b      	ldr	r2, [pc, #492]	; (8005a90 <HAL_COMP_Init+0x2d8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d010      	beq.n	80058ca <HAL_COMP_Init+0x112>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a79      	ldr	r2, [pc, #484]	; (8005a94 <HAL_COMP_Init+0x2dc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d008      	beq.n	80058c4 <HAL_COMP_Init+0x10c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a78      	ldr	r2, [pc, #480]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <HAL_COMP_Init+0x108>
 80058bc:	2301      	movs	r3, #1
 80058be:	e00f      	b.n	80058e0 <HAL_COMP_Init+0x128>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e00d      	b.n	80058e0 <HAL_COMP_Init+0x128>
 80058c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058c8:	e00a      	b.n	80058e0 <HAL_COMP_Init+0x128>
 80058ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ce:	e007      	b.n	80058e0 <HAL_COMP_Init+0x128>
 80058d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80058d4:	e004      	b.n	80058e0 <HAL_COMP_Init+0x128>
 80058d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058da:	e001      	b.n	80058e0 <HAL_COMP_Init+0x128>
 80058dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058e0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80b6 	beq.w	8005a5c <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d011      	beq.n	8005920 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a65      	ldr	r2, [pc, #404]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_COMP_Init+0x158>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a64      	ldr	r2, [pc, #400]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005910:	6938      	ldr	r0, [r7, #16]
 8005912:	f7ff feab 	bl	800566c <LL_EXTI_EnableRisingTrig_32_63>
 8005916:	e014      	b.n	8005942 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005918:	6938      	ldr	r0, [r7, #16]
 800591a:	f7ff fe95 	bl	8005648 <LL_EXTI_EnableRisingTrig_0_31>
 800591e:	e010      	b.n	8005942 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5c      	ldr	r2, [pc, #368]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_COMP_Init+0x17c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a5b      	ldr	r2, [pc, #364]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d103      	bne.n	800593c <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005934:	6938      	ldr	r0, [r7, #16]
 8005936:	f7ff febf 	bl	80056b8 <LL_EXTI_DisableRisingTrig_32_63>
 800593a:	e002      	b.n	8005942 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800593c:	6938      	ldr	r0, [r7, #16]
 800593e:	f7ff fea7 	bl	8005690 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d011      	beq.n	8005972 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a51      	ldr	r2, [pc, #324]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_COMP_Init+0x1aa>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a4f      	ldr	r2, [pc, #316]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d103      	bne.n	800596a <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8005962:	6938      	ldr	r0, [r7, #16]
 8005964:	f7ff fece 	bl	8005704 <LL_EXTI_EnableFallingTrig_32_63>
 8005968:	e014      	b.n	8005994 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f7ff feb8 	bl	80056e0 <LL_EXTI_EnableFallingTrig_0_31>
 8005970:	e010      	b.n	8005994 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a48      	ldr	r2, [pc, #288]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_COMP_Init+0x1ce>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a46      	ldr	r2, [pc, #280]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d103      	bne.n	800598e <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f7ff fee2 	bl	8005750 <LL_EXTI_DisableFallingTrig_32_63>
 800598c:	e002      	b.n	8005994 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	f7ff feca 	bl	8005728 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3f      	ldr	r2, [pc, #252]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_COMP_Init+0x1f0>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3e      	ldr	r2, [pc, #248]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80059a8:	6938      	ldr	r0, [r7, #16]
 80059aa:	f7ff fef5 	bl	8005798 <LL_EXTI_ClearFlag_32_63>
 80059ae:	e002      	b.n	80059b6 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80059b0:	6938      	ldr	r0, [r7, #16]
 80059b2:	f7ff fee1 	bl	8005778 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d011      	beq.n	80059e6 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a34      	ldr	r2, [pc, #208]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_COMP_Init+0x21e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a32      	ldr	r2, [pc, #200]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d103      	bne.n	80059de <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80059d6:	6938      	ldr	r0, [r7, #16]
 80059d8:	f7ff fdfc 	bl	80055d4 <LL_EXTI_EnableEvent_32_63>
 80059dc:	e014      	b.n	8005a08 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80059de:	6938      	ldr	r0, [r7, #16]
 80059e0:	f7ff fde6 	bl	80055b0 <LL_EXTI_EnableEvent_0_31>
 80059e4:	e010      	b.n	8005a08 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_COMP_Init+0x242>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d103      	bne.n	8005a02 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80059fa:	6938      	ldr	r0, [r7, #16]
 80059fc:	f7ff fe10 	bl	8005620 <LL_EXTI_DisableEvent_32_63>
 8005a00:	e002      	b.n	8005a08 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005a02:	6938      	ldr	r0, [r7, #16]
 8005a04:	f7ff fdf8 	bl	80055f8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d011      	beq.n	8005a38 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_COMP_Init+0x270>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d103      	bne.n	8005a30 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8005a28:	6938      	ldr	r0, [r7, #16]
 8005a2a:	f7ff fd87 	bl	800553c <LL_EXTI_EnableIT_32_63>
 8005a2e:	e04b      	b.n	8005ac8 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8005a30:	6938      	ldr	r0, [r7, #16]
 8005a32:	f7ff fd71 	bl	8005518 <LL_EXTI_EnableIT_0_31>
 8005a36:	e047      	b.n	8005ac8 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_COMP_Init+0x294>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d103      	bne.n	8005a54 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005a4c:	6938      	ldr	r0, [r7, #16]
 8005a4e:	f7ff fd9b 	bl	8005588 <LL_EXTI_DisableIT_32_63>
 8005a52:	e039      	b.n	8005ac8 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005a54:	6938      	ldr	r0, [r7, #16]
 8005a56:	f7ff fd83 	bl	8005560 <LL_EXTI_DisableIT_0_31>
 8005a5a:	e035      	b.n	8005ac8 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <HAL_COMP_Init+0x2e0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_COMP_Init+0x2b8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <HAL_COMP_Init+0x2e4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d117      	bne.n	8005aa0 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8005a70:	6938      	ldr	r0, [r7, #16]
 8005a72:	f7ff fdd5 	bl	8005620 <LL_EXTI_DisableEvent_32_63>
 8005a76:	e016      	b.n	8005aa6 <HAL_COMP_Init+0x2ee>
 8005a78:	ff007e0f 	.word	0xff007e0f
 8005a7c:	20000024 	.word	0x20000024
 8005a80:	053e2d63 	.word	0x053e2d63
 8005a84:	40010200 	.word	0x40010200
 8005a88:	40010204 	.word	0x40010204
 8005a8c:	40010208 	.word	0x40010208
 8005a90:	4001020c 	.word	0x4001020c
 8005a94:	40010210 	.word	0x40010210
 8005a98:	40010214 	.word	0x40010214
 8005a9c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005aa0:	6938      	ldr	r0, [r7, #16]
 8005aa2:	f7ff fda9 	bl	80055f8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ae4 <HAL_COMP_Init+0x32c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_COMP_Init+0x302>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0c      	ldr	r2, [pc, #48]	; (8005ae8 <HAL_COMP_Init+0x330>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d103      	bne.n	8005ac2 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005aba:	6938      	ldr	r0, [r7, #16]
 8005abc:	f7ff fd64 	bl	8005588 <LL_EXTI_DisableIT_32_63>
 8005ac0:	e002      	b.n	8005ac8 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005ac2:	6938      	ldr	r0, [r7, #16]
 8005ac4:	f7ff fd4c 	bl	8005560 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	7f5b      	ldrb	r3, [r3, #29]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40010214 	.word	0x40010214
 8005ae8:	40010218 	.word	0x40010218

08005aec <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e02e      	b.n	8005b66 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	d102      	bne.n	8005b1e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e023      	b.n	8005b66 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	7f5b      	ldrb	r3, [r3, #29]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d11c      	bne.n	8005b62 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <HAL_COMP_Start+0x88>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a0d      	ldr	r2, [pc, #52]	; (8005b78 <HAL_COMP_Start+0x8c>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	0cda      	lsrs	r2, r3, #19
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005b52:	e002      	b.n	8005b5a <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f9      	bne.n	8005b54 <HAL_COMP_Start+0x68>
 8005b60:	e001      	b.n	8005b66 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	20000024 	.word	0x20000024
 8005b78:	431bde83 	.word	0x431bde83

08005b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bae:	4a04      	ldr	r2, [pc, #16]	; (8005bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	60d3      	str	r3, [r2, #12]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	e000ed00 	.word	0xe000ed00

08005bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <__NVIC_GetPriorityGrouping+0x18>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	f003 0307 	and.w	r3, r3, #7
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db0b      	blt.n	8005c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	f003 021f 	and.w	r2, r3, #31
 8005bf8:	4907      	ldr	r1, [pc, #28]	; (8005c18 <__NVIC_EnableIRQ+0x38>)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	2001      	movs	r0, #1
 8005c02:	fa00 f202 	lsl.w	r2, r0, r2
 8005c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e100 	.word	0xe000e100

08005c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	6039      	str	r1, [r7, #0]
 8005c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	db0a      	blt.n	8005c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	490c      	ldr	r1, [pc, #48]	; (8005c68 <__NVIC_SetPriority+0x4c>)
 8005c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3a:	0112      	lsls	r2, r2, #4
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	440b      	add	r3, r1
 8005c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c44:	e00a      	b.n	8005c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4908      	ldr	r1, [pc, #32]	; (8005c6c <__NVIC_SetPriority+0x50>)
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	3b04      	subs	r3, #4
 8005c54:	0112      	lsls	r2, r2, #4
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	440b      	add	r3, r1
 8005c5a:	761a      	strb	r2, [r3, #24]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000e100 	.word	0xe000e100
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f1c3 0307 	rsb	r3, r3, #7
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	bf28      	it	cs
 8005c8e:	2304      	movcs	r3, #4
 8005c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d902      	bls.n	8005ca0 <NVIC_EncodePriority+0x30>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3b03      	subs	r3, #3
 8005c9e:	e000      	b.n	8005ca2 <NVIC_EncodePriority+0x32>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	43d9      	mvns	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc8:	4313      	orrs	r3, r2
         );
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3724      	adds	r7, #36	; 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ce8:	d301      	bcc.n	8005cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cea:	2301      	movs	r3, #1
 8005cec:	e00f      	b.n	8005d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <SysTick_Config+0x40>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cf6:	210f      	movs	r1, #15
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfc:	f7ff ff8e 	bl	8005c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <SysTick_Config+0x40>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d06:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <SysTick_Config+0x40>)
 8005d08:	2207      	movs	r2, #7
 8005d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	e000e010 	.word	0xe000e010

08005d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ff29 	bl	8005b7c <__NVIC_SetPriorityGrouping>
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	4603      	mov	r3, r0
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d40:	f7ff ff40 	bl	8005bc4 <__NVIC_GetPriorityGrouping>
 8005d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	6978      	ldr	r0, [r7, #20]
 8005d4c:	f7ff ff90 	bl	8005c70 <NVIC_EncodePriority>
 8005d50:	4602      	mov	r2, r0
 8005d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d56:	4611      	mov	r1, r2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff ff5f 	bl	8005c1c <__NVIC_SetPriority>
}
 8005d5e:	bf00      	nop
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff ff33 	bl	8005be0 <__NVIC_EnableIRQ>
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff ffa4 	bl	8005cd8 <SysTick_Config>
 8005d90:	4603      	mov	r3, r0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e08d      	b.n	8005eca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <HAL_DMA_Init+0x138>)
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d80f      	bhi.n	8005dda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b45      	ldr	r3, [pc, #276]	; (8005ed8 <HAL_DMA_Init+0x13c>)
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4a45      	ldr	r2, [pc, #276]	; (8005edc <HAL_DMA_Init+0x140>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	009a      	lsls	r2, r3, #2
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a42      	ldr	r2, [pc, #264]	; (8005ee0 <HAL_DMA_Init+0x144>)
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8005dd8:	e00e      	b.n	8005df8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	4b40      	ldr	r3, [pc, #256]	; (8005ee4 <HAL_DMA_Init+0x148>)
 8005de2:	4413      	add	r3, r2
 8005de4:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <HAL_DMA_Init+0x140>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	009a      	lsls	r2, r3, #2
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <HAL_DMA_Init+0x14c>)
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa58 	bl	8006300 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e58:	d102      	bne.n	8005e60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_DMA_Init+0x104>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d80c      	bhi.n	8005ea0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa78 	bl	800637c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	e008      	b.n	8005eb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40020407 	.word	0x40020407
 8005ed8:	bffdfff8 	.word	0xbffdfff8
 8005edc:	cccccccd 	.word	0xcccccccd
 8005ee0:	40020000 	.word	0x40020000
 8005ee4:	bffdfbf8 	.word	0xbffdfbf8
 8005ee8:	40020400 	.word	0x40020400

08005eec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Start_IT+0x20>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e066      	b.n	8005fda <HAL_DMA_Start_IT+0xee>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d155      	bne.n	8005fcc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f99d 	bl	8006284 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 020e 	orr.w	r2, r2, #14
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e00f      	b.n	8005f84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0204 	bic.w	r2, r2, #4
 8005f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 020a 	orr.w	r2, r2, #10
 8005f82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0201 	orr.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e005      	b.n	8005fd8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d005      	beq.n	8006006 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	e037      	b.n	8006076 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 020e 	bic.w	r2, r2, #14
 8006014:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006024:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f003 021f 	and.w	r2, r3, #31
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2101      	movs	r1, #1
 8006044:	fa01 f202 	lsl.w	r2, r1, r2
 8006048:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006052:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800606a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006074:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2204      	movs	r2, #4
 80060b6:	409a      	lsls	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d026      	beq.n	800610e <HAL_DMA_IRQHandler+0x7a>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d021      	beq.n	800610e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	f003 021f 	and.w	r2, r3, #31
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	2104      	movs	r1, #4
 80060f6:	fa01 f202 	lsl.w	r2, r1, r2
 80060fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d071      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800610c:	e06c      	b.n	80061e8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2202      	movs	r2, #2
 8006118:	409a      	lsls	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4013      	ands	r3, r2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d02e      	beq.n	8006180 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d029      	beq.n	8006180 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 020a 	bic.w	r2, r2, #10
 8006148:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	f003 021f 	and.w	r2, r3, #31
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2102      	movs	r1, #2
 8006160:	fa01 f202 	lsl.w	r2, r1, r2
 8006164:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d038      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800617e:	e033      	b.n	80061e8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2208      	movs	r2, #8
 800618a:	409a      	lsls	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02a      	beq.n	80061ea <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d025      	beq.n	80061ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 020e 	bic.w	r2, r2, #14
 80061ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	f003 021f 	and.w	r2, r3, #31
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	2101      	movs	r1, #1
 80061bc:	fa01 f202 	lsl.w	r2, r1, r2
 80061c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
}
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	460b      	mov	r3, r1
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_DMA_RegisterCallback+0x20>
 8006210:	2302      	movs	r3, #2
 8006212:	e031      	b.n	8006278 <HAL_DMA_RegisterCallback+0x84>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d120      	bne.n	800626a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006228:	7afb      	ldrb	r3, [r7, #11]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d81a      	bhi.n	8006264 <HAL_DMA_RegisterCallback+0x70>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <HAL_DMA_RegisterCallback+0x40>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006245 	.word	0x08006245
 8006238:	0800624d 	.word	0x0800624d
 800623c:	08006255 	.word	0x08006255
 8006240:	0800625d 	.word	0x0800625d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800624a:	e010      	b.n	800626e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8006252:	e00c      	b.n	800626e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800625a:	e008      	b.n	800626e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8006262:	e004      	b.n	800626e <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	75fb      	strb	r3, [r7, #23]
        break;
 8006268:	e001      	b.n	800626e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800629a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80062ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b2:	f003 021f 	and.w	r2, r3, #31
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2101      	movs	r1, #1
 80062bc:	fa01 f202 	lsl.w	r2, r1, r2
 80062c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d108      	bne.n	80062e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062e2:	e007      	b.n	80062f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	4b16      	ldr	r3, [pc, #88]	; (8006368 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006310:	429a      	cmp	r2, r3
 8006312:	d802      	bhi.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e001      	b.n	800631e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800631a:	4b15      	ldr	r3, [pc, #84]	; (8006370 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800631c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	3b08      	subs	r3, #8
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	009a      	lsls	r2, r3, #2
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800634a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2201      	movs	r2, #1
 8006354:	409a      	lsls	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	651a      	str	r2, [r3, #80]	; 0x50
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40020407 	.word	0x40020407
 800636c:	40020800 	.word	0x40020800
 8006370:	40020820 	.word	0x40020820
 8006374:	cccccccd 	.word	0xcccccccd
 8006378:	40020880 	.word	0x40020880

0800637c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800639e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2201      	movs	r2, #1
 80063aa:	409a      	lsls	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	1000823f 	.word	0x1000823f
 80063c0:	40020940 	.word	0x40020940

080063c4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01a      	beq.n	8006412 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	2b00      	cmp	r3, #0
 8006418:	d022      	beq.n	8006460 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01a      	beq.n	8006460 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006438:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006442:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
      }
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006476:	e15a      	b.n	800672e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	4013      	ands	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 814c 	beq.w	8006728 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	2b01      	cmp	r3, #1
 800649a:	d005      	beq.n	80064a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d130      	bne.n	800650a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	2203      	movs	r2, #3
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4013      	ands	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064de:	2201      	movs	r2, #1
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43db      	mvns	r3, r3
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4013      	ands	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	091b      	lsrs	r3, r3, #4
 80064f4:	f003 0201 	and.w	r2, r3, #1
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b03      	cmp	r3, #3
 8006514:	d017      	beq.n	8006546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	2203      	movs	r2, #3
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43db      	mvns	r3, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4013      	ands	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d123      	bne.n	800659a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	08da      	lsrs	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3208      	adds	r2, #8
 800655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	220f      	movs	r2, #15
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43db      	mvns	r3, r3
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4013      	ands	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	08da      	lsrs	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3208      	adds	r2, #8
 8006594:	6939      	ldr	r1, [r7, #16]
 8006596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	2203      	movs	r2, #3
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0203 	and.w	r2, r3, #3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80a6 	beq.w	8006728 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065dc:	4b5b      	ldr	r3, [pc, #364]	; (800674c <HAL_GPIO_Init+0x2e4>)
 80065de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e0:	4a5a      	ldr	r2, [pc, #360]	; (800674c <HAL_GPIO_Init+0x2e4>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	6613      	str	r3, [r2, #96]	; 0x60
 80065e8:	4b58      	ldr	r3, [pc, #352]	; (800674c <HAL_GPIO_Init+0x2e4>)
 80065ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065f4:	4a56      	ldr	r2, [pc, #344]	; (8006750 <HAL_GPIO_Init+0x2e8>)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	3302      	adds	r3, #2
 80065fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	220f      	movs	r2, #15
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4013      	ands	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800661e:	d01f      	beq.n	8006660 <HAL_GPIO_Init+0x1f8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a4c      	ldr	r2, [pc, #304]	; (8006754 <HAL_GPIO_Init+0x2ec>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d019      	beq.n	800665c <HAL_GPIO_Init+0x1f4>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a4b      	ldr	r2, [pc, #300]	; (8006758 <HAL_GPIO_Init+0x2f0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <HAL_GPIO_Init+0x1f0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a4a      	ldr	r2, [pc, #296]	; (800675c <HAL_GPIO_Init+0x2f4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00d      	beq.n	8006654 <HAL_GPIO_Init+0x1ec>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a49      	ldr	r2, [pc, #292]	; (8006760 <HAL_GPIO_Init+0x2f8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <HAL_GPIO_Init+0x1e8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a48      	ldr	r2, [pc, #288]	; (8006764 <HAL_GPIO_Init+0x2fc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d101      	bne.n	800664c <HAL_GPIO_Init+0x1e4>
 8006648:	2305      	movs	r3, #5
 800664a:	e00a      	b.n	8006662 <HAL_GPIO_Init+0x1fa>
 800664c:	2306      	movs	r3, #6
 800664e:	e008      	b.n	8006662 <HAL_GPIO_Init+0x1fa>
 8006650:	2304      	movs	r3, #4
 8006652:	e006      	b.n	8006662 <HAL_GPIO_Init+0x1fa>
 8006654:	2303      	movs	r3, #3
 8006656:	e004      	b.n	8006662 <HAL_GPIO_Init+0x1fa>
 8006658:	2302      	movs	r3, #2
 800665a:	e002      	b.n	8006662 <HAL_GPIO_Init+0x1fa>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <HAL_GPIO_Init+0x1fa>
 8006660:	2300      	movs	r3, #0
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	f002 0203 	and.w	r2, r2, #3
 8006668:	0092      	lsls	r2, r2, #2
 800666a:	4093      	lsls	r3, r2
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006672:	4937      	ldr	r1, [pc, #220]	; (8006750 <HAL_GPIO_Init+0x2e8>)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	3302      	adds	r3, #2
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006680:	4b39      	ldr	r3, [pc, #228]	; (8006768 <HAL_GPIO_Init+0x300>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	43db      	mvns	r3, r3
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4013      	ands	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066a4:	4a30      	ldr	r2, [pc, #192]	; (8006768 <HAL_GPIO_Init+0x300>)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066aa:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <HAL_GPIO_Init+0x300>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	43db      	mvns	r3, r3
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4013      	ands	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066ce:	4a26      	ldr	r2, [pc, #152]	; (8006768 <HAL_GPIO_Init+0x300>)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80066d4:	4b24      	ldr	r3, [pc, #144]	; (8006768 <HAL_GPIO_Init+0x300>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	43db      	mvns	r3, r3
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4013      	ands	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066f8:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <HAL_GPIO_Init+0x300>)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80066fe:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <HAL_GPIO_Init+0x300>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	43db      	mvns	r3, r3
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4013      	ands	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006722:	4a11      	ldr	r2, [pc, #68]	; (8006768 <HAL_GPIO_Init+0x300>)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3301      	adds	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f ae9d 	bne.w	8006478 <HAL_GPIO_Init+0x10>
  }
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	40021000 	.word	0x40021000
 8006750:	40010000 	.word	0x40010000
 8006754:	48000400 	.word	0x48000400
 8006758:	48000800 	.word	0x48000800
 800675c:	48000c00 	.word	0x48000c00
 8006760:	48001000 	.word	0x48001000
 8006764:	48001400 	.word	0x48001400
 8006768:	40010400 	.word	0x40010400

0800676c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	807b      	strh	r3, [r7, #2]
 8006778:	4613      	mov	r3, r2
 800677a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800677c:	787b      	ldrb	r3, [r7, #1]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006782:	887a      	ldrh	r2, [r7, #2]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006788:	e002      	b.n	8006790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800678a:	887a      	ldrh	r2, [r7, #2]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d141      	bne.n	800682e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067aa:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b6:	d131      	bne.n	800681c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067b8:	4b47      	ldr	r3, [pc, #284]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067be:	4a46      	ldr	r2, [pc, #280]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067c8:	4b43      	ldr	r3, [pc, #268]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067d0:	4a41      	ldr	r2, [pc, #260]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067d8:	4b40      	ldr	r3, [pc, #256]	; (80068dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2232      	movs	r2, #50	; 0x32
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	4a3f      	ldr	r2, [pc, #252]	; (80068e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067e4:	fba2 2303 	umull	r2, r3, r2, r3
 80067e8:	0c9b      	lsrs	r3, r3, #18
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ee:	e002      	b.n	80067f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067f6:	4b38      	ldr	r3, [pc, #224]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006802:	d102      	bne.n	800680a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f2      	bne.n	80067f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800680a:	4b33      	ldr	r3, [pc, #204]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006816:	d158      	bne.n	80068ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e057      	b.n	80068cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800681c:	4b2e      	ldr	r3, [pc, #184]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006822:	4a2d      	ldr	r2, [pc, #180]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800682c:	e04d      	b.n	80068ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d141      	bne.n	80068ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006836:	4b28      	ldr	r3, [pc, #160]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800683e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006842:	d131      	bne.n	80068a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684a:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006854:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800685c:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800685e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006862:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006864:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2232      	movs	r2, #50	; 0x32
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006870:	fba2 2303 	umull	r2, r3, r2, r3
 8006874:	0c9b      	lsrs	r3, r3, #18
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800687a:	e002      	b.n	8006882 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3b01      	subs	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688e:	d102      	bne.n	8006896 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f2      	bne.n	800687c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800689e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a2:	d112      	bne.n	80068ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e011      	b.n	80068cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ae:	4a0a      	ldr	r2, [pc, #40]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068b8:	e007      	b.n	80068ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068c2:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40007000 	.word	0x40007000
 80068dc:	20000024 	.word	0x20000024
 80068e0:	431bde83 	.word	0x431bde83

080068e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e306      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d075      	beq.n	80069ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006902:	4b97      	ldr	r3, [pc, #604]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800690c:	4b94      	ldr	r3, [pc, #592]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d102      	bne.n	8006922 <HAL_RCC_OscConfig+0x3e>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b03      	cmp	r3, #3
 8006920:	d002      	beq.n	8006928 <HAL_RCC_OscConfig+0x44>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10b      	bne.n	8006940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006928:	4b8d      	ldr	r3, [pc, #564]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d05b      	beq.n	80069ec <HAL_RCC_OscConfig+0x108>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d157      	bne.n	80069ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e2e1      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006948:	d106      	bne.n	8006958 <HAL_RCC_OscConfig+0x74>
 800694a:	4b85      	ldr	r3, [pc, #532]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a84      	ldr	r2, [pc, #528]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e01d      	b.n	8006994 <HAL_RCC_OscConfig+0xb0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006960:	d10c      	bne.n	800697c <HAL_RCC_OscConfig+0x98>
 8006962:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7e      	ldr	r2, [pc, #504]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b7c      	ldr	r3, [pc, #496]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7b      	ldr	r2, [pc, #492]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e00b      	b.n	8006994 <HAL_RCC_OscConfig+0xb0>
 800697c:	4b78      	ldr	r3, [pc, #480]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a77      	ldr	r2, [pc, #476]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a74      	ldr	r2, [pc, #464]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800698e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fc feb2 	bl	8003704 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fc feae 	bl	8003704 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	; 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e2a6      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069b6:	4b6a      	ldr	r3, [pc, #424]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0xc0>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fc fe9e 	bl	8003704 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069cc:	f7fc fe9a 	bl	8003704 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e292      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069de:	4b60      	ldr	r3, [pc, #384]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0xe8>
 80069ea:	e000      	b.n	80069ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d075      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fa:	4b59      	ldr	r3, [pc, #356]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a04:	4b56      	ldr	r3, [pc, #344]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	d102      	bne.n	8006a1a <HAL_RCC_OscConfig+0x136>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d002      	beq.n	8006a20 <HAL_RCC_OscConfig+0x13c>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d11f      	bne.n	8006a60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a20:	4b4f      	ldr	r3, [pc, #316]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_RCC_OscConfig+0x154>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e265      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a38:	4b49      	ldr	r3, [pc, #292]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	4946      	ldr	r1, [pc, #280]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a4c:	4b45      	ldr	r3, [pc, #276]	; (8006b64 <HAL_RCC_OscConfig+0x280>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fc fe0b 	bl	800366c <HAL_InitTick>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d043      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e251      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d023      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a68:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3c      	ldr	r2, [pc, #240]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fc fe46 	bl	8003704 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fc fe42 	bl	8003704 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e23a      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8e:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9a:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	492d      	ldr	r1, [pc, #180]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	604b      	str	r3, [r1, #4]
 8006aae:	e01a      	b.n	8006ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2a      	ldr	r2, [pc, #168]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abc:	f7fc fe22 	bl	8003704 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac4:	f7fc fe1e 	bl	8003704 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e216      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ad6:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f0      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x1e0>
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d041      	beq.n	8006b76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01c      	beq.n	8006b34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afa:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b00:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0a:	f7fc fdfb 	bl	8003704 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b12:	f7fc fdf7 	bl	8003704 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e1ef      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ef      	beq.n	8006b12 <HAL_RCC_OscConfig+0x22e>
 8006b32:	e020      	b.n	8006b76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fc fdde 	bl	8003704 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b4a:	e00d      	b.n	8006b68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4c:	f7fc fdda 	bl	8003704 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d906      	bls.n	8006b68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e1d2      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
 8006b5e:	bf00      	nop
 8006b60:	40021000 	.word	0x40021000
 8006b64:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b68:	4b8c      	ldr	r3, [pc, #560]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1ea      	bne.n	8006b4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80a6 	beq.w	8006cd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b84:	2300      	movs	r3, #0
 8006b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b88:	4b84      	ldr	r3, [pc, #528]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_OscConfig+0x2b4>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x2b6>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00d      	beq.n	8006bba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	4b7f      	ldr	r3, [pc, #508]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	4a7e      	ldr	r2, [pc, #504]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8006baa:	4b7c      	ldr	r3, [pc, #496]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bba:	4b79      	ldr	r3, [pc, #484]	; (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d118      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc6:	4b76      	ldr	r3, [pc, #472]	; (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a75      	ldr	r2, [pc, #468]	; (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd2:	f7fc fd97 	bl	8003704 <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bda:	f7fc fd93 	bl	8003704 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e18b      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bec:	4b6c      	ldr	r3, [pc, #432]	; (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d108      	bne.n	8006c12 <HAL_RCC_OscConfig+0x32e>
 8006c00:	4b66      	ldr	r3, [pc, #408]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	4a65      	ldr	r2, [pc, #404]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c10:	e024      	b.n	8006c5c <HAL_RCC_OscConfig+0x378>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d110      	bne.n	8006c3c <HAL_RCC_OscConfig+0x358>
 8006c1a:	4b60      	ldr	r3, [pc, #384]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c20:	4a5e      	ldr	r2, [pc, #376]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c22:	f043 0304 	orr.w	r3, r3, #4
 8006c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c2a:	4b5c      	ldr	r3, [pc, #368]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	4a5a      	ldr	r2, [pc, #360]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c3a:	e00f      	b.n	8006c5c <HAL_RCC_OscConfig+0x378>
 8006c3c:	4b57      	ldr	r3, [pc, #348]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c42:	4a56      	ldr	r2, [pc, #344]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c4c:	4b53      	ldr	r3, [pc, #332]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c52:	4a52      	ldr	r2, [pc, #328]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d016      	beq.n	8006c92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c64:	f7fc fd4e 	bl	8003704 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7fc fd4a 	bl	8003704 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e140      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c82:	4b46      	ldr	r3, [pc, #280]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ed      	beq.n	8006c6c <HAL_RCC_OscConfig+0x388>
 8006c90:	e015      	b.n	8006cbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c92:	f7fc fd37 	bl	8003704 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9a:	f7fc fd33 	bl	8003704 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e129      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cb0:	4b3a      	ldr	r3, [pc, #232]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ed      	bne.n	8006c9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc4:	4b35      	ldr	r3, [pc, #212]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc8:	4a34      	ldr	r2, [pc, #208]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d03c      	beq.n	8006d56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01c      	beq.n	8006d1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce4:	4b2d      	ldr	r3, [pc, #180]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cea:	4a2c      	ldr	r2, [pc, #176]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cec:	f043 0301 	orr.w	r3, r3, #1
 8006cf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fc fd06 	bl	8003704 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cfc:	f7fc fd02 	bl	8003704 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e0fa      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d0e:	4b23      	ldr	r3, [pc, #140]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0ef      	beq.n	8006cfc <HAL_RCC_OscConfig+0x418>
 8006d1c:	e01b      	b.n	8006d56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d1e:	4b1f      	ldr	r3, [pc, #124]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2e:	f7fc fce9 	bl	8003704 <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d36:	f7fc fce5 	bl	8003704 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e0dd      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1ef      	bne.n	8006d36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80d1 	beq.w	8006f02 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d60:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	f000 808b 	beq.w	8006e84 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d15e      	bne.n	8006e34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a08      	ldr	r2, [pc, #32]	; (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fc fcbf 	bl	8003704 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d88:	e00c      	b.n	8006da4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8a:	f7fc fcbb 	bl	8003704 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d905      	bls.n	8006da4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0b3      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da4:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1ec      	bne.n	8006d8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db0:	4b56      	ldr	r3, [pc, #344]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	4b56      	ldr	r3, [pc, #344]	; (8006f10 <HAL_RCC_OscConfig+0x62c>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6a11      	ldr	r1, [r2, #32]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	0112      	lsls	r2, r2, #4
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006dca:	0212      	lsls	r2, r2, #8
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006dd2:	0852      	lsrs	r2, r2, #1
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0552      	lsls	r2, r2, #21
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dde:	0852      	lsrs	r2, r2, #1
 8006de0:	3a01      	subs	r2, #1
 8006de2:	0652      	lsls	r2, r2, #25
 8006de4:	4311      	orrs	r1, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dea:	06d2      	lsls	r2, r2, #27
 8006dec:	430a      	orrs	r2, r1
 8006dee:	4947      	ldr	r1, [pc, #284]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006df4:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a44      	ldr	r2, [pc, #272]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e00:	4b42      	ldr	r3, [pc, #264]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4a41      	ldr	r2, [pc, #260]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fc fc7a 	bl	8003704 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fc fc76 	bl	8003704 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e06e      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e26:	4b39      	ldr	r3, [pc, #228]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x530>
 8006e32:	e066      	b.n	8006f02 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e34:	4b35      	ldr	r3, [pc, #212]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a34      	ldr	r2, [pc, #208]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e40:	4b32      	ldr	r3, [pc, #200]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a31      	ldr	r2, [pc, #196]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e4c:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	4a2e      	ldr	r2, [pc, #184]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fc fc52 	bl	8003704 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e64:	f7fc fc4e 	bl	8003704 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e046      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e76:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCC_OscConfig+0x580>
 8006e82:	e03e      	b.n	8006f02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e039      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e90:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <HAL_RCC_OscConfig+0x628>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0203 	and.w	r2, r3, #3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d12c      	bne.n	8006efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d123      	bne.n	8006efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d11b      	bne.n	8006efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d113      	bne.n	8006efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d109      	bne.n	8006efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d001      	beq.n	8006f02 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	019f800c 	.word	0x019f800c

08006f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e11e      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f2c:	4b91      	ldr	r3, [pc, #580]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d910      	bls.n	8006f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3a:	4b8e      	ldr	r3, [pc, #568]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 020f 	bic.w	r2, r3, #15
 8006f42:	498c      	ldr	r1, [pc, #560]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4a:	4b8a      	ldr	r3, [pc, #552]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e106      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d073      	beq.n	8007050 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d129      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f70:	4b81      	ldr	r3, [pc, #516]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0f4      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f80:	f000 f992 	bl	80072a8 <RCC_GetSysClockFreqFromPLLSource>
 8006f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4a7c      	ldr	r2, [pc, #496]	; (800717c <HAL_RCC_ClockConfig+0x268>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d93f      	bls.n	800700e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f8e:	4b7a      	ldr	r3, [pc, #488]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d033      	beq.n	800700e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d12f      	bne.n	800700e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fae:	4b72      	ldr	r3, [pc, #456]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb6:	4a70      	ldr	r2, [pc, #448]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fbe:	2380      	movs	r3, #128	; 0x80
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e024      	b.n	800700e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d107      	bne.n	8006fdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fcc:	4b6a      	ldr	r3, [pc, #424]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0c6      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fdc:	4b66      	ldr	r3, [pc, #408]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0be      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fec:	f000 f8ce 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8006ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4a61      	ldr	r2, [pc, #388]	; (800717c <HAL_RCC_ClockConfig+0x268>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d909      	bls.n	800700e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ffa:	4b5f      	ldr	r3, [pc, #380]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007002:	4a5d      	ldr	r2, [pc, #372]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8007004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007008:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800700e:	4b5a      	ldr	r3, [pc, #360]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 0203 	bic.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4957      	ldr	r1, [pc, #348]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800701c:	4313      	orrs	r3, r2
 800701e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007020:	f7fc fb70 	bl	8003704 <HAL_GetTick>
 8007024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007026:	e00a      	b.n	800703e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007028:	f7fc fb6c 	bl	8003704 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	f241 3288 	movw	r2, #5000	; 0x1388
 8007036:	4293      	cmp	r3, r2
 8007038:	d901      	bls.n	800703e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e095      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703e:	4b4e      	ldr	r3, [pc, #312]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 020c 	and.w	r2, r3, #12
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	429a      	cmp	r2, r3
 800704e:	d1eb      	bne.n	8007028 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d023      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007068:	4b43      	ldr	r3, [pc, #268]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4a42      	ldr	r2, [pc, #264]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800706e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007072:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007080:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007088:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800708a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800708e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007090:	4b39      	ldr	r3, [pc, #228]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4936      	ldr	r1, [pc, #216]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	608b      	str	r3, [r1, #8]
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d105      	bne.n	80070b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070aa:	4b33      	ldr	r3, [pc, #204]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	4a32      	ldr	r2, [pc, #200]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 80070b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070b6:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d21d      	bcs.n	8007100 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c4:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f023 020f 	bic.w	r2, r3, #15
 80070cc:	4929      	ldr	r1, [pc, #164]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070d4:	f7fc fb16 	bl	8003704 <HAL_GetTick>
 80070d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070da:	e00a      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070dc:	f7fc fb12 	bl	8003704 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e03b      	b.n	800716a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f2:	4b20      	ldr	r3, [pc, #128]	; (8007174 <HAL_RCC_ClockConfig+0x260>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d1ed      	bne.n	80070dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	4917      	ldr	r1, [pc, #92]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	490f      	ldr	r1, [pc, #60]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 800713a:	4313      	orrs	r3, r2
 800713c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800713e:	f000 f825 	bl	800718c <HAL_RCC_GetSysClockFreq>
 8007142:	4602      	mov	r2, r0
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <HAL_RCC_ClockConfig+0x264>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	091b      	lsrs	r3, r3, #4
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	490c      	ldr	r1, [pc, #48]	; (8007180 <HAL_RCC_ClockConfig+0x26c>)
 8007150:	5ccb      	ldrb	r3, [r1, r3]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <HAL_RCC_ClockConfig+0x270>)
 800715c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800715e:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <HAL_RCC_ClockConfig+0x274>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f7fc fa82 	bl	800366c <HAL_InitTick>
 8007168:	4603      	mov	r3, r0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40022000 	.word	0x40022000
 8007178:	40021000 	.word	0x40021000
 800717c:	04c4b400 	.word	0x04c4b400
 8007180:	0800a824 	.word	0x0800a824
 8007184:	20000024 	.word	0x20000024
 8007188:	20000028 	.word	0x20000028

0800718c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007192:	4b2c      	ldr	r3, [pc, #176]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 030c 	and.w	r3, r3, #12
 800719a:	2b04      	cmp	r3, #4
 800719c:	d102      	bne.n	80071a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800719e:	4b2a      	ldr	r3, [pc, #168]	; (8007248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	e047      	b.n	8007234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80071a4:	4b27      	ldr	r3, [pc, #156]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 030c 	and.w	r3, r3, #12
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d102      	bne.n	80071b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071b0:	4b26      	ldr	r3, [pc, #152]	; (800724c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	e03e      	b.n	8007234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80071b6:	4b23      	ldr	r3, [pc, #140]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 030c 	and.w	r3, r3, #12
 80071be:	2b0c      	cmp	r3, #12
 80071c0:	d136      	bne.n	8007230 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071c2:	4b20      	ldr	r3, [pc, #128]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071cc:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	3301      	adds	r3, #1
 80071d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d10c      	bne.n	80071fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071e0:	4a1a      	ldr	r2, [pc, #104]	; (800724c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e8:	4a16      	ldr	r2, [pc, #88]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ea:	68d2      	ldr	r2, [r2, #12]
 80071ec:	0a12      	lsrs	r2, r2, #8
 80071ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	617b      	str	r3, [r7, #20]
      break;
 80071f8:	e00c      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071fa:	4a13      	ldr	r2, [pc, #76]	; (8007248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	4a10      	ldr	r2, [pc, #64]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007204:	68d2      	ldr	r2, [r2, #12]
 8007206:	0a12      	lsrs	r2, r2, #8
 8007208:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800720c:	fb02 f303 	mul.w	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]
      break;
 8007212:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	0e5b      	lsrs	r3, r3, #25
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	3301      	adds	r3, #1
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	fbb2 f3f3 	udiv	r3, r2, r3
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	e001      	b.n	8007234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007234:	693b      	ldr	r3, [r7, #16]
}
 8007236:	4618      	mov	r0, r3
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40021000 	.word	0x40021000
 8007248:	00f42400 	.word	0x00f42400
 800724c:	007270e0 	.word	0x007270e0

08007250 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCC_EnableCSS+0x1c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a04      	ldr	r2, [pc, #16]	; (800726c <HAL_RCC_EnableCSS+0x1c>)
 800725a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800725e:	6013      	str	r3, [r2, #0]
}
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40021000 	.word	0x40021000

08007270 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007274:	4b07      	ldr	r3, [pc, #28]	; (8007294 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007280:	d105      	bne.n	800728e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007282:	f000 f809 	bl	8007298 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800728c:	621a      	str	r2, [r3, #32]
  }
}
 800728e:	bf00      	nop
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40021000 	.word	0x40021000

08007298 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ae:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d10c      	bne.n	80072e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072cc:	4a17      	ldr	r2, [pc, #92]	; (800732c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072d6:	68d2      	ldr	r2, [r2, #12]
 80072d8:	0a12      	lsrs	r2, r2, #8
 80072da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	617b      	str	r3, [r7, #20]
    break;
 80072e4:	e00c      	b.n	8007300 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	4a0e      	ldr	r2, [pc, #56]	; (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f0:	68d2      	ldr	r2, [r2, #12]
 80072f2:	0a12      	lsrs	r2, r2, #8
 80072f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]
    break;
 80072fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	0e5b      	lsrs	r3, r3, #25
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	3301      	adds	r3, #1
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800731a:	687b      	ldr	r3, [r7, #4]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40021000 	.word	0x40021000
 800732c:	007270e0 	.word	0x007270e0
 8007330:	00f42400 	.word	0x00f42400

08007334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800733c:	2300      	movs	r3, #0
 800733e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007340:	2300      	movs	r3, #0
 8007342:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8098 	beq.w	8007482 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007352:	2300      	movs	r3, #0
 8007354:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007356:	4b43      	ldr	r3, [pc, #268]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007362:	4b40      	ldr	r3, [pc, #256]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	4a3f      	ldr	r2, [pc, #252]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736c:	6593      	str	r3, [r2, #88]	; 0x58
 800736e:	4b3d      	ldr	r3, [pc, #244]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800737a:	2301      	movs	r3, #1
 800737c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800737e:	4b3a      	ldr	r3, [pc, #232]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a39      	ldr	r2, [pc, #228]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007388:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800738a:	f7fc f9bb 	bl	8003704 <HAL_GetTick>
 800738e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007390:	e009      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007392:	f7fc f9b7 	bl	8003704 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d902      	bls.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	74fb      	strb	r3, [r7, #19]
        break;
 80073a4:	e005      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a6:	4b30      	ldr	r3, [pc, #192]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0ef      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073b2:	7cfb      	ldrb	r3, [r7, #19]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d159      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01e      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d019      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073d4:	4b23      	ldr	r3, [pc, #140]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073e0:	4b20      	ldr	r3, [pc, #128]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073f0:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	4a1b      	ldr	r2, [pc, #108]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007400:	4a18      	ldr	r2, [pc, #96]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d016      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007412:	f7fc f977 	bl	8003704 <HAL_GetTick>
 8007416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007418:	e00b      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800741a:	f7fc f973 	bl	8003704 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	f241 3288 	movw	r2, #5000	; 0x1388
 8007428:	4293      	cmp	r3, r2
 800742a:	d902      	bls.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	74fb      	strb	r3, [r7, #19]
            break;
 8007430:	e006      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007432:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0ec      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007440:	7cfb      	ldrb	r3, [r7, #19]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800745c:	e008      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	74bb      	strb	r3, [r7, #18]
 8007462:	e005      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007464:	40021000 	.word	0x40021000
 8007468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007470:	7c7b      	ldrb	r3, [r7, #17]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d105      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007476:	4ba7      	ldr	r3, [pc, #668]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747a:	4aa6      	ldr	r2, [pc, #664]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007480:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800748e:	4ba1      	ldr	r3, [pc, #644]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007494:	f023 0203 	bic.w	r2, r3, #3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	499d      	ldr	r1, [pc, #628]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074b0:	4b98      	ldr	r3, [pc, #608]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b6:	f023 020c 	bic.w	r2, r3, #12
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4995      	ldr	r1, [pc, #596]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074d2:	4b90      	ldr	r3, [pc, #576]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	498c      	ldr	r1, [pc, #560]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074f4:	4b87      	ldr	r3, [pc, #540]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	4984      	ldr	r1, [pc, #528]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007516:	4b7f      	ldr	r3, [pc, #508]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	497b      	ldr	r1, [pc, #492]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007538:	4b76      	ldr	r3, [pc, #472]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	4973      	ldr	r1, [pc, #460]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800755a:	4b6e      	ldr	r3, [pc, #440]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	496a      	ldr	r1, [pc, #424]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800757c:	4b65      	ldr	r3, [pc, #404]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	4962      	ldr	r1, [pc, #392]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800759e:	4b5d      	ldr	r3, [pc, #372]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	4959      	ldr	r1, [pc, #356]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075c0:	4b54      	ldr	r3, [pc, #336]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075c6:	f023 0203 	bic.w	r2, r3, #3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	4951      	ldr	r1, [pc, #324]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075e2:	4b4c      	ldr	r3, [pc, #304]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4948      	ldr	r1, [pc, #288]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	2b00      	cmp	r3, #0
 8007602:	d015      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	4940      	ldr	r1, [pc, #256]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007622:	d105      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007624:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4a3a      	ldr	r2, [pc, #232]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800762e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007638:	2b00      	cmp	r3, #0
 800763a:	d015      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800763c:	4b35      	ldr	r3, [pc, #212]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007642:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764a:	4932      	ldr	r1, [pc, #200]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800765a:	d105      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800765c:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007666:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007674:	4b27      	ldr	r3, [pc, #156]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	4924      	ldr	r1, [pc, #144]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007692:	d105      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007694:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a1e      	ldr	r2, [pc, #120]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800769e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d015      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	4916      	ldr	r1, [pc, #88]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ca:	d105      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4a10      	ldr	r2, [pc, #64]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d019      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	4908      	ldr	r1, [pc, #32]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007702:	d109      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007704:	4b03      	ldr	r3, [pc, #12]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a02      	ldr	r2, [pc, #8]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800770e:	60d3      	str	r3, [r2, #12]
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007712:	bf00      	nop
 8007714:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d015      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007724:	4b29      	ldr	r3, [pc, #164]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007732:	4926      	ldr	r1, [pc, #152]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007734:	4313      	orrs	r3, r2
 8007736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007742:	d105      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007744:	4b21      	ldr	r3, [pc, #132]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800774a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800774e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d015      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800775c:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776a:	4918      	ldr	r1, [pc, #96]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777a:	d105      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800777c:	4b13      	ldr	r3, [pc, #76]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4a12      	ldr	r2, [pc, #72]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007786:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007794:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	490a      	ldr	r1, [pc, #40]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a04      	ldr	r2, [pc, #16]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40021000 	.word	0x40021000

080077d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e0c1      	b.n	8007966 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d108      	bne.n	80077fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f2:	d009      	beq.n	8007808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	61da      	str	r2, [r3, #28]
 80077fa:	e005      	b.n	8007808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d12a      	bne.n	8007870 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a52      	ldr	r2, [pc, #328]	; (8007970 <HAL_SPI_Init+0x1a0>)
 8007826:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a52      	ldr	r2, [pc, #328]	; (8007974 <HAL_SPI_Init+0x1a4>)
 800782c:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a51      	ldr	r2, [pc, #324]	; (8007978 <HAL_SPI_Init+0x1a8>)
 8007832:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a51      	ldr	r2, [pc, #324]	; (800797c <HAL_SPI_Init+0x1ac>)
 8007838:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a50      	ldr	r2, [pc, #320]	; (8007980 <HAL_SPI_Init+0x1b0>)
 800783e:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a50      	ldr	r2, [pc, #320]	; (8007984 <HAL_SPI_Init+0x1b4>)
 8007844:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a4f      	ldr	r2, [pc, #316]	; (8007988 <HAL_SPI_Init+0x1b8>)
 800784a:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a4f      	ldr	r2, [pc, #316]	; (800798c <HAL_SPI_Init+0x1bc>)
 8007850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a4b      	ldr	r2, [pc, #300]	; (8007990 <HAL_SPI_Init+0x1c0>)
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007886:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007890:	d902      	bls.n	8007898 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	e002      	b.n	800789e <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800789c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80078a6:	d007      	beq.n	80078b8 <HAL_SPI_Init+0xe8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078b0:	d002      	beq.n	80078b8 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fa:	ea42 0103 	orr.w	r1, r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	f003 0204 	and.w	r2, r3, #4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007934:	ea42 0103 	orr.w	r1, r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	08007ae1 	.word	0x08007ae1
 8007974:	08007af5 	.word	0x08007af5
 8007978:	08007b09 	.word	0x08007b09
 800797c:	08007b1d 	.word	0x08007b1d
 8007980:	08007b31 	.word	0x08007b31
 8007984:	08007b45 	.word	0x08007b45
 8007988:	08007b59 	.word	0x08007b59
 800798c:	08007b6d 	.word	0x08007b6d
 8007990:	080024a5 	.word	0x080024a5

08007994 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	460b      	mov	r3, r1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d107      	bne.n	80079bc <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e08b      	b.n	8007ad4 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_SPI_RegisterCallback+0x36>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e084      	b.n	8007ad4 <HAL_SPI_RegisterCallback+0x140>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d14e      	bne.n	8007a7c <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	2b09      	cmp	r3, #9
 80079e2:	d842      	bhi.n	8007a6a <HAL_SPI_RegisterCallback+0xd6>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_SPI_RegisterCallback+0x58>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	08007a25 	.word	0x08007a25
 80079f8:	08007a2d 	.word	0x08007a2d
 80079fc:	08007a35 	.word	0x08007a35
 8007a00:	08007a3d 	.word	0x08007a3d
 8007a04:	08007a45 	.word	0x08007a45
 8007a08:	08007a4d 	.word	0x08007a4d
 8007a0c:	08007a57 	.word	0x08007a57
 8007a10:	08007a61 	.word	0x08007a61
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007a1a:	e056      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007a22:	e052      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007a2a:	e04e      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007a32:	e04a      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007a3a:	e046      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007a42:	e042      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007a4a:	e03e      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007a54:	e039      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007a5e:	e034      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007a68:	e02f      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	75fb      	strb	r3, [r7, #23]
        break;
 8007a7a:	e026      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d118      	bne.n	8007aba <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d002      	beq.n	8007a94 <HAL_SPI_RegisterCallback+0x100>
 8007a8e:	2b09      	cmp	r3, #9
 8007a90:	d005      	beq.n	8007a9e <HAL_SPI_RegisterCallback+0x10a>
 8007a92:	e009      	b.n	8007aa8 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007a9c:	e015      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007aa6:	e010      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
        break;
 8007ab8:	e007      	b.n	8007aca <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e054      	b.n	8007c3c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d111      	bne.n	8007bc2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f002 f9e2 	bl	8009f70 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a23      	ldr	r2, [pc, #140]	; (8007c44 <HAL_TIM_Base_Init+0xc4>)
 8007bb8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f001 fb2d 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	08003135 	.word	0x08003135

08007c48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d001      	beq.n	8007c60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e04c      	b.n	8007cfa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a26      	ldr	r2, [pc, #152]	; (8007d08 <HAL_TIM_Base_Start+0xc0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d022      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7a:	d01d      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <HAL_TIM_Base_Start+0xc4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d018      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a21      	ldr	r2, [pc, #132]	; (8007d10 <HAL_TIM_Base_Start+0xc8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1f      	ldr	r2, [pc, #124]	; (8007d14 <HAL_TIM_Base_Start+0xcc>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <HAL_TIM_Base_Start+0xd0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	; (8007d1c <HAL_TIM_Base_Start+0xd4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <HAL_TIM_Base_Start+0xd8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d115      	bne.n	8007ce4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <HAL_TIM_Base_Start+0xdc>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b06      	cmp	r3, #6
 8007cc8:	d015      	beq.n	8007cf6 <HAL_TIM_Base_Start+0xae>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd0:	d011      	beq.n	8007cf6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0201 	orr.w	r2, r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce2:	e008      	b.n	8007cf6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0201 	orr.w	r2, r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e000      	b.n	8007cf8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40012c00 	.word	0x40012c00
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40013400 	.word	0x40013400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40015000 	.word	0x40015000
 8007d24:	00010007 	.word	0x00010007

08007d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e054      	b.n	8007dea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d022      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6a:	d01d      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d018      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00e      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <HAL_TIM_Base_Start_IT+0xe0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <HAL_TIM_Base_Start_IT+0xe4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_TIM_Base_Start_IT+0xe8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d115      	bne.n	8007dd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <HAL_TIM_Base_Start_IT+0xec>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b06      	cmp	r3, #6
 8007db8:	d015      	beq.n	8007de6 <HAL_TIM_Base_Start_IT+0xbe>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc0:	d011      	beq.n	8007de6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0201 	orr.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd2:	e008      	b.n	8007de6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	e000      	b.n	8007de8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40012c00 	.word	0x40012c00
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40013400 	.word	0x40013400
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40015000 	.word	0x40015000
 8007e14:	00010007 	.word	0x00010007

08007e18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e054      	b.n	8007ed4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d111      	bne.n	8007e5a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f002 f896 	bl	8009f70 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a23      	ldr	r2, [pc, #140]	; (8007edc <HAL_TIM_PWM_Init+0xc4>)
 8007e50:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f001 f9e1 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	08007ee1 	.word	0x08007ee1

08007ee0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e054      	b.n	8007fb0 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d111      	bne.n	8007f36 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f002 f828 	bl	8009f70 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <HAL_TIM_IC_Init+0xc4>)
 8007f2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f001 f973 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	08007fbd 	.word	0x08007fbd

08007fbc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e04c      	b.n	800807e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d111      	bne.n	8008014 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 ffb9 	bl	8009f70 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1f      	ldr	r2, [pc, #124]	; (8008088 <HAL_TIM_OnePulse_Init+0xb8>)
 800800a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	4619      	mov	r1, r3
 8008026:	4610      	mov	r0, r2
 8008028:	f001 f904 	bl	8009234 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0208 	bic.w	r2, r2, #8
 800803a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6819      	ldr	r1, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	08003449 	.word	0x08003449

0800808c <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800809c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080b4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d108      	bne.n	80080ce <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d105      	bne.n	80080ce <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080c2:	7b7b      	ldrb	r3, [r7, #13]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d102      	bne.n	80080ce <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c8:	7b3b      	ldrb	r3, [r7, #12]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d001      	beq.n	80080d2 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e049      	b.n	8008166 <HAL_TIM_OnePulse_Start+0xda>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2202      	movs	r2, #2
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2201      	movs	r2, #1
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 ff12 	bl	8009f24 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	2104      	movs	r1, #4
 8008108:	4618      	mov	r0, r3
 800810a:	f001 ff0b 	bl	8009f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a17      	ldr	r2, [pc, #92]	; (8008170 <HAL_TIM_OnePulse_Start+0xe4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d018      	beq.n	800814a <HAL_TIM_OnePulse_Start+0xbe>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a15      	ldr	r2, [pc, #84]	; (8008174 <HAL_TIM_OnePulse_Start+0xe8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <HAL_TIM_OnePulse_Start+0xbe>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a14      	ldr	r2, [pc, #80]	; (8008178 <HAL_TIM_OnePulse_Start+0xec>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00e      	beq.n	800814a <HAL_TIM_OnePulse_Start+0xbe>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a12      	ldr	r2, [pc, #72]	; (800817c <HAL_TIM_OnePulse_Start+0xf0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_TIM_OnePulse_Start+0xbe>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a11      	ldr	r2, [pc, #68]	; (8008180 <HAL_TIM_OnePulse_Start+0xf4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <HAL_TIM_OnePulse_Start+0xbe>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a0f      	ldr	r2, [pc, #60]	; (8008184 <HAL_TIM_OnePulse_Start+0xf8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d101      	bne.n	800814e <HAL_TIM_OnePulse_Start+0xc2>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <HAL_TIM_OnePulse_Start+0xc4>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <HAL_TIM_OnePulse_Start+0xd8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008162:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800
 8008184:	40015000 	.word	0x40015000

08008188 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008198:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d108      	bne.n	80081ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d105      	bne.n	80081ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081be:	7b7b      	ldrb	r3, [r7, #13]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d102      	bne.n	80081ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081c4:	7b3b      	ldrb	r3, [r7, #12]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d001      	beq.n	80081ce <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e059      	b.n	8008282 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2202      	movs	r2, #2
 80081ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0202 	orr.w	r2, r2, #2
 80081fc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0204 	orr.w	r2, r2, #4
 800820c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2201      	movs	r2, #1
 8008214:	2100      	movs	r1, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f001 fe84 	bl	8009f24 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2201      	movs	r2, #1
 8008222:	2104      	movs	r1, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fe7d 	bl	8009f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d018      	beq.n	8008266 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a15      	ldr	r2, [pc, #84]	; (8008290 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d013      	beq.n	8008266 <HAL_TIM_OnePulse_Start_IT+0xde>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a14      	ldr	r2, [pc, #80]	; (8008294 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00e      	beq.n	8008266 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a12      	ldr	r2, [pc, #72]	; (8008298 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d009      	beq.n	8008266 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a11      	ldr	r2, [pc, #68]	; (800829c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d004      	beq.n	8008266 <HAL_TIM_OnePulse_Start_IT+0xde>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0f      	ldr	r2, [pc, #60]	; (80082a0 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d101      	bne.n	800826a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800827e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800
 80082a0:	40015000 	.word	0x40015000

080082a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0a2      	b.n	80083fe <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d111      	bne.n	80082e8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fe4f 	bl	8009f70 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a4a      	ldr	r2, [pc, #296]	; (8008408 <HAL_TIM_Encoder_Init+0x164>)
 80082de:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80082fe:	f023 0307 	bic.w	r3, r3, #7
 8008302:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f000 ff90 	bl	8009234 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800833c:	f023 0303 	bic.w	r3, r3, #3
 8008340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	4313      	orrs	r3, r2
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800835a:	f023 030c 	bic.w	r3, r3, #12
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800836a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	4313      	orrs	r3, r2
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	011a      	lsls	r2, r3, #4
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	031b      	lsls	r3, r3, #12
 800838a:	4313      	orrs	r3, r2
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008398:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80083a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	4313      	orrs	r3, r2
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	08003379 	.word	0x08003379

0800840c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800841c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008424:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800842c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008434:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d110      	bne.n	800845e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d102      	bne.n	8008448 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008442:	7b7b      	ldrb	r3, [r7, #13]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d001      	beq.n	800844c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e069      	b.n	8008520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800845c:	e031      	b.n	80084c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b04      	cmp	r3, #4
 8008462:	d110      	bne.n	8008486 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d102      	bne.n	8008470 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800846a:	7b3b      	ldrb	r3, [r7, #12]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d001      	beq.n	8008474 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e055      	b.n	8008520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008484:	e01d      	b.n	80084c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d108      	bne.n	800849e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d105      	bne.n	800849e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008492:	7b7b      	ldrb	r3, [r7, #13]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d102      	bne.n	800849e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008498:	7b3b      	ldrb	r3, [r7, #12]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d001      	beq.n	80084a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e03e      	b.n	8008520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2202      	movs	r2, #2
 80084ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_TIM_Encoder_Start+0xc4>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d008      	beq.n	80084e0 <HAL_TIM_Encoder_Start+0xd4>
 80084ce:	e00f      	b.n	80084f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 fd23 	bl	8009f24 <TIM_CCxChannelCmd>
      break;
 80084de:	e016      	b.n	800850e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2201      	movs	r2, #1
 80084e6:	2104      	movs	r1, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fd1b 	bl	8009f24 <TIM_CCxChannelCmd>
      break;
 80084ee:	e00e      	b.n	800850e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2201      	movs	r2, #1
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fd13 	bl	8009f24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2201      	movs	r2, #1
 8008504:	2104      	movs	r1, #4
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fd0c 	bl	8009f24 <TIM_CCxChannelCmd>
      break;
 800850c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0201 	orr.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b02      	cmp	r3, #2
 800853c:	d128      	bne.n	8008590 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b02      	cmp	r3, #2
 800854a:	d121      	bne.n	8008590 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0202 	mvn.w	r2, #2
 8008554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
 8008574:	e009      	b.n	800858a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b04      	cmp	r3, #4
 800859c:	d128      	bne.n	80085f0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d121      	bne.n	80085f0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0204 	mvn.w	r2, #4
 80085b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
 80085d4:	e009      	b.n	80085ea <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d128      	bne.n	8008650 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d121      	bne.n	8008650 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f06f 0208 	mvn.w	r2, #8
 8008614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2204      	movs	r2, #4
 800861a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
 8008634:	e009      	b.n	800864a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b10      	cmp	r3, #16
 800865c:	d128      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b10      	cmp	r3, #16
 800866a:	d121      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0210 	mvn.w	r2, #16
 8008674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2208      	movs	r2, #8
 800867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
 8008694:	e009      	b.n	80086aa <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d110      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d109      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0201 	mvn.w	r2, #1
 80086d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ea:	2b80      	cmp	r3, #128	; 0x80
 80086ec:	d110      	bne.n	8008710 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f8:	2b80      	cmp	r3, #128	; 0x80
 80086fa:	d109      	bne.n	8008710 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871e:	d110      	bne.n	8008742 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872a:	2b80      	cmp	r3, #128	; 0x80
 800872c:	d109      	bne.n	8008742 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	d110      	bne.n	8008772 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d109      	bne.n	8008772 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b20      	cmp	r3, #32
 800877e:	d110      	bne.n	80087a2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b20      	cmp	r3, #32
 800878c:	d109      	bne.n	80087a2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0220 	mvn.w	r2, #32
 8008796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b0:	d111      	bne.n	80087d6 <HAL_TIM_IRQHandler+0x2ae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c0:	d109      	bne.n	80087d6 <HAL_TIM_IRQHandler+0x2ae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80087ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087e4:	d111      	bne.n	800880a <HAL_TIM_IRQHandler+0x2e2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087f4:	d109      	bne.n	800880a <HAL_TIM_IRQHandler+0x2e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80087fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008818:	d111      	bne.n	800883e <HAL_TIM_IRQHandler+0x316>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008828:	d109      	bne.n	800883e <HAL_TIM_IRQHandler+0x316>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800884c:	d111      	bne.n	8008872 <HAL_TIM_IRQHandler+0x34a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800885c:	d109      	bne.n	8008872 <HAL_TIM_IRQHandler+0x34a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008894:	2302      	movs	r3, #2
 8008896:	e088      	b.n	80089aa <HAL_TIM_IC_ConfigChannel+0x130>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d11b      	bne.n	80088de <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f001 f96f 	bl	8009b98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 020c 	bic.w	r2, r2, #12
 80088c8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6999      	ldr	r1, [r3, #24]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	619a      	str	r2, [r3, #24]
 80088dc:	e060      	b.n	80089a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d11c      	bne.n	800891e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6819      	ldr	r1, [r3, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f001 f9f3 	bl	8009cde <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008906:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6999      	ldr	r1, [r3, #24]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	619a      	str	r2, [r3, #24]
 800891c:	e040      	b.n	80089a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b08      	cmp	r3, #8
 8008922:	d11b      	bne.n	800895c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f001 fa40 	bl	8009db8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69da      	ldr	r2, [r3, #28]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 020c 	bic.w	r2, r2, #12
 8008946:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69d9      	ldr	r1, [r3, #28]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	61da      	str	r2, [r3, #28]
 800895a:	e021      	b.n	80089a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b0c      	cmp	r3, #12
 8008960:	d11c      	bne.n	800899c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6819      	ldr	r1, [r3, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f001 fa5d 	bl	8009e30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69da      	ldr	r2, [r3, #28]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008984:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69d9      	ldr	r1, [r3, #28]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	021a      	lsls	r2, r3, #8
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	61da      	str	r2, [r3, #28]
 800899a:	e001      	b.n	80089a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e0ff      	b.n	8008bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b14      	cmp	r3, #20
 80089de:	f200 80f0 	bhi.w	8008bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089e2:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e8:	08008a3d 	.word	0x08008a3d
 80089ec:	08008bc3 	.word	0x08008bc3
 80089f0:	08008bc3 	.word	0x08008bc3
 80089f4:	08008bc3 	.word	0x08008bc3
 80089f8:	08008a7d 	.word	0x08008a7d
 80089fc:	08008bc3 	.word	0x08008bc3
 8008a00:	08008bc3 	.word	0x08008bc3
 8008a04:	08008bc3 	.word	0x08008bc3
 8008a08:	08008abf 	.word	0x08008abf
 8008a0c:	08008bc3 	.word	0x08008bc3
 8008a10:	08008bc3 	.word	0x08008bc3
 8008a14:	08008bc3 	.word	0x08008bc3
 8008a18:	08008aff 	.word	0x08008aff
 8008a1c:	08008bc3 	.word	0x08008bc3
 8008a20:	08008bc3 	.word	0x08008bc3
 8008a24:	08008bc3 	.word	0x08008bc3
 8008a28:	08008b41 	.word	0x08008b41
 8008a2c:	08008bc3 	.word	0x08008bc3
 8008a30:	08008bc3 	.word	0x08008bc3
 8008a34:	08008bc3 	.word	0x08008bc3
 8008a38:	08008b81 	.word	0x08008b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fc9e 	bl	8009384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0208 	orr.w	r2, r2, #8
 8008a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0204 	bic.w	r2, r2, #4
 8008a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6999      	ldr	r1, [r3, #24]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	619a      	str	r2, [r3, #24]
      break;
 8008a7a:	e0a5      	b.n	8008bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fd18 	bl	80094b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	699a      	ldr	r2, [r3, #24]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6999      	ldr	r1, [r3, #24]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	021a      	lsls	r2, r3, #8
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	619a      	str	r2, [r3, #24]
      break;
 8008abc:	e084      	b.n	8008bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fd8b 	bl	80095e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69da      	ldr	r2, [r3, #28]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0208 	orr.w	r2, r2, #8
 8008ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69da      	ldr	r2, [r3, #28]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0204 	bic.w	r2, r2, #4
 8008ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69d9      	ldr	r1, [r3, #28]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	61da      	str	r2, [r3, #28]
      break;
 8008afc:	e064      	b.n	8008bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68b9      	ldr	r1, [r7, #8]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fdfd 	bl	8009704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69da      	ldr	r2, [r3, #28]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69da      	ldr	r2, [r3, #28]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69d9      	ldr	r1, [r3, #28]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	021a      	lsls	r2, r3, #8
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	61da      	str	r2, [r3, #28]
      break;
 8008b3e:	e043      	b.n	8008bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fe70 	bl	800982c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0208 	orr.w	r2, r2, #8
 8008b5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0204 	bic.w	r2, r2, #4
 8008b6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b7e:	e023      	b.n	8008bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 feba 	bl	8009900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008baa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	021a      	lsls	r2, r3, #8
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008bc0:	e002      	b.n	8008bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop

08008bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e0f6      	b.n	8008de6 <HAL_TIM_ConfigClockSource+0x20a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a6f      	ldr	r2, [pc, #444]	; (8008df0 <HAL_TIM_ConfigClockSource+0x214>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	f000 80c1 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c38:	4a6d      	ldr	r2, [pc, #436]	; (8008df0 <HAL_TIM_ConfigClockSource+0x214>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	f200 80c6 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008c40:	4a6c      	ldr	r2, [pc, #432]	; (8008df4 <HAL_TIM_ConfigClockSource+0x218>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	f000 80b9 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c48:	4a6a      	ldr	r2, [pc, #424]	; (8008df4 <HAL_TIM_ConfigClockSource+0x218>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	f200 80be 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008c50:	4a69      	ldr	r2, [pc, #420]	; (8008df8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	f000 80b1 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c58:	4a67      	ldr	r2, [pc, #412]	; (8008df8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	f200 80b6 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008c60:	4a66      	ldr	r2, [pc, #408]	; (8008dfc <HAL_TIM_ConfigClockSource+0x220>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	f000 80a9 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c68:	4a64      	ldr	r2, [pc, #400]	; (8008dfc <HAL_TIM_ConfigClockSource+0x220>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	f200 80ae 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008c70:	4a63      	ldr	r2, [pc, #396]	; (8008e00 <HAL_TIM_ConfigClockSource+0x224>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	f000 80a1 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c78:	4a61      	ldr	r2, [pc, #388]	; (8008e00 <HAL_TIM_ConfigClockSource+0x224>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	f200 80a6 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008c80:	4a60      	ldr	r2, [pc, #384]	; (8008e04 <HAL_TIM_ConfigClockSource+0x228>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	f000 8099 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c88:	4a5e      	ldr	r2, [pc, #376]	; (8008e04 <HAL_TIM_ConfigClockSource+0x228>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	f200 809e 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008c90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c94:	f000 8091 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008c98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c9c:	f200 8096 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ca4:	f000 8089 	beq.w	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cac:	f200 808e 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb4:	d03e      	beq.n	8008d34 <HAL_TIM_ConfigClockSource+0x158>
 8008cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cba:	f200 8087 	bhi.w	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc2:	f000 8086 	beq.w	8008dd2 <HAL_TIM_ConfigClockSource+0x1f6>
 8008cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cca:	d87f      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008ccc:	2b70      	cmp	r3, #112	; 0x70
 8008cce:	d01a      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x12a>
 8008cd0:	2b70      	cmp	r3, #112	; 0x70
 8008cd2:	d87b      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cd4:	2b60      	cmp	r3, #96	; 0x60
 8008cd6:	d050      	beq.n	8008d7a <HAL_TIM_ConfigClockSource+0x19e>
 8008cd8:	2b60      	cmp	r3, #96	; 0x60
 8008cda:	d877      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cdc:	2b50      	cmp	r3, #80	; 0x50
 8008cde:	d03c      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x17e>
 8008ce0:	2b50      	cmp	r3, #80	; 0x50
 8008ce2:	d873      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce4:	2b40      	cmp	r3, #64	; 0x40
 8008ce6:	d058      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x1be>
 8008ce8:	2b40      	cmp	r3, #64	; 0x40
 8008cea:	d86f      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cec:	2b30      	cmp	r3, #48	; 0x30
 8008cee:	d064      	beq.n	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008cf0:	2b30      	cmp	r3, #48	; 0x30
 8008cf2:	d86b      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d060      	beq.n	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d867      	bhi.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05c      	beq.n	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d05a      	beq.n	8008dba <HAL_TIM_ConfigClockSource+0x1de>
 8008d04:	e062      	b.n	8008dcc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	6899      	ldr	r1, [r3, #8]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f001 f8e5 	bl	8009ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	609a      	str	r2, [r3, #8]
      break;
 8008d32:	e04f      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	6899      	ldr	r1, [r3, #8]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f001 f8ce 	bl	8009ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d56:	609a      	str	r2, [r3, #8]
      break;
 8008d58:	e03c      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6859      	ldr	r1, [r3, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f000 ff8a 	bl	8009c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2150      	movs	r1, #80	; 0x50
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 f899 	bl	8009eaa <TIM_ITRx_SetConfig>
      break;
 8008d78:	e02c      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	6859      	ldr	r1, [r3, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f000 ffe6 	bl	8009d58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2160      	movs	r1, #96	; 0x60
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 f889 	bl	8009eaa <TIM_ITRx_SetConfig>
      break;
 8008d98:	e01c      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	6859      	ldr	r1, [r3, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f000 ff6a 	bl	8009c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2140      	movs	r1, #64	; 0x40
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 f879 	bl	8009eaa <TIM_ITRx_SetConfig>
      break;
 8008db8:	e00c      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f001 f870 	bl	8009eaa <TIM_ITRx_SetConfig>
      break;
 8008dca:	e003      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd0:	e000      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	00100070 	.word	0x00100070
 8008df4:	00100060 	.word	0x00100060
 8008df8:	00100050 	.word	0x00100050
 8008dfc:	00100040 	.word	0x00100040
 8008e00:	00100030 	.word	0x00100030
 8008e04:	00100020 	.word	0x00100020

08008e08 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e031      	b.n	8008e84 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fdd0 	bl	80099d8 <TIM_SlaveTimer_SetConfig>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e018      	b.n	8008e84 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e60:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e70:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e15a      	b.n	8009226 <HAL_TIM_RegisterCallback+0x2d2>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_TIM_RegisterCallback+0x2a>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e153      	b.n	8009226 <HAL_TIM_RegisterCallback+0x2d2>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	f040 80de 	bne.w	8009150 <HAL_TIM_RegisterCallback+0x1fc>
  {
    switch (CallbackID)
 8008f94:	7afb      	ldrb	r3, [r7, #11]
 8008f96:	2b1f      	cmp	r3, #31
 8008f98:	f200 80d7 	bhi.w	800914a <HAL_TIM_RegisterCallback+0x1f6>
 8008f9c:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <HAL_TIM_RegisterCallback+0x50>)
 8008f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa2:	bf00      	nop
 8008fa4:	08009025 	.word	0x08009025
 8008fa8:	0800902d 	.word	0x0800902d
 8008fac:	08009035 	.word	0x08009035
 8008fb0:	0800903d 	.word	0x0800903d
 8008fb4:	08009045 	.word	0x08009045
 8008fb8:	0800904d 	.word	0x0800904d
 8008fbc:	08009055 	.word	0x08009055
 8008fc0:	0800905d 	.word	0x0800905d
 8008fc4:	08009065 	.word	0x08009065
 8008fc8:	0800906d 	.word	0x0800906d
 8008fcc:	08009075 	.word	0x08009075
 8008fd0:	0800907d 	.word	0x0800907d
 8008fd4:	08009085 	.word	0x08009085
 8008fd8:	0800908d 	.word	0x0800908d
 8008fdc:	08009097 	.word	0x08009097
 8008fe0:	080090a1 	.word	0x080090a1
 8008fe4:	080090ab 	.word	0x080090ab
 8008fe8:	080090b5 	.word	0x080090b5
 8008fec:	080090bf 	.word	0x080090bf
 8008ff0:	080090c9 	.word	0x080090c9
 8008ff4:	080090d3 	.word	0x080090d3
 8008ff8:	080090dd 	.word	0x080090dd
 8008ffc:	080090e7 	.word	0x080090e7
 8009000:	080090f1 	.word	0x080090f1
 8009004:	080090fb 	.word	0x080090fb
 8009008:	08009105 	.word	0x08009105
 800900c:	0800910f 	.word	0x0800910f
 8009010:	08009119 	.word	0x08009119
 8009014:	08009123 	.word	0x08009123
 8009018:	0800912d 	.word	0x0800912d
 800901c:	08009137 	.word	0x08009137
 8009020:	08009141 	.word	0x08009141
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800902a:	e0f7      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009032:	e0f3      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800903a:	e0ef      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009042:	e0eb      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800904a:	e0e7      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009052:	e0e3      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800905a:	e0df      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009062:	e0db      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800906a:	e0d7      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009072:	e0d3      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800907a:	e0cf      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009082:	e0cb      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800908a:	e0c7      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009094:	e0c2      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800909e:	e0bd      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80090a8:	e0b8      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80090b2:	e0b3      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80090bc:	e0ae      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80090c6:	e0a9      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80090d0:	e0a4      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80090da:	e09f      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80090e4:	e09a      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80090ee:	e095      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80090f8:	e090      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009102:	e08b      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800910c:	e086      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8009116:	e081      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8009120:	e07c      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800912a:	e077      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8009134:	e072      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800913e:	e06d      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8009148:	e068      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	75fb      	strb	r3, [r7, #23]
        break;
 800914e:	e065      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d15d      	bne.n	8009218 <HAL_TIM_RegisterCallback+0x2c4>
  {
    switch (CallbackID)
 800915c:	7afb      	ldrb	r3, [r7, #11]
 800915e:	2b0d      	cmp	r3, #13
 8009160:	d857      	bhi.n	8009212 <HAL_TIM_RegisterCallback+0x2be>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <HAL_TIM_RegisterCallback+0x214>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	080091a1 	.word	0x080091a1
 800916c:	080091a9 	.word	0x080091a9
 8009170:	080091b1 	.word	0x080091b1
 8009174:	080091b9 	.word	0x080091b9
 8009178:	080091c1 	.word	0x080091c1
 800917c:	080091c9 	.word	0x080091c9
 8009180:	080091d1 	.word	0x080091d1
 8009184:	080091d9 	.word	0x080091d9
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091e9 	.word	0x080091e9
 8009190:	080091f1 	.word	0x080091f1
 8009194:	080091f9 	.word	0x080091f9
 8009198:	08009201 	.word	0x08009201
 800919c:	08009209 	.word	0x08009209
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80091a6:	e039      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80091ae:	e035      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80091b6:	e031      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80091be:	e02d      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80091c6:	e029      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80091ce:	e025      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80091d6:	e021      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80091de:	e01d      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80091e6:	e019      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80091ee:	e015      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80091f6:	e011      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80091fe:	e00d      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009206:	e009      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009210:	e004      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
        break;
 8009216:	e001      	b.n	800921c <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
}
 8009226:	4618      	mov	r0, r3
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop

08009234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a46      	ldr	r2, [pc, #280]	; (8009360 <TIM_Base_SetConfig+0x12c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d017      	beq.n	800927c <TIM_Base_SetConfig+0x48>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009252:	d013      	beq.n	800927c <TIM_Base_SetConfig+0x48>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a43      	ldr	r2, [pc, #268]	; (8009364 <TIM_Base_SetConfig+0x130>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00f      	beq.n	800927c <TIM_Base_SetConfig+0x48>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a42      	ldr	r2, [pc, #264]	; (8009368 <TIM_Base_SetConfig+0x134>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00b      	beq.n	800927c <TIM_Base_SetConfig+0x48>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a41      	ldr	r2, [pc, #260]	; (800936c <TIM_Base_SetConfig+0x138>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d007      	beq.n	800927c <TIM_Base_SetConfig+0x48>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a40      	ldr	r2, [pc, #256]	; (8009370 <TIM_Base_SetConfig+0x13c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_Base_SetConfig+0x48>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a3f      	ldr	r2, [pc, #252]	; (8009374 <TIM_Base_SetConfig+0x140>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d108      	bne.n	800928e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a33      	ldr	r2, [pc, #204]	; (8009360 <TIM_Base_SetConfig+0x12c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d023      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929c:	d01f      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a30      	ldr	r2, [pc, #192]	; (8009364 <TIM_Base_SetConfig+0x130>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01b      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2f      	ldr	r2, [pc, #188]	; (8009368 <TIM_Base_SetConfig+0x134>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d017      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2e      	ldr	r2, [pc, #184]	; (800936c <TIM_Base_SetConfig+0x138>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d013      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a2d      	ldr	r2, [pc, #180]	; (8009370 <TIM_Base_SetConfig+0x13c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00f      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a2d      	ldr	r2, [pc, #180]	; (8009378 <TIM_Base_SetConfig+0x144>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00b      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a2c      	ldr	r2, [pc, #176]	; (800937c <TIM_Base_SetConfig+0x148>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d007      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a2b      	ldr	r2, [pc, #172]	; (8009380 <TIM_Base_SetConfig+0x14c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d003      	beq.n	80092de <TIM_Base_SetConfig+0xaa>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a26      	ldr	r2, [pc, #152]	; (8009374 <TIM_Base_SetConfig+0x140>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d108      	bne.n	80092f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a12      	ldr	r2, [pc, #72]	; (8009360 <TIM_Base_SetConfig+0x12c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d013      	beq.n	8009344 <TIM_Base_SetConfig+0x110>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a14      	ldr	r2, [pc, #80]	; (8009370 <TIM_Base_SetConfig+0x13c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00f      	beq.n	8009344 <TIM_Base_SetConfig+0x110>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a14      	ldr	r2, [pc, #80]	; (8009378 <TIM_Base_SetConfig+0x144>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00b      	beq.n	8009344 <TIM_Base_SetConfig+0x110>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a13      	ldr	r2, [pc, #76]	; (800937c <TIM_Base_SetConfig+0x148>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d007      	beq.n	8009344 <TIM_Base_SetConfig+0x110>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a12      	ldr	r2, [pc, #72]	; (8009380 <TIM_Base_SetConfig+0x14c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d003      	beq.n	8009344 <TIM_Base_SetConfig+0x110>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a0d      	ldr	r2, [pc, #52]	; (8009374 <TIM_Base_SetConfig+0x140>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d103      	bne.n	800934c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	615a      	str	r2, [r3, #20]
}
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40012c00 	.word	0x40012c00
 8009364:	40000400 	.word	0x40000400
 8009368:	40000800 	.word	0x40000800
 800936c:	40000c00 	.word	0x40000c00
 8009370:	40013400 	.word	0x40013400
 8009374:	40015000 	.word	0x40015000
 8009378:	40014000 	.word	0x40014000
 800937c:	40014400 	.word	0x40014400
 8009380:	40014800 	.word	0x40014800

08009384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	f023 0201 	bic.w	r2, r3, #1
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f023 0302 	bic.w	r3, r3, #2
 80093d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a30      	ldr	r2, [pc, #192]	; (80094a0 <TIM_OC1_SetConfig+0x11c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d013      	beq.n	800940c <TIM_OC1_SetConfig+0x88>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a2f      	ldr	r2, [pc, #188]	; (80094a4 <TIM_OC1_SetConfig+0x120>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00f      	beq.n	800940c <TIM_OC1_SetConfig+0x88>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a2e      	ldr	r2, [pc, #184]	; (80094a8 <TIM_OC1_SetConfig+0x124>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00b      	beq.n	800940c <TIM_OC1_SetConfig+0x88>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a2d      	ldr	r2, [pc, #180]	; (80094ac <TIM_OC1_SetConfig+0x128>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d007      	beq.n	800940c <TIM_OC1_SetConfig+0x88>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a2c      	ldr	r2, [pc, #176]	; (80094b0 <TIM_OC1_SetConfig+0x12c>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d003      	beq.n	800940c <TIM_OC1_SetConfig+0x88>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a2b      	ldr	r2, [pc, #172]	; (80094b4 <TIM_OC1_SetConfig+0x130>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d10c      	bne.n	8009426 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f023 0308 	bic.w	r3, r3, #8
 8009412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	4313      	orrs	r3, r2
 800941c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f023 0304 	bic.w	r3, r3, #4
 8009424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a1d      	ldr	r2, [pc, #116]	; (80094a0 <TIM_OC1_SetConfig+0x11c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d013      	beq.n	8009456 <TIM_OC1_SetConfig+0xd2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1c      	ldr	r2, [pc, #112]	; (80094a4 <TIM_OC1_SetConfig+0x120>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <TIM_OC1_SetConfig+0xd2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1b      	ldr	r2, [pc, #108]	; (80094a8 <TIM_OC1_SetConfig+0x124>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00b      	beq.n	8009456 <TIM_OC1_SetConfig+0xd2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <TIM_OC1_SetConfig+0x128>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d007      	beq.n	8009456 <TIM_OC1_SetConfig+0xd2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <TIM_OC1_SetConfig+0x12c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_OC1_SetConfig+0xd2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <TIM_OC1_SetConfig+0x130>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d111      	bne.n	800947a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800945c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4313      	orrs	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	621a      	str	r2, [r3, #32]
}
 8009494:	bf00      	nop
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	40012c00 	.word	0x40012c00
 80094a4:	40013400 	.word	0x40013400
 80094a8:	40014000 	.word	0x40014000
 80094ac:	40014400 	.word	0x40014400
 80094b0:	40014800 	.word	0x40014800
 80094b4:	40015000 	.word	0x40015000

080094b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f023 0210 	bic.w	r2, r3, #16
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f023 0320 	bic.w	r3, r3, #32
 8009506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	011b      	lsls	r3, r3, #4
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a2c      	ldr	r2, [pc, #176]	; (80095c8 <TIM_OC2_SetConfig+0x110>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d007      	beq.n	800952c <TIM_OC2_SetConfig+0x74>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a2b      	ldr	r2, [pc, #172]	; (80095cc <TIM_OC2_SetConfig+0x114>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_OC2_SetConfig+0x74>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a2a      	ldr	r2, [pc, #168]	; (80095d0 <TIM_OC2_SetConfig+0x118>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d10d      	bne.n	8009548 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a1f      	ldr	r2, [pc, #124]	; (80095c8 <TIM_OC2_SetConfig+0x110>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <TIM_OC2_SetConfig+0xc0>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1e      	ldr	r2, [pc, #120]	; (80095cc <TIM_OC2_SetConfig+0x114>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00f      	beq.n	8009578 <TIM_OC2_SetConfig+0xc0>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1e      	ldr	r2, [pc, #120]	; (80095d4 <TIM_OC2_SetConfig+0x11c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00b      	beq.n	8009578 <TIM_OC2_SetConfig+0xc0>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a1d      	ldr	r2, [pc, #116]	; (80095d8 <TIM_OC2_SetConfig+0x120>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d007      	beq.n	8009578 <TIM_OC2_SetConfig+0xc0>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a1c      	ldr	r2, [pc, #112]	; (80095dc <TIM_OC2_SetConfig+0x124>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d003      	beq.n	8009578 <TIM_OC2_SetConfig+0xc0>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <TIM_OC2_SetConfig+0x118>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d113      	bne.n	80095a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800957e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	4313      	orrs	r3, r2
 800959e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	621a      	str	r2, [r3, #32]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40012c00 	.word	0x40012c00
 80095cc:	40013400 	.word	0x40013400
 80095d0:	40015000 	.word	0x40015000
 80095d4:	40014000 	.word	0x40014000
 80095d8:	40014400 	.word	0x40014400
 80095dc:	40014800 	.word	0x40014800

080095e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0303 	bic.w	r3, r3, #3
 800961a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800962c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	021b      	lsls	r3, r3, #8
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	4313      	orrs	r3, r2
 8009638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2b      	ldr	r2, [pc, #172]	; (80096ec <TIM_OC3_SetConfig+0x10c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d007      	beq.n	8009652 <TIM_OC3_SetConfig+0x72>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2a      	ldr	r2, [pc, #168]	; (80096f0 <TIM_OC3_SetConfig+0x110>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d003      	beq.n	8009652 <TIM_OC3_SetConfig+0x72>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a29      	ldr	r2, [pc, #164]	; (80096f4 <TIM_OC3_SetConfig+0x114>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d10d      	bne.n	800966e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800966c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a1e      	ldr	r2, [pc, #120]	; (80096ec <TIM_OC3_SetConfig+0x10c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d013      	beq.n	800969e <TIM_OC3_SetConfig+0xbe>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <TIM_OC3_SetConfig+0x110>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00f      	beq.n	800969e <TIM_OC3_SetConfig+0xbe>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a1d      	ldr	r2, [pc, #116]	; (80096f8 <TIM_OC3_SetConfig+0x118>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00b      	beq.n	800969e <TIM_OC3_SetConfig+0xbe>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a1c      	ldr	r2, [pc, #112]	; (80096fc <TIM_OC3_SetConfig+0x11c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d007      	beq.n	800969e <TIM_OC3_SetConfig+0xbe>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a1b      	ldr	r2, [pc, #108]	; (8009700 <TIM_OC3_SetConfig+0x120>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d003      	beq.n	800969e <TIM_OC3_SetConfig+0xbe>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <TIM_OC3_SetConfig+0x114>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d113      	bne.n	80096c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	621a      	str	r2, [r3, #32]
}
 80096e0:	bf00      	nop
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	40012c00 	.word	0x40012c00
 80096f0:	40013400 	.word	0x40013400
 80096f4:	40015000 	.word	0x40015000
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40014400 	.word	0x40014400
 8009700:	40014800 	.word	0x40014800

08009704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800973e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	4313      	orrs	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	031b      	lsls	r3, r3, #12
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a2c      	ldr	r2, [pc, #176]	; (8009814 <TIM_OC4_SetConfig+0x110>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d007      	beq.n	8009778 <TIM_OC4_SetConfig+0x74>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a2b      	ldr	r2, [pc, #172]	; (8009818 <TIM_OC4_SetConfig+0x114>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d003      	beq.n	8009778 <TIM_OC4_SetConfig+0x74>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a2a      	ldr	r2, [pc, #168]	; (800981c <TIM_OC4_SetConfig+0x118>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d10d      	bne.n	8009794 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800977e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	031b      	lsls	r3, r3, #12
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	4313      	orrs	r3, r2
 800978a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <TIM_OC4_SetConfig+0x110>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <TIM_OC4_SetConfig+0xc0>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a1e      	ldr	r2, [pc, #120]	; (8009818 <TIM_OC4_SetConfig+0x114>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d00f      	beq.n	80097c4 <TIM_OC4_SetConfig+0xc0>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <TIM_OC4_SetConfig+0x11c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d00b      	beq.n	80097c4 <TIM_OC4_SetConfig+0xc0>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <TIM_OC4_SetConfig+0x120>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d007      	beq.n	80097c4 <TIM_OC4_SetConfig+0xc0>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a1c      	ldr	r2, [pc, #112]	; (8009828 <TIM_OC4_SetConfig+0x124>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d003      	beq.n	80097c4 <TIM_OC4_SetConfig+0xc0>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a17      	ldr	r2, [pc, #92]	; (800981c <TIM_OC4_SetConfig+0x118>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d113      	bne.n	80097ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	019b      	lsls	r3, r3, #6
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	019b      	lsls	r3, r3, #6
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40012c00 	.word	0x40012c00
 8009818:	40013400 	.word	0x40013400
 800981c:	40015000 	.word	0x40015000
 8009820:	40014000 	.word	0x40014000
 8009824:	40014400 	.word	0x40014400
 8009828:	40014800 	.word	0x40014800

0800982c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800985a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	041b      	lsls	r3, r3, #16
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4313      	orrs	r3, r2
 800987c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a19      	ldr	r2, [pc, #100]	; (80098e8 <TIM_OC5_SetConfig+0xbc>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d013      	beq.n	80098ae <TIM_OC5_SetConfig+0x82>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a18      	ldr	r2, [pc, #96]	; (80098ec <TIM_OC5_SetConfig+0xc0>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00f      	beq.n	80098ae <TIM_OC5_SetConfig+0x82>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a17      	ldr	r2, [pc, #92]	; (80098f0 <TIM_OC5_SetConfig+0xc4>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00b      	beq.n	80098ae <TIM_OC5_SetConfig+0x82>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a16      	ldr	r2, [pc, #88]	; (80098f4 <TIM_OC5_SetConfig+0xc8>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d007      	beq.n	80098ae <TIM_OC5_SetConfig+0x82>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a15      	ldr	r2, [pc, #84]	; (80098f8 <TIM_OC5_SetConfig+0xcc>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d003      	beq.n	80098ae <TIM_OC5_SetConfig+0x82>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a14      	ldr	r2, [pc, #80]	; (80098fc <TIM_OC5_SetConfig+0xd0>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d109      	bne.n	80098c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	40012c00 	.word	0x40012c00
 80098ec:	40013400 	.word	0x40013400
 80098f0:	40014000 	.word	0x40014000
 80098f4:	40014400 	.word	0x40014400
 80098f8:	40014800 	.word	0x40014800
 80098fc:	40015000 	.word	0x40015000

08009900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800992e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1a      	ldr	r2, [pc, #104]	; (80099c0 <TIM_OC6_SetConfig+0xc0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d013      	beq.n	8009984 <TIM_OC6_SetConfig+0x84>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a19      	ldr	r2, [pc, #100]	; (80099c4 <TIM_OC6_SetConfig+0xc4>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d00f      	beq.n	8009984 <TIM_OC6_SetConfig+0x84>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a18      	ldr	r2, [pc, #96]	; (80099c8 <TIM_OC6_SetConfig+0xc8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00b      	beq.n	8009984 <TIM_OC6_SetConfig+0x84>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a17      	ldr	r2, [pc, #92]	; (80099cc <TIM_OC6_SetConfig+0xcc>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d007      	beq.n	8009984 <TIM_OC6_SetConfig+0x84>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <TIM_OC6_SetConfig+0xd0>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d003      	beq.n	8009984 <TIM_OC6_SetConfig+0x84>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a15      	ldr	r2, [pc, #84]	; (80099d4 <TIM_OC6_SetConfig+0xd4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d109      	bne.n	8009998 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800998a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	029b      	lsls	r3, r3, #10
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	621a      	str	r2, [r3, #32]
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40012c00 	.word	0x40012c00
 80099c4:	40013400 	.word	0x40013400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	40014400 	.word	0x40014400
 80099d0:	40014800 	.word	0x40014800
 80099d4:	40015000 	.word	0x40015000

080099d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80099f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0a:	f023 0307 	bic.w	r3, r3, #7
 8009a0e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	4a56      	ldr	r2, [pc, #344]	; (8009b80 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	f000 80a2 	beq.w	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a2e:	4a54      	ldr	r2, [pc, #336]	; (8009b80 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	f200 809b 	bhi.w	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a36:	4a53      	ldr	r2, [pc, #332]	; (8009b84 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f000 809a 	beq.w	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a3e:	4a51      	ldr	r2, [pc, #324]	; (8009b84 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	f200 8093 	bhi.w	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a46:	4a50      	ldr	r2, [pc, #320]	; (8009b88 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	f000 8092 	beq.w	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a4e:	4a4e      	ldr	r2, [pc, #312]	; (8009b88 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	f200 808b 	bhi.w	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a56:	4a4d      	ldr	r2, [pc, #308]	; (8009b8c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	f000 808a 	beq.w	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a5e:	4a4b      	ldr	r2, [pc, #300]	; (8009b8c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	f200 8083 	bhi.w	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a66:	4a4a      	ldr	r2, [pc, #296]	; (8009b90 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	f000 8082 	beq.w	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a6e:	4a48      	ldr	r2, [pc, #288]	; (8009b90 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d87b      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a74:	4a47      	ldr	r2, [pc, #284]	; (8009b94 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d07b      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a7a:	4a46      	ldr	r2, [pc, #280]	; (8009b94 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d875      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a84:	d075      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a86:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a8a:	d86f      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a90:	d06f      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a96:	d869      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009a98:	2b70      	cmp	r3, #112	; 0x70
 8009a9a:	d01a      	beq.n	8009ad2 <TIM_SlaveTimer_SetConfig+0xfa>
 8009a9c:	2b70      	cmp	r3, #112	; 0x70
 8009a9e:	d865      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009aa0:	2b60      	cmp	r3, #96	; 0x60
 8009aa2:	d059      	beq.n	8009b58 <TIM_SlaveTimer_SetConfig+0x180>
 8009aa4:	2b60      	cmp	r3, #96	; 0x60
 8009aa6:	d861      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009aa8:	2b50      	cmp	r3, #80	; 0x50
 8009aaa:	d04b      	beq.n	8009b44 <TIM_SlaveTimer_SetConfig+0x16c>
 8009aac:	2b50      	cmp	r3, #80	; 0x50
 8009aae:	d85d      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009ab0:	2b40      	cmp	r3, #64	; 0x40
 8009ab2:	d019      	beq.n	8009ae8 <TIM_SlaveTimer_SetConfig+0x110>
 8009ab4:	2b40      	cmp	r3, #64	; 0x40
 8009ab6:	d859      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009ab8:	2b30      	cmp	r3, #48	; 0x30
 8009aba:	d05a      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009abc:	2b30      	cmp	r3, #48	; 0x30
 8009abe:	d855      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	d056      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009ac4:	2b20      	cmp	r3, #32
 8009ac6:	d851      	bhi.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d052      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009acc:	2b10      	cmp	r3, #16
 8009ace:	d050      	beq.n	8009b72 <TIM_SlaveTimer_SetConfig+0x19a>
 8009ad0:	e04c      	b.n	8009b6c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	68d9      	ldr	r1, [r3, #12]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	689a      	ldr	r2, [r3, #8]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f000 f9ff 	bl	8009ee4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009ae6:	e045      	b.n	8009b74 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b05      	cmp	r3, #5
 8009aee:	d004      	beq.n	8009afa <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009af4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009af8:	d101      	bne.n	8009afe <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e03b      	b.n	8009b76 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6a1a      	ldr	r2, [r3, #32]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0201 	bic.w	r2, r2, #1
 8009b14:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b24:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	011b      	lsls	r3, r3, #4
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	621a      	str	r2, [r3, #32]
      break;
 8009b42:	e017      	b.n	8009b74 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6899      	ldr	r1, [r3, #8]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f000 f895 	bl	8009c80 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b56:	e00d      	b.n	8009b74 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6899      	ldr	r1, [r3, #8]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	461a      	mov	r2, r3
 8009b66:	f000 f8f7 	bl	8009d58 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b6a:	e003      	b.n	8009b74 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b70:	e000      	b.n	8009b74 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009b72:	bf00      	nop
  }

  return status;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	00100070 	.word	0x00100070
 8009b84:	00100060 	.word	0x00100060
 8009b88:	00100050 	.word	0x00100050
 8009b8c:	00100040 	.word	0x00100040
 8009b90:	00100030 	.word	0x00100030
 8009b94:	00100020 	.word	0x00100020

08009b98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	f023 0201 	bic.w	r2, r3, #1
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	4a28      	ldr	r2, [pc, #160]	; (8009c64 <TIM_TI1_SetConfig+0xcc>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d01b      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bcc:	d017      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4a25      	ldr	r2, [pc, #148]	; (8009c68 <TIM_TI1_SetConfig+0xd0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d013      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4a24      	ldr	r2, [pc, #144]	; (8009c6c <TIM_TI1_SetConfig+0xd4>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00f      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4a23      	ldr	r2, [pc, #140]	; (8009c70 <TIM_TI1_SetConfig+0xd8>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d00b      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4a22      	ldr	r2, [pc, #136]	; (8009c74 <TIM_TI1_SetConfig+0xdc>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d007      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4a21      	ldr	r2, [pc, #132]	; (8009c78 <TIM_TI1_SetConfig+0xe0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d003      	beq.n	8009bfe <TIM_TI1_SetConfig+0x66>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a20      	ldr	r2, [pc, #128]	; (8009c7c <TIM_TI1_SetConfig+0xe4>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d101      	bne.n	8009c02 <TIM_TI1_SetConfig+0x6a>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <TIM_TI1_SetConfig+0x6c>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d008      	beq.n	8009c1a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e003      	b.n	8009c22 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f043 0301 	orr.w	r3, r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f023 030a 	bic.w	r3, r3, #10
 8009c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f003 030a 	and.w	r3, r3, #10
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	621a      	str	r2, [r3, #32]
}
 8009c56:	bf00      	nop
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40012c00 	.word	0x40012c00
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	40013400 	.word	0x40013400
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40015000 	.word	0x40015000

08009c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	f023 0201 	bic.w	r2, r3, #1
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f023 030a 	bic.w	r3, r3, #10
 8009cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b087      	sub	sp, #28
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	607a      	str	r2, [r7, #4]
 8009cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f023 0210 	bic.w	r2, r3, #16
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	021b      	lsls	r3, r3, #8
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	031b      	lsls	r3, r3, #12
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	621a      	str	r2, [r3, #32]
}
 8009d4c:	bf00      	nop
 8009d4e:	371c      	adds	r7, #28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	f023 0210 	bic.w	r2, r3, #16
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	031b      	lsls	r3, r3, #12
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	621a      	str	r2, [r3, #32]
}
 8009dac:	bf00      	nop
 8009dae:	371c      	adds	r7, #28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f023 0303 	bic.w	r3, r3, #3
 8009de4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009df4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009e08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	621a      	str	r2, [r3, #32]
}
 8009e24:	bf00      	nop
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	031b      	lsls	r3, r3, #12
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009e82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	031b      	lsls	r3, r3, #12
 8009e88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	621a      	str	r2, [r3, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b085      	sub	sp, #20
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	f043 0307 	orr.w	r3, r3, #7
 8009ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	609a      	str	r2, [r3, #8]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	021a      	lsls	r2, r3, #8
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	609a      	str	r2, [r3, #8]
}
 8009f18:	bf00      	nop
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	2201      	movs	r2, #1
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1a      	ldr	r2, [r3, #32]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	43db      	mvns	r3, r3
 8009f46:	401a      	ands	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a1a      	ldr	r2, [r3, #32]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f003 031f 	and.w	r3, r3, #31
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	621a      	str	r2, [r3, #32]
}
 8009f62:	bf00      	nop
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a26      	ldr	r2, [pc, #152]	; (800a014 <TIM_ResetCallback+0xa4>)
 8009f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a25      	ldr	r2, [pc, #148]	; (800a018 <TIM_ResetCallback+0xa8>)
 8009f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a24      	ldr	r2, [pc, #144]	; (800a01c <TIM_ResetCallback+0xac>)
 8009f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a23      	ldr	r2, [pc, #140]	; (800a020 <TIM_ResetCallback+0xb0>)
 8009f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a22      	ldr	r2, [pc, #136]	; (800a024 <TIM_ResetCallback+0xb4>)
 8009f9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a21      	ldr	r2, [pc, #132]	; (800a028 <TIM_ResetCallback+0xb8>)
 8009fa4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a20      	ldr	r2, [pc, #128]	; (800a02c <TIM_ResetCallback+0xbc>)
 8009fac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <TIM_ResetCallback+0xc0>)
 8009fb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a1e      	ldr	r2, [pc, #120]	; (800a034 <TIM_ResetCallback+0xc4>)
 8009fbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <TIM_ResetCallback+0xc8>)
 8009fc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a1c      	ldr	r2, [pc, #112]	; (800a03c <TIM_ResetCallback+0xcc>)
 8009fcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a1b      	ldr	r2, [pc, #108]	; (800a040 <TIM_ResetCallback+0xd0>)
 8009fd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a1a      	ldr	r2, [pc, #104]	; (800a044 <TIM_ResetCallback+0xd4>)
 8009fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a19      	ldr	r2, [pc, #100]	; (800a048 <TIM_ResetCallback+0xd8>)
 8009fe4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a18      	ldr	r2, [pc, #96]	; (800a04c <TIM_ResetCallback+0xdc>)
 8009fec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a17      	ldr	r2, [pc, #92]	; (800a050 <TIM_ResetCallback+0xe0>)
 8009ff4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a16      	ldr	r2, [pc, #88]	; (800a054 <TIM_ResetCallback+0xe4>)
 8009ffc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <TIM_ResetCallback+0xe8>)
 800a004:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	08008e8d 	.word	0x08008e8d
 800a018:	08008ea1 	.word	0x08008ea1
 800a01c:	08008f19 	.word	0x08008f19
 800a020:	08008f2d 	.word	0x08008f2d
 800a024:	08008ec9 	.word	0x08008ec9
 800a028:	08008edd 	.word	0x08008edd
 800a02c:	08008eb5 	.word	0x08008eb5
 800a030:	08008ef1 	.word	0x08008ef1
 800a034:	08008f05 	.word	0x08008f05
 800a038:	08008f41 	.word	0x08008f41
 800a03c:	0800a409 	.word	0x0800a409
 800a040:	0800a41d 	.word	0x0800a41d
 800a044:	0800a431 	.word	0x0800a431
 800a048:	0800a445 	.word	0x0800a445
 800a04c:	0800a459 	.word	0x0800a459
 800a050:	0800a46d 	.word	0x0800a46d
 800a054:	0800a481 	.word	0x0800a481
 800a058:	0800a495 	.word	0x0800a495

0800a05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a070:	2302      	movs	r3, #2
 800a072:	e074      	b.n	800a15e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a34      	ldr	r2, [pc, #208]	; (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d009      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a33      	ldr	r2, [pc, #204]	; (800a170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d004      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a31      	ldr	r2, [pc, #196]	; (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d108      	bne.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a0ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a21      	ldr	r2, [pc, #132]	; (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d022      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f4:	d01d      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a1f      	ldr	r2, [pc, #124]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d018      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a1d      	ldr	r2, [pc, #116]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d013      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a1c      	ldr	r2, [pc, #112]	; (800a180 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00e      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a15      	ldr	r2, [pc, #84]	; (800a170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d009      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a18      	ldr	r2, [pc, #96]	; (800a184 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d004      	beq.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a11      	ldr	r2, [pc, #68]	; (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d10c      	bne.n	800a14c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	4313      	orrs	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	40012c00 	.word	0x40012c00
 800a170:	40013400 	.word	0x40013400
 800a174:	40015000 	.word	0x40015000
 800a178:	40000400 	.word	0x40000400
 800a17c:	40000800 	.word	0x40000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	40014000 	.word	0x40014000

0800a188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e096      	b.n	800a2d2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	041b      	lsls	r3, r3, #16
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a2f      	ldr	r2, [pc, #188]	; (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d009      	beq.n	800a23c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a2d      	ldr	r2, [pc, #180]	; (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d004      	beq.n	800a23c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a2c      	ldr	r2, [pc, #176]	; (800a2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d106      	bne.n	800a24a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a24      	ldr	r2, [pc, #144]	; (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d009      	beq.n	800a268 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a22      	ldr	r2, [pc, #136]	; (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d004      	beq.n	800a268 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a21      	ldr	r2, [pc, #132]	; (800a2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d12b      	bne.n	800a2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a272:	051b      	lsls	r3, r3, #20
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a11      	ldr	r2, [pc, #68]	; (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d009      	beq.n	800a2b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a10      	ldr	r2, [pc, #64]	; (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d004      	beq.n	800a2b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a0e      	ldr	r2, [pc, #56]	; (800a2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d106      	bne.n	800a2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40012c00 	.word	0x40012c00
 800a2e4:	40013400 	.word	0x40013400
 800a2e8:	40015000 	.word	0x40015000

0800a2ec <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <HAL_TIMEx_TISelection+0x1e>
 800a306:	2302      	movs	r3, #2
 800a308:	e073      	b.n	800a3f2 <HAL_TIMEx_TISelection+0x106>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b0c      	cmp	r3, #12
 800a316:	d864      	bhi.n	800a3e2 <HAL_TIMEx_TISelection+0xf6>
 800a318:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <HAL_TIMEx_TISelection+0x34>)
 800a31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31e:	bf00      	nop
 800a320:	0800a355 	.word	0x0800a355
 800a324:	0800a3e3 	.word	0x0800a3e3
 800a328:	0800a3e3 	.word	0x0800a3e3
 800a32c:	0800a3e3 	.word	0x0800a3e3
 800a330:	0800a3a1 	.word	0x0800a3a1
 800a334:	0800a3e3 	.word	0x0800a3e3
 800a338:	0800a3e3 	.word	0x0800a3e3
 800a33c:	0800a3e3 	.word	0x0800a3e3
 800a340:	0800a3b7 	.word	0x0800a3b7
 800a344:	0800a3e3 	.word	0x0800a3e3
 800a348:	0800a3e3 	.word	0x0800a3e3
 800a34c:	0800a3e3 	.word	0x0800a3e3
 800a350:	0800a3cd 	.word	0x0800a3cd
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a35a:	f023 010f 	bic.w	r1, r3, #15
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	430a      	orrs	r2, r1
 800a366:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a24      	ldr	r2, [pc, #144]	; (800a400 <HAL_TIMEx_TISelection+0x114>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d004      	beq.n	800a37c <HAL_TIMEx_TISelection+0x90>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a23      	ldr	r2, [pc, #140]	; (800a404 <HAL_TIMEx_TISelection+0x118>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d108      	bne.n	800a38e <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f042 0201 	orr.w	r2, r2, #1
 800a38a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 800a38c:	e02c      	b.n	800a3e8 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0201 	bic.w	r2, r2, #1
 800a39c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800a39e:	e023      	b.n	800a3e8 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800a3b4:	e018      	b.n	800a3e8 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3bc:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800a3ca:	e00d      	b.n	800a3e8 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800a3e0:	e002      	b.n	800a3e8 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	40014400 	.word	0x40014400
 800a404:	40014800 	.word	0x40014800

0800a408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <__cxa_pure_virtual>:
 800a4a8:	b508      	push	{r3, lr}
 800a4aa:	f000 f80d 	bl	800a4c8 <_ZSt9terminatev>

0800a4ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a4ae:	b508      	push	{r3, lr}
 800a4b0:	4780      	blx	r0
 800a4b2:	f000 f80e 	bl	800a4d2 <abort>
	...

0800a4b8 <_ZSt13get_terminatev>:
 800a4b8:	4b02      	ldr	r3, [pc, #8]	; (800a4c4 <_ZSt13get_terminatev+0xc>)
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	f3bf 8f5b 	dmb	ish
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20000030 	.word	0x20000030

0800a4c8 <_ZSt9terminatev>:
 800a4c8:	b508      	push	{r3, lr}
 800a4ca:	f7ff fff5 	bl	800a4b8 <_ZSt13get_terminatev>
 800a4ce:	f7ff ffee 	bl	800a4ae <_ZN10__cxxabiv111__terminateEPFvvE>

0800a4d2 <abort>:
 800a4d2:	b508      	push	{r3, lr}
 800a4d4:	2006      	movs	r0, #6
 800a4d6:	f000 f85d 	bl	800a594 <raise>
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f7f8 f926 	bl	800272c <_exit>

0800a4e0 <__errno>:
 800a4e0:	4b01      	ldr	r3, [pc, #4]	; (800a4e8 <__errno+0x8>)
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	20000034 	.word	0x20000034

0800a4ec <__libc_init_array>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4d0d      	ldr	r5, [pc, #52]	; (800a524 <__libc_init_array+0x38>)
 800a4f0:	4c0d      	ldr	r4, [pc, #52]	; (800a528 <__libc_init_array+0x3c>)
 800a4f2:	1b64      	subs	r4, r4, r5
 800a4f4:	10a4      	asrs	r4, r4, #2
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	42a6      	cmp	r6, r4
 800a4fa:	d109      	bne.n	800a510 <__libc_init_array+0x24>
 800a4fc:	4d0b      	ldr	r5, [pc, #44]	; (800a52c <__libc_init_array+0x40>)
 800a4fe:	4c0c      	ldr	r4, [pc, #48]	; (800a530 <__libc_init_array+0x44>)
 800a500:	f000 f864 	bl	800a5cc <_init>
 800a504:	1b64      	subs	r4, r4, r5
 800a506:	10a4      	asrs	r4, r4, #2
 800a508:	2600      	movs	r6, #0
 800a50a:	42a6      	cmp	r6, r4
 800a50c:	d105      	bne.n	800a51a <__libc_init_array+0x2e>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	f855 3b04 	ldr.w	r3, [r5], #4
 800a514:	4798      	blx	r3
 800a516:	3601      	adds	r6, #1
 800a518:	e7ee      	b.n	800a4f8 <__libc_init_array+0xc>
 800a51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51e:	4798      	blx	r3
 800a520:	3601      	adds	r6, #1
 800a522:	e7f2      	b.n	800a50a <__libc_init_array+0x1e>
 800a524:	0800a834 	.word	0x0800a834
 800a528:	0800a834 	.word	0x0800a834
 800a52c:	0800a834 	.word	0x0800a834
 800a530:	0800a83c 	.word	0x0800a83c

0800a534 <memset>:
 800a534:	4402      	add	r2, r0
 800a536:	4603      	mov	r3, r0
 800a538:	4293      	cmp	r3, r2
 800a53a:	d100      	bne.n	800a53e <memset+0xa>
 800a53c:	4770      	bx	lr
 800a53e:	f803 1b01 	strb.w	r1, [r3], #1
 800a542:	e7f9      	b.n	800a538 <memset+0x4>

0800a544 <_raise_r>:
 800a544:	291f      	cmp	r1, #31
 800a546:	b538      	push	{r3, r4, r5, lr}
 800a548:	4604      	mov	r4, r0
 800a54a:	460d      	mov	r5, r1
 800a54c:	d904      	bls.n	800a558 <_raise_r+0x14>
 800a54e:	2316      	movs	r3, #22
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a55a:	b112      	cbz	r2, 800a562 <_raise_r+0x1e>
 800a55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a560:	b94b      	cbnz	r3, 800a576 <_raise_r+0x32>
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f830 	bl	800a5c8 <_getpid_r>
 800a568:	462a      	mov	r2, r5
 800a56a:	4601      	mov	r1, r0
 800a56c:	4620      	mov	r0, r4
 800a56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a572:	f000 b817 	b.w	800a5a4 <_kill_r>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d00a      	beq.n	800a590 <_raise_r+0x4c>
 800a57a:	1c59      	adds	r1, r3, #1
 800a57c:	d103      	bne.n	800a586 <_raise_r+0x42>
 800a57e:	2316      	movs	r3, #22
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	2001      	movs	r0, #1
 800a584:	e7e7      	b.n	800a556 <_raise_r+0x12>
 800a586:	2400      	movs	r4, #0
 800a588:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a58c:	4628      	mov	r0, r5
 800a58e:	4798      	blx	r3
 800a590:	2000      	movs	r0, #0
 800a592:	e7e0      	b.n	800a556 <_raise_r+0x12>

0800a594 <raise>:
 800a594:	4b02      	ldr	r3, [pc, #8]	; (800a5a0 <raise+0xc>)
 800a596:	4601      	mov	r1, r0
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	f7ff bfd3 	b.w	800a544 <_raise_r>
 800a59e:	bf00      	nop
 800a5a0:	20000034 	.word	0x20000034

0800a5a4 <_kill_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	; (800a5c4 <_kill_r+0x20>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	f7f8 f8ab 	bl	800270c <_kill>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d102      	bne.n	800a5c0 <_kill_r+0x1c>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	b103      	cbz	r3, 800a5c0 <_kill_r+0x1c>
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20019468 	.word	0x20019468

0800a5c8 <_getpid_r>:
 800a5c8:	f7f8 b898 	b.w	80026fc <_getpid>

0800a5cc <_init>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	bf00      	nop
 800a5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d2:	bc08      	pop	{r3}
 800a5d4:	469e      	mov	lr, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <_fini>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	bf00      	nop
 800a5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5de:	bc08      	pop	{r3}
 800a5e0:	469e      	mov	lr, r3
 800a5e2:	4770      	bx	lr
