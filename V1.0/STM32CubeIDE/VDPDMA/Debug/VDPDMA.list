
VDPDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba2c  0800ba2c  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba2c  0800ba2c  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba2c  0800ba2c  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800ba38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193ec  20000198  0800bbd0  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019584  0800bbd0  00029584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d271  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7a  00000000  00000000  0003d439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  000410b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00042940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dbff  00000000  00000000  00044010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c240  00000000  00000000  00071c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c1b6  00000000  00000000  0008de4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa005  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb0  00000000  00000000  001aa058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000198 	.word	0x20000198
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b868 	.word	0x0800b868

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000019c 	.word	0x2000019c
 8000214:	0800b868 	.word	0x0800b868

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00a fe8f 	bl	800b7d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab2:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000ab4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000abc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b22:	481a      	ldr	r0, [pc, #104]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b24:	f004 f9ec 	bl	8004f00 <HAL_ADC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000b2e:	f000 fff7 	bl	8001b20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000b32:	2306      	movs	r3, #6
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 8000b36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b48:	f005 fd04 	bl	8006554 <HAL_ADCEx_MultiModeConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b52:	f000 ffe5 	bl	8001b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_ADC1_Init+0xfc>)
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b62:	237f      	movs	r3, #127	; 0x7f
 8000b64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b66:	2304      	movs	r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_ADC1_Init+0xf8>)
 8000b74:	f004 fc8a 	bl	800548c <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000b7e:	f000 ffcf 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001b4 	.word	0x200001b4
 8000b90:	04300002 	.word	0x04300002

08000b94 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00a fe15 	bl	800b7d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000ba8:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <MX_ADC2_Init+0xb8>)
 8000baa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000c04:	f004 f97c 	bl	8004f00 <HAL_ADC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000c0e:	f000 ff87 	bl	8001b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_ADC2_Init+0xbc>)
 8000c14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c16:	2306      	movs	r3, #6
 8000c18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c1e:	237f      	movs	r3, #127	; 0x7f
 8000c20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c22:	2304      	movs	r3, #4
 8000c24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_ADC2_Init+0xb4>)
 8000c30:	f004 fc2c 	bl	800548c <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000c3a:	f000 ff71 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000024c 	.word	0x2000024c
 8000c4c:	50000100 	.word	0x50000100
 8000c50:	08600004 	.word	0x08600004

08000c54 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0a0      	sub	sp, #128	; 0x80
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	2254      	movs	r2, #84	; 0x54
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00a fdab 	bl	800b7d0 <memset>
  if(adcHandle->Instance==ADC1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c82:	d16a      	bne.n	8000d5a <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f007 fc9b 	bl	80085d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ca0:	f000 ff3e 	bl	8001b20 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ca4:	4b50      	ldr	r3, [pc, #320]	; (8000de8 <HAL_ADC_MspInit+0x194>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a4f      	ldr	r2, [pc, #316]	; (8000de8 <HAL_ADC_MspInit+0x194>)
 8000cac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cae:	4b4e      	ldr	r3, [pc, #312]	; (8000de8 <HAL_ADC_MspInit+0x194>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d10b      	bne.n	8000cce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a46      	ldr	r2, [pc, #280]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b44      	ldr	r3, [pc, #272]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f006 fcea 	bl	80076d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d00:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d02:	4a3c      	ldr	r2, [pc, #240]	; (8000df4 <HAL_ADC_MspInit+0x1a0>)
 8000d04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d06:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d08:	2205      	movs	r2, #5
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1e:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d36:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d3e:	f006 f963 	bl	8007008 <HAL_DMA_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000d48:	f000 feea 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d50:	655a      	str	r2, [r3, #84]	; 0x54
 8000d52:	4a27      	ldr	r2, [pc, #156]	; (8000df0 <HAL_ADC_MspInit+0x19c>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d58:	e042      	b.n	8000de0 <HAL_ADC_MspInit+0x18c>
  else if(adcHandle->Instance==ADC2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <HAL_ADC_MspInit+0x1a4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d13d      	bne.n	8000de0 <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000d6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f007 fc2b 	bl	80085d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000d80:	f000 fece 	bl	8001b20 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_ADC_MspInit+0x194>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_ADC_MspInit+0x194>)
 8000d8c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_ADC_MspInit+0x194>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d10b      	bne.n	8000dae <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000d9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_ADC_MspInit+0x198>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f006 fc7a 	bl	80076d4 <HAL_GPIO_Init>
}
 8000de0:	bf00      	nop
 8000de2:	3780      	adds	r7, #128	; 0x80
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000344 	.word	0x20000344
 8000dec:	40021000 	.word	0x40021000
 8000df0:	200002e4 	.word	0x200002e4
 8000df4:	40020008 	.word	0x40020008
 8000df8:	50000100 	.word	0x50000100

08000dfc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <MX_COMP1_Init+0x4c>)
 8000e04:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e10:	2260      	movs	r2, #96	; 0x60
 8000e12:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e20:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_COMP1_Init+0x48>)
 8000e30:	f005 fdf8 	bl	8006a24 <HAL_COMP_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 8000e3a:	f000 fe71 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000348 	.word	0x20000348
 8000e48:	40010200 	.word	0x40010200

08000e4c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a24      	ldr	r2, [pc, #144]	; (8000efc <HAL_COMP_MspInit+0xb0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d141      	bne.n	8000ef2 <HAL_COMP_MspInit+0xa6>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_COMP_MspInit+0xb4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_COMP_MspInit+0xb4>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_COMP_MspInit+0xb4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_COMP_MspInit+0xb4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_COMP_MspInit+0xb4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_COMP_MspInit+0xb4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PA4     ------> COMP1_INM
    PA6     ------> COMP1_OUT
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f006 fc0e 	bl	80076d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f006 fbfd 	bl	80076d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eda:	2302      	movs	r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_COMP_MspInit+0xb8>)
 8000eee:	f006 fbf1 	bl	80076d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010200 	.word	0x40010200
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000400 	.word	0x48000400

08000f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6493      	str	r3, [r2, #72]	; 0x48
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6493      	str	r3, [r2, #72]	; 0x48
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6493      	str	r3, [r2, #72]	; 0x48
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_DMA_Init+0x98>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200b      	movs	r0, #11
 8000f5c:	f006 f81f 	bl	8006f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f60:	200b      	movs	r0, #11
 8000f62:	f006 f836 	bl	8006fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200c      	movs	r0, #12
 8000f6c:	f006 f817 	bl	8006f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f70:	200c      	movs	r0, #12
 8000f72:	f006 f82e 	bl	8006fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2038      	movs	r0, #56	; 0x38
 8000f7c:	f006 f80f 	bl	8006f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f80:	2038      	movs	r0, #56	; 0x38
 8000f82:	f006 f826 	bl	8006fd2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	205e      	movs	r0, #94	; 0x5e
 8000f8c:	f006 f807 	bl	8006f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000f90:	205e      	movs	r0, #94	; 0x5e
 8000f92:	f006 f81e 	bl	8006fd2 <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b64      	ldr	r3, [pc, #400]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a63      	ldr	r2, [pc, #396]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b61      	ldr	r3, [pc, #388]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	4b5e      	ldr	r3, [pc, #376]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a5d      	ldr	r2, [pc, #372]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b5b      	ldr	r3, [pc, #364]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b58      	ldr	r3, [pc, #352]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a57      	ldr	r2, [pc, #348]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b55      	ldr	r3, [pc, #340]	; (800114c <MX_GPIO_Init+0x1a8>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <MX_GPIO_Init+0x1a8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a51      	ldr	r2, [pc, #324]	; (800114c <MX_GPIO_Init+0x1a8>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b4f      	ldr	r3, [pc, #316]	; (800114c <MX_GPIO_Init+0x1a8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <MX_GPIO_Init+0x1a8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a4b      	ldr	r2, [pc, #300]	; (800114c <MX_GPIO_Init+0x1a8>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b49      	ldr	r3, [pc, #292]	; (800114c <MX_GPIO_Init+0x1a8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001032:	2200      	movs	r2, #0
 8001034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001038:	4845      	ldr	r0, [pc, #276]	; (8001150 <MX_GPIO_Init+0x1ac>)
 800103a:	f006 fce5 	bl	8007a08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f006 fcdf 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8001050:	4840      	ldr	r0, [pc, #256]	; (8001154 <MX_GPIO_Init+0x1b0>)
 8001052:	f006 fcd9 	bl	8007a08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2104      	movs	r1, #4
 800105a:	483f      	ldr	r0, [pc, #252]	; (8001158 <MX_GPIO_Init+0x1b4>)
 800105c:	f006 fcd4 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	483b      	ldr	r0, [pc, #236]	; (8001154 <MX_GPIO_Init+0x1b0>)
 8001068:	f006 fcce 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_GPIO_Init+0x1ac>)
 8001086:	f006 fb25 	bl	80076d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800108a:	2320      	movs	r3, #32
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001096:	2301      	movs	r3, #1
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f006 fb16 	bl	80076d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80010a8:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <MX_GPIO_Init+0x1b0>)
 80010c2:	f006 fb07 	bl	80076d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010cc:	2311      	movs	r3, #17
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	481d      	ldr	r0, [pc, #116]	; (8001154 <MX_GPIO_Init+0x1b0>)
 80010e0:	f006 faf8 	bl	80076d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <MX_GPIO_Init+0x1b4>)
 80010fc:	f006 faea 	bl	80076d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001100:	2310      	movs	r3, #16
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <MX_GPIO_Init+0x1b0>)
 8001114:	f006 fade 	bl	80076d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_GPIO_Init+0x1b0>)
 8001132:	f006 facf 	bl	80076d4 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_GPIO_Init+0x1b8>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <MX_GPIO_Init+0x1b8>)
 800113c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001140:	6053      	str	r3, [r2, #4]

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000800 	.word	0x48000800
 8001154:	48000400 	.word	0x48000400
 8001158:	48000c00 	.word	0x48000c00
 800115c:	40010000 	.word	0x40010000

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f003 fb98 	bl	8004898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f9f4 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f7ff ff1a 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001170:	f7ff feca 	bl	8000f08 <MX_DMA_Init>
  MX_TIM8_Init();
 8001174:	f002 fc9e 	bl	8003ab4 <MX_TIM8_Init>
  MX_TIM1_Init();
 8001178:	f002 f9c2 	bl	8003500 <MX_TIM1_Init>
  MX_ADC1_Init();
 800117c:	f7ff fc8a 	bl	8000a94 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001180:	f7ff fd08 	bl	8000b94 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001184:	f002 fae0 	bl	8003748 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001188:	f002 fa8a 	bl	80036a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800118c:	f002 fb90 	bl	80038b0 <MX_TIM4_Init>
  MX_COMP1_Init();
 8001190:	f7ff fe34 	bl	8000dfc <MX_COMP1_Init>
  MX_TIM5_Init();
 8001194:	f002 fc54 	bl	8003a40 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001198:	f002 fd46 	bl	8003c28 <MX_TIM16_Init>
  MX_TIM20_Init();
 800119c:	f002 fdc6 	bl	8003d2c <MX_TIM20_Init>
  MX_SPI2_Init();
 80011a0:	f002 f810 	bl	80031c4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 80011a4:	4ba2      	ldr	r3, [pc, #648]	; (8001430 <main+0x2d0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ac:	4aa0      	ldr	r2, [pc, #640]	; (8001430 <main+0x2d0>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
	mysetup();
 80011b4:	f001 fd96 	bl	8002ce4 <mysetup>

	initBitMap();
 80011b8:	f003 f8dc 	bl	8004374 <initBitMap>
	initColorMaps(0.43/0.47, 1.71);
 80011bc:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8001434 <main+0x2d4>
 80011c0:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001438 <main+0x2d8>
 80011c4:	f003 f904 	bl	80043d0 <initColorMaps>

#ifndef PAR_TFT
	swapRGBBytes();
#endif

	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID,
 80011c8:	4a9c      	ldr	r2, [pc, #624]	; (800143c <main+0x2dc>)
 80011ca:	2114      	movs	r1, #20
 80011cc:	489c      	ldr	r0, [pc, #624]	; (8001440 <main+0x2e0>)
 80011ce:	f009 f80f 	bl	800a1f0 <HAL_TIM_RegisterCallback>
			VSyncCallback);

	HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_TX_COMPLETE_CB_ID,
 80011d2:	4a9c      	ldr	r2, [pc, #624]	; (8001444 <main+0x2e4>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	489c      	ldr	r0, [pc, #624]	; (8001448 <main+0x2e8>)
 80011d8:	f007 fd2a 	bl	8008c30 <HAL_SPI_RegisterCallback>
			SPIFullCallback);
	HAL_DMA_RegisterCallback(&hdma_tim20_ch1, HAL_DMA_XFER_CPLT_CB_ID,
 80011dc:	4a9b      	ldr	r2, [pc, #620]	; (800144c <main+0x2ec>)
 80011de:	2100      	movs	r1, #0
 80011e0:	489b      	ldr	r0, [pc, #620]	; (8001450 <main+0x2f0>)
 80011e2:	f006 f93d 	bl	8007460 <HAL_DMA_RegisterCallback>
			GPIODMAComplete);

	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID,
 80011e6:	4a9b      	ldr	r2, [pc, #620]	; (8001454 <main+0x2f4>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	489b      	ldr	r0, [pc, #620]	; (8001458 <main+0x2f8>)
 80011ec:	f004 f888 	bl	8005300 <HAL_ADC_RegisterCallback>
			ADCCallback);
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_HALF_CB_ID,
 80011f0:	4a98      	ldr	r2, [pc, #608]	; (8001454 <main+0x2f4>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	4898      	ldr	r0, [pc, #608]	; (8001458 <main+0x2f8>)
 80011f6:	f004 f883 	bl	8005300 <HAL_ADC_RegisterCallback>
			ADCCallback);

	HAL_COMP_Start(&hcomp1);
 80011fa:	4898      	ldr	r0, [pc, #608]	; (800145c <main+0x2fc>)
 80011fc:	f005 fdac 	bl	8006d58 <HAL_COMP_Start>
	HAL_TIM_Base_Start(&htim4); // hysnc
 8001200:	4897      	ldr	r0, [pc, #604]	; (8001460 <main+0x300>)
 8001202:	f007 fe6f 	bl	8008ee4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1); // sample clock
 8001206:	4897      	ldr	r0, [pc, #604]	; (8001464 <main+0x304>)
 8001208:	f007 fe6c 	bl	8008ee4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3); // vsync
 800120c:	488c      	ldr	r0, [pc, #560]	; (8001440 <main+0x2e0>)
 800120e:	f007 fed9 	bl	8008fc4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8); // Parallel TFT DMA line clock
 8001212:	4895      	ldr	r0, [pc, #596]	; (8001468 <main+0x308>)
 8001214:	f007 fe66 	bl	8008ee4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim20); // Parallel TFT DMA pixel clock
 8001218:	4894      	ldr	r0, [pc, #592]	; (800146c <main+0x30c>)
 800121a:	f007 fe63 	bl	8008ee4 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim2);
 800121e:	4894      	ldr	r0, [pc, #592]	; (8001470 <main+0x310>)
 8001220:	f007 fe60 	bl	8008ee4 <HAL_TIM_Base_Start>

	__HAL_TIM_ENABLE_DMA(&htim20, TIM_DMA_CC1);
 8001224:	4b91      	ldr	r3, [pc, #580]	; (800146c <main+0x30c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	4b90      	ldr	r3, [pc, #576]	; (800146c <main+0x30c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001232:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_OnePulse_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8001234:	2100      	movs	r1, #0
 8001236:	488a      	ldr	r0, [pc, #552]	; (8001460 <main+0x300>)
 8001238:	f008 f876 	bl	8009328 <HAL_TIM_OnePulse_Start>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <main+0xe6>
		/* Starting Error */
		Error_Handler();
 8001242:	f000 fc6d 	bl	8001b20 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8001246:	2100      	movs	r1, #0
 8001248:	4886      	ldr	r0, [pc, #536]	; (8001464 <main+0x304>)
 800124a:	f008 f86d 	bl	8009328 <HAL_TIM_OnePulse_Start>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <main+0xf8>
		/* Starting Error */
		Error_Handler();
 8001254:	f000 fc64 	bl	8001b20 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK) {
 8001258:	2100      	movs	r1, #0
 800125a:	4879      	ldr	r0, [pc, #484]	; (8001440 <main+0x2e0>)
 800125c:	f008 f8e2 	bl	8009424 <HAL_TIM_OnePulse_Start_IT>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <main+0x10a>
		/* Starting Error */
		Error_Handler();
 8001266:	f000 fc5b 	bl	8001b20 <Error_Handler>
	}

	if (HAL_TIM_OnePulse_Start_IT(&htim20, TIM_CHANNEL_1) != HAL_OK) {
 800126a:	2100      	movs	r1, #0
 800126c:	487f      	ldr	r0, [pc, #508]	; (800146c <main+0x30c>)
 800126e:	f008 f8d9 	bl	8009424 <HAL_TIM_OnePulse_Start_IT>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <main+0x11c>
		/* Starting Error */
		Error_Handler();
 8001278:	f000 fc52 	bl	8001b20 <Error_Handler>
	}
	HAL_TIM_OnePulse_Start(&htim8, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	487a      	ldr	r0, [pc, #488]	; (8001468 <main+0x308>)
 8001280:	f008 f852 	bl	8009328 <HAL_TIM_OnePulse_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001284:	213c      	movs	r1, #60	; 0x3c
 8001286:	487a      	ldr	r0, [pc, #488]	; (8001470 <main+0x310>)
 8001288:	f008 fa0e 	bl	80096a8 <HAL_TIM_Encoder_Start>

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 800128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001290:	4978      	ldr	r1, [pc, #480]	; (8001474 <main+0x314>)
 8001292:	4871      	ldr	r0, [pc, #452]	; (8001458 <main+0x2f8>)
 8001294:	f004 ff8a 	bl	80061ac <HAL_ADCEx_MultiModeStart_DMA>

	line = BLANKING_LINES; // Line 0 is when we detect vsync at the end of a frame
 8001298:	4b77      	ldr	r3, [pc, #476]	; (8001478 <main+0x318>)
 800129a:	2227      	movs	r2, #39	; 0x27
 800129c:	801a      	strh	r2, [r3, #0]
	captureState = CAPTURE_STATE_SEEKING_SYNC;
 800129e:	4b77      	ldr	r3, [pc, #476]	; (800147c <main+0x31c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	dmaState = DMA_CAPTURE_STATE_IDLE;
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <main+0x320>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	setupState = SETUP_STATE_IDLE;
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <main+0x324>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	encoderPosition = 0;
 80012b0:	4b75      	ldr	r3, [pc, #468]	; (8001488 <main+0x328>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	encoderChanged = 0;
 80012b6:	4b75      	ldr	r3, [pc, #468]	; (800148c <main+0x32c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	lastPressed = GPIO_PIN_SET;
 80012bc:	4b74      	ldr	r3, [pc, #464]	; (8001490 <main+0x330>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
	encoderButtonChangedTicks = 0;
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <main+0x334>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
	encoderClickedEvent = 0;
 80012c8:	4b73      	ldr	r3, [pc, #460]	; (8001498 <main+0x338>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	encoderLongPressEvent = 0;
 80012ce:	4b73      	ldr	r3, [pc, #460]	; (800149c <main+0x33c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	setupColour = 0;
 80012d4:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <main+0x340>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]

	// set to true otherwise there will be a spurious event raised at startup
	raisedClickedEvent = 1;
 80012da:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <main+0x344>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
	raisedLongPressEvent = 0;
 80012e0:	4b71      	ldr	r3, [pc, #452]	; (80014a8 <main+0x348>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

	rgbBufIdx = 0;
 80012e6:	4b71      	ldr	r3, [pc, #452]	; (80014ac <main+0x34c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
	rgbBufchunk = 0;
 80012ec:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <main+0x350>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	pix = 0;
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <main+0x354>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	801a      	strh	r2, [r3, #0]
	frameReady = 0;
 80012f8:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <main+0x358>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]

	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <main+0x2d0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001306:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <main+0x2d0>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6013      	str	r3, [r2, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		handleEncoderInputs();
 800130e:	f000 fa89 	bl	8001824 <handleEncoderInputs>
		updateSetupState();
 8001312:	f000 fb15 	bl	8001940 <updateSetupState>
		processSetupState();
 8001316:	f000 fb5d 	bl	80019d4 <processSetupState>

		switch (captureState) {
 800131a:	4b58      	ldr	r3, [pc, #352]	; (800147c <main+0x31c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	d826      	bhi.n	8001372 <main+0x212>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <main+0x1cc>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	08001373 	.word	0x08001373
 8001330:	08001345 	.word	0x08001345
 8001334:	08001373 	.word	0x08001373
 8001338:	08001373 	.word	0x08001373
 800133c:	0800134d 	.word	0x0800134d
 8001340:	0800135b 	.word	0x0800135b

		case CAPTURE_STATE_SEEKING_SYNC:
			break;

		case CAPTURE_STATE_FOUND_SYNC:
			captureState = CAPTURE_STATE_START_GRAB;
 8001344:	4b4d      	ldr	r3, [pc, #308]	; (800147c <main+0x31c>)
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]
			break;
 800134a:	e015      	b.n	8001378 <main+0x218>

		case CAPTURE_STATE_GRABBED:
			captureState = CAPTURE_STATE_IDLE;
 800134c:	4b4b      	ldr	r3, [pc, #300]	; (800147c <main+0x31c>)
 800134e:	2205      	movs	r2, #5
 8001350:	701a      	strb	r2, [r3, #0]
			frameReady = 1;
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <main+0x358>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
			break;
 8001358:	e00e      	b.n	8001378 <main+0x218>

		case CAPTURE_STATE_IDLE:

			if (frameReady == 0) {
 800135a:	4b57      	ldr	r3, [pc, #348]	; (80014b8 <main+0x358>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d108      	bne.n	8001376 <main+0x216>
				captureState = CAPTURE_STATE_START_GRAB;
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <main+0x31c>)
 8001366:	2202      	movs	r2, #2
 8001368:	701a      	strb	r2, [r3, #0]
				pix=0;
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <main+0x354>)
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
			}

			break;
 8001370:	e001      	b.n	8001376 <main+0x216>

		default:
			break;
 8001372:	bf00      	nop
 8001374:	e000      	b.n	8001378 <main+0x218>
			break;
 8001376:	bf00      	nop
		}

		switch (dmaState) {
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <main+0x320>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b03      	cmp	r3, #3
 8001380:	f200 80d3 	bhi.w	800152a <main+0x3ca>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <main+0x22c>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013b1 	.word	0x080013b1
 8001394:	0800152b 	.word	0x0800152b
 8001398:	0800140f 	.word	0x0800140f

		case DMA_CAPTURE_STATE_IDLE:
			if (frameReady == 1) {
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <main+0x358>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	f040 80c3 	bne.w	800152e <main+0x3ce>
				dmaState = DMA_STATE_START;
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <main+0x320>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013ae:	e0be      	b.n	800152e <main+0x3ce>
			vsync();
			while(SPI2->SR & SPI_SR_BSY) {
				__NOP();
			}
#else
			vsync();
 80013b0:	f001 fc84 	bl	8002cbc <vsync>
#endif

			rgbBufchunk = 0;
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <main+0x350>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			rgbBufIdx = 0;
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <main+0x34c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
			dmaState = DMA_STATE_RUNNING;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <main+0x320>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	701a      	strb	r2, [r3, #0]
#ifndef PAR_TFT
			HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&rgbBuf, RGB_BUF_CHUNK_BYTES);
#else
			TIM20->DIER &= ~ TIM_DIER_CC1DE;
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <main+0x35c>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4a3c      	ldr	r2, [pc, #240]	; (80014bc <main+0x35c>)
 80013cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013d0:	60d3      	str	r3, [r2, #12]
			TIM20->DIER |= TIM_DIER_CC1DE;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <main+0x35c>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	4a39      	ldr	r2, [pc, #228]	; (80014bc <main+0x35c>)
 80013d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013dc:	60d3      	str	r3, [r2, #12]
			HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 80013de:	4938      	ldr	r1, [pc, #224]	; (80014c0 <main+0x360>)
 80013e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013e4:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <main+0x364>)
 80013e6:	481a      	ldr	r0, [pc, #104]	; (8001450 <main+0x2f0>)
 80013e8:	f005 feb6 	bl	8007158 <HAL_DMA_Start_IT>

			GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <main+0x2d0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <main+0x2d0>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6013      	str	r3, [r2, #0]

			__HAL_TIM_ENABLE(&htim8);
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <main+0x308>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <main+0x308>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
#endif
			break;
 800140c:	e090      	b.n	8001530 <main+0x3d0>

		case DMA_STATE_RUNNING:
			break;

		case DMA_STATE_CHUNK_COMPLETE:
			rgbBufchunk++;
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <main+0x350>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <main+0x350>)
 8001418:	701a      	strb	r2, [r3, #0]

			if (rgbBufchunk == RGB_BUF_CHUNKS) {
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <main+0x350>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d152      	bne.n	80014c8 <main+0x368>
				dmaState = DMA_CAPTURE_STATE_IDLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <main+0x320>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
				frameReady = 0;
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <main+0x358>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
				__HAL_TIM_ENABLE(&htim8);
#endif
				}
			break;
 800142e:	e07f      	b.n	8001530 <main+0x3d0>
 8001430:	48000400 	.word	0x48000400
 8001434:	3fdae148 	.word	0x3fdae148
 8001438:	3f6a3678 	.word	0x3f6a3678
 800143c:	0800171d 	.word	0x0800171d
 8001440:	20018e50 	.word	0x20018e50
 8001444:	0800179d 	.word	0x0800179d
 8001448:	20018bcc 	.word	0x20018bcc
 800144c:	080017bd 	.word	0x080017bd
 8001450:	20019318 	.word	0x20019318
 8001454:	080015ed 	.word	0x080015ed
 8001458:	200001b4 	.word	0x200001b4
 800145c:	20000348 	.word	0x20000348
 8001460:	20018f1c 	.word	0x20018f1c
 8001464:	20018cb8 	.word	0x20018cb8
 8001468:	200190b4 	.word	0x200190b4
 800146c:	2001924c 	.word	0x2001924c
 8001470:	20018d84 	.word	0x20018d84
 8001474:	20018374 	.word	0x20018374
 8001478:	20018b74 	.word	0x20018b74
 800147c:	20018b76 	.word	0x20018b76
 8001480:	20018b78 	.word	0x20018b78
 8001484:	20018b89 	.word	0x20018b89
 8001488:	20018b7d 	.word	0x20018b7d
 800148c:	20018b7c 	.word	0x20018b7c
 8001490:	20018b7e 	.word	0x20018b7e
 8001494:	20018b80 	.word	0x20018b80
 8001498:	20018b87 	.word	0x20018b87
 800149c:	20018b88 	.word	0x20018b88
 80014a0:	20018b84 	.word	0x20018b84
 80014a4:	20018b85 	.word	0x20018b85
 80014a8:	20018b86 	.word	0x20018b86
 80014ac:	2001836c 	.word	0x2001836c
 80014b0:	20018370 	.word	0x20018370
 80014b4:	20018b7a 	.word	0x20018b7a
 80014b8:	20018b77 	.word	0x20018b77
 80014bc:	40015000 	.word	0x40015000
 80014c0:	2000036c 	.word	0x2000036c
 80014c4:	48000814 	.word	0x48000814
				dmaState = DMA_STATE_RUNNING;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <main+0x3d4>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	701a      	strb	r2, [r3, #0]
				TIM20->DIER &= ~ TIM_DIER_CC1DE;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <main+0x3d8>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <main+0x3d8>)
 80014d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014d8:	60d3      	str	r3, [r2, #12]
				TIM20->DIER |= TIM_DIER_CC1DE;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <main+0x3d8>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <main+0x3d8>)
 80014e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e4:	60d3      	str	r3, [r2, #12]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <main+0x3dc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <main+0x3e0>)
 80014f8:	4413      	add	r3, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <main+0x3e4>)
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <main+0x3e8>)
 8001504:	f005 fe28 	bl	8007158 <HAL_DMA_Start_IT>
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <main+0x3ec>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <main+0x3ec>)
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6013      	str	r3, [r2, #0]
				__HAL_TIM_ENABLE(&htim8);
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <main+0x3f0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <main+0x3f0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
			break;
 8001528:	e002      	b.n	8001530 <main+0x3d0>

		default:
			break;
 800152a:	bf00      	nop
 800152c:	e6ef      	b.n	800130e <main+0x1ae>
			break;
 800152e:	bf00      	nop
		handleEncoderInputs();
 8001530:	e6ed      	b.n	800130e <main+0x1ae>
 8001532:	bf00      	nop
 8001534:	20018b78 	.word	0x20018b78
 8001538:	40015000 	.word	0x40015000
 800153c:	20018370 	.word	0x20018370
 8001540:	2000036c 	.word	0x2000036c
 8001544:	48000814 	.word	0x48000814
 8001548:	20019318 	.word	0x20019318
 800154c:	48000400 	.word	0x48000400
 8001550:	200190b4 	.word	0x200190b4

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	2238      	movs	r2, #56	; 0x38
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f00a f934 	bl	800b7d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001576:	f44f 7000 	mov.w	r0, #512	; 0x200
 800157a:	f006 fa5d 	bl	8007a38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001582:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001588:	2302      	movs	r3, #2
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158c:	2303      	movs	r3, #3
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001590:	2301      	movs	r3, #1
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001594:	2320      	movs	r3, #32
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001598:	2304      	movs	r3, #4
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800159c:	2302      	movs	r3, #2
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fae9 	bl	8007b80 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80015b4:	f000 fab4 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015bc:	2303      	movs	r3, #3
 80015be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2103      	movs	r1, #3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f006 fded 	bl	80081b0 <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015dc:	f000 faa0 	bl	8001b20 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80015e0:	f006 ff84 	bl	80084ec <HAL_RCC_EnableCSS>
}
 80015e4:	bf00      	nop
 80015e6:	3750      	adds	r7, #80	; 0x50
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <ADCCallback>:

/* USER CODE BEGIN 4 */

void ADCCallback(ADC_HandleTypeDef *hadc) {
 80015ec:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	register uint8_t y;
	register uint8_t ry;
	register uint16_t bits;
	register uint8_t b;
	register uint16_t pixel = pix;
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <ADCCallback+0x108>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29c      	uxth	r4, r3
	register uint16_t i = PIXELS_PER_LINE;
 80015fc:	f44f 7680 	mov.w	r6, #256	; 0x100
	line++;
 8001600:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <ADCCallback+0x10c>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b21b      	sxth	r3, r3
 8001606:	b29b      	uxth	r3, r3
 8001608:	3301      	adds	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <ADCCallback+0x10c>)
 8001610:	801a      	strh	r2, [r3, #0]
	if (line > FRAME_LINES)
 8001612:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <ADCCallback+0x10c>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b21b      	sxth	r3, r3
 8001618:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800161c:	db02      	blt.n	8001624 <ADCCallback+0x38>
		line = 1;
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <ADCCallback+0x10c>)
 8001620:	2201      	movs	r2, #1
 8001622:	801a      	strh	r2, [r3, #0]

	if (captureState != CAPTURE_STATE_GRABBING)
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <ADCCallback+0x110>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b03      	cmp	r3, #3
 800162c:	d15b      	bne.n	80016e6 <ADCCallback+0xfa>
		return;

	if (line > FIRST_VISIBLE_LINE && line < (LAST_VISIBLE_LINE + 2)) { // don't capture the previous line - it was part of frame blanking
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <ADCCallback+0x10c>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b21b      	sxth	r3, r3
 8001634:	2b28      	cmp	r3, #40	; 0x28
 8001636:	dd4e      	ble.n	80016d6 <ADCCallback+0xea>
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <ADCCallback+0x10c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b21b      	sxth	r3, r3
 800163e:	2be8      	cmp	r3, #232	; 0xe8
 8001640:	dc49      	bgt.n	80016d6 <ADCCallback+0xea>

		while (i > 0) {
 8001642:	e046      	b.n	80016d2 <ADCCallback+0xe6>

			y = (((uint16_t*) adcbuf)[pixel] & 0xff) >> (8 - ADC_RESOLUTION_BITS);
 8001644:	4623      	mov	r3, r4
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <ADCCallback+0x114>)
 800164a:	4413      	add	r3, r2
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	109b      	asrs	r3, r3, #2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001656:	fa5f f883 	uxtb.w	r8, r3
			ry = (((uint16_t*) adcbuf)[pixel] >> (16 - ADC_RESOLUTION_BITS));
 800165a:	4623      	mov	r3, r4
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4a28      	ldr	r2, [pc, #160]	; (8001700 <ADCCallback+0x114>)
 8001660:	4413      	add	r3, r2
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	0a9b      	lsrs	r3, r3, #10
 8001666:	b29b      	uxth	r3, r3
 8001668:	b2dd      	uxtb	r5, r3

			bits = YMap[y] & RYMap[ry];
 800166a:	4642      	mov	r2, r8
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <ADCCallback+0x118>)
 800166e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001672:	4629      	mov	r1, r5
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <ADCCallback+0x11c>)
 8001676:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800167a:	4013      	ands	r3, r2
 800167c:	fa1f f883 	uxth.w	r8, r3

			b = bitMap[bits >> 8];
 8001680:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <ADCCallback+0x120>)
 800168a:	5c9d      	ldrb	r5, [r3, r2]
			if(b == 0) {
 800168c:	2d00      	cmp	r5, #0
 800168e:	d104      	bne.n	800169a <ADCCallback+0xae>
				b = bitMap[bits & 0xff];
 8001690:	4643      	mov	r3, r8
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <ADCCallback+0x120>)
 8001696:	5cd5      	ldrb	r5, [r2, r3]
 8001698:	e002      	b.n	80016a0 <ADCCallback+0xb4>
			} else {
				b+=8;
 800169a:	f105 0308 	add.w	r3, r5, #8
 800169e:	b2dd      	uxtb	r5, r3
			}

			if (rgbBufIdx < RGB_BUF_LEN) {
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <ADCCallback+0x124>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80016a8:	d20d      	bcs.n	80016c6 <ADCCallback+0xda>

				rgbBuf[rgbBufIdx] = rgbMap[b];
 80016aa:	4629      	mov	r1, r5
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <ADCCallback+0x124>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <ADCCallback+0x128>)
 80016b2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <ADCCallback+0x12c>)
 80016b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				rgbBufIdx++;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <ADCCallback+0x124>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <ADCCallback+0x124>)
 80016c4:	6013      	str	r3, [r2, #0]
			}
			pixel++;
 80016c6:	4623      	mov	r3, r4
 80016c8:	3301      	adds	r3, #1
 80016ca:	b29c      	uxth	r4, r3
			i--;
 80016cc:	4633      	mov	r3, r6
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29e      	uxth	r6, r3
		while (i > 0) {
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	d1b6      	bne.n	8001644 <ADCCallback+0x58>
		}
	}

	if (pixel >= 512) {
 80016d6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80016da:	d300      	bcc.n	80016de <ADCCallback+0xf2>
		pixel = 0;
 80016dc:	2400      	movs	r4, #0
	}

	pix = pixel;
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <ADCCallback+0x108>)
 80016e0:	4622      	mov	r2, r4
 80016e2:	801a      	strh	r2, [r3, #0]
 80016e4:	e000      	b.n	80016e8 <ADCCallback+0xfc>
		return;
 80016e6:	bf00      	nop
}
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20018b7a 	.word	0x20018b7a
 80016f8:	20018b74 	.word	0x20018b74
 80016fc:	20018b76 	.word	0x20018b76
 8001700:	20018374 	.word	0x20018374
 8001704:	20019378 	.word	0x20019378
 8001708:	200193f8 	.word	0x200193f8
 800170c:	20019478 	.word	0x20019478
 8001710:	2001836c 	.word	0x2001836c
 8001714:	20000004 	.word	0x20000004
 8001718:	2000036c 	.word	0x2000036c

0800171c <VSyncCallback>:

void VSyncCallback(TIM_HandleTypeDef *htim) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

	line = LAST_VISIBLE_LINE + BOTTOM_BORDER;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <VSyncCallback+0x68>)
 8001726:	f240 1207 	movw	r2, #263	; 0x107
 800172a:	801a      	strh	r2, [r3, #0]
	pix = 0;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <VSyncCallback+0x6c>)
 800172e:	2200      	movs	r2, #0
 8001730:	801a      	strh	r2, [r3, #0]

	switch (captureState) {
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <VSyncCallback+0x70>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <VSyncCallback+0x50>
 800173c:	2b03      	cmp	r3, #3
 800173e:	dc1b      	bgt.n	8001778 <VSyncCallback+0x5c>
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <VSyncCallback+0x2e>
 8001744:	2b02      	cmp	r3, #2
 8001746:	d004      	beq.n	8001752 <VSyncCallback+0x36>
	case CAPTURE_STATE_GRABBING:
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		captureState = CAPTURE_STATE_GRABBED;

	default:
		break;
 8001748:	e016      	b.n	8001778 <VSyncCallback+0x5c>
		captureState = CAPTURE_STATE_FOUND_SYNC;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <VSyncCallback+0x70>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
		break;
 8001750:	e013      	b.n	800177a <VSyncCallback+0x5e>
		captureState = CAPTURE_STATE_GRABBING;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <VSyncCallback+0x70>)
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
		rgbBufIdx = 0;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <VSyncCallback+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	490c      	ldr	r1, [pc, #48]	; (8001794 <VSyncCallback+0x78>)
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <VSyncCallback+0x7c>)
 8001766:	f004 fd21 	bl	80061ac <HAL_ADCEx_MultiModeStart_DMA>
		break;
 800176a:	e006      	b.n	800177a <VSyncCallback+0x5e>
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <VSyncCallback+0x7c>)
 800176e:	f004 fddf 	bl	8006330 <HAL_ADCEx_MultiModeStop_DMA>
		captureState = CAPTURE_STATE_GRABBED;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <VSyncCallback+0x70>)
 8001774:	2204      	movs	r2, #4
 8001776:	701a      	strb	r2, [r3, #0]
		break;
 8001778:	bf00      	nop

	}
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20018b74 	.word	0x20018b74
 8001788:	20018b7a 	.word	0x20018b7a
 800178c:	20018b76 	.word	0x20018b76
 8001790:	2001836c 	.word	0x2001836c
 8001794:	20018374 	.word	0x20018374
 8001798:	200001b4 	.word	0x200001b4

0800179c <SPIFullCallback>:

void SPIFullCallback(SPI_HandleTypeDef *spi) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SPIFullCallback+0x1c>)
 80017a6:	2203      	movs	r2, #3
 80017a8:	701a      	strb	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20018b78 	.word	0x20018b78

080017bc <GPIODMAComplete>:

void GPIODMAComplete(DMA_HandleTypeDef *dma) {
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <GPIODMAComplete+0x5c>)
 80017c6:	2203      	movs	r2, #3
 80017c8:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim8);
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <GPIODMAComplete+0x60>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <GPIODMAComplete+0x3e>
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <GPIODMAComplete+0x60>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a1a      	ldr	r2, [r3, #32]
 80017e0:	f244 4344 	movw	r3, #17476	; 0x4444
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <GPIODMAComplete+0x3e>
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <GPIODMAComplete+0x60>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <GPIODMAComplete+0x60>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <GPIODMAComplete+0x64>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <GPIODMAComplete+0x64>)
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20018b78 	.word	0x20018b78
 800181c:	200190b4 	.word	0x200190b4
 8001820:	48000400 	.word	0x48000400

08001824 <handleEncoderInputs>:

void handleEncoderInputs() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	encoderLongPressEvent = 0;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <handleEncoderInputs+0xf4>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	encoderClickedEvent = 0;
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <handleEncoderInputs+0xf8>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]

	uint8_t pressed = HAL_GPIO_ReadPin(ENCODER_PORT, ENCODER_PIN) == GPIO_PIN_RESET;
 8001836:	2110      	movs	r1, #16
 8001838:	4839      	ldr	r0, [pc, #228]	; (8001920 <handleEncoderInputs+0xfc>)
 800183a:	f006 f8cd 	bl	80079d8 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	71fb      	strb	r3, [r7, #7]

	if (((htim2.Instance->CNT & 0xff) >> 1) != encoderPosition) {
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <handleEncoderInputs+0x100>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001858:	4a33      	ldr	r2, [pc, #204]	; (8001928 <handleEncoderInputs+0x104>)
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <handleEncoderInputs+0x58>
		encoderPosition = (htim2.Instance->CNT & 0XFF) >> 1;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <handleEncoderInputs+0x100>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <handleEncoderInputs+0x104>)
 8001872:	701a      	strb	r2, [r3, #0]
		encoderChanged = 1;
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <handleEncoderInputs+0x108>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e002      	b.n	8001882 <handleEncoderInputs+0x5e>
	} else {
		encoderChanged = 0;
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <handleEncoderInputs+0x108>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	}

	if (pressed != lastPressed) {
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <handleEncoderInputs+0x10c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	429a      	cmp	r2, r3
 800188a:	d007      	beq.n	800189c <handleEncoderInputs+0x78>
		lastPressed = pressed;
 800188c:	4a28      	ldr	r2, [pc, #160]	; (8001930 <handleEncoderInputs+0x10c>)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	7013      	strb	r3, [r2, #0]
		encoderButtonChangedTicks = HAL_GetTick();
 8001892:	f003 f86d 	bl	8004970 <HAL_GetTick>
 8001896:	4603      	mov	r3, r0
 8001898:	4a26      	ldr	r2, [pc, #152]	; (8001934 <handleEncoderInputs+0x110>)
 800189a:	6013      	str	r3, [r2, #0]
	}

	uint32_t deltaT = HAL_GetTick() - encoderButtonChangedTicks;
 800189c:	f003 f868 	bl	8004970 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <handleEncoderInputs+0x110>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	603b      	str	r3, [r7, #0]

	if (pressed && deltaT > ENCODER_BUTTON_DEBOUNCE) {
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <handleEncoderInputs+0x98>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b14      	cmp	r3, #20
 80018b4:	d902      	bls.n	80018bc <handleEncoderInputs+0x98>
		raisedClickedEvent = 0;
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <handleEncoderInputs+0x114>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
	}

	if (!pressed && deltaT > ENCODER_BUTTON_DEBOUNCE) {
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d114      	bne.n	80018ec <handleEncoderInputs+0xc8>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b14      	cmp	r3, #20
 80018c6:	d911      	bls.n	80018ec <handleEncoderInputs+0xc8>
		if(raisedClickedEvent == 0) {
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <handleEncoderInputs+0x114>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11f      	bne.n	8001910 <handleEncoderInputs+0xec>
			raisedClickedEvent = 1;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <handleEncoderInputs+0x114>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
			if(!raisedLongPressEvent) {
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <handleEncoderInputs+0x118>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <handleEncoderInputs+0xc0>
				// only actually raise the event if it is not following a long click
				encoderClickedEvent = 1;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <handleEncoderInputs+0xf8>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
			}
			raisedLongPressEvent = 0;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <handleEncoderInputs+0x118>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
		if(raisedClickedEvent == 0) {
 80018ea:	e011      	b.n	8001910 <handleEncoderInputs+0xec>
		}
	} else if (pressed && deltaT > ENCODER_BUTTON_LONG_PRESS) {
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00e      	beq.n	8001910 <handleEncoderInputs+0xec>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018f8:	d90a      	bls.n	8001910 <handleEncoderInputs+0xec>
		if(raisedLongPressEvent == 0) {
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <handleEncoderInputs+0x118>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <handleEncoderInputs+0xec>
			raisedLongPressEvent = 1;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <handleEncoderInputs+0x118>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
			encoderLongPressEvent = 1;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <handleEncoderInputs+0xf4>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800190e:	e7ff      	b.n	8001910 <handleEncoderInputs+0xec>
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20018b88 	.word	0x20018b88
 800191c:	20018b87 	.word	0x20018b87
 8001920:	48000400 	.word	0x48000400
 8001924:	20018d84 	.word	0x20018d84
 8001928:	20018b7d 	.word	0x20018b7d
 800192c:	20018b7c 	.word	0x20018b7c
 8001930:	20018b7e 	.word	0x20018b7e
 8001934:	20018b80 	.word	0x20018b80
 8001938:	20018b85 	.word	0x20018b85
 800193c:	20018b86 	.word	0x20018b86

08001940 <updateSetupState>:

void updateSetupState() {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

	if (encoderLongPressEvent) {
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <updateSetupState+0x88>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <updateSetupState+0x24>
		if(setupState == SETUP_STATE_IDLE) {
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <updateSetupState+0x8c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <updateSetupState+0x1c>
			setupState = SETUP_STATE_TUNE_SAMPLE_TIME;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <updateSetupState+0x8c>)
 8001956:	2207      	movs	r2, #7
 8001958:	701a      	strb	r2, [r3, #0]
			default:
				break;
			}
		}
	}
}
 800195a:	e030      	b.n	80019be <updateSetupState+0x7e>
			setupState = SETUP_STATE_CANCEL;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <updateSetupState+0x8c>)
 800195e:	2208      	movs	r2, #8
 8001960:	701a      	strb	r2, [r3, #0]
}
 8001962:	e02c      	b.n	80019be <updateSetupState+0x7e>
		if (encoderClickedEvent) {
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <updateSetupState+0x90>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d025      	beq.n	80019b8 <updateSetupState+0x78>
			switch (setupState) {
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <updateSetupState+0x8c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b06      	cmp	r3, #6
 8001972:	d823      	bhi.n	80019bc <updateSetupState+0x7c>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <updateSetupState+0x3c>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	08001999 	.word	0x08001999
 8001980:	080019bd 	.word	0x080019bd
 8001984:	080019a1 	.word	0x080019a1
 8001988:	080019bd 	.word	0x080019bd
 800198c:	080019a9 	.word	0x080019a9
 8001990:	080019bd 	.word	0x080019bd
 8001994:	080019b1 	.word	0x080019b1
				setupState = SETUP_STATE_INIT;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <updateSetupState+0x8c>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
				break;
 800199e:	e00e      	b.n	80019be <updateSetupState+0x7e>
				setupState = SETUP_STATE_INIT_Y;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <updateSetupState+0x8c>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	701a      	strb	r2, [r3, #0]
				break;
 80019a6:	e00a      	b.n	80019be <updateSetupState+0x7e>
				setupState = SETUP_STATE_INIT_RY;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <updateSetupState+0x8c>)
 80019aa:	2205      	movs	r2, #5
 80019ac:	701a      	strb	r2, [r3, #0]
				break;
 80019ae:	e006      	b.n	80019be <updateSetupState+0x7e>
				setupState = SETUP_STATE_SELECT_COLOUR;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <updateSetupState+0x8c>)
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
				break;
 80019b6:	e002      	b.n	80019be <updateSetupState+0x7e>
		}
 80019b8:	bf00      	nop
 80019ba:	e000      	b.n	80019be <updateSetupState+0x7e>
				break;
 80019bc:	bf00      	nop
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20018b88 	.word	0x20018b88
 80019cc:	20018b89 	.word	0x20018b89
 80019d0:	20018b87 	.word	0x20018b87

080019d4 <processSetupState>:

void processSetupState() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

	switch(setupState) {
 80019d8:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <processSetupState+0x11c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	2b07      	cmp	r3, #7
 80019e0:	d87c      	bhi.n	8001adc <processSetupState+0x108>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <processSetupState+0x14>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	08001a15 	.word	0x08001a15
 80019ec:	08001a47 	.word	0x08001a47
 80019f0:	08001a69 	.word	0x08001a69
 80019f4:	08001a79 	.word	0x08001a79
 80019f8:	08001a99 	.word	0x08001a99
 80019fc:	08001aa9 	.word	0x08001aa9
 8001a00:	08001ac9 	.word	0x08001ac9
 8001a04:	08001a09 	.word	0x08001a09
	case SETUP_STATE_CANCEL:
		cancelSetup();
 8001a08:	f000 f87e 	bl	8001b08 <cancelSetup>
		setupState = SETUP_STATE_IDLE;
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <processSetupState+0x11c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
		break;
 8001a12:	e06a      	b.n	8001aea <processSetupState+0x116>
	case SETUP_STATE_INIT:
		initSetup();
 8001a14:	f000 f87e 	bl	8001b14 <initSetup>
		setupState = SETUP_STATE_SELECT_COLOUR;
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <processSetupState+0x11c>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
		htim2.Instance->CNT = 0;
 8001a1e:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <processSetupState+0x120>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
		encoderPosition = 0;
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <processSetupState+0x124>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
		setupColour = (encoderPosition % 16);
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <processSetupState+0x124>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <processSetupState+0x128>)
 8001a38:	701a      	strb	r2, [r3, #0]
		initSetupColour(setupColour);
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <processSetupState+0x128>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 f9c2 	bl	8002dc8 <initSetupColour>
		break;
 8001a44:	e051      	b.n	8001aea <processSetupState+0x116>
		// no break
	case SETUP_STATE_SELECT_COLOUR:
		if(encoderChanged) {
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <processSetupState+0x12c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d048      	beq.n	8001ae0 <processSetupState+0x10c>
			setupColour = (encoderPosition % 16);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <processSetupState+0x124>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <processSetupState+0x128>)
 8001a5a:	701a      	strb	r2, [r3, #0]
			initSetupColour(setupColour);
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <processSetupState+0x128>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 f9b1 	bl	8002dc8 <initSetupColour>
		}
		break;
 8001a66:	e03b      	b.n	8001ae0 <processSetupState+0x10c>
	case SETUP_STATE_INIT_Y:
		htim2.Instance->CNT = ADC_RESOLUTION_STEPS / 2;
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <processSetupState+0x120>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
		setupState = SETUP_STATE_TUNE_Y;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <processSetupState+0x11c>)
 8001a72:	2204      	movs	r2, #4
 8001a74:	701a      	strb	r2, [r3, #0]
		break;
 8001a76:	e038      	b.n	8001aea <processSetupState+0x116>
	case SETUP_STATE_TUNE_Y:
		if(encoderChanged) {
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <processSetupState+0x12c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d031      	beq.n	8001ae4 <processSetupState+0x110>
			tuneY(setupColour, encoderPosition % ADC_RESOLUTION_STEPS);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <processSetupState+0x128>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <processSetupState+0x124>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f001 fab1 	bl	8002ff8 <tuneY>
		}
		break;
 8001a96:	e025      	b.n	8001ae4 <processSetupState+0x110>
	case SETUP_STATE_INIT_RY:
		htim2.Instance->CNT = ADC_RESOLUTION_STEPS / 2;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <processSetupState+0x120>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
		setupState = SETUP_STATE_TUNE_RY;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <processSetupState+0x11c>)
 8001aa2:	2206      	movs	r2, #6
 8001aa4:	701a      	strb	r2, [r3, #0]
		break;
 8001aa6:	e020      	b.n	8001aea <processSetupState+0x116>
	case SETUP_STATE_TUNE_RY:
		if(encoderChanged) {
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <processSetupState+0x12c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <processSetupState+0x114>
			tuneRY(setupColour, encoderPosition % ADC_RESOLUTION_STEPS);
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <processSetupState+0x128>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <processSetupState+0x124>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f001 faed 	bl	80030a0 <tuneRY>
		}
		break;
 8001ac6:	e00f      	b.n	8001ae8 <processSetupState+0x114>
	case SETUP_STATE_TUNE_SAMPLE_TIME:
		// adjust where the ADC sampling starts
		htim4.Instance->CCR1 = 1148 + (encoderPosition % 16) - 8;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <processSetupState+0x124>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	f203 4274 	addw	r2, r3, #1140	; 0x474
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <processSetupState+0x130>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001ada:	e006      	b.n	8001aea <processSetupState+0x116>
	default:
		break;
 8001adc:	bf00      	nop
 8001ade:	e004      	b.n	8001aea <processSetupState+0x116>
		break;
 8001ae0:	bf00      	nop
 8001ae2:	e002      	b.n	8001aea <processSetupState+0x116>
		break;
 8001ae4:	bf00      	nop
 8001ae6:	e000      	b.n	8001aea <processSetupState+0x116>
		break;
 8001ae8:	bf00      	nop
	}
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20018b89 	.word	0x20018b89
 8001af4:	20018d84 	.word	0x20018d84
 8001af8:	20018b7d 	.word	0x20018b7d
 8001afc:	20018b84 	.word	0x20018b84
 8001b00:	20018b7c 	.word	0x20018b7c
 8001b04:	20018f1c 	.word	0x20018f1c

08001b08 <cancelSetup>:

void cancelSetup() {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	disableSetupGUI();
 8001b0c:	f001 f944 	bl	8002d98 <disableSetupGUI>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <initSetup>:

void initSetup() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	enableSetupGUI();
 8001b18:	f001 f904 	bl	8002d24 <enableSetupGUI>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <_ZN6GFX_HWC1Ev>:
#ifndef INC_GFX_HW_H_
#define INC_GFX_HW_H_

#include "main.h"

class GFX_HW {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <_ZN6GFX_HWC1Ev+0x1c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	0800b9e8 	.word	0x0800b9e8

08001b4c <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>:
#include "GFX_HW.h"

class GFX_HW_PAR16: public GFX_HW {
public:

	GFX_HW_PAR16(
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	807b      	strh	r3, [r7, #2]
			GPIO_TypeDef *dataPort,
			GPIO_TypeDef *csPort, uint16_t csPin,
			GPIO_TypeDef *dcPort, uint16_t dcPin,
			GPIO_TypeDef *wrPort, uint16_t wrPin,
			GPIO_TypeDef *rdPort, uint16_t rdPin,
			GPIO_TypeDef *rsPort, uint16_t rsPin) {
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ffe5 	bl	8001b2c <_ZN6GFX_HWC1Ev>
 8001b62:	4a28      	ldr	r2, [pc, #160]	; (8001c04 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t+0xb8>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	601a      	str	r2, [r3, #0]

		_dataPort = dataPort;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	605a      	str	r2, [r3, #4]
		_csPort = csPort; _csPin = csPin;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	839a      	strh	r2, [r3, #28]
		_dcPort = dcPort; _dcPin = dcPin;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8bba      	ldrh	r2, [r7, #28]
 8001b84:	83da      	strh	r2, [r3, #30]
		_wrPort = wrPort; _wrPin = wrPin;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b90:	841a      	strh	r2, [r3, #32]
		_rdPort = rdPort; _rdPin = rdPin;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001b9c:	845a      	strh	r2, [r3, #34]	; 0x22
		_rsPort = rsPort; _rsPin = rsPin;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ba8:	849a      	strh	r2, [r3, #36]	; 0x24
		high(_dcPort, _dcPin);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8bdb      	ldrh	r3, [r3, #30]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fc74 	bl	80024a2 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_csPort, _csPin);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8b9b      	ldrh	r3, [r3, #28]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fc6c 	bl	80024a2 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_wrPort, _wrPin);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8c1b      	ldrh	r3, [r3, #32]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fc64 	bl	80024a2 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rdPort, _rdPin);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6959      	ldr	r1, [r3, #20]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001be2:	461a      	mov	r2, r3
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fc5c 	bl	80024a2 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rsPort, _rsPin);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6999      	ldr	r1, [r3, #24]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fc54 	bl	80024a2 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
	}
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0800b99c 	.word	0x0800b99c

08001c08 <_ZN12GFX_HW_PAR165resetEm>:

	virtual void reset(uint32_t delay_us) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]

		high(_dcPort, _dcPin);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3338      	adds	r3, #56	; 0x38
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d1      	ldr	r1, [r2, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	8bd2      	ldrh	r2, [r2, #30]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
		high(_csPort, _csPin);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6891      	ldr	r1, [r2, #8]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	8b92      	ldrh	r2, [r2, #28]
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3338      	adds	r3, #56	; 0x38
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6911      	ldr	r1, [r2, #16]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	8c12      	ldrh	r2, [r2, #32]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
		high(_rdPort, _rdPin);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3338      	adds	r3, #56	; 0x38
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6951      	ldr	r1, [r2, #20]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
		high(_rsPort, _rsPin);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3338      	adds	r3, #56	; 0x38
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6991      	ldr	r1, [r2, #24]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3

		low(_rsPort, _rsPin);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3334      	adds	r3, #52	; 0x34
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6991      	ldr	r1, [r2, #24]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
		MY_Delay1();
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3340      	adds	r3, #64	; 0x40
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	4798      	blx	r3
		high(_rsPort, _rsPin);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3338      	adds	r3, #56	; 0x38
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6991      	ldr	r1, [r2, #24]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
	}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZN12GFX_HW_PAR1611sendCommandEhPKhh>:



	virtual void sendCommand(uint8_t commandByte, const uint8_t *dataBytes =
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	72fb      	strb	r3, [r7, #11]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	72bb      	strb	r3, [r7, #10]
	NULL, uint8_t numDataBytes = 0) {
		MY_Delay();
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	333c      	adds	r3, #60	; 0x3c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	4798      	blx	r3
		low(_csPort, _csPin);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3334      	adds	r3, #52	; 0x34
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6891      	ldr	r1, [r2, #8]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	8b92      	ldrh	r2, [r2, #28]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	4798      	blx	r3
		MY_Delay();
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	333c      	adds	r3, #60	; 0x3c
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3334      	adds	r3, #52	; 0x34
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	68d1      	ldr	r1, [r2, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	8bd2      	ldrh	r2, [r2, #30]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	4798      	blx	r3
		MY_Delay();
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	333c      	adds	r3, #60	; 0x3c
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	4798      	blx	r3
		low(_wrPort, _wrPin);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3334      	adds	r3, #52	; 0x34
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	6911      	ldr	r1, [r2, #16]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	8c12      	ldrh	r2, [r2, #32]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	7afa      	ldrb	r2, [r7, #11]
 8001d2c:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	333c      	adds	r3, #60	; 0x3c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	4798      	blx	r3

		high(_wrPort, _wrPin);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3338      	adds	r3, #56	; 0x38
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6911      	ldr	r1, [r2, #16]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	8c12      	ldrh	r2, [r2, #32]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	4798      	blx	r3
		MY_Delay();
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	333c      	adds	r3, #60	; 0x3c
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3338      	adds	r3, #56	; 0x38
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	68d1      	ldr	r1, [r2, #12]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	8bd2      	ldrh	r2, [r2, #30]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3324      	adds	r3, #36	; 0x24
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	7aba      	ldrb	r2, [r7, #10]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	4798      	blx	r3

		high(_csPort, _csPin);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3338      	adds	r3, #56	; 0x38
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	6891      	ldr	r1, [r2, #8]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	8b92      	ldrh	r2, [r2, #28]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	4798      	blx	r3
	}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZN12GFX_HW_PAR1613sendCommand16EtPKhh>:

	virtual void sendCommand16(uint16_t commandWord, const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	461a      	mov	r2, r3
 8001da6:	460b      	mov	r3, r1
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	4613      	mov	r3, r2
 8001dac:	727b      	strb	r3, [r7, #9]
		MY_Delay();
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	4798      	blx	r3
		low(_csPort, _csPin);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3334      	adds	r3, #52	; 0x34
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	6891      	ldr	r1, [r2, #8]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	8b92      	ldrh	r2, [r2, #28]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	4798      	blx	r3
		MY_Delay();
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	333c      	adds	r3, #60	; 0x3c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3334      	adds	r3, #52	; 0x34
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	68d1      	ldr	r1, [r2, #12]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	8bd2      	ldrh	r2, [r2, #30]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	897a      	ldrh	r2, [r7, #10]
 8001df4:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3334      	adds	r3, #52	; 0x34
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6911      	ldr	r1, [r2, #16]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	8c12      	ldrh	r2, [r2, #32]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	4798      	blx	r3
		MY_Delay();
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	333c      	adds	r3, #60	; 0x3c
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3338      	adds	r3, #56	; 0x38
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6911      	ldr	r1, [r2, #16]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	8c12      	ldrh	r2, [r2, #32]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	4798      	blx	r3

		MY_Delay();
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	333c      	adds	r3, #60	; 0x3c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	68d1      	ldr	r1, [r2, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	8bd2      	ldrh	r2, [r2, #30]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3324      	adds	r3, #36	; 0x24
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	7a7a      	ldrb	r2, [r7, #9]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	4798      	blx	r3

		high(_csPort, _csPin);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3338      	adds	r3, #56	; 0x38
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6891      	ldr	r1, [r2, #8]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	8b92      	ldrh	r2, [r2, #28]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	4798      	blx	r3
	}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZN12GFX_HW_PAR1613sendCommand16Ett>:

	virtual void sendCommand16(uint16_t commandWord, uint16_t data) {
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]
 8001e82:	4613      	mov	r3, r2
 8001e84:	803b      	strh	r3, [r7, #0]

		MY_Delay1();
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3340      	adds	r3, #64	; 0x40
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3334      	adds	r3, #52	; 0x34
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d1      	ldr	r1, [r2, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	8bd2      	ldrh	r2, [r2, #30]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
		MY_Delay1();
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3340      	adds	r3, #64	; 0x40
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
		low(_csPort, _csPin);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3334      	adds	r3, #52	; 0x34
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6891      	ldr	r1, [r2, #8]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	8b92      	ldrh	r2, [r2, #28]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
		MY_Delay1();
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3340      	adds	r3, #64	; 0x40
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3334      	adds	r3, #52	; 0x34
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	8c12      	ldrh	r2, [r2, #32]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
		MY_Delay1();
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3340      	adds	r3, #64	; 0x40
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3338      	adds	r3, #56	; 0x38
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6911      	ldr	r1, [r2, #16]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	8c12      	ldrh	r2, [r2, #32]
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3

		MY_Delay1();
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3340      	adds	r3, #64	; 0x40
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3338      	adds	r3, #56	; 0x38
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68d1      	ldr	r1, [r2, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	8bd2      	ldrh	r2, [r2, #30]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
		MY_Delay1();
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3340      	adds	r3, #64	; 0x40
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3

		_dataPort->ODR = data;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	883a      	ldrh	r2, [r7, #0]
 8001f40:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3334      	adds	r3, #52	; 0x34
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6911      	ldr	r1, [r2, #16]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	8c12      	ldrh	r2, [r2, #32]
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
		MY_Delay1();
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3340      	adds	r3, #64	; 0x40
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3338      	adds	r3, #56	; 0x38
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6911      	ldr	r1, [r2, #16]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	8c12      	ldrh	r2, [r2, #32]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3

		high(_csPort, _csPin);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3338      	adds	r3, #56	; 0x38
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6891      	ldr	r1, [r2, #8]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	8b92      	ldrh	r2, [r2, #28]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3338      	adds	r3, #56	; 0x38
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68d1      	ldr	r1, [r2, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	8bd2      	ldrh	r2, [r2, #30]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3

		MY_Delay();
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	333c      	adds	r3, #60	; 0x3c
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
	}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_ZN12GFX_HW_PAR1612readcommand8Ehh>:

	virtual uint8_t readcommand8(uint8_t commandByte, uint8_t index = 0) {
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	70bb      	strb	r3, [r7, #2]

		uint8_t result = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
		low(_dcPort, _dcPin);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3334      	adds	r3, #52	; 0x34
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68d1      	ldr	r1, [r2, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	8bd2      	ldrh	r2, [r2, #30]
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
		MY_Delay();
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	333c      	adds	r3, #60	; 0x3c
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
		low(_csPort, _csPin);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3334      	adds	r3, #52	; 0x34
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6891      	ldr	r1, [r2, #8]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	8b92      	ldrh	r2, [r2, #28]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
		low(_wrPort, _wrPin);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3334      	adds	r3, #52	; 0x34
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6911      	ldr	r1, [r2, #16]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	8c12      	ldrh	r2, [r2, #32]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	333c      	adds	r3, #60	; 0x3c
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3338      	adds	r3, #56	; 0x38
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6911      	ldr	r1, [r2, #16]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	8c12      	ldrh	r2, [r2, #32]
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
		MY_Delay();
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	333c      	adds	r3, #60	; 0x3c
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68d1      	ldr	r1, [r2, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	8bd2      	ldrh	r2, [r2, #30]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

		while(index > 0) {
 800205e:	78bb      	ldrb	r3, [r7, #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d027      	beq.n	80020b4 <_ZN12GFX_HW_PAR1612readcommand8Ehh+0x102>

			MY_Delay();
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	333c      	adds	r3, #60	; 0x3c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
			low(_rdPort, _rdPin);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3334      	adds	r3, #52	; 0x34
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6951      	ldr	r1, [r2, #20]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
			MY_Delay();
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	333c      	adds	r3, #60	; 0x3c
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3

			result = _dataPort->IDR & 0x00ff;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	73fb      	strb	r3, [r7, #15]
			index--;
 8002098:	78bb      	ldrb	r3, [r7, #2]
 800209a:	3b01      	subs	r3, #1
 800209c:	70bb      	strb	r3, [r7, #2]

			high(_rdPort, _rdPin);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6951      	ldr	r1, [r2, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
		while(index > 0) {
 80020b2:	e7d4      	b.n	800205e <_ZN12GFX_HW_PAR1612readcommand8Ehh+0xac>
		}

		high(_csPort, _csPin);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3338      	adds	r3, #56	; 0x38
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6891      	ldr	r1, [r2, #8]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	8b92      	ldrh	r2, [r2, #28]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
		MY_Delay();
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	333c      	adds	r3, #60	; 0x3c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
		_dataPort->MODER = 0x5555;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f245 5255 	movw	r2, #21845	; 0x5555
 80020dc:	601a      	str	r2, [r3, #0]

		return result;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
	}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN12GFX_HW_PAR1613readcommand16Eh>:

	virtual uint16_t readcommand16(uint8_t commandByte) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]

		uint16_t result = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	81fb      	strh	r3, [r7, #14]
		low(_dcPort, _dcPin);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3334      	adds	r3, #52	; 0x34
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68d1      	ldr	r1, [r2, #12]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	8bd2      	ldrh	r2, [r2, #30]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
		MY_Delay();
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	333c      	adds	r3, #60	; 0x3c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
		low(_csPort, _csPin);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3334      	adds	r3, #52	; 0x34
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6891      	ldr	r1, [r2, #8]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	8b92      	ldrh	r2, [r2, #28]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
		low(_wrPort, _wrPin);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3334      	adds	r3, #52	; 0x34
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6911      	ldr	r1, [r2, #16]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	8c12      	ldrh	r2, [r2, #32]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	333c      	adds	r3, #60	; 0x3c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3338      	adds	r3, #56	; 0x38
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6911      	ldr	r1, [r2, #16]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	8c12      	ldrh	r2, [r2, #32]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
		MY_Delay();
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	333c      	adds	r3, #60	; 0x3c
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68d1      	ldr	r1, [r2, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	8bd2      	ldrh	r2, [r2, #30]
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
		MY_Delay();
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	333c      	adds	r3, #60	; 0x3c
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

		MY_Delay();
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	333c      	adds	r3, #60	; 0x3c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
		low(_rdPort, _rdPin);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3334      	adds	r3, #52	; 0x34
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6951      	ldr	r1, [r2, #20]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
		MY_Delay();
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	333c      	adds	r3, #60	; 0x3c
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3

		result = _dataPort->IDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	81fb      	strh	r3, [r7, #14]

		high(_rdPort, _rdPin);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3338      	adds	r3, #56	; 0x38
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6951      	ldr	r1, [r2, #20]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
		high(_csPort, _csPin);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3338      	adds	r3, #56	; 0x38
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6891      	ldr	r1, [r2, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	8b92      	ldrh	r2, [r2, #28]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
		MY_Delay();
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	333c      	adds	r3, #60	; 0x3c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
		_dataPort->MODER = 0x55555555;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800220c:	601a      	str	r2, [r3, #0]

		return result;
 800220e:	89fb      	ldrh	r3, [r7, #14]
	}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN12GFX_HW_PAR1612beginCommandEv>:

	virtual void beginCommand() {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
		MY_Delay();
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	333c      	adds	r3, #60	; 0x3c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
		low(_dcPort, _dcPin);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3334      	adds	r3, #52	; 0x34
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68d1      	ldr	r1, [r2, #12]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	8bd2      	ldrh	r2, [r2, #30]
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
		MY_Delay();
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	333c      	adds	r3, #60	; 0x3c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
		low(_csPort, _csPin);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3334      	adds	r3, #52	; 0x34
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6891      	ldr	r1, [r2, #8]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	8b92      	ldrh	r2, [r2, #28]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
		MY_Delay();
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	333c      	adds	r3, #60	; 0x3c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
	}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN12GFX_HW_PAR1612writeCommandEh>:

	virtual void writeCommand(uint8_t commandByte) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
		low(_dcPort, _dcPin);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3334      	adds	r3, #52	; 0x34
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68d1      	ldr	r1, [r2, #12]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	8bd2      	ldrh	r2, [r2, #30]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
		MY_Delay();
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	333c      	adds	r3, #60	; 0x3c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
		write(commandByte);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3328      	adds	r3, #40	; 0x28
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	4611      	mov	r1, r2
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3338      	adds	r3, #56	; 0x38
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68d1      	ldr	r1, [r2, #12]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	8bd2      	ldrh	r2, [r2, #30]
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
		MY_Delay();
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	333c      	adds	r3, #60	; 0x3c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
	}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZN12GFX_HW_PAR1614writeCommand16Et>:

	virtual void writeCommand16(uint16_t commandWord) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
		low(_wrPort, _wrPin);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3334      	adds	r3, #52	; 0x34
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6911      	ldr	r1, [r2, #16]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	8c12      	ldrh	r2, [r2, #32]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
		_dataPort->ODR = commandWord;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	333c      	adds	r3, #60	; 0x3c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
		high(_wrPort, _wrPin);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3338      	adds	r3, #56	; 0x38
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6911      	ldr	r1, [r2, #16]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	8c12      	ldrh	r2, [r2, #32]
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3

		MY_Delay();
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	333c      	adds	r3, #60	; 0x3c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
		high(_dcPort, _dcPin);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3338      	adds	r3, #56	; 0x38
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68d1      	ldr	r1, [r2, #12]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	8bd2      	ldrh	r2, [r2, #30]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
		MY_Delay();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	333c      	adds	r3, #60	; 0x3c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
	}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZN12GFX_HW_PAR169writeDataEPKhh>:

	virtual void writeData(const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	71fb      	strb	r3, [r7, #7]

		while(numDataBytes > 0) {
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02a      	beq.n	80023be <_ZN12GFX_HW_PAR169writeDataEPKhh+0x6a>
			MY_Delay();
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	333c      	adds	r3, #60	; 0x3c
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	4798      	blx	r3

			low(_wrPort, _wrPin);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3334      	adds	r3, #52	; 0x34
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	6911      	ldr	r1, [r2, #16]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	8c12      	ldrh	r2, [r2, #32]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	4798      	blx	r3

			_dataPort->ODR = *dataBytes++ & 0x00ff;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	615a      	str	r2, [r3, #20]
			numDataBytes--;
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	3b01      	subs	r3, #1
 800239a:	71fb      	strb	r3, [r7, #7]

			MY_Delay();
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	333c      	adds	r3, #60	; 0x3c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	4798      	blx	r3
			high(_wrPort, _wrPin);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3338      	adds	r3, #56	; 0x38
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6911      	ldr	r1, [r2, #16]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	8c12      	ldrh	r2, [r2, #32]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	4798      	blx	r3
		while(numDataBytes > 0) {
 80023bc:	e7d1      	b.n	8002362 <_ZN12GFX_HW_PAR169writeDataEPKhh+0xe>
		}
	}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_ZN12GFX_HW_PAR165writeEh>:

	virtual void write(uint8_t data) {
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
		writeData(&data, 1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3324      	adds	r3, #36	; 0x24
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1cf9      	adds	r1, r7, #3
 80023dc:	2201      	movs	r2, #1
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
	}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_ZN12GFX_HW_PAR167write16Et>:

	virtual void write16(uint16_t data) {
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
		_dataPort->ODR = data;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3334      	adds	r3, #52	; 0x34
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6911      	ldr	r1, [r2, #16]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	8c12      	ldrh	r2, [r2, #32]
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
		__NOP();
 8002412:	bf00      	nop
		__NOP();
 8002414:	bf00      	nop
		__NOP();
 8002416:	bf00      	nop
		__NOP();
 8002418:	bf00      	nop
		__NOP();
 800241a:	bf00      	nop
		__NOP();
 800241c:	bf00      	nop
		high(_wrPort, _wrPin);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6911      	ldr	r1, [r2, #16]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	8c12      	ldrh	r2, [r2, #32]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
		__NOP();
 8002432:	bf00      	nop
		__NOP();
 8002434:	bf00      	nop
		__NOP();
 8002436:	bf00      	nop
		__NOP();
 8002438:	bf00      	nop
		__NOP();
 800243a:	bf00      	nop
		__NOP();
 800243c:	bf00      	nop
		__NOP();
 800243e:	bf00      	nop
		__NOP();
 8002440:	bf00      	nop
	}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_ZN12GFX_HW_PAR163endEv>:

	virtual void end() {
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
		high(_csPort, _csPin);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3338      	adds	r3, #56	; 0x38
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6891      	ldr	r1, [r2, #8]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	8b92      	ldrh	r2, [r2, #28]
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3338      	adds	r3, #56	; 0x38
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d1      	ldr	r1, [r2, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	8bd2      	ldrh	r2, [r2, #30]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
	}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_ZN12GFX_HW_PAR163lowEP12GPIO_TypeDeft>:

	virtual inline void low(GPIO_TypeDef *port, uint16_t pin) {
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
		port->BRR = (uint32_t)pin;
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>:

	virtual inline void high(GPIO_TypeDef *port, uint16_t pin) {
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
		port->BSRR = (uint32_t)pin;
 80024b0:	88fa      	ldrh	r2, [r7, #6]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	619a      	str	r2, [r3, #24]
	}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_ZN12GFX_HW_PAR168MY_DelayEv>:

	virtual void MY_Delay() {
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
		__NOP();
 80024ca:	bf00      	nop
	}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_ZN12GFX_HW_PAR169MY_Delay1Ev>:

	virtual void MY_Delay1() {
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
		__NOP();
 80024e0:	bf00      	nop
	}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <_ZN3GFXC1ER6GFX_HW>:
#endif

class GFX {
public:

	GFX(GFX_HW &hw) : _hw(hw) {
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <_ZN3GFXC1ER6GFX_HW+0x24>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	605a      	str	r2, [r3, #4]
	}
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	0800b978 	.word	0x0800b978

08002518 <_ZN3GFX19drawFilledRectangleEttttt>:

	virtual void drawPixel(uint16_t x, uint16_t y, uint16_t color) =0;
	virtual void pushPixel(uint16_t color) =0;
	virtual void end()=0;

	void drawFilledRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	460b      	mov	r3, r1
 800252c:	813b      	strh	r3, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
		setAddressWindow(x,y,width,height);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	681c      	ldr	r4, [r3, #0]
 800253a:	88f8      	ldrh	r0, [r7, #6]
 800253c:	893a      	ldrh	r2, [r7, #8]
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4603      	mov	r3, r0
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	47a0      	blx	r4
		for(uint32_t pixel = 0; pixel < width * height; pixel++) {
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	461a      	mov	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4293      	cmp	r3, r2
 800255c:	d20b      	bcs.n	8002576 <_ZN3GFX19drawFilledRectangleEttttt+0x5e>
			pushPixel(color);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002568:	4611      	mov	r1, r2
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	4798      	blx	r3
		for(uint32_t pixel = 0; pixel < width * height; pixel++) {
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e7eb      	b.n	800254e <_ZN3GFX19drawFilledRectangleEttttt+0x36>
		}
		end();
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3318      	adds	r3, #24
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	4798      	blx	r3
	}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}

0800258a <_ZN3GFX12fillTriangleEsssssst>:
	    @param    x2  Vertex #2 x coordinate
	    @param    y2  Vertex #2 y coordinate
	    @param    color 16-bit 5-6-5 Color to fill/draw with
	*/
	/**************************************************************************/
	void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 800258a:	b580      	push	{r7, lr}
 800258c:	b092      	sub	sp, #72	; 0x48
 800258e:	af02      	add	r7, sp, #8
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	4608      	mov	r0, r1
 8002594:	4611      	mov	r1, r2
 8002596:	461a      	mov	r2, r3
 8002598:	4603      	mov	r3, r0
 800259a:	817b      	strh	r3, [r7, #10]
 800259c:	460b      	mov	r3, r1
 800259e:	813b      	strh	r3, [r7, #8]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80fb      	strh	r3, [r7, #6]
	                                int16_t x2, int16_t y2, uint16_t color) {

	  int16_t a, b, y, last;

	  // Sort coordinates by Y order (y2 >= y1 >= y0)
	  if (y0 > y1) {
 80025a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80025a8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dd0d      	ble.n	80025cc <_ZN3GFX12fillTriangleEsssssst+0x42>
	    _swap_int16_t(y0, y1);
 80025b0:	893b      	ldrh	r3, [r7, #8]
 80025b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80025b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80025c0:	897b      	ldrh	r3, [r7, #10]
 80025c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	817b      	strh	r3, [r7, #10]
 80025c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025ca:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y1 > y2) {
 80025cc:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80025d0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dd11      	ble.n	80025fc <_ZN3GFX12fillTriangleEsssssst+0x72>
	    _swap_int16_t(y2, y1);
 80025d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80025de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025e2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80025e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x2, x1);
 80025ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025f0:	853b      	strh	r3, [r7, #40]	; 0x28
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80025f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025fa:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y0 > y1) {
 80025fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002600:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002604:	429a      	cmp	r2, r3
 8002606:	dd0d      	ble.n	8002624 <_ZN3GFX12fillTriangleEsssssst+0x9a>
	    _swap_int16_t(y0, y1);
 8002608:	893b      	ldrh	r3, [r7, #8]
 800260a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800260c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002614:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 8002618:	897b      	ldrh	r3, [r7, #10]
 800261a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	817b      	strh	r3, [r7, #10]
 8002620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002622:	80fb      	strh	r3, [r7, #6]
	  }

	  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8002624:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002628:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800262c:	429a      	cmp	r2, r3
 800262e:	d138      	bne.n	80026a2 <_ZN3GFX12fillTriangleEsssssst+0x118>
	    a = b = x0;
 8002630:	897b      	ldrh	r3, [r7, #10]
 8002632:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002634:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002636:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    if (x1 < a)
 8002638:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800263c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002640:	429a      	cmp	r2, r3
 8002642:	da02      	bge.n	800264a <_ZN3GFX12fillTriangleEsssssst+0xc0>
	      a = x1;
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002648:	e007      	b.n	800265a <_ZN3GFX12fillTriangleEsssssst+0xd0>
	    else if (x1 > b)
 800264a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800264e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002652:	429a      	cmp	r2, r3
 8002654:	dd01      	ble.n	800265a <_ZN3GFX12fillTriangleEsssssst+0xd0>
	      b = x1;
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    if (x2 < a)
 800265a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800265e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002662:	429a      	cmp	r2, r3
 8002664:	da03      	bge.n	800266e <_ZN3GFX12fillTriangleEsssssst+0xe4>
	      a = x2;
 8002666:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800266a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800266c:	e008      	b.n	8002680 <_ZN3GFX12fillTriangleEsssssst+0xf6>
	    else if (x2 > b)
 800266e:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8002672:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002676:	429a      	cmp	r2, r3
 8002678:	dd02      	ble.n	8002680 <_ZN3GFX12fillTriangleEsssssst+0xf6>
	      b = x2;
 800267a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    writeFastHLine(a, y0, b - a + 1, color);
 8002680:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8002682:	8938      	ldrh	r0, [r7, #8]
 8002684:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002686:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	b29b      	uxth	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	4602      	mov	r2, r0
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8df 	bl	800285e <_ZN3GFX14writeFastHLineEtttt>
	    return;
 80026a0:	e0da      	b.n	8002858 <_ZN3GFX12fillTriangleEsssssst+0x2ce>
	  }

	  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80026ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	843b      	strh	r3, [r7, #32]
 80026b8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80026bc:	897b      	ldrh	r3, [r7, #10]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	83fb      	strh	r3, [r7, #30]
 80026c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80026c8:	893b      	ldrh	r3, [r7, #8]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	83bb      	strh	r3, [r7, #28]
	          dx12 = x2 - x1, dy12 = y2 - y1;
 80026d0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	837b      	strh	r3, [r7, #26]
 80026dc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80026e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	833b      	strh	r3, [r7, #24]
	  int32_t sa = 0, sb = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	2300      	movs	r3, #0
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
	  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	  // is included here (and second loop will be skipped, avoiding a /0
	  // error there), otherwise scanline y1 is skipped here and handled
	  // in the second loop...which also avoids a /0 error here if y0=y1
	  // (flat-topped triangle).
	  if (y1 == y2)
 80026f2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80026f6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d103      	bne.n	8002706 <_ZN3GFX12fillTriangleEsssssst+0x17c>
	    last = y1; // Include y1 scanline
 80026fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002702:	873b      	strh	r3, [r7, #56]	; 0x38
 8002704:	e004      	b.n	8002710 <_ZN3GFX12fillTriangleEsssssst+0x186>
	  else
	    last = y1 - 1; // Skip it
 8002706:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800270a:	3b01      	subs	r3, #1
 800270c:	b29b      	uxth	r3, r3
 800270e:	873b      	strh	r3, [r7, #56]	; 0x38

	  for (y = y0; y <= last; y++) {
 8002710:	893b      	ldrh	r3, [r7, #8]
 8002712:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002714:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8002718:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800271c:	429a      	cmp	r2, r3
 800271e:	dc40      	bgt.n	80027a2 <_ZN3GFX12fillTriangleEsssssst+0x218>
	    a = x0 + sa / dy01;
 8002720:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002726:	fb92 f3f3 	sdiv	r3, r2, r3
 800272a:	b29a      	uxth	r2, r3
 800272c:	897b      	ldrh	r3, [r7, #10]
 800272e:	4413      	add	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 8002734:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800273a:	fb92 f3f3 	sdiv	r3, r2, r3
 800273e:	b29a      	uxth	r2, r3
 8002740:	897b      	ldrh	r3, [r7, #10]
 8002742:	4413      	add	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx01;
 8002748:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800274c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274e:	4413      	add	r3, r2
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 8002752:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002758:	4413      	add	r3, r2
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 800275c:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8002760:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002764:	429a      	cmp	r2, r3
 8002766:	dd05      	ble.n	8002774 <_ZN3GFX12fillTriangleEsssssst+0x1ea>
	      _swap_int16_t(a, b);
 8002768:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800276a:	82fb      	strh	r3, [r7, #22]
 800276c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800276e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002770:	8afb      	ldrh	r3, [r7, #22]
 8002772:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    writeFastHLine(a, y, b - a + 1, color);
 8002774:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8002776:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 8002778:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800277a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	4602      	mov	r2, r0
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f865 	bl	800285e <_ZN3GFX14writeFastHLineEtttt>
	  for (y = y0; y <= last; y++) {
 8002794:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	877b      	strh	r3, [r7, #58]	; 0x3a
 80027a0:	e7b8      	b.n	8002714 <_ZN3GFX12fillTriangleEsssssst+0x18a>
	  }

	  // For lower part of triangle, find scanline crossings for segments
	  // 0-2 and 1-2.  This loop is skipped if y1=y2.
	  sa = (int32_t)dx12 * (y - y1);
 80027a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027a6:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80027aa:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80027ae:	1a8a      	subs	r2, r1, r2
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
	  sb = (int32_t)dx02 * (y - y0);
 80027b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027ba:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80027be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80027c2:	1a8a      	subs	r2, r1, r2
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
	  for (; y <= y2; y++) {
 80027ca:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80027ce:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dc40      	bgt.n	8002858 <_ZN3GFX12fillTriangleEsssssst+0x2ce>
	    a = x1 + sa / dy12;
 80027d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4413      	add	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 80027ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	4413      	add	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx12;
 80027fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002804:	4413      	add	r3, r2
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 8002808:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	4413      	add	r3, r2
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 8002812:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8002816:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800281a:	429a      	cmp	r2, r3
 800281c:	dd05      	ble.n	800282a <_ZN3GFX12fillTriangleEsssssst+0x2a0>
	      _swap_int16_t(a, b);
 800281e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002820:	82bb      	strh	r3, [r7, #20]
 8002822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002824:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002826:	8abb      	ldrh	r3, [r7, #20]
 8002828:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    writeFastHLine(a, y, b - a + 1, color);
 800282a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800282c:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 800282e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002830:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	b29b      	uxth	r3, r3
 8002836:	3301      	adds	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	4602      	mov	r2, r0
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f80a 	bl	800285e <_ZN3GFX14writeFastHLineEtttt>
	  for (; y <= y2; y++) {
 800284a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	b29b      	uxth	r3, r3
 8002854:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002856:	e7b8      	b.n	80027ca <_ZN3GFX12fillTriangleEsssssst+0x240>
	  }
	}
 8002858:	3740      	adds	r7, #64	; 0x40
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_ZN3GFX14writeFastHLineEtttt>:

	void writeFastHLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color) {
 800285e:	b590      	push	{r4, r7, lr}
 8002860:	b089      	sub	sp, #36	; 0x24
 8002862:	af02      	add	r7, sp, #8
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	4608      	mov	r0, r1
 8002868:	4611      	mov	r1, r2
 800286a:	461a      	mov	r2, r3
 800286c:	4603      	mov	r3, r0
 800286e:	817b      	strh	r3, [r7, #10]
 8002870:	460b      	mov	r3, r1
 8002872:	813b      	strh	r3, [r7, #8]
 8002874:	4613      	mov	r3, r2
 8002876:	80fb      	strh	r3, [r7, #6]
		// use setAddrWindow and pushPixel to do this as fast as possible
		setAddressWindow(x, y, length,1);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	681c      	ldr	r4, [r3, #0]
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	893a      	ldrh	r2, [r7, #8]
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	2001      	movs	r0, #1
 8002888:	9000      	str	r0, [sp, #0]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	47a0      	blx	r4
		for(uint16_t pixel = 0; pixel < length; pixel++) {
 800288e:	2300      	movs	r3, #0
 8002890:	82fb      	strh	r3, [r7, #22]
 8002892:	8afa      	ldrh	r2, [r7, #22]
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20b      	bcs.n	80028b2 <_ZN3GFX14writeFastHLineEtttt+0x54>
			pushPixel(color);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028a4:	4611      	mov	r1, r2
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	4798      	blx	r3
		for(uint16_t pixel = 0; pixel < length; pixel++) {
 80028aa:	8afb      	ldrh	r3, [r7, #22]
 80028ac:	3301      	adds	r3, #1
 80028ae:	82fb      	strh	r3, [r7, #22]
 80028b0:	e7ef      	b.n	8002892 <_ZN3GFX14writeFastHLineEtttt+0x34>
		}
		end();
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3318      	adds	r3, #24
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	4798      	blx	r3
	}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
	...

080028c8 <_ZN11GFX_ILI9325C1ER6GFX_HW>:
// clang-format on

class GFX_ILI9325: public GFX {
public:

	GFX_ILI9325(GFX_HW &hw) :
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
			GFX(hw) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fe0a 	bl	80024f0 <_ZN3GFXC1ER6GFX_HW>
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <_ZN11GFX_ILI9325C1ER6GFX_HW+0x2c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	731a      	strb	r2, [r3, #12]
	}
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	0800b954 	.word	0x0800b954

080028f8 <_ZN11GFX_ILI93254initEv>:

	virtual void init() {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

		uint16_t a, d, i;
		i = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	81fb      	strh	r3, [r7, #14]

		_hw.reset(300);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
		HAL_Delay(30);
 8002918:	201e      	movs	r0, #30
 800291a:	f002 f835 	bl	8004988 <HAL_Delay>

		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	2b65      	cmp	r3, #101	; 0x65
 8002922:	d826      	bhi.n	8002972 <_ZN11GFX_ILI93254initEv+0x7a>
			a = ILI932x_regValues[i++];
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	81fa      	strh	r2, [r7, #14]
 800292a:	461a      	mov	r2, r3
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <_ZN11GFX_ILI93254initEv+0x90>)
 800292e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002932:	81bb      	strh	r3, [r7, #12]
			d = ILI932x_regValues[i++];
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	81fa      	strh	r2, [r7, #14]
 800293a:	461a      	mov	r2, r3
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <_ZN11GFX_ILI93254initEv+0x90>)
 800293e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002942:	817b      	strh	r3, [r7, #10]
			if (a == TFTLCD_DELAY)
 8002944:	89bb      	ldrh	r3, [r7, #12]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d105      	bne.n	8002956 <_ZN11GFX_ILI93254initEv+0x5e>
				HAL_Delay(d * 4);
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f002 f81a 	bl	8004988 <HAL_Delay>
 8002954:	e009      	b.n	800296a <_ZN11GFX_ILI93254initEv+0x72>
			else
				_hw.sendCommand16(a, d);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6858      	ldr	r0, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	897a      	ldrh	r2, [r7, #10]
 8002966:	89b9      	ldrh	r1, [r7, #12]
 8002968:	4798      	blx	r3
			HAL_Delay(10);
 800296a:	200a      	movs	r0, #10
 800296c:	f002 f80c 	bl	8004988 <HAL_Delay>
		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8002970:	e7d5      	b.n	800291e <_ZN11GFX_ILI93254initEv+0x26>
		}

		//uint16_t r = _hw.readcommand16(0);

		_width = ILI9325_TFTWIDTH;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002978:	811a      	strh	r2, [r3, #8]
		_height = ILI9325_TFTHEIGHT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	22f0      	movs	r2, #240	; 0xf0
 800297e:	815a      	strh	r2, [r3, #10]
	}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	0800b880 	.word	0x0800b880

0800298c <_ZN11GFX_ILI93253clsEv>:

	virtual void cls() {
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

	}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN11GFX_ILI932511setRotationEh>:

	virtual void setRotation(uint8_t m) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
		_rotation = m % 4; // can't be higher than 3
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	731a      	strb	r2, [r3, #12]

		uint16_t cmd = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	81fb      	strh	r3, [r7, #14]

		switch (_rotation) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7b1b      	ldrb	r3, [r3, #12]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d837      	bhi.n	8002a34 <_ZN11GFX_ILI932511setRotationEh+0x94>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <_ZN11GFX_ILI932511setRotationEh+0x2c>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029f3 	.word	0x080029f3
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002a1f 	.word	0x08002a1f
		case 0:
			cmd = 0x1030;
 80029dc:	f241 0330 	movw	r3, #4144	; 0x1030
 80029e0:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029e8:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	22f0      	movs	r2, #240	; 0xf0
 80029ee:	815a      	strh	r2, [r3, #10]
			break;
 80029f0:	e020      	b.n	8002a34 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 1:
			cmd = 0x1028;
 80029f2:	f241 0328 	movw	r3, #4136	; 0x1028
 80029f6:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	22f0      	movs	r2, #240	; 0xf0
 80029fc:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a04:	815a      	strh	r2, [r3, #10]
			break;
 8002a06:	e015      	b.n	8002a34 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 2:
			cmd = 0x1000;
 8002a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0c:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a14:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	22f0      	movs	r2, #240	; 0xf0
 8002a1a:	815a      	strh	r2, [r3, #10]
			break;
 8002a1c:	e00a      	b.n	8002a34 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 3:
			cmd = 0x1018;
 8002a1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a22:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	22f0      	movs	r2, #240	; 0xf0
 8002a28:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a30:	815a      	strh	r2, [r3, #10]
			break;
 8002a32:	bf00      	nop
		}

		_hw.sendCommand16(ILI932X_ENTRY_MOD, cmd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6858      	ldr	r0, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	89fa      	ldrh	r2, [r7, #14]
 8002a44:	2103      	movs	r1, #3
 8002a46:	4798      	blx	r3
		HAL_Delay(10);
 8002a48:	200a      	movs	r0, #10
 8002a4a:	f001 ff9d 	bl	8004988 <HAL_Delay>
	}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop

08002a58 <_ZN11GFX_ILI932516setAddressWindowEtttt>:

	virtual void setAddressWindow(uint16_t x, uint16_t y, uint16_t width,
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
			uint16_t height) {

		uint16_t t, l, w, h;

		switch (_rotation) {
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	7b1b      	ldrb	r3, [r3, #12]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d84c      	bhi.n	8002b14 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbc>
 8002a7a:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <_ZN11GFX_ILI932516setAddressWindowEtttt+0x28>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002aa3 	.word	0x08002aa3
 8002a88:	08002acd 	.word	0x08002acd
 8002a8c:	08002af7 	.word	0x08002af7
		case 0: // (0,0) is top left
			t = y;
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	82fb      	strh	r3, [r7, #22]
			l = x;
 8002a94:	897b      	ldrh	r3, [r7, #10]
 8002a96:	82bb      	strh	r3, [r7, #20]
			w = width;
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	827b      	strh	r3, [r7, #18]
			h = height;
 8002a9c:	8c3b      	ldrh	r3, [r7, #32]
 8002a9e:	823b      	strh	r3, [r7, #16]
			break;
 8002aa0:	e039      	b.n	8002b16 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 1: // (0,0) is top right - portrait
			t = _height - (x + width);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	895a      	ldrh	r2, [r3, #10]
 8002aa6:	8979      	ldrh	r1, [r7, #10]
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	440b      	add	r3, r1
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	82fb      	strh	r3, [r7, #22]
			l = _width - (y + height);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	891a      	ldrh	r2, [r3, #8]
 8002ab6:	8939      	ldrh	r1, [r7, #8]
 8002ab8:	8c3b      	ldrh	r3, [r7, #32]
 8002aba:	440b      	add	r3, r1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	82bb      	strh	r3, [r7, #20]
			w = height;
 8002ac2:	8c3b      	ldrh	r3, [r7, #32]
 8002ac4:	827b      	strh	r3, [r7, #18]
			h = width;
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	823b      	strh	r3, [r7, #16]
			break;
 8002aca:	e024      	b.n	8002b16 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 2:
			t = _height - (y + height);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	895a      	ldrh	r2, [r3, #10]
 8002ad0:	8939      	ldrh	r1, [r7, #8]
 8002ad2:	8c3b      	ldrh	r3, [r7, #32]
 8002ad4:	440b      	add	r3, r1
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	82fb      	strh	r3, [r7, #22]
			l = _width - (x + width);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	891a      	ldrh	r2, [r3, #8]
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	82bb      	strh	r3, [r7, #20]
			w = width;
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	827b      	strh	r3, [r7, #18]
			h = height;
 8002af0:	8c3b      	ldrh	r3, [r7, #32]
 8002af2:	823b      	strh	r3, [r7, #16]
			break;
 8002af4:	e00f      	b.n	8002b16 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 3:
			t = _height - (x + width);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	895a      	ldrh	r2, [r3, #10]
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	440b      	add	r3, r1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	82fb      	strh	r3, [r7, #22]
			l = y;
 8002b06:	893b      	ldrh	r3, [r7, #8]
 8002b08:	82bb      	strh	r3, [r7, #20]
			w = height;
 8002b0a:	8c3b      	ldrh	r3, [r7, #32]
 8002b0c:	827b      	strh	r3, [r7, #18]
			h = width;
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	823b      	strh	r3, [r7, #16]
			break;
 8002b12:	e000      	b.n	8002b16 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		default:
			break;
 8002b14:	bf00      	nop

		}

		_hw.sendCommand16(ILI932X_HOR_START_AD, l);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6858      	ldr	r0, [r3, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	8aba      	ldrh	r2, [r7, #20]
 8002b26:	2150      	movs	r1, #80	; 0x50
 8002b28:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_HOR_END_AD, l + w - 1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6858      	ldr	r0, [r3, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	8ab9      	ldrh	r1, [r7, #20]
 8002b3a:	8a7a      	ldrh	r2, [r7, #18]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	3a01      	subs	r2, #1
 8002b42:	b292      	uxth	r2, r2
 8002b44:	2151      	movs	r1, #81	; 0x51
 8002b46:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_VER_START_AD, t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6858      	ldr	r0, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	8afa      	ldrh	r2, [r7, #22]
 8002b58:	2152      	movs	r1, #82	; 0x52
 8002b5a:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_VER_END_AD, _height - x -1);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6858      	ldr	r0, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	8951      	ldrh	r1, [r2, #10]
 8002b6e:	897a      	ldrh	r2, [r7, #10]
 8002b70:	1a8a      	subs	r2, r1, r2
 8002b72:	b292      	uxth	r2, r2
 8002b74:	3a01      	subs	r2, #1
 8002b76:	b292      	uxth	r2, r2
 8002b78:	2153      	movs	r1, #83	; 0x53
 8002b7a:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_GRAM_HOR_AD, l);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6858      	ldr	r0, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	8aba      	ldrh	r2, [r7, #20]
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_GRAM_VER_AD, _height - x);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6858      	ldr	r0, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	8951      	ldrh	r1, [r2, #10]
 8002ba2:	897a      	ldrh	r2, [r7, #10]
 8002ba4:	1a8a      	subs	r2, r1, r2
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	2121      	movs	r1, #33	; 0x21
 8002baa:	4798      	blx	r3

		_hw.beginCommand();
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2122      	movs	r1, #34	; 0x22
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4798      	blx	r3
	}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop

08002bdc <_ZN11GFX_ILI93259drawPixelEttt>:

	virtual void drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	813b      	strh	r3, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
		setAddressWindow(x, y, 1, 1);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	681c      	ldr	r4, [r3, #0]
 8002bfe:	893a      	ldrh	r2, [r7, #8]
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	2301      	movs	r3, #1
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2301      	movs	r3, #1
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	47a0      	blx	r4
		_hw.beginCommand();
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3318      	adds	r3, #24
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3320      	adds	r3, #32
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2122      	movs	r1, #34	; 0x22
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4798      	blx	r3
		pushPixel(color);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3314      	adds	r3, #20
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	4798      	blx	r3
		_hw.end();
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3330      	adds	r3, #48	; 0x30
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4610      	mov	r0, r2
 8002c52:	4798      	blx	r3
	}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}

08002c5c <_ZN11GFX_ILI93259pushPixelEt>:

	virtual inline void pushPixel(uint16_t color) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
		_hw.write16(color);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	332c      	adds	r3, #44	; 0x2c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	8879      	ldrh	r1, [r7, #2]
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4798      	blx	r3
	}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_ZN11GFX_ILI93253endEv>:

	virtual void end() {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
		_hw.end();
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3330      	adds	r3, #48	; 0x30
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4798      	blx	r3
		_hw.readcommand16(ILI932X_GRAM_HOR_AD);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2120      	movs	r1, #32
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4798      	blx	r3
	}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <vsync>:

	float setupYLevel;
	float setupRYLevel;
	float setupBYLevel;

void vsync() {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af02      	add	r7, sp, #8
	tft.end();
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <vsync+0x24>)
 8002cc4:	f7ff ffde 	bl	8002c84 <_ZN11GFX_ILI93253endEv>
	tft.setAddressWindow((320 - 256) / 2, (240 - 192) / 2, 256, 192);
 8002cc8:	23c0      	movs	r3, #192	; 0xc0
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd0:	2218      	movs	r2, #24
 8002cd2:	2120      	movs	r1, #32
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <vsync+0x24>)
 8002cd6:	f7ff febf 	bl	8002a58 <_ZN11GFX_ILI932516setAddressWindowEtttt>
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20018bb4 	.word	0x20018bb4

08002ce4 <mysetup>:

void mysetup() {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af02      	add	r7, sp, #8
	tft.init();
 8002cea:	480c      	ldr	r0, [pc, #48]	; (8002d1c <mysetup+0x38>)
 8002cec:	f7ff fe04 	bl	80028f8 <_ZN11GFX_ILI93254initEv>
	tft.setRotation(3);
 8002cf0:	2103      	movs	r1, #3
 8002cf2:	480a      	ldr	r0, [pc, #40]	; (8002d1c <mysetup+0x38>)
 8002cf4:	f7ff fe54 	bl	80029a0 <_ZN11GFX_ILI932511setRotationEh>
	HAL_Delay(10);
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f001 fe45 	bl	8004988 <HAL_Delay>
	tft.drawFilledRectangle(0,0,320,240,rgbMap[WHITE+1]);
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <mysetup+0x3c>)
 8002d00:	8c1b      	ldrh	r3, [r3, #32]
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	23f0      	movs	r3, #240	; 0xf0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <mysetup+0x38>)
 8002d12:	f7ff fc01 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20018bb4 	.word	0x20018bb4
 8002d20:	20000004 	.word	0x20000004

08002d24 <enableSetupGUI>:

void enableSetupGUI() {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af02      	add	r7, sp, #8

	tft.drawFilledRectangle(BLOCKS_LEFT, BLOCKS_TOP, BLOCKS_SIZE, BLOCKS_HEIGHT,rgbMap[WHITE+1]);
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <enableSetupGUI+0x6c>)
 8002d2c:	8c1b      	ldrh	r3, [r3, #32]
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	23c0      	movs	r3, #192	; 0xc0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2309      	movs	r3, #9
 8002d36:	2218      	movs	r2, #24
 8002d38:	2103      	movs	r1, #3
 8002d3a:	4816      	ldr	r0, [pc, #88]	; (8002d94 <enableSetupGUI+0x70>)
 8002d3c:	f7ff fbec 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>

	// write the colors as blocks down the left
	for (int i = 0; i < 15; i++) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b0e      	cmp	r3, #14
 8002d48:	dc1b      	bgt.n	8002d82 <enableSetupGUI+0x5e>
		uint16_t color = rgbMap[i + 1];
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <enableSetupGUI+0x6c>)
 8002d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d54:	807b      	strh	r3, [r7, #2]
		tft.drawFilledRectangle(BLOCKS_LEFT, BLOCKS_TOP + i * BLOCK_TO_BLOCK, BLOCKS_SIZE, BLOCKS_SIZE,color);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	0052      	lsls	r2, r2, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3318      	adds	r3, #24
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	2309      	movs	r3, #9
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2309      	movs	r3, #9
 8002d72:	2103      	movs	r1, #3
 8002d74:	4807      	ldr	r0, [pc, #28]	; (8002d94 <enableSetupGUI+0x70>)
 8002d76:	f7ff fbcf 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>
	for (int i = 0; i < 15; i++) {
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	e7e0      	b.n	8002d44 <enableSetupGUI+0x20>
	}

	vsync();
 8002d82:	f7ff ff9b 	bl	8002cbc <vsync>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000004 	.word	0x20000004
 8002d94:	20018bb4 	.word	0x20018bb4

08002d98 <disableSetupGUI>:

void disableSetupGUI() {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af02      	add	r7, sp, #8
	tft.drawFilledRectangle(0,0,320,240,rgbMap[WHITE+1]);
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <disableSetupGUI+0x28>)
 8002da0:	8c1b      	ldrh	r3, [r3, #32]
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	23f0      	movs	r3, #240	; 0xf0
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <disableSetupGUI+0x2c>)
 8002db2:	f7ff fbb1 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>
	vsync();
 8002db6:	f7ff ff81 	bl	8002cbc <vsync>
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	20018bb4 	.word	0x20018bb4

08002dc8 <initSetupColour>:

void pushpixel(uint16_t c) {
	tft.pushPixel(c);
}

void initSetupColour(uint8_t c) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
	// draw a block of the given colour down the right hand side
	tft.drawFilledRectangle(300,30,10,160, rgbMap[c+1]);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <initSetupColour+0xa4>)
 8002dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	230a      	movs	r3, #10
 8002de4:	221e      	movs	r2, #30
 8002de6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002dea:	4821      	ldr	r0, [pc, #132]	; (8002e70 <initSetupColour+0xa8>)
 8002dec:	f7ff fb94 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>

	setupYLevel = YVolts[c];
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <initSetupColour+0xac>)
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <initSetupColour+0xb0>)
 8002dfc:	6013      	str	r3, [r2, #0]
	setupRYLevel = RYVolts[c];
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <initSetupColour+0xb4>)
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <initSetupColour+0xb8>)
 8002e0a:	6013      	str	r3, [r2, #0]

	// clear the LHS pointer
	tft.drawFilledRectangle(BLOCK_POINTER_LEFT,0,BLOCK_POINTER_LEFT+BLOCK_POINTER_SIZE,192, rgbMap[WHITE+1]);
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <initSetupColour+0xa4>)
 8002e0e:	8c1b      	ldrh	r3, [r3, #32]
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	23c0      	movs	r3, #192	; 0xc0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2316      	movs	r3, #22
 8002e18:	2200      	movs	r2, #0
 8002e1a:	210d      	movs	r1, #13
 8002e1c:	4814      	ldr	r0, [pc, #80]	; (8002e70 <initSetupColour+0xa8>)
 8002e1e:	f7ff fb7b 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>

	uint16_t y = BLOCKS_TOP + BLOCKS_SIZE/2 + c * BLOCK_TO_BLOCK;
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	0052      	lsls	r2, r2, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	331c      	adds	r3, #28
 8002e32:	81fb      	strh	r3, [r7, #14]
	tft.fillTriangle(
 8002e34:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
			BLOCK_POINTER_LEFT, y,
			BLOCK_POINTER_LEFT + BLOCK_POINTER_SIZE, y - BLOCK_POINTER_SIZE/2,
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	b29b      	uxth	r3, r3
	tft.fillTriangle(
 8002e3e:	b21b      	sxth	r3, r3
			BLOCK_POINTER_LEFT + BLOCK_POINTER_SIZE, y + BLOCK_POINTER_SIZE/2,
 8002e40:	89fa      	ldrh	r2, [r7, #14]
 8002e42:	3204      	adds	r2, #4
 8002e44:	b292      	uxth	r2, r2
	tft.fillTriangle(
 8002e46:	b212      	sxth	r2, r2
 8002e48:	4908      	ldr	r1, [pc, #32]	; (8002e6c <initSetupColour+0xa4>)
 8002e4a:	8889      	ldrh	r1, [r1, #4]
 8002e4c:	9103      	str	r1, [sp, #12]
 8002e4e:	9202      	str	r2, [sp, #8]
 8002e50:	2216      	movs	r2, #22
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2316      	movs	r3, #22
 8002e58:	4602      	mov	r2, r0
 8002e5a:	210d      	movs	r1, #13
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <initSetupColour+0xa8>)
 8002e5e:	f7ff fb94 	bl	800258a <_ZN3GFX12fillTriangleEsssssst>
			rgbMap[BLACK+1]);
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	20018bb4 	.word	0x20018bb4
 8002e74:	20000068 	.word	0x20000068
 8002e78:	20018bc4 	.word	0x20018bc4
 8002e7c:	200000e8 	.word	0x200000e8
 8002e80:	20018bc8 	.word	0x20018bc8
 8002e84:	00000000 	.word	0x00000000

08002e88 <drawVoltageSetting>:

void drawVoltageSetting(uint16_t colour, float datasheetLevel, float adjustedLevel) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	4603      	mov	r3, r0
 8002e90:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e94:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e98:	81fb      	strh	r3, [r7, #14]
	// draw a block of the given colour down the right hand side
	tft.drawFilledRectangle(300,30,20,160, rgbMap[colour+1]);
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <drawVoltageSetting+0x150>)
 8002ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	23a0      	movs	r3, #160	; 0xa0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2314      	movs	r3, #20
 8002eac:	221e      	movs	r2, #30
 8002eae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002eb2:	484a      	ldr	r0, [pc, #296]	; (8002fdc <drawVoltageSetting+0x154>)
 8002eb4:	f7ff fb30 	bl	8002518 <_ZN3GFX19drawFilledRectangleEttttt>
	// add a triangle inside to indicate the spreadsheet voltage level
	uint16_t triangleColor = ~rgbMap[colour+1];
 8002eb8:	89fb      	ldrh	r3, [r7, #14]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <drawVoltageSetting+0x150>)
 8002ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	83fb      	strh	r3, [r7, #30]
	float vDS = datasheetLevel + offset;
 8002ec6:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <drawVoltageSetting+0x158>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	edc7 7a06 	vstr	s15, [r7, #24]
	uint16_t y = 30 + 130 * vDS / VREF;
 8002ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002edc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002fe4 <drawVoltageSetting+0x15c>
 8002ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee4:	ee17 0a90 	vmov	r0, s15
 8002ee8:	f7fd fafa 	bl	80004e0 <__aeabi_f2d>
 8002eec:	a338      	add	r3, pc, #224	; (adr r3, 8002fd0 <drawVoltageSetting+0x148>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd fc77 	bl	80007e4 <__aeabi_ddiv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <drawVoltageSetting+0x160>)
 8002f04:	f7fd f98e 	bl	8000224 <__adddf3>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fd fd50 	bl	80009b4 <__aeabi_d2uiz>
 8002f14:	4603      	mov	r3, r0
 8002f16:	82fb      	strh	r3, [r7, #22]
	tft.fillTriangle(301, y-5, 309, y, 301, y+5,triangleColor);
 8002f18:	8afb      	ldrh	r3, [r7, #22]
 8002f1a:	3b05      	subs	r3, #5
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b218      	sxth	r0, r3
 8002f20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f24:	8afa      	ldrh	r2, [r7, #22]
 8002f26:	3205      	adds	r2, #5
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	b212      	sxth	r2, r2
 8002f2c:	8bf9      	ldrh	r1, [r7, #30]
 8002f2e:	9103      	str	r1, [sp, #12]
 8002f30:	9202      	str	r2, [sp, #8]
 8002f32:	f240 122d 	movw	r2, #301	; 0x12d
 8002f36:	9201      	str	r2, [sp, #4]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	f240 1335 	movw	r3, #309	; 0x135
 8002f3e:	4602      	mov	r2, r0
 8002f40:	f240 112d 	movw	r1, #301	; 0x12d
 8002f44:	4825      	ldr	r0, [pc, #148]	; (8002fdc <drawVoltageSetting+0x154>)
 8002f46:	f7ff fb20 	bl	800258a <_ZN3GFX12fillTriangleEsssssst>

	// draw a triangle at the new setting level
	y = 30 + 130 * adjustedLevel / VREF;
 8002f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f4e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002fe4 <drawVoltageSetting+0x15c>
 8002f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f56:	ee17 0a90 	vmov	r0, s15
 8002f5a:	f7fd fac1 	bl	80004e0 <__aeabi_f2d>
 8002f5e:	a31c      	add	r3, pc, #112	; (adr r3, 8002fd0 <drawVoltageSetting+0x148>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f7fd fc3e 	bl	80007e4 <__aeabi_ddiv>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <drawVoltageSetting+0x160>)
 8002f76:	f7fd f955 	bl	8000224 <__adddf3>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fd17 	bl	80009b4 <__aeabi_d2uiz>
 8002f86:	4603      	mov	r3, r0
 8002f88:	82fb      	strh	r3, [r7, #22]
	tft.fillTriangle(319,y-5,311,y,319,y+5,triangleColor);
 8002f8a:	8afb      	ldrh	r3, [r7, #22]
 8002f8c:	3b05      	subs	r3, #5
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b218      	sxth	r0, r3
 8002f92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f96:	8afa      	ldrh	r2, [r7, #22]
 8002f98:	3205      	adds	r2, #5
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	b212      	sxth	r2, r2
 8002f9e:	8bf9      	ldrh	r1, [r7, #30]
 8002fa0:	9103      	str	r1, [sp, #12]
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	f240 123f 	movw	r2, #319	; 0x13f
 8002fa8:	9201      	str	r2, [sp, #4]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f240 1337 	movw	r3, #311	; 0x137
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f240 113f 	movw	r1, #319	; 0x13f
 8002fb6:	4809      	ldr	r0, [pc, #36]	; (8002fdc <drawVoltageSetting+0x154>)
 8002fb8:	f7ff fae7 	bl	800258a <_ZN3GFX12fillTriangleEsssssst>

	setColorLevels(YVolts, RYVolts);
 8002fbc:	490b      	ldr	r1, [pc, #44]	; (8002fec <drawVoltageSetting+0x164>)
 8002fbe:	480c      	ldr	r0, [pc, #48]	; (8002ff0 <drawVoltageSetting+0x168>)
 8002fc0:	f001 fa52 	bl	8004468 <setColorLevels>
}
 8002fc4:	bf00      	nop
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	33333333 	.word	0x33333333
 8002fd4:	40073333 	.word	0x40073333
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20018bb4 	.word	0x20018bb4
 8002fe0:	20019578 	.word	0x20019578
 8002fe4:	43020000 	.word	0x43020000
 8002fe8:	403e0000 	.word	0x403e0000
 8002fec:	200000e8 	.word	0x200000e8
 8002ff0:	20000068 	.word	0x20000068
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <tuneY>:

void tuneY(uint8_t c, int s) {
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
	float adjustedLevel = setupYLevel + (s - ADC_RESOLUTION_STEPS/2) * ONE_ADC_BIT / 2;
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <tuneY+0x98>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa69 	bl	80004e0 <__aeabi_f2d>
 800300e:	4604      	mov	r4, r0
 8003010:	460d      	mov	r5, r1
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	3b20      	subs	r3, #32
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa50 	bl	80004bc <__aeabi_i2d>
 800301c:	a31a      	add	r3, pc, #104	; (adr r3, 8003088 <tuneY+0x90>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fab5 	bl	8000590 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003036:	f7fd fbd5 	bl	80007e4 <__aeabi_ddiv>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f7fd f8ef 	bl	8000224 <__adddf3>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f7fd fcd1 	bl	80009f4 <__aeabi_d2f>
 8003052:	4603      	mov	r3, r0
 8003054:	60fb      	str	r3, [r7, #12]
	YVolts[c] = adjustedLevel;
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <tuneY+0x9c>)
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]
	drawVoltageSetting(c, YVoltsDatasheet[c], adjustedLevel);
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	b29a      	uxth	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	490b      	ldr	r1, [pc, #44]	; (8003098 <tuneY+0xa0>)
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	edd7 0a03 	vldr	s1, [r7, #12]
 8003076:	eeb0 0a67 	vmov.f32	s0, s15
 800307a:	4610      	mov	r0, r2
 800307c:	f7ff ff04 	bl	8002e88 <drawVoltageSetting>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	33333333 	.word	0x33333333
 800308c:	3fa73333 	.word	0x3fa73333
 8003090:	20018bc4 	.word	0x20018bc4
 8003094:	20000068 	.word	0x20000068
 8003098:	20000028 	.word	0x20000028
 800309c:	00000000 	.word	0x00000000

080030a0 <tuneRY>:

void tuneRY(uint8_t c, int s) {
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
	float adjustedLevel = setupRYLevel + (s - ADC_RESOLUTION_STEPS/2) * ONE_ADC_BIT / 2;
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <tuneRY+0x98>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa15 	bl	80004e0 <__aeabi_f2d>
 80030b6:	4604      	mov	r4, r0
 80030b8:	460d      	mov	r5, r1
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	3b20      	subs	r3, #32
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd f9fc 	bl	80004bc <__aeabi_i2d>
 80030c4:	a31a      	add	r3, pc, #104	; (adr r3, 8003130 <tuneRY+0x90>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f7fd fa61 	bl	8000590 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030de:	f7fd fb81 	bl	80007e4 <__aeabi_ddiv>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd f89b 	bl	8000224 <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fc7d 	bl	80009f4 <__aeabi_d2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	60fb      	str	r3, [r7, #12]
	RYVolts[c] = adjustedLevel;
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <tuneRY+0x9c>)
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	601a      	str	r2, [r3, #0]
	drawVoltageSetting(c, RYVoltsDatasheet[c], adjustedLevel);
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	b29a      	uxth	r2, r3
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	490b      	ldr	r1, [pc, #44]	; (8003140 <tuneRY+0xa0>)
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	edd7 0a03 	vldr	s1, [r7, #12]
 800311e:	eeb0 0a67 	vmov.f32	s0, s15
 8003122:	4610      	mov	r0, r2
 8003124:	f7ff feb0 	bl	8002e88 <drawVoltageSetting>
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bdb0      	pop	{r4, r5, r7, pc}
 8003130:	33333333 	.word	0x33333333
 8003134:	3fa73333 	.word	0x3fa73333
 8003138:	20018bc8 	.word	0x20018bc8
 800313c:	200000e8 	.word	0x200000e8
 8003140:	200000a8 	.word	0x200000a8

08003144 <_Z41__static_initialization_and_destruction_0ii>:

}
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af08      	add	r7, sp, #32
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d122      	bne.n	800319a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800315a:	4293      	cmp	r3, r2
 800315c:	d11d      	bne.n	800319a <_Z41__static_initialization_and_destruction_0ii+0x56>
GFX_HW_PAR16 hwspi = GFX_HW_PAR16(GPIOC,
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	9307      	str	r3, [sp, #28]
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003166:	9306      	str	r3, [sp, #24]
 8003168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800316c:	9305      	str	r3, [sp, #20]
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003170:	9304      	str	r3, [sp, #16]
 8003172:	2304      	movs	r3, #4
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003178:	9302      	str	r3, [sp, #8]
 800317a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003188:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800318a:	4907      	ldr	r1, [pc, #28]	; (80031a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800318c:	4807      	ldr	r0, [pc, #28]	; (80031ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800318e:	f7fe fcdd 	bl	8001b4c <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>
GFX_ILI9325 tft = GFX_ILI9325(hwspi);
 8003192:	4906      	ldr	r1, [pc, #24]	; (80031ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003194:	4806      	ldr	r0, [pc, #24]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003196:	f7ff fb97 	bl	80028c8 <_ZN11GFX_ILI9325C1ER6GFX_HW>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	48000400 	.word	0x48000400
 80031a8:	48000800 	.word	0x48000800
 80031ac:	20018b8c 	.word	0x20018b8c
 80031b0:	20018bb4 	.word	0x20018bb4

080031b4 <_GLOBAL__sub_I_hwspi>:
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031bc:	2001      	movs	r0, #1
 80031be:	f7ff ffc1 	bl	8003144 <_Z41__static_initialization_and_destruction_0ii>
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <MX_SPI2_Init+0x74>)
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <MX_SPI2_Init+0x78>)
 80031cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <MX_SPI2_Init+0x74>)
 80031d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <MX_SPI2_Init+0x74>)
 80031d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031dc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <MX_SPI2_Init+0x74>)
 80031e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_SPI2_Init+0x74>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <MX_SPI2_Init+0x74>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <MX_SPI2_Init+0x74>)
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <MX_SPI2_Init+0x74>)
 80031fc:	2208      	movs	r2, #8
 80031fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <MX_SPI2_Init+0x74>)
 8003202:	2200      	movs	r2, #0
 8003204:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <MX_SPI2_Init+0x74>)
 8003208:	2200      	movs	r2, #0
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <MX_SPI2_Init+0x74>)
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <MX_SPI2_Init+0x74>)
 8003214:	2207      	movs	r2, #7
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003218:	4b07      	ldr	r3, [pc, #28]	; (8003238 <MX_SPI2_Init+0x74>)
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <MX_SPI2_Init+0x74>)
 8003220:	2208      	movs	r2, #8
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <MX_SPI2_Init+0x74>)
 8003226:	f005 fc21 	bl	8008a6c <HAL_SPI_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003230:	f7fe fc76 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20018bcc 	.word	0x20018bcc
 800323c:	40003800 	.word	0x40003800

08003240 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3b      	ldr	r2, [pc, #236]	; (800334c <HAL_SPI_MspInit+0x10c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d16f      	bne.n	8003342 <HAL_SPI_MspInit+0x102>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4a3a      	ldr	r2, [pc, #232]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <HAL_SPI_MspInit+0x110>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	4a34      	ldr	r2, [pc, #208]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003280:	f043 0320 	orr.w	r3, r3, #32
 8003284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003286:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_SPI_MspInit+0x110>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329e:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <HAL_SPI_MspInit+0x110>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032aa:	2302      	movs	r3, #2
 80032ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b6:	2302      	movs	r3, #2
 80032b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032ba:	2305      	movs	r3, #5
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	4823      	ldr	r0, [pc, #140]	; (8003354 <HAL_SPI_MspInit+0x114>)
 80032c6:	f004 fa05 	bl	80076d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d8:	2302      	movs	r3, #2
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032dc:	2305      	movs	r3, #5
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ea:	f004 f9f3 	bl	80076d4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_SPI_MspInit+0x118>)
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <HAL_SPI_MspInit+0x11c>)
 80032f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_SPI_MspInit+0x118>)
 80032f6:	220d      	movs	r2, #13
 80032f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_SPI_MspInit+0x118>)
 80032fc:	2210      	movs	r2, #16
 80032fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_SPI_MspInit+0x118>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_SPI_MspInit+0x118>)
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_SPI_MspInit+0x118>)
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_SPI_MspInit+0x118>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_SPI_MspInit+0x118>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_SPI_MspInit+0x118>)
 8003320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003324:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003326:	480c      	ldr	r0, [pc, #48]	; (8003358 <HAL_SPI_MspInit+0x118>)
 8003328:	f003 fe6e 	bl	8007008 <HAL_DMA_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 8003332:	f7fe fbf5 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a07      	ldr	r2, [pc, #28]	; (8003358 <HAL_SPI_MspInit+0x118>)
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <HAL_SPI_MspInit+0x118>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003342:	bf00      	nop
 8003344:	3728      	adds	r7, #40	; 0x28
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40003800 	.word	0x40003800
 8003350:	40021000 	.word	0x40021000
 8003354:	48001400 	.word	0x48001400
 8003358:	20018c58 	.word	0x20018c58
 800335c:	4002001c 	.word	0x4002001c

08003360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_MspInit+0x50>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_MspInit+0x50>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6613      	str	r3, [r2, #96]	; 0x60
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_MspInit+0x50>)
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_MspInit+0x50>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <HAL_MspInit+0x50>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_MspInit+0x50>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003396:	2020      	movs	r0, #32
 8003398:	f001 fb18 	bl	80049cc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800339c:	f001 fb3e 	bl	8004a1c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f001 fb27 	bl	80049f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80033b8:	f005 f8a8 	bl	800850c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033bc:	e7fe      	b.n	80033bc <NMI_Handler+0x8>

080033be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <HardFault_Handler+0x4>

080033c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c8:	e7fe      	b.n	80033c8 <MemManage_Handler+0x4>

080033ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ce:	e7fe      	b.n	80033ce <BusFault_Handler+0x4>

080033d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <UsageFault_Handler+0x4>

080033d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003404:	f001 faa2 	bl	800494c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}

0800340c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <DMA1_Channel1_IRQHandler+0x10>)
 8003412:	f003 ff75 	bl	8007300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200002e4 	.word	0x200002e4

08003420 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA1_Channel2_IRQHandler+0x10>)
 8003426:	f003 ff6b 	bl	8007300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20018c58 	.word	0x20018c58

08003434 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800343a:	f006 f9c3 	bl	80097c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20018cb8 	.word	0x20018cb8

08003448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <TIM2_IRQHandler+0x10>)
 800344e:	f006 f9b9 	bl	80097c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20018d84 	.word	0x20018d84

0800345c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <TIM3_IRQHandler+0x10>)
 8003462:	f006 f9af 	bl	80097c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20018e50 	.word	0x20018e50

08003470 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim20_ch1);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <DMA2_Channel1_IRQHandler+0x10>)
 8003476:	f003 ff43 	bl	8007300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20019318 	.word	0x20019318

08003484 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <DMAMUX_OVR_IRQHandler+0x10>)
 800348a:	f004 f8d1 	bl	8007630 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200002e4 	.word	0x200002e4

08003498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
	return 1;
 800349c:	2301      	movs	r3, #1
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_kill>:

int _kill(int pid, int sig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034b2:	f008 f963 	bl	800b77c <__errno>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2216      	movs	r2, #22
 80034ba:	601a      	str	r2, [r3, #0]
	return -1;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_exit>:

void _exit (int status)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ffe7 	bl	80034a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034da:	e7fe      	b.n	80034da <_exit+0x12>

080034dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <MX_TIM1_Init>:
TIM_HandleTypeDef htim20;
DMA_HandleTypeDef hdma_tim20_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0a0      	sub	sp, #128	; 0x80
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003506:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003514:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003530:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
 8003540:	615a      	str	r2, [r3, #20]
 8003542:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003544:	463b      	mov	r3, r7
 8003546:	2234      	movs	r2, #52	; 0x34
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f008 f940 	bl	800b7d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003550:	4b51      	ldr	r3, [pc, #324]	; (8003698 <MX_TIM1_Init+0x198>)
 8003552:	4a52      	ldr	r2, [pc, #328]	; (800369c <MX_TIM1_Init+0x19c>)
 8003554:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003556:	4b50      	ldr	r3, [pc, #320]	; (8003698 <MX_TIM1_Init+0x198>)
 8003558:	2200      	movs	r2, #0
 800355a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355c:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <MX_TIM1_Init+0x198>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31;
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <MX_TIM1_Init+0x198>)
 8003564:	221f      	movs	r2, #31
 8003566:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003568:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <MX_TIM1_Init+0x198>)
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 255;
 800356e:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <MX_TIM1_Init+0x198>)
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003574:	4b48      	ldr	r3, [pc, #288]	; (8003698 <MX_TIM1_Init+0x198>)
 8003576:	2280      	movs	r2, #128	; 0x80
 8003578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800357a:	4847      	ldr	r0, [pc, #284]	; (8003698 <MX_TIM1_Init+0x198>)
 800357c:	f005 fc4e 	bl	8008e1c <HAL_TIM_Base_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003586:	f7fe facb 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800358a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003590:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003594:	4619      	mov	r1, r3
 8003596:	4840      	ldr	r0, [pc, #256]	; (8003698 <MX_TIM1_Init+0x198>)
 8003598:	f006 fc6e 	bl	8009e78 <HAL_TIM_ConfigClockSource>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80035a2:	f7fe fabd 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035a6:	483c      	ldr	r0, [pc, #240]	; (8003698 <MX_TIM1_Init+0x198>)
 80035a8:	f005 fd84 	bl	80090b4 <HAL_TIM_PWM_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80035b2:	f7fe fab5 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80035b6:	2108      	movs	r1, #8
 80035b8:	4837      	ldr	r0, [pc, #220]	; (8003698 <MX_TIM1_Init+0x198>)
 80035ba:	f005 fe57 	bl	800926c <HAL_TIM_OnePulse_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80035c4:	f7fe faac 	bl	8001b20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 80035c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80035ce:	2330      	movs	r3, #48	; 0x30
 80035d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80035d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035d6:	4619      	mov	r1, r3
 80035d8:	482f      	ldr	r0, [pc, #188]	; (8003698 <MX_TIM1_Init+0x198>)
 80035da:	f006 fd63 	bl	800a0a4 <HAL_TIM_SlaveConfigSynchro>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80035e4:	f7fe fa9c 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035ec:	2300      	movs	r3, #0
 80035ee:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035f8:	4619      	mov	r1, r3
 80035fa:	4827      	ldr	r0, [pc, #156]	; (8003698 <MX_TIM1_Init+0x198>)
 80035fc:	f007 fe7c 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003606:	f7fe fa8b 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800360a:	2370      	movs	r3, #112	; 0x70
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 15;
 800360e:	230f      	movs	r3, #15
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003612:	2300      	movs	r3, #0
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003616:	2300      	movs	r3, #0
 8003618:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	481a      	ldr	r0, [pc, #104]	; (8003698 <MX_TIM1_Init+0x198>)
 8003630:	f006 fb0e 	bl	8009c50 <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800363a:	f7fe fa71 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003656:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003676:	463b      	mov	r3, r7
 8003678:	4619      	mov	r1, r3
 800367a:	4807      	ldr	r0, [pc, #28]	; (8003698 <MX_TIM1_Init+0x198>)
 800367c:	f007 fed2 	bl	800b424 <HAL_TIMEx_ConfigBreakDeadTime>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003686:	f7fe fa4b 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800368a:	4803      	ldr	r0, [pc, #12]	; (8003698 <MX_TIM1_Init+0x198>)
 800368c:	f000 fdca 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003690:	bf00      	nop
 8003692:	3780      	adds	r7, #128	; 0x80
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20018cb8 	.word	0x20018cb8
 800369c:	40012c00 	.word	0x40012c00

080036a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f008 f88e 	bl	800b7d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b4:	463b      	mov	r3, r7
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <MX_TIM2_Init+0xa4>)
 80036c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <MX_TIM2_Init+0xa4>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <MX_TIM2_Init+0xa4>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 127;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <MX_TIM2_Init+0xa4>)
 80036d4:	227f      	movs	r2, #127	; 0x7f
 80036d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <MX_TIM2_Init+0xa4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <MX_TIM2_Init+0xa4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036fc:	2301      	movs	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003700:	2300      	movs	r3, #0
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	4619      	mov	r1, r3
 800370e:	480d      	ldr	r0, [pc, #52]	; (8003744 <MX_TIM2_Init+0xa4>)
 8003710:	f005 ff16 	bl	8009540 <HAL_TIM_Encoder_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800371a:	f7fe fa01 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003726:	463b      	mov	r3, r7
 8003728:	4619      	mov	r1, r3
 800372a:	4806      	ldr	r0, [pc, #24]	; (8003744 <MX_TIM2_Init+0xa4>)
 800372c:	f007 fde4 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003736:	f7fe f9f3 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800373a:	bf00      	nop
 800373c:	3730      	adds	r7, #48	; 0x30
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20018d84 	.word	0x20018d84

08003748 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b094      	sub	sp, #80	; 0x50
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800374e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	60da      	str	r2, [r3, #12]
 800375c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	611a      	str	r2, [r3, #16]
 800377a:	615a      	str	r2, [r3, #20]
 800377c:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <MX_TIM3_Init+0x160>)
 800378c:	4a47      	ldr	r2, [pc, #284]	; (80038ac <MX_TIM3_Init+0x164>)
 800378e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003790:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <MX_TIM3_Init+0x160>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003796:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <MX_TIM3_Init+0x160>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <MX_TIM3_Init+0x160>)
 800379e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a4:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <MX_TIM3_Init+0x160>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <MX_TIM3_Init+0x160>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037b0:	483d      	ldr	r0, [pc, #244]	; (80038a8 <MX_TIM3_Init+0x160>)
 80037b2:	f005 fb33 	bl	8008e1c <HAL_TIM_Base_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80037bc:	f7fe f9b0 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037c0:	4839      	ldr	r0, [pc, #228]	; (80038a8 <MX_TIM3_Init+0x160>)
 80037c2:	f005 fc77 	bl	80090b4 <HAL_TIM_PWM_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80037cc:	f7fe f9a8 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80037d0:	4835      	ldr	r0, [pc, #212]	; (80038a8 <MX_TIM3_Init+0x160>)
 80037d2:	f005 fcdd 	bl	8009190 <HAL_TIM_IC_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037dc:	f7fe f9a0 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80037e0:	2108      	movs	r1, #8
 80037e2:	4831      	ldr	r0, [pc, #196]	; (80038a8 <MX_TIM3_Init+0x160>)
 80037e4:	f005 fd42 	bl	800926c <HAL_TIM_OnePulse_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80037ee:	f7fe f997 	bl	8001b20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 80037f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80037f8:	2360      	movs	r3, #96	; 0x60
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80037fc:	2302      	movs	r3, #2
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003804:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003808:	4619      	mov	r1, r3
 800380a:	4827      	ldr	r0, [pc, #156]	; (80038a8 <MX_TIM3_Init+0x160>)
 800380c:	f006 fc4a 	bl	800a0a4 <HAL_TIM_SlaveConfigSynchro>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003816:	f7fe f983 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003826:	4619      	mov	r1, r3
 8003828:	481f      	ldr	r0, [pc, #124]	; (80038a8 <MX_TIM3_Init+0x160>)
 800382a:	f007 fd65 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003834:	f7fe f974 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003838:	2370      	movs	r3, #112	; 0x70
 800383a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 12000;
 800383c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003840:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	2200      	movs	r2, #0
 8003850:	4619      	mov	r1, r3
 8003852:	4815      	ldr	r0, [pc, #84]	; (80038a8 <MX_TIM3_Init+0x160>)
 8003854:	f006 f9fc 	bl	8009c50 <HAL_TIM_PWM_ConfigChannel>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800385e:	f7fe f95f 	bl	8001b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003862:	2302      	movs	r3, #2
 8003864:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003866:	2301      	movs	r3, #1
 8003868:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2204      	movs	r2, #4
 8003876:	4619      	mov	r1, r3
 8003878:	480b      	ldr	r0, [pc, #44]	; (80038a8 <MX_TIM3_Init+0x160>)
 800387a:	f006 f94c 	bl	8009b16 <HAL_TIM_IC_ConfigChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM3_Init+0x140>
  {
    Error_Handler();
 8003884:	f7fe f94c 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim3, TIM_TIM3_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8003888:	2204      	movs	r2, #4
 800388a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800388e:	4806      	ldr	r0, [pc, #24]	; (80038a8 <MX_TIM3_Init+0x160>)
 8003890:	f007 fe7a 	bl	800b588 <HAL_TIMEx_TISelection>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM3_Init+0x156>
  {
    Error_Handler();
 800389a:	f7fe f941 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	3750      	adds	r7, #80	; 0x50
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20018e50 	.word	0x20018e50
 80038ac:	40000400 	.word	0x40000400

080038b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b098      	sub	sp, #96	; 0x60
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80038c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
 80038f0:	615a      	str	r2, [r3, #20]
 80038f2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003900:	4b4d      	ldr	r3, [pc, #308]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003902:	4a4e      	ldr	r2, [pc, #312]	; (8003a3c <MX_TIM4_Init+0x18c>)
 8003904:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003906:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390c:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <MX_TIM4_Init+0x188>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3800;
 8003912:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003914:	f640 62d8 	movw	r2, #3800	; 0xed8
 8003918:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <MX_TIM4_Init+0x188>)
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003920:	4b45      	ldr	r3, [pc, #276]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003922:	2200      	movs	r2, #0
 8003924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003926:	4844      	ldr	r0, [pc, #272]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003928:	f005 fa78 	bl	8008e1c <HAL_TIM_Base_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8003932:	f7fe f8f5 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800393c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003940:	4619      	mov	r1, r3
 8003942:	483d      	ldr	r0, [pc, #244]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003944:	f006 fa98 	bl	8009e78 <HAL_TIM_ConfigClockSource>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800394e:	f7fe f8e7 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003952:	4839      	ldr	r0, [pc, #228]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003954:	f005 fbae 	bl	80090b4 <HAL_TIM_PWM_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800395e:	f7fe f8df 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003962:	4835      	ldr	r0, [pc, #212]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003964:	f005 fc14 	bl	8009190 <HAL_TIM_IC_Init>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800396e:	f7fe f8d7 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8003972:	2108      	movs	r1, #8
 8003974:	4830      	ldr	r0, [pc, #192]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003976:	f005 fc79 	bl	800926c <HAL_TIM_OnePulse_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003980:	f7fe f8ce 	bl	8001b20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8003984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003988:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800398a:	2360      	movs	r3, #96	; 0x60
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800398e:	2300      	movs	r3, #0
 8003990:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8003996:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800399a:	4619      	mov	r1, r3
 800399c:	4826      	ldr	r0, [pc, #152]	; (8003a38 <MX_TIM4_Init+0x188>)
 800399e:	f006 fb81 	bl	800a0a4 <HAL_TIM_SlaveConfigSynchro>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80039a8:	f7fe f8ba 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80039ac:	2340      	movs	r3, #64	; 0x40
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039b8:	4619      	mov	r1, r3
 80039ba:	481f      	ldr	r0, [pc, #124]	; (8003a38 <MX_TIM4_Init+0x188>)
 80039bc:	f007 fc9c 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80039c6:	f7fe f8ab 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80039ca:	2370      	movs	r3, #112	; 0x70
 80039cc:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 1148;
 80039ce:	f240 437c 	movw	r3, #1148	; 0x47c
 80039d2:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	2200      	movs	r2, #0
 80039e2:	4619      	mov	r1, r3
 80039e4:	4814      	ldr	r0, [pc, #80]	; (8003a38 <MX_TIM4_Init+0x188>)
 80039e6:	f006 f933 	bl	8009c50 <HAL_TIM_PWM_ConfigChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM4_Init+0x144>
  {
    Error_Handler();
 80039f0:	f7fe f896 	bl	8001b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039f4:	2300      	movs	r3, #0
 80039f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039f8:	2301      	movs	r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	2204      	movs	r2, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	480b      	ldr	r0, [pc, #44]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003a0c:	f006 f883 	bl	8009b16 <HAL_TIM_IC_ConfigChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM4_Init+0x16a>
  {
    Error_Handler();
 8003a16:	f7fe f883 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim4, TIM_TIM4_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a20:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_TIM4_Init+0x188>)
 8003a22:	f007 fdb1 	bl	800b588 <HAL_TIMEx_TISelection>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM4_Init+0x180>
  {
    Error_Handler();
 8003a2c:	f7fe f878 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	3760      	adds	r7, #96	; 0x60
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20018f1c 	.word	0x20018f1c
 8003a3c:	40000800 	.word	0x40000800

08003a40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <MX_TIM5_Init+0x70>)
 8003a54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 160;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a64:	22a0      	movs	r2, #160	; 0xa0
 8003a66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a74:	2108      	movs	r1, #8
 8003a76:	480d      	ldr	r0, [pc, #52]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a78:	f005 fbf8 	bl	800926c <HAL_TIM_OnePulse_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM5_Init+0x46>
  {
    Error_Handler();
 8003a82:	f7fe f84d 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4806      	ldr	r0, [pc, #24]	; (8003aac <MX_TIM5_Init+0x6c>)
 8003a94:	f007 fc30 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8003a9e:	f7fe f83f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20018fe8 	.word	0x20018fe8
 8003ab0:	40000c00 	.word	0x40000c00

08003ab4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b09c      	sub	sp, #112	; 0x70
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	615a      	str	r2, [r3, #20]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	2234      	movs	r2, #52	; 0x34
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f007 fe6e 	bl	800b7d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003af4:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003af6:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <MX_TIM8_Init+0x170>)
 8003af8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003afc:	2211      	movs	r2, #17
 8003afe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b00:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 258;
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b08:	f44f 7281 	mov.w	r2, #258	; 0x102
 8003b0c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0e:	4b44      	ldr	r3, [pc, #272]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 191;
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b16:	22bf      	movs	r2, #191	; 0xbf
 8003b18:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003b20:	483f      	ldr	r0, [pc, #252]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b22:	f005 f97b 	bl	8008e1c <HAL_TIM_Base_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003b2c:	f7fd fff8 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003b36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4838      	ldr	r0, [pc, #224]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b3e:	f006 f99b 	bl	8009e78 <HAL_TIM_ConfigClockSource>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003b48:	f7fd ffea 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003b4c:	4834      	ldr	r0, [pc, #208]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b4e:	f005 fab1 	bl	80090b4 <HAL_TIM_PWM_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003b58:	f7fd ffe2 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	4830      	ldr	r0, [pc, #192]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b60:	f005 fb84 	bl	800926c <HAL_TIM_OnePulse_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8003b6a:	f7fd ffd9 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003b6e:	2330      	movs	r3, #48	; 0x30
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4827      	ldr	r0, [pc, #156]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003b82:	f007 fbb9 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8003b8c:	f7fd ffc8 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003b90:	2370      	movs	r3, #112	; 0x70
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 150;
 8003b94:	2396      	movs	r3, #150	; 0x96
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	481a      	ldr	r0, [pc, #104]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003bb6:	f006 f84b 	bl	8009c50 <HAL_TIM_PWM_ConfigChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003bc0:	f7fd ffae 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4807      	ldr	r0, [pc, #28]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003c02:	f007 fc0f 	bl	800b424 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003c0c:	f7fd ff88 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003c10:	4803      	ldr	r0, [pc, #12]	; (8003c20 <MX_TIM8_Init+0x16c>)
 8003c12:	f000 fb07 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003c16:	bf00      	nop
 8003c18:	3770      	adds	r7, #112	; 0x70
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200190b4 	.word	0x200190b4
 8003c24:	40013400 	.word	0x40013400

08003c28 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b094      	sub	sp, #80	; 0x50
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	615a      	str	r2, [r3, #20]
 8003c40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c42:	463b      	mov	r3, r7
 8003c44:	2234      	movs	r2, #52	; 0x34
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f007 fdc1 	bl	800b7d0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003c4e:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c50:	4a35      	ldr	r2, [pc, #212]	; (8003d28 <MX_TIM16_Init+0x100>)
 8003c52:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170;
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c56:	22aa      	movs	r2, #170	; 0xaa
 8003c58:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 260;
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c66:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 191;
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c70:	22bf      	movs	r2, #191	; 0xbf
 8003c72:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003c7a:	482a      	ldr	r0, [pc, #168]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c7c:	f005 f8ce 	bl	8008e1c <HAL_TIM_Base_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8003c86:	f7fd ff4b 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003c8a:	4826      	ldr	r0, [pc, #152]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c8c:	f005 fa12 	bl	80090b4 <HAL_TIM_PWM_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8003c96:	f7fd ff43 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	4821      	ldr	r0, [pc, #132]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003c9e:	f005 fae5 	bl	800926c <HAL_TIM_OnePulse_Init>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8003ca8:	f7fd ff3a 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003cac:	2370      	movs	r3, #112	; 0x70
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 130;
 8003cb0:	2382      	movs	r3, #130	; 0x82
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4814      	ldr	r0, [pc, #80]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003cd2:	f005 ffbd 	bl	8009c50 <HAL_TIM_PWM_ConfigChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_TIM16_Init+0xb8>
  {
    Error_Handler();
 8003cdc:	f7fd ff20 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003d02:	463b      	mov	r3, r7
 8003d04:	4619      	mov	r1, r3
 8003d06:	4807      	ldr	r0, [pc, #28]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003d08:	f007 fb8c 	bl	800b424 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8003d12:	f7fd ff05 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003d16:	4803      	ldr	r0, [pc, #12]	; (8003d24 <MX_TIM16_Init+0xfc>)
 8003d18:	f000 fa84 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003d1c:	bf00      	nop
 8003d1e:	3750      	adds	r7, #80	; 0x50
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20019180 	.word	0x20019180
 8003d28:	40014400 	.word	0x40014400

08003d2c <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b0a0      	sub	sp, #128	; 0x80
 8003d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
 8003d3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
 8003d6c:	615a      	str	r2, [r3, #20]
 8003d6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d70:	463b      	mov	r3, r7
 8003d72:	2234      	movs	r2, #52	; 0x34
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f007 fd2a 	bl	800b7d0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003d7c:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003d7e:	4a53      	ldr	r2, [pc, #332]	; (8003ecc <MX_TIM20_Init+0x1a0>)
 8003d80:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8003d82:	4b51      	ldr	r3, [pc, #324]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d88:	4b4f      	ldr	r3, [pc, #316]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 17;
 8003d8e:	4b4e      	ldr	r3, [pc, #312]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003d90:	2211      	movs	r2, #17
 8003d92:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 255;
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da0:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8003da6:	4848      	ldr	r0, [pc, #288]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003da8:	f005 f838 	bl	8008e1c <HAL_TIM_Base_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 8003db2:	f7fd feb5 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dba:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8003dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4841      	ldr	r0, [pc, #260]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003dc4:	f006 f858 	bl	8009e78 <HAL_TIM_ConfigClockSource>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM20_Init+0xa6>
  {
    Error_Handler();
 8003dce:	f7fd fea7 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8003dd2:	483d      	ldr	r0, [pc, #244]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003dd4:	f005 f96e 	bl	80090b4 <HAL_TIM_PWM_Init>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM20_Init+0xb6>
  {
    Error_Handler();
 8003dde:	f7fd fe9f 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim20, TIM_OPMODE_SINGLE) != HAL_OK)
 8003de2:	2108      	movs	r1, #8
 8003de4:	4838      	ldr	r0, [pc, #224]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003de6:	f005 fa41 	bl	800926c <HAL_TIM_OnePulse_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 8003df0:	f7fd fe96 	bl	8001b20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8003df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 8003dfa:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
 8003dfe:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8003e00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e04:	4619      	mov	r1, r3
 8003e06:	4830      	ldr	r0, [pc, #192]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003e08:	f006 f94c 	bl	800a0a4 <HAL_TIM_SlaveConfigSynchro>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 8003e12:	f7fd fe85 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003e16:	2330      	movs	r3, #48	; 0x30
 8003e18:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003e22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e26:	4619      	mov	r1, r3
 8003e28:	4827      	ldr	r0, [pc, #156]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003e2a:	f007 fa65 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM20_Init+0x10c>
  {
    Error_Handler();
 8003e34:	f7fd fe74 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003e38:	2370      	movs	r3, #112	; 0x70
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 8;
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003e40:	2302      	movs	r3, #2
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e44:	2300      	movs	r3, #0
 8003e46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	481a      	ldr	r0, [pc, #104]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003e5e:	f005 fef7 	bl	8009c50 <HAL_TIM_PWM_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM20_Init+0x140>
  {
    Error_Handler();
 8003e68:	f7fd fe5a 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4807      	ldr	r0, [pc, #28]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003eaa:	f007 fabb 	bl	800b424 <HAL_TIMEx_ConfigBreakDeadTime>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM20_Init+0x18c>
  {
    Error_Handler();
 8003eb4:	f7fd fe34 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8003eb8:	4803      	ldr	r0, [pc, #12]	; (8003ec8 <MX_TIM20_Init+0x19c>)
 8003eba:	f000 f9b3 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003ebe:	bf00      	nop
 8003ec0:	3780      	adds	r7, #128	; 0x80
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2001924c 	.word	0x2001924c
 8003ecc:	40015000 	.word	0x40015000

08003ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b090      	sub	sp, #64	; 0x40
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a7f      	ldr	r2, [pc, #508]	; (80040ec <HAL_TIM_Base_MspInit+0x21c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d132      	bne.n	8003f58 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ef2:	4b7f      	ldr	r3, [pc, #508]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	4a7e      	ldr	r2, [pc, #504]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003efc:	6613      	str	r3, [r2, #96]	; 0x60
 8003efe:	4b7c      	ldr	r3, [pc, #496]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0a:	4b79      	ldr	r3, [pc, #484]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	4a78      	ldr	r2, [pc, #480]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f16:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f34:	2306      	movs	r3, #6
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f42:	f003 fbc7 	bl	80076d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	201a      	movs	r0, #26
 8003f4c:	f003 f827 	bl	8006f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003f50:	201a      	movs	r0, #26
 8003f52:	f003 f83e 	bl	8006fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003f56:	e0c4      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a65      	ldr	r2, [pc, #404]	; (80040f4 <HAL_TIM_Base_MspInit+0x224>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d130      	bne.n	8003fc4 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	4a62      	ldr	r2, [pc, #392]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6e:	4b60      	ldr	r3, [pc, #384]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7a:	4b5d      	ldr	r3, [pc, #372]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	4a5c      	ldr	r2, [pc, #368]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f86:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f92:	2320      	movs	r3, #32
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f96:	2302      	movs	r3, #2
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003faa:	4619      	mov	r1, r3
 8003fac:	4852      	ldr	r0, [pc, #328]	; (80040f8 <HAL_TIM_Base_MspInit+0x228>)
 8003fae:	f003 fb91 	bl	80076d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	201d      	movs	r0, #29
 8003fb8:	f002 fff1 	bl	8006f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fbc:	201d      	movs	r0, #29
 8003fbe:	f003 f808 	bl	8006fd2 <HAL_NVIC_EnableIRQ>
}
 8003fc2:	e08e      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM4)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4c      	ldr	r2, [pc, #304]	; (80040fc <HAL_TIM_Base_MspInit+0x22c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d128      	bne.n	8004020 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fce:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	4a47      	ldr	r2, [pc, #284]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fda:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe6:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	4a41      	ldr	r2, [pc, #260]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	2300      	movs	r3, #0
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800400e:	2302      	movs	r3, #2
 8004010:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004016:	4619      	mov	r1, r3
 8004018:	4837      	ldr	r0, [pc, #220]	; (80040f8 <HAL_TIM_Base_MspInit+0x228>)
 800401a:	f003 fb5b 	bl	80076d4 <HAL_GPIO_Init>
}
 800401e:	e060      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM8)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a36      	ldr	r2, [pc, #216]	; (8004100 <HAL_TIM_Base_MspInit+0x230>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10c      	bne.n	8004044 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004030:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004034:	6613      	str	r3, [r2, #96]	; 0x60
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
}
 8004042:	e04e      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM16)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <HAL_TIM_Base_MspInit+0x234>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004058:	6613      	str	r3, [r2, #96]	; 0x60
 800405a:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 800405c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
}
 8004066:	e03c      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM20)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a26      	ldr	r2, [pc, #152]	; (8004108 <HAL_TIM_Base_MspInit+0x238>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d137      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004072:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407c:	6613      	str	r3, [r2, #96]	; 0x60
 800407e:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_TIM_Base_MspInit+0x220>)
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
    hdma_tim20_ch1.Instance = DMA2_Channel1;
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_TIM_Base_MspInit+0x240>)
 800408e:	601a      	str	r2, [r3, #0]
    hdma_tim20_ch1.Init.Request = DMA_REQUEST_TIM20_CH1;
 8004090:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 8004092:	2256      	movs	r2, #86	; 0x56
 8004094:	605a      	str	r2, [r3, #4]
    hdma_tim20_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 8004098:	2210      	movs	r2, #16
 800409a:	609a      	str	r2, [r3, #8]
    hdma_tim20_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	60da      	str	r2, [r3, #12]
    hdma_tim20_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040a4:	2280      	movs	r2, #128	; 0x80
 80040a6:	611a      	str	r2, [r3, #16]
    hdma_tim20_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ae:	615a      	str	r2, [r3, #20]
    hdma_tim20_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b6:	619a      	str	r2, [r3, #24]
    hdma_tim20_ch1.Init.Mode = DMA_NORMAL;
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
    hdma_tim20_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim20_ch1) != HAL_OK)
 80040c6:	4811      	ldr	r0, [pc, #68]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040c8:	f002 ff9e 	bl	8007008 <HAL_DMA_Init>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_TIM_Base_MspInit+0x206>
      Error_Handler();
 80040d2:	f7fd fd25 	bl	8001b20 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim20_ch1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
 80040dc:	4a0b      	ldr	r2, [pc, #44]	; (800410c <HAL_TIM_Base_MspInit+0x23c>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80040e2:	bf00      	nop
 80040e4:	3740      	adds	r7, #64	; 0x40
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40000400 	.word	0x40000400
 80040f8:	48000400 	.word	0x48000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40013400 	.word	0x40013400
 8004104:	40014400 	.word	0x40014400
 8004108:	40015000 	.word	0x40015000
 800410c:	20019318 	.word	0x20019318
 8004110:	40020408 	.word	0x40020408

08004114 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d14d      	bne.n	80041d2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	4a28      	ldr	r2, [pc, #160]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6593      	str	r3, [r2, #88]	; 0x58
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	4a22      	ldr	r2, [pc, #136]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004188:	2301      	movs	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418c:	2300      	movs	r3, #0
 800418e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004190:	2301      	movs	r3, #1
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800419e:	f003 fa99 	bl	80076d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041a2:	2308      	movs	r3, #8
 80041a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041b2:	2301      	movs	r3, #1
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	4619      	mov	r1, r3
 80041bc:	4808      	ldr	r0, [pc, #32]	; (80041e0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80041be:	f003 fa89 	bl	80076d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	201c      	movs	r0, #28
 80041c8:	f002 fee9 	bl	8006f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041cc:	201c      	movs	r0, #28
 80041ce:	f002 ff00 	bl	8006fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80041d2:	bf00      	nop
 80041d4:	3728      	adds	r7, #40	; 0x28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	48000400 	.word	0x48000400

080041e4 <HAL_TIM_OnePulse_MspInit>:

void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* tim_onepulseHandle)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  if(tim_onepulseHandle->Instance==TIM5)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_TIM_OnePulse_MspInit+0x38>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10b      	bne.n	800420e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80041fc:	f043 0308 	orr.w	r3, r3, #8
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 031c 	add.w	r3, r7, #28
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a46      	ldr	r2, [pc, #280]	; (800435c <HAL_TIM_MspPostInit+0x138>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d11e      	bne.n	8004284 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	4b46      	ldr	r3, [pc, #280]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	4a45      	ldr	r2, [pc, #276]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004252:	4b43      	ldr	r3, [pc, #268]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800425e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004270:	2306      	movs	r3, #6
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f107 031c 	add.w	r3, r7, #28
 8004278:	4619      	mov	r1, r3
 800427a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800427e:	f003 fa29 	bl	80076d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8004282:	e066      	b.n	8004352 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a36      	ldr	r2, [pc, #216]	; (8004364 <HAL_TIM_MspPostInit+0x140>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d11c      	bne.n	80042c8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b2:	2300      	movs	r3, #0
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80042b6:	2305      	movs	r3, #5
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ba:	f107 031c 	add.w	r3, r7, #28
 80042be:	4619      	mov	r1, r3
 80042c0:	4829      	ldr	r0, [pc, #164]	; (8004368 <HAL_TIM_MspPostInit+0x144>)
 80042c2:	f003 fa07 	bl	80076d4 <HAL_GPIO_Init>
}
 80042c6:	e044      	b.n	8004352 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM16)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a27      	ldr	r2, [pc, #156]	; (800436c <HAL_TIM_MspPostInit+0x148>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d11e      	bne.n	8004310 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 80042d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d6:	4a22      	ldr	r2, [pc, #136]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80042ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80042fc:	2301      	movs	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800430a:	f003 f9e3 	bl	80076d4 <HAL_GPIO_Init>
}
 800430e:	e020      	b.n	8004352 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM20)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIM_MspPostInit+0x14c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d11b      	bne.n	8004352 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	4a10      	ldr	r2, [pc, #64]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_TIM_MspPostInit+0x13c>)
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004332:	2304      	movs	r3, #4
 8004334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004336:	2302      	movs	r3, #2
 8004338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800433e:	2302      	movs	r3, #2
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8004342:	2303      	movs	r3, #3
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004346:	f107 031c 	add.w	r3, r7, #28
 800434a:	4619      	mov	r1, r3
 800434c:	4806      	ldr	r0, [pc, #24]	; (8004368 <HAL_TIM_MspPostInit+0x144>)
 800434e:	f003 f9c1 	bl	80076d4 <HAL_GPIO_Init>
}
 8004352:	bf00      	nop
 8004354:	3730      	adds	r7, #48	; 0x30
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40021000 	.word	0x40021000
 8004364:	40013400 	.word	0x40013400
 8004368:	48000400 	.word	0x48000400
 800436c:	40014400 	.word	0x40014400
 8004370:	40015000 	.word	0x40015000

08004374 <initBitMap>:
// 00000000 -> 0
// 00000001 -> 1
// 00000010 -> 2
// 00000011 -> 2
// etc
void initBitMap() {
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e01a      	b.n	80043b6 <initBitMap+0x42>
		int bit = 1 << i;
 8004380:	2201      	movs	r2, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	607b      	str	r3, [r7, #4]
		for (int j = 0; j < bit; j++) {
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	e00b      	b.n	80043a8 <initBitMap+0x34>
			bitMap[bit + j] = i + 1;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	440b      	add	r3, r1
 800439a:	3201      	adds	r2, #1
 800439c:	b2d1      	uxtb	r1, r2
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <initBitMap+0x58>)
 80043a0:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < bit; j++) {
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	dbef      	blt.n	8004390 <initBitMap+0x1c>
	for (int i = 0; i < 8; i++) {
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3301      	adds	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	dde1      	ble.n	8004380 <initBitMap+0xc>
		}
	}
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20019478 	.word	0x20019478

080043d0 <initColorMaps>:
		uint16_t rgb = rgbMap[i];
		rgbMap[i] = (rgb >> 8) | ((rgb & 0xff) << 8);
	}
}

void initColorMaps(float scaleFactor, float offsetVoltage) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80043da:	edc7 0a00 	vstr	s1, [r7]
	offset = offsetVoltage;
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <initColorMaps+0x8c>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6013      	str	r3, [r2, #0]
	// multiply by the initial scale factor and add the offset
	for (int i = 0; i < 16; i++) {
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e02c      	b.n	8004444 <initColorMaps+0x74>
		YVolts[i] = (YVolts[i] * scaleFactor) + offset;
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <initColorMaps+0x90>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	ed93 7a00 	vldr	s14, [r3]
 80043f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80043fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <initColorMaps+0x8c>)
 8004400:	edd3 7a00 	vldr	s15, [r3]
 8004404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <initColorMaps+0x90>)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	edc3 7a00 	vstr	s15, [r3]
		RYVolts[i] = (RYVolts[i] * scaleFactor) + offset;
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <initColorMaps+0x94>)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	ed93 7a00 	vldr	s14, [r3]
 8004420:	edd7 7a01 	vldr	s15, [r7, #4]
 8004424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <initColorMaps+0x8c>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <initColorMaps+0x94>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 16; i++) {
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3301      	adds	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	ddcf      	ble.n	80043ea <initColorMaps+0x1a>
	}

	setColorLevels(YVolts, RYVolts);
 800444a:	4906      	ldr	r1, [pc, #24]	; (8004464 <initColorMaps+0x94>)
 800444c:	4804      	ldr	r0, [pc, #16]	; (8004460 <initColorMaps+0x90>)
 800444e:	f000 f80b 	bl	8004468 <setColorLevels>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20019578 	.word	0x20019578
 8004460:	20000068 	.word	0x20000068
 8004464:	200000e8 	.word	0x200000e8

08004468 <setColorLevels>:

void setColorLevels(float yLevels[16], float ryLevels[16]) {
 8004468:	b480      	push	{r7}
 800446a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800446e:	af00      	add	r7, sp, #0
 8004470:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004474:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8004478:	6018      	str	r0, [r3, #0]
 800447a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800447e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8004482:	6019      	str	r1, [r3, #0]
	float v = 0;
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	float oneBit = VREF / ADC_RESOLUTION_STEPS;
 800448c:	4ba4      	ldr	r3, [pc, #656]	; (8004720 <setColorLevels+0x2b8>)
 800448e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	uint16_t RYmap1[ADC_RESOLUTION_STEPS];

	float voltages[ADC_RESOLUTION_STEPS];

	// voltage to adc reading map
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8004492:	2300      	movs	r3, #0
 8004494:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8004498:	e017      	b.n	80044ca <setColorLevels+0x62>
		voltages[i] = v;
 800449a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800449e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80044a2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80044ae:	601a      	str	r2, [r3, #0]
		v += oneBit;
 80044b0:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 80044b4:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80044b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044bc:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 80044c0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80044c4:	3301      	adds	r3, #1
 80044c6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80044ca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80044ce:	2b3f      	cmp	r3, #63	; 0x3f
 80044d0:	dde3      	ble.n	800449a <setColorLevels+0x32>
	}

	// Clear the color maps
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80044d8:	e022      	b.n	8004520 <setColorLevels+0xb8>
		YMap[j] = 0;
 80044da:	4a92      	ldr	r2, [pc, #584]	; (8004724 <setColorLevels+0x2bc>)
 80044dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80044e0:	2100      	movs	r1, #0
 80044e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RYMap[j] = 0;
 80044e6:	4a90      	ldr	r2, [pc, #576]	; (8004728 <setColorLevels+0x2c0>)
 80044e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80044ec:	2100      	movs	r1, #0
 80044ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Ymap1[j] = 0;
 80044f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80044fc:	443b      	add	r3, r7
 80044fe:	2200      	movs	r2, #0
 8004500:	f823 2ca0 	strh.w	r2, [r3, #-160]
		RYmap1[j] = 0;
 8004504:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004508:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800450c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8004510:	2100      	movs	r1, #0
 8004512:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8004516:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800451a:	3301      	adds	r3, #1
 800451c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004520:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004524:	2b3f      	cmp	r3, #63	; 0x3f
 8004526:	ddd8      	ble.n	80044da <setColorLevels+0x72>
	}

	// Create the voltage to color name bitmaps
	for (int i = 0; i < 16; i++) {
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800452e:	e0ee      	b.n	800470e <setColorLevels+0x2a6>

		v = yLevels[i];
 8004530:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800453a:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	4413      	add	r3, r2
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS - 1; j++) {
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800454e:	e041      	b.n	80045d4 <setColorLevels+0x16c>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8004550:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004554:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8004558:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8004568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	db2b      	blt.n	80045ca <setColorLevels+0x162>
 8004572:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004576:	3301      	adds	r3, #1
 8004578:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800457c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 800458c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	d519      	bpl.n	80045ca <setColorLevels+0x162>
				Ymap1[j] |= (1 << i);
 8004596:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80045a0:	443b      	add	r3, r7
 80045a2:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	2101      	movs	r1, #1
 80045aa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	b21b      	sxth	r3, r3
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80045c4:	443b      	add	r3, r7
 80045c6:	f823 2ca0 	strh.w	r2, [r3, #-160]
		for (int j = 0; j < ADC_RESOLUTION_STEPS - 1; j++) {
 80045ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80045d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80045d8:	2b3e      	cmp	r3, #62	; 0x3e
 80045da:	ddb9      	ble.n	8004550 <setColorLevels+0xe8>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS - 1] <= v) {
 80045dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80045e0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80045e4:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 80045e8:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 80045ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f4:	db0d      	blt.n	8004612 <setColorLevels+0x1aa>
			Ymap1[ADC_RESOLUTION_STEPS - 1] |= (1 << i);
 80045f6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80045fa:	b21a      	sxth	r2, r3
 80045fc:	2101      	movs	r1, #1
 80045fe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	b21b      	sxth	r3, r3
 8004608:	4313      	orrs	r3, r2
 800460a:	b21b      	sxth	r3, r3
 800460c:	b29b      	uxth	r3, r3
 800460e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		}
		v = ryLevels[i];
 8004612:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800461c:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4413      	add	r3, r2
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS - 1; j++) {
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004630:	e041      	b.n	80046b6 <setColorLevels+0x24e>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8004632:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004636:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800463a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	edd3 7a00 	vldr	s15, [r3]
 8004646:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 800464a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	db2b      	blt.n	80046ac <setColorLevels+0x244>
 8004654:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004658:	3301      	adds	r3, #1
 800465a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800465e:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d519      	bpl.n	80046ac <setColorLevels+0x244>
				RYmap1[j] |= (1 << i);
 8004678:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800467c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004680:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004684:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004688:	b21a      	sxth	r2, r3
 800468a:	2101      	movs	r1, #1
 800468c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	b21b      	sxth	r3, r3
 8004696:	4313      	orrs	r3, r2
 8004698:	b21b      	sxth	r3, r3
 800469a:	b299      	uxth	r1, r3
 800469c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046a4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80046a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = 0; j < ADC_RESOLUTION_STEPS - 1; j++) {
 80046ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80046b0:	3301      	adds	r3, #1
 80046b2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80046b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80046ba:	2b3e      	cmp	r3, #62	; 0x3e
 80046bc:	ddb9      	ble.n	8004632 <setColorLevels+0x1ca>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS - 1] <= v) {
 80046be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046c2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80046c6:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 80046ca:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 80046ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	db15      	blt.n	8004704 <setColorLevels+0x29c>
			RYmap1[ADC_RESOLUTION_STEPS - 1] |= (1 << i);
 80046d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046e0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80046e4:	b21a      	sxth	r2, r3
 80046e6:	2101      	movs	r1, #1
 80046e8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	4313      	orrs	r3, r2
 80046f4:	b21b      	sxth	r3, r3
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004700:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	for (int i = 0; i < 16; i++) {
 8004704:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004708:	3301      	adds	r3, #1
 800470a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800470e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004712:	2b0f      	cmp	r3, #15
 8004714:	f77f af0c 	ble.w	8004530 <setColorLevels+0xc8>
	}

	// now propagate the map to each neighbouring entry
	// to allow for noise and inaccuracy

	for (uint16_t i = 0; i < ADC_RESOLUTION_STEPS - 1; i++) {
 8004718:	2300      	movs	r3, #0
 800471a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800471e:	e080      	b.n	8004822 <setColorLevels+0x3ba>
 8004720:	3d39999a 	.word	0x3d39999a
 8004724:	20019378 	.word	0x20019378
 8004728:	200193f8 	.word	0x200193f8

		YMap[i] = Ymap1[i];
 800472c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004730:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800473a:	443b      	add	r3, r7
 800473c:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 8004740:	4b3e      	ldr	r3, [pc, #248]	; (800483c <setColorLevels+0x3d4>)
 8004742:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		RYMap[i] = RYmap1[i];
 8004746:	f8b7 120e 	ldrh.w	r1, [r7, #526]	; 0x20e
 800474a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800474e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8004752:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004756:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800475a:	4a39      	ldr	r2, [pc, #228]	; (8004840 <setColorLevels+0x3d8>)
 800475c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (i > 0) {
 8004760:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d029      	beq.n	80047bc <setColorLevels+0x354>
			YMap[i] |= Ymap1[i - 1];
 8004768:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800476c:	4a33      	ldr	r2, [pc, #204]	; (800483c <setColorLevels+0x3d4>)
 800476e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004772:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004776:	3b01      	subs	r3, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800477e:	443b      	add	r3, r7
 8004780:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8004784:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004788:	430a      	orrs	r2, r1
 800478a:	b291      	uxth	r1, r2
 800478c:	4a2b      	ldr	r2, [pc, #172]	; (800483c <setColorLevels+0x3d4>)
 800478e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i - 1];
 8004792:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004796:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <setColorLevels+0x3d8>)
 8004798:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800479c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80047a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80047ae:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047b2:	430a      	orrs	r2, r1
 80047b4:	b291      	uxth	r1, r2
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <setColorLevels+0x3d8>)
 80047b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if (i < ADC_RESOLUTION_STEPS - 1) {
 80047bc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047c0:	2b3e      	cmp	r3, #62	; 0x3e
 80047c2:	d829      	bhi.n	8004818 <setColorLevels+0x3b0>
			YMap[i] |= Ymap1[i + 1];
 80047c4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047c8:	4a1c      	ldr	r2, [pc, #112]	; (800483c <setColorLevels+0x3d4>)
 80047ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80047ce:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047d2:	3301      	adds	r3, #1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80047da:	443b      	add	r3, r7
 80047dc:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 80047e0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047e4:	430a      	orrs	r2, r1
 80047e6:	b291      	uxth	r1, r2
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <setColorLevels+0x3d4>)
 80047ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i + 1];
 80047ee:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <setColorLevels+0x3d8>)
 80047f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80047f8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004806:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800480a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800480e:	430a      	orrs	r2, r1
 8004810:	b291      	uxth	r1, r2
 8004812:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <setColorLevels+0x3d8>)
 8004814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < ADC_RESOLUTION_STEPS - 1; i++) {
 8004818:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800481c:	3301      	adds	r3, #1
 800481e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8004822:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004826:	2b3e      	cmp	r3, #62	; 0x3e
 8004828:	d980      	bls.n	800472c <setColorLevels+0x2c4>
		}
	}
}
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20019378 	.word	0x20019378
 8004840:	200193f8 	.word	0x200193f8

08004844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004844:	480d      	ldr	r0, [pc, #52]	; (800487c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004848:	480d      	ldr	r0, [pc, #52]	; (8004880 <LoopForever+0x6>)
  ldr r1, =_edata
 800484a:	490e      	ldr	r1, [pc, #56]	; (8004884 <LoopForever+0xa>)
  ldr r2, =_sidata
 800484c:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <LoopForever+0xe>)
  movs r3, #0
 800484e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004850:	e002      	b.n	8004858 <LoopCopyDataInit>

08004852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004856:	3304      	adds	r3, #4

08004858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800485a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800485c:	d3f9      	bcc.n	8004852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004860:	4c0b      	ldr	r4, [pc, #44]	; (8004890 <LoopForever+0x16>)
  movs r3, #0
 8004862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004864:	e001      	b.n	800486a <LoopFillZerobss>

08004866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004868:	3204      	adds	r2, #4

0800486a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800486a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800486c:	d3fb      	bcc.n	8004866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800486e:	f7fe fe35 	bl	80034dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004872:	f006 ff89 	bl	800b788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004876:	f7fc fc73 	bl	8001160 <main>

0800487a <LoopForever>:

LoopForever:
    b LoopForever
 800487a:	e7fe      	b.n	800487a <LoopForever>
  ldr   r0, =_estack
 800487c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004884:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8004888:	0800ba38 	.word	0x0800ba38
  ldr r2, =_sbss
 800488c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8004890:	20019584 	.word	0x20019584

08004894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004894:	e7fe      	b.n	8004894 <ADC1_2_IRQHandler>
	...

08004898 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_Init+0x3c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <HAL_Init+0x3c>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ae:	2003      	movs	r0, #3
 80048b0:	f002 fb6a 	bl	8006f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048b4:	200f      	movs	r0, #15
 80048b6:	f000 f80f 	bl	80048d8 <HAL_InitTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	71fb      	strb	r3, [r7, #7]
 80048c4:	e001      	b.n	80048ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048c6:	f7fe fd4b 	bl	8003360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048ca:	79fb      	ldrb	r3, [r7, #7]

}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40022000 	.word	0x40022000

080048d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80048e4:	4b16      	ldr	r3, [pc, #88]	; (8004940 <HAL_InitTick+0x68>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d022      	beq.n	8004932 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <HAL_InitTick+0x6c>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_InitTick+0x68>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	4618      	mov	r0, r3
 8004902:	f002 fb74 	bl	8006fee <HAL_SYSTICK_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10f      	bne.n	800492c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d809      	bhi.n	8004926 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004912:	2200      	movs	r2, #0
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	f04f 30ff 	mov.w	r0, #4294967295
 800491a:	f002 fb40 	bl	8006f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <HAL_InitTick+0x70>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e007      	b.n	8004936 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e004      	b.n	8004936 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e001      	b.n	8004936 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000012c 	.word	0x2000012c
 8004944:	20000000 	.word	0x20000000
 8004948:	20000128 	.word	0x20000128

0800494c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_IncTick+0x1c>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_IncTick+0x20>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4413      	add	r3, r2
 800495a:	4a03      	ldr	r2, [pc, #12]	; (8004968 <HAL_IncTick+0x1c>)
 800495c:	6013      	str	r3, [r2, #0]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	2001957c 	.word	0x2001957c
 800496c:	2000012c 	.word	0x2000012c

08004970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return uwTick;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_GetTick+0x14>)
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2001957c 	.word	0x2001957c

08004988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004990:	f7ff ffee 	bl	8004970 <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d004      	beq.n	80049ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80049a2:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_Delay+0x40>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049ac:	bf00      	nop
 80049ae:	f7ff ffdf 	bl	8004970 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d8f7      	bhi.n	80049ae <HAL_Delay+0x26>
  {
  }
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	2000012c 	.word	0x2000012c

080049cc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049dc:	4904      	ldr	r1, [pc, #16]	; (80049f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	600b      	str	r3, [r1, #0]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40010030 	.word	0x40010030

080049f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 0202 	bic.w	r2, r3, #2
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40010030 	.word	0x40010030

08004a1c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a2e:	f7ff ff9f 	bl	8004970 <HAL_GetTick>
 8004a32:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8004a34:	e008      	b.n	8004a48 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8004a36:	f7ff ff9b 	bl	8004970 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b0a      	cmp	r3, #10
 8004a42:	d901      	bls.n	8004a48 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40010030 	.word	0x40010030

08004a64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3360      	adds	r3, #96	; 0x60
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <LL_ADC_SetOffset+0x44>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	03fff000 	.word	0x03fff000

08004b14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3360      	adds	r3, #96	; 0x60
 8004b22:	461a      	mov	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3360      	adds	r3, #96	; 0x60
 8004b50:	461a      	mov	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3360      	adds	r3, #96	; 0x60
 8004b86:	461a      	mov	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3360      	adds	r3, #96	; 0x60
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	615a      	str	r2, [r3, #20]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b087      	sub	sp, #28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3330      	adds	r3, #48	; 0x30
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	4413      	add	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	211f      	movs	r1, #31
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	401a      	ands	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0e9b      	lsrs	r3, r3, #26
 8004c66:	f003 011f 	and.w	r1, r3, #31
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	431a      	orrs	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3314      	adds	r3, #20
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	0e5b      	lsrs	r3, r3, #25
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	4413      	add	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	0d1b      	lsrs	r3, r3, #20
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2107      	movs	r1, #7
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	0d1b      	lsrs	r3, r3, #20
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a0f      	ldr	r2, [pc, #60]	; (8004d28 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10a      	bne.n	8004d06 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004d04:	e00a      	b.n	8004d1c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d12:	43db      	mvns	r3, r3
 8004d14:	401a      	ands	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	407f0000 	.word	0x407f0000

08004d2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6093      	str	r3, [r2, #8]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d64:	d101      	bne.n	8004d6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db4:	d101      	bne.n	8004dba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ddc:	f043 0201 	orr.w	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e04:	f043 0202 	orr.w	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <LL_ADC_IsEnabled+0x18>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <LL_ADC_IsEnabled+0x1a>
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d101      	bne.n	8004e56 <LL_ADC_IsDisableOngoing+0x18>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <LL_ADC_IsDisableOngoing+0x1a>
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e78:	f043 0210 	orr.w	r2, r3, #16
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d101      	bne.n	8004ea4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ec2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d101      	bne.n	8004ef2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e1ea      	b.n	80052f0 <HAL_ADC_Init+0x3f0>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d133      	bne.n	8004f90 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a68      	ldr	r2, [pc, #416]	; (80050cc <HAL_ADC_Init+0x1cc>)
 8004f2c:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a67      	ldr	r2, [pc, #412]	; (80050d0 <HAL_ADC_Init+0x1d0>)
 8004f32:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a67      	ldr	r2, [pc, #412]	; (80050d4 <HAL_ADC_Init+0x1d4>)
 8004f38:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a66      	ldr	r2, [pc, #408]	; (80050d8 <HAL_ADC_Init+0x1d8>)
 8004f3e:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a66      	ldr	r2, [pc, #408]	; (80050dc <HAL_ADC_Init+0x1dc>)
 8004f44:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a65      	ldr	r2, [pc, #404]	; (80050e0 <HAL_ADC_Init+0x1e0>)
 8004f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a64      	ldr	r2, [pc, #400]	; (80050e4 <HAL_ADC_Init+0x1e4>)
 8004f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a63      	ldr	r2, [pc, #396]	; (80050e8 <HAL_ADC_Init+0x1e8>)
 8004f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a62      	ldr	r2, [pc, #392]	; (80050ec <HAL_ADC_Init+0x1ec>)
 8004f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a5f      	ldr	r2, [pc, #380]	; (80050f0 <HAL_ADC_Init+0x1f0>)
 8004f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fedb 	bl	8004d50 <LL_ADC_IsDeepPowerDownEnabled>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fec1 	bl	8004d2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fef6 	bl	8004da0 <LL_ADC_IsInternalRegulatorEnabled>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d115      	bne.n	8004fe6 <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff feda 	bl	8004d78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fc4:	4b4b      	ldr	r3, [pc, #300]	; (80050f4 <HAL_ADC_Init+0x1f4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	099b      	lsrs	r3, r3, #6
 8004fca:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_ADC_Init+0x1f8>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004fd8:	e002      	b.n	8004fe0 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f9      	bne.n	8004fda <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fed8 	bl	8004da0 <LL_ADC_IsInternalRegulatorEnabled>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10d      	bne.n	8005012 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffa:	f043 0210 	orr.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff ff38 	bl	8004e8c <LL_ADC_REG_IsConversionOngoing>
 800501c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 8159 	bne.w	80052de <HAL_ADC_Init+0x3de>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 8155 	bne.w	80052de <HAL_ADC_Init+0x3de>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005038:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800503c:	f043 0202 	orr.w	r2, r3, #2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fee5 	bl	8004e18 <LL_ADC_IsEnabled>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d164      	bne.n	800511e <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800505c:	d004      	beq.n	8005068 <HAL_ADC_Init+0x168>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a26      	ldr	r2, [pc, #152]	; (80050fc <HAL_ADC_Init+0x1fc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10f      	bne.n	8005088 <HAL_ADC_Init+0x188>
 8005068:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800506c:	f7ff fed4 	bl	8004e18 <LL_ADC_IsEnabled>
 8005070:	4604      	mov	r4, r0
 8005072:	4822      	ldr	r0, [pc, #136]	; (80050fc <HAL_ADC_Init+0x1fc>)
 8005074:	f7ff fed0 	bl	8004e18 <LL_ADC_IsEnabled>
 8005078:	4603      	mov	r3, r0
 800507a:	4323      	orrs	r3, r4
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e012      	b.n	80050ae <HAL_ADC_Init+0x1ae>
 8005088:	481d      	ldr	r0, [pc, #116]	; (8005100 <HAL_ADC_Init+0x200>)
 800508a:	f7ff fec5 	bl	8004e18 <LL_ADC_IsEnabled>
 800508e:	4604      	mov	r4, r0
 8005090:	481c      	ldr	r0, [pc, #112]	; (8005104 <HAL_ADC_Init+0x204>)
 8005092:	f7ff fec1 	bl	8004e18 <LL_ADC_IsEnabled>
 8005096:	4603      	mov	r3, r0
 8005098:	431c      	orrs	r4, r3
 800509a:	481b      	ldr	r0, [pc, #108]	; (8005108 <HAL_ADC_Init+0x208>)
 800509c:	f7ff febc 	bl	8004e18 <LL_ADC_IsEnabled>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4323      	orrs	r3, r4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d035      	beq.n	800511e <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ba:	d004      	beq.n	80050c6 <HAL_ADC_Init+0x1c6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <HAL_ADC_Init+0x1fc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d124      	bne.n	8005110 <HAL_ADC_Init+0x210>
 80050c6:	4a11      	ldr	r2, [pc, #68]	; (800510c <HAL_ADC_Init+0x20c>)
 80050c8:	e023      	b.n	8005112 <HAL_ADC_Init+0x212>
 80050ca:	bf00      	nop
 80050cc:	0800543d 	.word	0x0800543d
 80050d0:	08005451 	.word	0x08005451
 80050d4:	08005465 	.word	0x08005465
 80050d8:	08005479 	.word	0x08005479
 80050dc:	080064f1 	.word	0x080064f1
 80050e0:	08006505 	.word	0x08006505
 80050e4:	08006519 	.word	0x08006519
 80050e8:	0800652d 	.word	0x0800652d
 80050ec:	08006541 	.word	0x08006541
 80050f0:	08000c55 	.word	0x08000c55
 80050f4:	20000000 	.word	0x20000000
 80050f8:	053e2d63 	.word	0x053e2d63
 80050fc:	50000100 	.word	0x50000100
 8005100:	50000400 	.word	0x50000400
 8005104:	50000500 	.word	0x50000500
 8005108:	50000600 	.word	0x50000600
 800510c:	50000300 	.word	0x50000300
 8005110:	4a79      	ldr	r2, [pc, #484]	; (80052f8 <HAL_ADC_Init+0x3f8>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7ff fca3 	bl	8004a64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7f5b      	ldrb	r3, [r3, #29]
 8005122:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005128:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800512e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005134:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800513c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_ADC_Init+0x25a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	3b01      	subs	r3, #1
 8005152:	045b      	lsls	r3, r3, #17
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_ADC_Init+0x276>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <HAL_ADC_Init+0x3fc>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	430b      	orrs	r3, r1
 8005188:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fe71 	bl	8004e8c <LL_ADC_REG_IsConversionOngoing>
 80051aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fe92 	bl	8004eda <LL_ADC_INJ_IsConversionOngoing>
 80051b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d16d      	bne.n	800529a <HAL_ADC_Init+0x39a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d16a      	bne.n	800529a <HAL_ADC_Init+0x39a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80051c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d017      	beq.n	8005226 <HAL_ADC_Init+0x326>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005204:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800520e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005212:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6911      	ldr	r1, [r2, #16]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	430b      	orrs	r3, r1
 8005220:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005224:	e013      	b.n	800524e <HAL_ADC_Init+0x34e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005234:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005246:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800524a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005254:	2b01      	cmp	r3, #1
 8005256:	d118      	bne.n	800528a <HAL_ADC_Init+0x38a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005262:	f023 0304 	bic.w	r3, r3, #4
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800526e:	4311      	orrs	r1, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005274:	4311      	orrs	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800527a:	430a      	orrs	r2, r1
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	e007      	b.n	800529a <HAL_ADC_Init+0x39a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d10c      	bne.n	80052bc <HAL_ADC_Init+0x3bc>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	f023 010f 	bic.w	r1, r3, #15
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	1e5a      	subs	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ba:	e007      	b.n	80052cc <HAL_ADC_Init+0x3cc>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 020f 	bic.w	r2, r2, #15
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	f023 0303 	bic.w	r3, r3, #3
 80052d4:	f043 0201 	orr.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	65da      	str	r2, [r3, #92]	; 0x5c
 80052dc:	e007      	b.n	80052ee <HAL_ADC_Init+0x3ee>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	f043 0210 	orr.w	r2, r3, #16
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3724      	adds	r7, #36	; 0x24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd90      	pop	{r4, r7, pc}
 80052f8:	50000700 	.word	0x50000700
 80052fc:	fff04007 	.word	0xfff04007

08005300 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	460b      	mov	r3, r1
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531c:	f043 0210 	orr.w	r2, r3, #16
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e082      	b.n	800542e <HAL_ADC_RegisterCallback+0x12e>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d056      	beq.n	80053e2 <HAL_ADC_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 8005334:	7afb      	ldrb	r3, [r7, #11]
 8005336:	2b0a      	cmp	r3, #10
 8005338:	d84a      	bhi.n	80053d0 <HAL_ADC_RegisterCallback+0xd0>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <HAL_ADC_RegisterCallback+0x40>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005375 	.word	0x08005375
 8005348:	0800537d 	.word	0x0800537d
 800534c:	08005385 	.word	0x08005385
 8005350:	0800538d 	.word	0x0800538d
 8005354:	08005395 	.word	0x08005395
 8005358:	0800539f 	.word	0x0800539f
 800535c:	080053a9 	.word	0x080053a9
 8005360:	080053b3 	.word	0x080053b3
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053c7 	.word	0x080053c7
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005372:	e05b      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800537a:	e057      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005382:	e053      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800538a:	e04f      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005392:	e04b      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
        hadc->InjectedQueueOverflowCallback = pCallback;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800539c:	e046      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80053a6:	e041      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80053b0:	e03c      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80053ba:	e037      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80053c4:	e032      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80053ce:	e02d      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f043 0210 	orr.w	r2, r3, #16
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
        break;
 80053e0:	e024      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d118      	bne.n	800541c <HAL_ADC_RegisterCallback+0x11c>
  {
    switch (CallbackID)
 80053ea:	7afb      	ldrb	r3, [r7, #11]
 80053ec:	2b09      	cmp	r3, #9
 80053ee:	d002      	beq.n	80053f6 <HAL_ADC_RegisterCallback+0xf6>
 80053f0:	2b0a      	cmp	r3, #10
 80053f2:	d005      	beq.n	8005400 <HAL_ADC_RegisterCallback+0x100>
 80053f4:	e009      	b.n	800540a <HAL_ADC_RegisterCallback+0x10a>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80053fe:	e015      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8005408:	e010      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	f043 0210 	orr.w	r2, r3, #16
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
        break;
 800541a:	e007      	b.n	800542c <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005420:	f043 0210 	orr.w	r2, r3, #16
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b0b6      	sub	sp, #216	; 0xd8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d102      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x24>
 80054aa:	2302      	movs	r3, #2
 80054ac:	f000 bc13 	b.w	8005cd6 <HAL_ADC_ConfigChannel+0x84a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fce5 	bl	8004e8c <LL_ADC_REG_IsConversionOngoing>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 83f3 	bne.w	8005cb0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7ff fba9 	bl	8004c2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fcd3 	bl	8004e8c <LL_ADC_REG_IsConversionOngoing>
 80054e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fcf3 	bl	8004eda <LL_ADC_INJ_IsConversionOngoing>
 80054f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 81d9 	bne.w	80058b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 81d4 	bne.w	80058b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005514:	d10f      	bne.n	8005536 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	4619      	mov	r1, r3
 8005522:	f7ff fbb0 	bl	8004c86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fb57 	bl	8004be2 <LL_ADC_SetSamplingTimeCommonConfig>
 8005534:	e00e      	b.n	8005554 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6819      	ldr	r1, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	461a      	mov	r2, r3
 8005544:	f7ff fb9f 	bl	8004c86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fb47 	bl	8004be2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d022      	beq.n	80055bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6919      	ldr	r1, [r3, #16]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005586:	f7ff faa1 	bl	8004acc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6919      	ldr	r1, [r3, #16]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	461a      	mov	r2, r3
 8005598:	f7ff faed 	bl	8004b76 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6919      	ldr	r1, [r3, #16]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	7f1b      	ldrb	r3, [r3, #28]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d102      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x126>
 80055ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b0:	e000      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x128>
 80055b2:	2300      	movs	r3, #0
 80055b4:	461a      	mov	r2, r3
 80055b6:	f7ff faf9 	bl	8004bac <LL_ADC_SetOffsetSaturation>
 80055ba:	e17b      	b.n	80058b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff faa6 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x15c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fa9b 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	e01e      	b.n	8005626 <HAL_ADC_ConfigChannel+0x19a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fa90 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800560a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800560e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005616:	2320      	movs	r3, #32
 8005618:	e004      	b.n	8005624 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800561a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_ADC_ConfigChannel+0x1b2>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0e9b      	lsrs	r3, r3, #26
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	e018      	b.n	8005670 <HAL_ADC_ConfigChannel+0x1e4>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800565a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005662:	2320      	movs	r3, #32
 8005664:	e004      	b.n	8005670 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005670:	429a      	cmp	r2, r3
 8005672:	d106      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fa5f 	bl	8004b40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fa43 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 800568e:	4603      	mov	r3, r0
 8005690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_ADC_ConfigChannel+0x222>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fa38 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	0e9b      	lsrs	r3, r3, #26
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	e01e      	b.n	80056ec <HAL_ADC_ConfigChannel+0x260>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fa2d 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80056cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80056d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80056dc:	2320      	movs	r3, #32
 80056de:	e004      	b.n	80056ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80056e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056e4:	fab3 f383 	clz	r3, r3
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x278>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	0e9b      	lsrs	r3, r3, #26
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	e018      	b.n	8005736 <HAL_ADC_ConfigChannel+0x2aa>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800571c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005728:	2320      	movs	r3, #32
 800572a:	e004      	b.n	8005736 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800572c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005736:	429a      	cmp	r2, r3
 8005738:	d106      	bne.n	8005748 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff f9fc 	bl	8004b40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2102      	movs	r1, #2
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff f9e0 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 8005754:	4603      	mov	r3, r0
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x2e8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff f9d5 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 800576a:	4603      	mov	r3, r0
 800576c:	0e9b      	lsrs	r3, r3, #26
 800576e:	f003 021f 	and.w	r2, r3, #31
 8005772:	e01e      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x326>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff f9ca 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800579a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80057a2:	2320      	movs	r3, #32
 80057a4:	e004      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80057a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x33e>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	0e9b      	lsrs	r3, r3, #26
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	e016      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x36c>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80057dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80057e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80057ea:	2320      	movs	r3, #32
 80057ec:	e004      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80057ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d106      	bne.n	800580a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2200      	movs	r2, #0
 8005802:	2102      	movs	r1, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff f99b 	bl	8004b40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2103      	movs	r1, #3
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff f97f 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 8005816:	4603      	mov	r3, r0
 8005818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <HAL_ADC_ConfigChannel+0x3aa>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2103      	movs	r1, #3
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff f974 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 800582c:	4603      	mov	r3, r0
 800582e:	0e9b      	lsrs	r3, r3, #26
 8005830:	f003 021f 	and.w	r2, r3, #31
 8005834:	e017      	b.n	8005866 <HAL_ADC_ConfigChannel+0x3da>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2103      	movs	r1, #3
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff f969 	bl	8004b14 <LL_ADC_GetOffsetChannel>
 8005842:	4603      	mov	r3, r0
 8005844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800584e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005850:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800585c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_ADC_ConfigChannel+0x3f2>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	0e9b      	lsrs	r3, r3, #26
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	e011      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x416>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800588c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005896:	2320      	movs	r3, #32
 8005898:	e003      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800589a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d106      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	2103      	movs	r1, #3
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f946 	bl	8004b40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff faad 	bl	8004e18 <LL_ADC_IsEnabled>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 813d 	bne.w	8005b40 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7ff fa02 	bl	8004cdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4aa2      	ldr	r2, [pc, #648]	; (8005b68 <HAL_ADC_ConfigChannel+0x6dc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f040 812e 	bne.w	8005b40 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <HAL_ADC_ConfigChannel+0x480>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	3301      	adds	r3, #1
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	2b09      	cmp	r3, #9
 8005902:	bf94      	ite	ls
 8005904:	2301      	movls	r3, #1
 8005906:	2300      	movhi	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e019      	b.n	8005940 <HAL_ADC_ConfigChannel+0x4b4>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005914:	fa93 f3a3 	rbit	r3, r3
 8005918:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800591a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800591e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005924:	2320      	movs	r3, #32
 8005926:	e003      	b.n	8005930 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	b2db      	uxtb	r3, r3
 8005930:	3301      	adds	r3, #1
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2b09      	cmp	r3, #9
 8005938:	bf94      	ite	ls
 800593a:	2301      	movls	r3, #1
 800593c:	2300      	movhi	r3, #0
 800593e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005940:	2b00      	cmp	r3, #0
 8005942:	d079      	beq.n	8005a38 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x4d4>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	0e9b      	lsrs	r3, r3, #26
 8005956:	3301      	adds	r3, #1
 8005958:	069b      	lsls	r3, r3, #26
 800595a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800595e:	e015      	b.n	800598c <HAL_ADC_ConfigChannel+0x500>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800596e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005970:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005978:	2320      	movs	r3, #32
 800597a:	e003      	b.n	8005984 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800597c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597e:	fab3 f383 	clz	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	3301      	adds	r3, #1
 8005986:	069b      	lsls	r3, r3, #26
 8005988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x520>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	0e9b      	lsrs	r3, r3, #26
 800599e:	3301      	adds	r3, #1
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	e017      	b.n	80059dc <HAL_ADC_ConfigChannel+0x550>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80059ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80059be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80059c4:	2320      	movs	r3, #32
 80059c6:	e003      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80059c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2101      	movs	r1, #1
 80059d8:	fa01 f303 	lsl.w	r3, r1, r3
 80059dc:	ea42 0103 	orr.w	r1, r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x576>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	0e9b      	lsrs	r3, r3, #26
 80059f2:	3301      	adds	r3, #1
 80059f4:	f003 021f 	and.w	r2, r3, #31
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	051b      	lsls	r3, r3, #20
 8005a00:	e018      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x5a8>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	e003      	b.n	8005a26 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	f003 021f 	and.w	r2, r3, #31
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a34:	430b      	orrs	r3, r1
 8005a36:	e07e      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x5c8>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0e9b      	lsrs	r3, r3, #26
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	069b      	lsls	r3, r3, #26
 8005a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a52:	e015      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x5f4>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e003      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	069b      	lsls	r3, r3, #26
 8005a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x614>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	0e9b      	lsrs	r3, r3, #26
 8005a92:	3301      	adds	r3, #1
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	e017      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x644>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	fa93 f3a3 	rbit	r3, r3
 8005aac:	61fb      	str	r3, [r7, #28]
  return result;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	e003      	b.n	8005ac4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	fab3 f383 	clz	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2101      	movs	r1, #1
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	ea42 0103 	orr.w	r1, r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_ADC_ConfigChannel+0x670>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0e9b      	lsrs	r3, r3, #26
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	3b1e      	subs	r3, #30
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005afa:	e01b      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x6a8>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	613b      	str	r3, [r7, #16]
  return result;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	f003 021f 	and.w	r2, r3, #31
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3b1e      	subs	r3, #30
 8005b2e:	051b      	lsls	r3, r3, #20
 8005b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b34:	430b      	orrs	r3, r1
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	6892      	ldr	r2, [r2, #8]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f7ff f8a3 	bl	8004c86 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_ADC_ConfigChannel+0x6e0>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80be 	beq.w	8005cca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b56:	d004      	beq.n	8005b62 <HAL_ADC_ConfigChannel+0x6d6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <HAL_ADC_ConfigChannel+0x6e4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10a      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x6ec>
 8005b62:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <HAL_ADC_ConfigChannel+0x6e8>)
 8005b64:	e009      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x6ee>
 8005b66:	bf00      	nop
 8005b68:	407f0000 	.word	0x407f0000
 8005b6c:	80080000 	.word	0x80080000
 8005b70:	50000100 	.word	0x50000100
 8005b74:	50000300 	.word	0x50000300
 8005b78:	4b59      	ldr	r3, [pc, #356]	; (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe ff98 	bl	8004ab0 <LL_ADC_GetCommonPathInternalCh>
 8005b80:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a56      	ldr	r2, [pc, #344]	; (8005ce4 <HAL_ADC_ConfigChannel+0x858>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_ADC_ConfigChannel+0x70c>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a55      	ldr	r2, [pc, #340]	; (8005ce8 <HAL_ADC_ConfigChannel+0x85c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d13a      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d134      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bac:	d005      	beq.n	8005bba <HAL_ADC_ConfigChannel+0x72e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	; (8005cec <HAL_ADC_ConfigChannel+0x860>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	f040 8085 	bne.w	8005cc4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bc2:	d004      	beq.n	8005bce <HAL_ADC_ConfigChannel+0x742>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a49      	ldr	r2, [pc, #292]	; (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x746>
 8005bce:	4a49      	ldr	r2, [pc, #292]	; (8005cf4 <HAL_ADC_ConfigChannel+0x868>)
 8005bd0:	e000      	b.n	8005bd4 <HAL_ADC_ConfigChannel+0x748>
 8005bd2:	4a43      	ldr	r2, [pc, #268]	; (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe ff53 	bl	8004a8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005be4:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <HAL_ADC_ConfigChannel+0x86c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	4a44      	ldr	r2, [pc, #272]	; (8005cfc <HAL_ADC_ConfigChannel+0x870>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005bfe:	e002      	b.n	8005c06 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f9      	bne.n	8005c00 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c0c:	e05a      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3b      	ldr	r2, [pc, #236]	; (8005d00 <HAL_ADC_ConfigChannel+0x874>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d125      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x7d8>
 8005c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11f      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a31      	ldr	r2, [pc, #196]	; (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d104      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x7ac>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <HAL_ADC_ConfigChannel+0x878>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d047      	beq.n	8005cc8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c40:	d004      	beq.n	8005c4c <HAL_ADC_ConfigChannel+0x7c0>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d101      	bne.n	8005c50 <HAL_ADC_ConfigChannel+0x7c4>
 8005c4c:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <HAL_ADC_ConfigChannel+0x868>)
 8005c4e:	e000      	b.n	8005c52 <HAL_ADC_ConfigChannel+0x7c6>
 8005c50:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f7fe ff14 	bl	8004a8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c62:	e031      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a27      	ldr	r2, [pc, #156]	; (8005d08 <HAL_ADC_ConfigChannel+0x87c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d12d      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d127      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c8c:	d004      	beq.n	8005c98 <HAL_ADC_ConfigChannel+0x80c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d101      	bne.n	8005c9c <HAL_ADC_ConfigChannel+0x810>
 8005c98:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <HAL_ADC_ConfigChannel+0x868>)
 8005c9a:	e000      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x812>
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe feee 	bl	8004a8a <LL_ADC_SetCommonPathInternalCh>
 8005cae:	e00c      	b.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005cc2:	e002      	b.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005cd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	37d8      	adds	r7, #216	; 0xd8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	50000700 	.word	0x50000700
 8005ce4:	c3210000 	.word	0xc3210000
 8005ce8:	90c00010 	.word	0x90c00010
 8005cec:	50000600 	.word	0x50000600
 8005cf0:	50000100 	.word	0x50000100
 8005cf4:	50000300 	.word	0x50000300
 8005cf8:	20000000 	.word	0x20000000
 8005cfc:	053e2d63 	.word	0x053e2d63
 8005d00:	c7520000 	.word	0xc7520000
 8005d04:	50000500 	.word	0x50000500
 8005d08:	cb840000 	.word	0xcb840000

08005d0c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff f8b2 	bl	8004e8c <LL_ADC_REG_IsConversionOngoing>
 8005d28:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff f8d3 	bl	8004eda <LL_ADC_INJ_IsConversionOngoing>
 8005d34:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8098 	beq.w	8005e74 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d02a      	beq.n	8005da8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	7f5b      	ldrb	r3, [r3, #29]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d126      	bne.n	8005da8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7f1b      	ldrb	r3, [r3, #28]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d122      	bne.n	8005da8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005d66:	e014      	b.n	8005d92 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4a45      	ldr	r2, [pc, #276]	; (8005e80 <ADC_ConversionStop+0x174>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d90d      	bls.n	8005d8c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d74:	f043 0210 	orr.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e074      	b.n	8005e76 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d1e3      	bne.n	8005d68 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2240      	movs	r2, #64	; 0x40
 8005da6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d014      	beq.n	8005dd8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff f86a 	bl	8004e8c <LL_ADC_REG_IsConversionOngoing>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff f83b 	bl	8004e3e <LL_ADC_IsDisableOngoing>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff f846 	bl	8004e64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d014      	beq.n	8005e08 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff f879 	bl	8004eda <LL_ADC_INJ_IsConversionOngoing>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff f823 	bl	8004e3e <LL_ADC_IsDisableOngoing>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff f855 	bl	8004eb2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d005      	beq.n	8005e1a <ADC_ConversionStop+0x10e>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d105      	bne.n	8005e20 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005e14:	230c      	movs	r3, #12
 8005e16:	617b      	str	r3, [r7, #20]
        break;
 8005e18:	e005      	b.n	8005e26 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	617b      	str	r3, [r7, #20]
        break;
 8005e1e:	e002      	b.n	8005e26 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005e20:	2304      	movs	r3, #4
 8005e22:	617b      	str	r3, [r7, #20]
        break;
 8005e24:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005e26:	f7fe fda3 	bl	8004970 <HAL_GetTick>
 8005e2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005e2c:	e01b      	b.n	8005e66 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005e2e:	f7fe fd9f 	bl	8004970 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d914      	bls.n	8005e66 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	f043 0210 	orr.w	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e007      	b.n	8005e76 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1dc      	bne.n	8005e2e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	a33fffff 	.word	0xa33fffff

08005e84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe ffc1 	bl	8004e18 <LL_ADC_IsEnabled>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d14d      	bne.n	8005f38 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <ADC_Enable+0xc0>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eae:	f043 0210 	orr.w	r2, r3, #16
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eba:	f043 0201 	orr.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e039      	b.n	8005f3a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe ff7c 	bl	8004dc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ed0:	f7fe fd4e 	bl	8004970 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ed6:	e028      	b.n	8005f2a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe ff9b 	bl	8004e18 <LL_ADC_IsEnabled>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe ff6b 	bl	8004dc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ef2:	f7fe fd3d 	bl	8004970 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d914      	bls.n	8005f2a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d00d      	beq.n	8005f2a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	f043 0210 	orr.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e007      	b.n	8005f3a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d1cf      	bne.n	8005ed8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	8000003f 	.word	0x8000003f

08005f48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe ff72 	bl	8004e3e <LL_ADC_IsDisableOngoing>
 8005f5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe ff59 	bl	8004e18 <LL_ADC_IsEnabled>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d047      	beq.n	8005ffc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d144      	bne.n	8005ffc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 030d 	and.w	r3, r3, #13
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10c      	bne.n	8005f9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe ff33 	bl	8004df0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f92:	f7fe fced 	bl	8004970 <HAL_GetTick>
 8005f96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f98:	e029      	b.n	8005fee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9e:	f043 0210 	orr.w	r2, r3, #16
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005faa:	f043 0201 	orr.w	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e023      	b.n	8005ffe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005fb6:	f7fe fcdb 	bl	8004970 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d914      	bls.n	8005fee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd6:	f043 0210 	orr.w	r2, r3, #16
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	f043 0201 	orr.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e007      	b.n	8005ffe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1dc      	bne.n	8005fb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800601c:	2b00      	cmp	r3, #0
 800601e:	d14c      	bne.n	80060ba <ADC_DMAConvCplt+0xb4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006024:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d021      	beq.n	800607e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fde2 	bl	8004c08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d032      	beq.n	80060b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d12b      	bne.n	80060b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11f      	bne.n	80060b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	f043 0201 	orr.w	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	65da      	str	r2, [r3, #92]	; 0x5c
 800607c:	e018      	b.n	80060b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d111      	bne.n	80060b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80060b8:	e00f      	b.n	80060da <ADC_DMAConvCplt+0xd4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <ADC_DMAConvCplt+0xca>
      hadc->ErrorCallback(hadc);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	4798      	blx	r3
}
 80060ce:	e004      	b.n	80060da <ADC_DMAConvCplt+0xd4>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	f043 0204 	orr.w	r2, r3, #4
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <LL_ADC_IsEnabled>:
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <LL_ADC_IsEnabled+0x18>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <LL_ADC_IsEnabled+0x1a>
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LL_ADC_REG_StartConversion>:
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800616c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006170:	f043 0204 	orr.w	r2, r3, #4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_ADC_REG_IsConversionOngoing>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b04      	cmp	r3, #4
 8006196:	d101      	bne.n	800619c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b0ac      	sub	sp, #176	; 0xb0
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff ffe1 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
 80061ca:	e09c      	b.n	8006306 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e095      	b.n	8006306 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80061e2:	2300      	movs	r3, #0
 80061e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80061f2:	2300      	movs	r3, #0
 80061f4:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061fe:	d102      	bne.n	8006206 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 8006200:	4b43      	ldr	r3, [pc, #268]	; (8006310 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e009      	b.n	800621a <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a42      	ldr	r2, [pc, #264]	; (8006314 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d102      	bne.n	8006216 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8006210:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	e001      	b.n	800621a <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006224:	f043 0220 	orr.w	r2, r3, #32
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e066      	b.n	8006306 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff fe23 	bl	8005e84 <ADC_Enable>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    if (tmp_hal_status == HAL_OK)
 8006244:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006248:	2b00      	cmp	r3, #0
 800624a:	d107      	bne.n	800625c <HAL_ADCEx_MultiModeStart_DMA+0xb0>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800624c:	f107 0310 	add.w	r3, r7, #16
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fe17 	bl	8005e84 <ADC_Enable>
 8006256:	4603      	mov	r3, r0
 8006258:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 800625c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006260:	2b00      	cmp	r3, #0
 8006262:	d14a      	bne.n	80062fa <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	4a26      	ldr	r2, [pc, #152]	; (800631c <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8006284:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	4a25      	ldr	r2, [pc, #148]	; (8006320 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 800628c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	4a24      	ldr	r2, [pc, #144]	; (8006324 <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8006294:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629e:	d004      	beq.n	80062aa <HAL_ADCEx_MultiModeStart_DMA+0xfe>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d101      	bne.n	80062ae <HAL_ADCEx_MultiModeStart_DMA+0x102>
 80062aa:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 80062ac:	e000      	b.n	80062b0 <HAL_ADCEx_MultiModeStart_DMA+0x104>
 80062ae:	4b1f      	ldr	r3, [pc, #124]	; (800632c <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 80062b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	221c      	movs	r2, #28
 80062ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0210 	orr.w	r2, r2, #16
 80062d2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062dc:	330c      	adds	r3, #12
 80062de:	4619      	mov	r1, r3
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f000 ff38 	bl	8007158 <HAL_DMA_Start_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ff32 	bl	800615c <LL_ADC_REG_StartConversion>
 80062f8:	e003      	b.n	8006302 <HAL_ADCEx_MultiModeStart_DMA+0x156>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8006302:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	37b0      	adds	r7, #176	; 0xb0
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	50000100 	.word	0x50000100
 8006314:	50000400 	.word	0x50000400
 8006318:	50000500 	.word	0x50000500
 800631c:	08006007 	.word	0x08006007
 8006320:	080060e3 	.word	0x080060e3
 8006324:	08006101 	.word	0x08006101
 8006328:	50000300 	.word	0x50000300
 800632c:	50000700 	.word	0x50000700

08006330 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b0ac      	sub	sp, #176	; 0xb0
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8006342:	2302      	movs	r3, #2
 8006344:	e0c9      	b.n	80064da <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800634e:	2103      	movs	r1, #3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fcdb 	bl	8005d0c <ADC_ConversionStop>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800635c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 80b4 	bne.w	80064ce <HAL_ADCEx_MultiModeStop_DMA+0x19e>
  {
    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006366:	2300      	movs	r3, #0
 8006368:	667b      	str	r3, [r7, #100]	; 0x64
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006376:	2300      	movs	r3, #0
 8006378:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006382:	d102      	bne.n	800638a <HAL_ADCEx_MultiModeStop_DMA+0x5a>
 8006384:	4b57      	ldr	r3, [pc, #348]	; (80064e4 <HAL_ADCEx_MultiModeStop_DMA+0x1b4>)
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	e009      	b.n	800639e <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a56      	ldr	r2, [pc, #344]	; (80064e8 <HAL_ADCEx_MultiModeStop_DMA+0x1b8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d102      	bne.n	800639a <HAL_ADCEx_MultiModeStop_DMA+0x6a>
 8006394:	4b55      	ldr	r3, [pc, #340]	; (80064ec <HAL_ADCEx_MultiModeStop_DMA+0x1bc>)
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	e001      	b.n	800639e <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]

    if (tmphadcSlave.Instance == NULL)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <HAL_ADCEx_MultiModeStop_DMA+0x8c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e08e      	b.n	80064da <HAL_ADCEx_MultiModeStop_DMA+0x1aa>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 80063bc:	f7fe fad8 	bl	8004970 <HAL_GetTick>
 80063c0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fedc 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 80063cc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80063d0:	e02b      	b.n	800642a <HAL_ADCEx_MultiModeStop_DMA+0xfa>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80063d2:	f7fe facd 	bl	8004970 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d91d      	bls.n	800641e <HAL_ADCEx_MultiModeStop_DMA+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fecd 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 80063ea:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fec6 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d003      	beq.n	8006406 <HAL_ADCEx_MultiModeStop_DMA+0xd6>
            || (tmphadcSlave_conversion_on_going == 1UL)
 80063fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006402:	2b01      	cmp	r3, #1
 8006404:	d10b      	bne.n	800641e <HAL_ADCEx_MultiModeStop_DMA+0xee>
           )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640a:	f043 0210 	orr.w	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e05d      	b.n	80064da <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff feaf 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 8006426:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fea8 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 8006434:	4603      	mov	r3, r0
 8006436:	2b01      	cmp	r3, #1
 8006438:	d0cb      	beq.n	80063d2 <HAL_ADCEx_MultiModeStop_DMA+0xa2>
           || (tmphadcSlave_conversion_on_going == 1UL)
 800643a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800643e:	2b01      	cmp	r3, #1
 8006440:	d0c7      	beq.n	80063d2 <HAL_ADCEx_MultiModeStop_DMA+0xa2>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	4618      	mov	r0, r3
 8006448:	f000 ff01 	bl	800724e <HAL_DMA_Abort>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8006452:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006456:	2b01      	cmp	r3, #1
 8006458:	d105      	bne.n	8006466 <HAL_ADCEx_MultiModeStop_DMA+0x136>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0210 	bic.w	r2, r2, #16
 8006474:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8006476:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800647a:	2b00      	cmp	r3, #0
 800647c:	d115      	bne.n	80064aa <HAL_ADCEx_MultiModeStop_DMA+0x17a>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fd60 	bl	8005f48 <ADC_Disable>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fd5a 	bl	8005f48 <ADC_Disable>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10f      	bne.n	80064ba <HAL_ADCEx_MultiModeStop_DMA+0x18a>
 800649a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <HAL_ADCEx_MultiModeStop_DMA+0x18a>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80064a8:	e007      	b.n	80064ba <HAL_ADCEx_MultiModeStop_DMA+0x18a>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fd4c 	bl	8005f48 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 80064b0:	f107 0308 	add.w	r3, r7, #8
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fd47 	bl	8005f48 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	f043 0201 	orr.w	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80064d6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80064da:	4618      	mov	r0, r3
 80064dc:	37b0      	adds	r7, #176	; 0xb0
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	50000100 	.word	0x50000100
 80064e8:	50000400 	.word	0x50000400
 80064ec:	50000500 	.word	0x50000500

080064f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b0ad      	sub	sp, #180	; 0xb4
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800656e:	2302      	movs	r3, #2
 8006570:	e0f8      	b.n	8006764 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800657a:	2300      	movs	r3, #0
 800657c:	66bb      	str	r3, [r7, #104]	; 0x68
 800657e:	2300      	movs	r3, #0
 8006580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800658a:	2300      	movs	r3, #0
 800658c:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006596:	d102      	bne.n	800659e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006598:	4b74      	ldr	r3, [pc, #464]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e009      	b.n	80065b2 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a73      	ldr	r2, [pc, #460]	; (8006770 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d102      	bne.n	80065ae <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 80065a8:	4b72      	ldr	r3, [pc, #456]	; (8006774 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e001      	b.n	80065b2 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	f043 0220 	orr.w	r2, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0c9      	b.n	8006764 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff fdd6 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 80065d8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fdcf 	bl	8006184 <LL_ADC_REG_IsConversionOngoing>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f040 80aa 	bne.w	8006742 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80065ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 80a5 	bne.w	8006742 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006600:	d004      	beq.n	800660c <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a59      	ldr	r2, [pc, #356]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 800660c:	4b5a      	ldr	r3, [pc, #360]	; (8006778 <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 800660e:	e000      	b.n	8006612 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8006610:	4b5a      	ldr	r3, [pc, #360]	; (800677c <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 8006612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04f      	beq.n	80066be <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800661e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6859      	ldr	r1, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006632:	035b      	lsls	r3, r3, #13
 8006634:	430b      	orrs	r3, r1
 8006636:	431a      	orrs	r2, r3
 8006638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800663c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006646:	d004      	beq.n	8006652 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a47      	ldr	r2, [pc, #284]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d10f      	bne.n	8006672 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8006652:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006656:	f7ff fd6e 	bl	8006136 <LL_ADC_IsEnabled>
 800665a:	4604      	mov	r4, r0
 800665c:	4843      	ldr	r0, [pc, #268]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800665e:	f7ff fd6a 	bl	8006136 <LL_ADC_IsEnabled>
 8006662:	4603      	mov	r3, r0
 8006664:	4323      	orrs	r3, r4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e012      	b.n	8006698 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8006672:	483f      	ldr	r0, [pc, #252]	; (8006770 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8006674:	f7ff fd5f 	bl	8006136 <LL_ADC_IsEnabled>
 8006678:	4604      	mov	r4, r0
 800667a:	483e      	ldr	r0, [pc, #248]	; (8006774 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 800667c:	f7ff fd5b 	bl	8006136 <LL_ADC_IsEnabled>
 8006680:	4603      	mov	r3, r0
 8006682:	431c      	orrs	r4, r3
 8006684:	483e      	ldr	r0, [pc, #248]	; (8006780 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8006686:	f7ff fd56 	bl	8006136 <LL_ADC_IsEnabled>
 800668a:	4603      	mov	r3, r0
 800668c:	4323      	orrs	r3, r4
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d05c      	beq.n	8006756 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800669c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80066a6:	f023 030f 	bic.w	r3, r3, #15
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	6811      	ldr	r1, [r2, #0]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	6892      	ldr	r2, [r2, #8]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	431a      	orrs	r2, r3
 80066b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066bc:	e04b      	b.n	8006756 <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80066be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066d6:	d004      	beq.n	80066e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a23      	ldr	r2, [pc, #140]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d10f      	bne.n	8006702 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80066e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80066e6:	f7ff fd26 	bl	8006136 <LL_ADC_IsEnabled>
 80066ea:	4604      	mov	r4, r0
 80066ec:	481f      	ldr	r0, [pc, #124]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80066ee:	f7ff fd22 	bl	8006136 <LL_ADC_IsEnabled>
 80066f2:	4603      	mov	r3, r0
 80066f4:	4323      	orrs	r3, r4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e012      	b.n	8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 8006702:	481b      	ldr	r0, [pc, #108]	; (8006770 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8006704:	f7ff fd17 	bl	8006136 <LL_ADC_IsEnabled>
 8006708:	4604      	mov	r4, r0
 800670a:	481a      	ldr	r0, [pc, #104]	; (8006774 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 800670c:	f7ff fd13 	bl	8006136 <LL_ADC_IsEnabled>
 8006710:	4603      	mov	r3, r0
 8006712:	431c      	orrs	r4, r3
 8006714:	481a      	ldr	r0, [pc, #104]	; (8006780 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8006716:	f7ff fd0e 	bl	8006136 <LL_ADC_IsEnabled>
 800671a:	4603      	mov	r3, r0
 800671c:	4323      	orrs	r3, r4
 800671e:	2b00      	cmp	r3, #0
 8006720:	bf0c      	ite	eq
 8006722:	2301      	moveq	r3, #1
 8006724:	2300      	movne	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d014      	beq.n	8006756 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800672c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006736:	f023 030f 	bic.w	r3, r3, #15
 800673a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800673e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006740:	e009      	b.n	8006756 <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	f043 0220 	orr.w	r2, r3, #32
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006754:	e000      	b.n	8006758 <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006756:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006760:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8006764:	4618      	mov	r0, r3
 8006766:	37b4      	adds	r7, #180	; 0xb4
 8006768:	46bd      	mov	sp, r7
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	50000100 	.word	0x50000100
 8006770:	50000400 	.word	0x50000400
 8006774:	50000500 	.word	0x50000500
 8006778:	50000300 	.word	0x50000300
 800677c:	50000700 	.word	0x50000700
 8006780:	50000600 	.word	0x50000600

08006784 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4904      	ldr	r1, [pc, #16]	; (80067a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40010400 	.word	0x40010400

080067a8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	4904      	ldr	r1, [pc, #16]	; (80067c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	620b      	str	r3, [r1, #32]
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40010400 	.word	0x40010400

080067cc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	43db      	mvns	r3, r3
 80067dc:	4904      	ldr	r1, [pc, #16]	; (80067f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80067de:	4013      	ands	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40010400 	.word	0x40010400

080067f4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <LL_EXTI_DisableIT_32_63+0x24>)
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	43db      	mvns	r3, r3
 8006804:	4904      	ldr	r1, [pc, #16]	; (8006818 <LL_EXTI_DisableIT_32_63+0x24>)
 8006806:	4013      	ands	r3, r2
 8006808:	620b      	str	r3, [r1, #32]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40010400 	.word	0x40010400

0800681c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <LL_EXTI_EnableEvent_0_31+0x20>)
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	4904      	ldr	r1, [pc, #16]	; (800683c <LL_EXTI_EnableEvent_0_31+0x20>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4313      	orrs	r3, r2
 800682e:	604b      	str	r3, [r1, #4]

}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40010400 	.word	0x40010400

08006840 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <LL_EXTI_EnableEvent_32_63+0x20>)
 800684a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684c:	4904      	ldr	r1, [pc, #16]	; (8006860 <LL_EXTI_EnableEvent_32_63+0x20>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4313      	orrs	r3, r2
 8006852:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40010400 	.word	0x40010400

08006864 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <LL_EXTI_DisableEvent_0_31+0x24>)
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	43db      	mvns	r3, r3
 8006874:	4904      	ldr	r1, [pc, #16]	; (8006888 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006876:	4013      	ands	r3, r2
 8006878:	604b      	str	r3, [r1, #4]
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40010400 	.word	0x40010400

0800688c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	43db      	mvns	r3, r3
 800689c:	4904      	ldr	r1, [pc, #16]	; (80068b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800689e:	4013      	ands	r3, r2
 80068a0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40010400 	.word	0x40010400

080068b4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	4904      	ldr	r1, [pc, #16]	; (80068d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40010400 	.word	0x40010400

080068d8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80068e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	628b      	str	r3, [r1, #40]	; 0x28
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40010400 	.word	0x40010400

080068fc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	43db      	mvns	r3, r3
 800690c:	4904      	ldr	r1, [pc, #16]	; (8006920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800690e:	4013      	ands	r3, r2
 8006910:	608b      	str	r3, [r1, #8]

}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40010400 	.word	0x40010400

08006924 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800692e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	43db      	mvns	r3, r3
 8006934:	4904      	ldr	r1, [pc, #16]	; (8006948 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006936:	4013      	ands	r3, r2
 8006938:	628b      	str	r3, [r1, #40]	; 0x28
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40010400 	.word	0x40010400

0800694c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	4904      	ldr	r1, [pc, #16]	; (800696c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4313      	orrs	r3, r2
 800695e:	60cb      	str	r3, [r1, #12]
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	40010400 	.word	0x40010400

08006970 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4904      	ldr	r1, [pc, #16]	; (8006990 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4313      	orrs	r3, r2
 8006982:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010400 	.word	0x40010400

08006994 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	4904      	ldr	r1, [pc, #16]	; (80069b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	60cb      	str	r3, [r1, #12]
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010400 	.word	0x40010400

080069bc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	43db      	mvns	r3, r3
 80069cc:	4904      	ldr	r1, [pc, #16]	; (80069e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010400 	.word	0x40010400

080069e4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80069ec:	4a04      	ldr	r2, [pc, #16]	; (8006a00 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6153      	str	r3, [r2, #20]
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010400 	.word	0x40010400

08006a04 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40010400 	.word	0x40010400

08006a24 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	e181      	b.n	8006d44 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4e:	d102      	bne.n	8006a56 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e176      	b.n	8006d44 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7f5b      	ldrb	r3, [r3, #29]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d108      	bne.n	8006a72 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7fa f9ed 	bl	8000e4c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a7c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b90      	ldr	r3, [pc, #576]	; (8006ce4 <HAL_COMP_Init+0x2c0>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	6979      	ldr	r1, [r7, #20]
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <HAL_COMP_Init+0xc8>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d113      	bne.n	8006aec <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ac4:	4b88      	ldr	r3, [pc, #544]	; (8006ce8 <HAL_COMP_Init+0x2c4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	099b      	lsrs	r3, r3, #6
 8006aca:	4a88      	ldr	r2, [pc, #544]	; (8006cec <HAL_COMP_Init+0x2c8>)
 8006acc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad0:	099b      	lsrs	r3, r3, #6
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006ade:	e002      	b.n	8006ae6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f9      	bne.n	8006ae0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7f      	ldr	r2, [pc, #508]	; (8006cf0 <HAL_COMP_Init+0x2cc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d028      	beq.n	8006b48 <HAL_COMP_Init+0x124>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7e      	ldr	r2, [pc, #504]	; (8006cf4 <HAL_COMP_Init+0x2d0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d020      	beq.n	8006b42 <HAL_COMP_Init+0x11e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a7c      	ldr	r2, [pc, #496]	; (8006cf8 <HAL_COMP_Init+0x2d4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d018      	beq.n	8006b3c <HAL_COMP_Init+0x118>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a7b      	ldr	r2, [pc, #492]	; (8006cfc <HAL_COMP_Init+0x2d8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d010      	beq.n	8006b36 <HAL_COMP_Init+0x112>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a79      	ldr	r2, [pc, #484]	; (8006d00 <HAL_COMP_Init+0x2dc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d008      	beq.n	8006b30 <HAL_COMP_Init+0x10c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a78      	ldr	r2, [pc, #480]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d101      	bne.n	8006b2c <HAL_COMP_Init+0x108>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e00f      	b.n	8006b4c <HAL_COMP_Init+0x128>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e00d      	b.n	8006b4c <HAL_COMP_Init+0x128>
 8006b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b34:	e00a      	b.n	8006b4c <HAL_COMP_Init+0x128>
 8006b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b3a:	e007      	b.n	8006b4c <HAL_COMP_Init+0x128>
 8006b3c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006b40:	e004      	b.n	8006b4c <HAL_COMP_Init+0x128>
 8006b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b46:	e001      	b.n	8006b4c <HAL_COMP_Init+0x128>
 8006b48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b4c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80b6 	beq.w	8006cc8 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a65      	ldr	r2, [pc, #404]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_COMP_Init+0x158>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a64      	ldr	r2, [pc, #400]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d103      	bne.n	8006b84 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006b7c:	6938      	ldr	r0, [r7, #16]
 8006b7e:	f7ff feab 	bl	80068d8 <LL_EXTI_EnableRisingTrig_32_63>
 8006b82:	e014      	b.n	8006bae <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006b84:	6938      	ldr	r0, [r7, #16]
 8006b86:	f7ff fe95 	bl	80068b4 <LL_EXTI_EnableRisingTrig_0_31>
 8006b8a:	e010      	b.n	8006bae <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5c      	ldr	r2, [pc, #368]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_COMP_Init+0x17c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a5b      	ldr	r2, [pc, #364]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d103      	bne.n	8006ba8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006ba0:	6938      	ldr	r0, [r7, #16]
 8006ba2:	f7ff febf 	bl	8006924 <LL_EXTI_DisableRisingTrig_32_63>
 8006ba6:	e002      	b.n	8006bae <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7ff fea7 	bl	80068fc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d011      	beq.n	8006bde <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a51      	ldr	r2, [pc, #324]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_COMP_Init+0x1aa>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a4f      	ldr	r2, [pc, #316]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d103      	bne.n	8006bd6 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006bce:	6938      	ldr	r0, [r7, #16]
 8006bd0:	f7ff fece 	bl	8006970 <LL_EXTI_EnableFallingTrig_32_63>
 8006bd4:	e014      	b.n	8006c00 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006bd6:	6938      	ldr	r0, [r7, #16]
 8006bd8:	f7ff feb8 	bl	800694c <LL_EXTI_EnableFallingTrig_0_31>
 8006bdc:	e010      	b.n	8006c00 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a48      	ldr	r2, [pc, #288]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_COMP_Init+0x1ce>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a46      	ldr	r2, [pc, #280]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d103      	bne.n	8006bfa <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006bf2:	6938      	ldr	r0, [r7, #16]
 8006bf4:	f7ff fee2 	bl	80069bc <LL_EXTI_DisableFallingTrig_32_63>
 8006bf8:	e002      	b.n	8006c00 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f7ff feca 	bl	8006994 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a3f      	ldr	r2, [pc, #252]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_COMP_Init+0x1f0>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a3e      	ldr	r2, [pc, #248]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d103      	bne.n	8006c1c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006c14:	6938      	ldr	r0, [r7, #16]
 8006c16:	f7ff fef5 	bl	8006a04 <LL_EXTI_ClearFlag_32_63>
 8006c1a:	e002      	b.n	8006c22 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006c1c:	6938      	ldr	r0, [r7, #16]
 8006c1e:	f7ff fee1 	bl	80069e4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d011      	beq.n	8006c52 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a34      	ldr	r2, [pc, #208]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_COMP_Init+0x21e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a32      	ldr	r2, [pc, #200]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d103      	bne.n	8006c4a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f7ff fdfc 	bl	8006840 <LL_EXTI_EnableEvent_32_63>
 8006c48:	e014      	b.n	8006c74 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f7ff fde6 	bl	800681c <LL_EXTI_EnableEvent_0_31>
 8006c50:	e010      	b.n	8006c74 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2b      	ldr	r2, [pc, #172]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_COMP_Init+0x242>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a29      	ldr	r2, [pc, #164]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d103      	bne.n	8006c6e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006c66:	6938      	ldr	r0, [r7, #16]
 8006c68:	f7ff fe10 	bl	800688c <LL_EXTI_DisableEvent_32_63>
 8006c6c:	e002      	b.n	8006c74 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f7ff fdf8 	bl	8006864 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d011      	beq.n	8006ca4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1f      	ldr	r2, [pc, #124]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_COMP_Init+0x270>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d103      	bne.n	8006c9c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006c94:	6938      	ldr	r0, [r7, #16]
 8006c96:	f7ff fd87 	bl	80067a8 <LL_EXTI_EnableIT_32_63>
 8006c9a:	e04b      	b.n	8006d34 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006c9c:	6938      	ldr	r0, [r7, #16]
 8006c9e:	f7ff fd71 	bl	8006784 <LL_EXTI_EnableIT_0_31>
 8006ca2:	e047      	b.n	8006d34 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_COMP_Init+0x294>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d103      	bne.n	8006cc0 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006cb8:	6938      	ldr	r0, [r7, #16]
 8006cba:	f7ff fd9b 	bl	80067f4 <LL_EXTI_DisableIT_32_63>
 8006cbe:	e039      	b.n	8006d34 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006cc0:	6938      	ldr	r0, [r7, #16]
 8006cc2:	f7ff fd83 	bl	80067cc <LL_EXTI_DisableIT_0_31>
 8006cc6:	e035      	b.n	8006d34 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a0d      	ldr	r2, [pc, #52]	; (8006d04 <HAL_COMP_Init+0x2e0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_COMP_Init+0x2b8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <HAL_COMP_Init+0x2e4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d117      	bne.n	8006d0c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006cdc:	6938      	ldr	r0, [r7, #16]
 8006cde:	f7ff fdd5 	bl	800688c <LL_EXTI_DisableEvent_32_63>
 8006ce2:	e016      	b.n	8006d12 <HAL_COMP_Init+0x2ee>
 8006ce4:	ff007e0f 	.word	0xff007e0f
 8006ce8:	20000000 	.word	0x20000000
 8006cec:	053e2d63 	.word	0x053e2d63
 8006cf0:	40010200 	.word	0x40010200
 8006cf4:	40010204 	.word	0x40010204
 8006cf8:	40010208 	.word	0x40010208
 8006cfc:	4001020c 	.word	0x4001020c
 8006d00:	40010210 	.word	0x40010210
 8006d04:	40010214 	.word	0x40010214
 8006d08:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006d0c:	6938      	ldr	r0, [r7, #16]
 8006d0e:	f7ff fda9 	bl	8006864 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a0e      	ldr	r2, [pc, #56]	; (8006d50 <HAL_COMP_Init+0x32c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_COMP_Init+0x302>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <HAL_COMP_Init+0x330>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d103      	bne.n	8006d2e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006d26:	6938      	ldr	r0, [r7, #16]
 8006d28:	f7ff fd64 	bl	80067f4 <LL_EXTI_DisableIT_32_63>
 8006d2c:	e002      	b.n	8006d34 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f7ff fd4c 	bl	80067cc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7f5b      	ldrb	r3, [r3, #29]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d102      	bne.n	8006d44 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40010214 	.word	0x40010214
 8006d54:	40010218 	.word	0x40010218

08006d58 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e02e      	b.n	8006dd2 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d82:	d102      	bne.n	8006d8a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e023      	b.n	8006dd2 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7f5b      	ldrb	r3, [r3, #29]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d11c      	bne.n	8006dce <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <HAL_COMP_Start+0x88>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a0d      	ldr	r2, [pc, #52]	; (8006de4 <HAL_COMP_Start+0x8c>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	0cda      	lsrs	r2, r3, #19
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006dbe:	e002      	b.n	8006dc6 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f9      	bne.n	8006dc0 <HAL_COMP_Start+0x68>
 8006dcc:	e001      	b.n	8006dd2 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000000 	.word	0x20000000
 8006de4:	431bde83 	.word	0x431bde83

08006de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <__NVIC_SetPriorityGrouping+0x44>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e04:	4013      	ands	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e1a:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <__NVIC_SetPriorityGrouping+0x44>)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	60d3      	str	r3, [r2, #12]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	e000ed00 	.word	0xe000ed00

08006e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <__NVIC_GetPriorityGrouping+0x18>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	0a1b      	lsrs	r3, r3, #8
 8006e3a:	f003 0307 	and.w	r3, r3, #7
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	e000ed00 	.word	0xe000ed00

08006e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	db0b      	blt.n	8006e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	f003 021f 	and.w	r2, r3, #31
 8006e64:	4907      	ldr	r1, [pc, #28]	; (8006e84 <__NVIC_EnableIRQ+0x38>)
 8006e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	e000e100 	.word	0xe000e100

08006e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db0a      	blt.n	8006eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	490c      	ldr	r1, [pc, #48]	; (8006ed4 <__NVIC_SetPriority+0x4c>)
 8006ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea6:	0112      	lsls	r2, r2, #4
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006eb0:	e00a      	b.n	8006ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	4908      	ldr	r1, [pc, #32]	; (8006ed8 <__NVIC_SetPriority+0x50>)
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	0112      	lsls	r2, r2, #4
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	761a      	strb	r2, [r3, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	e000e100 	.word	0xe000e100
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f1c3 0307 	rsb	r3, r3, #7
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	bf28      	it	cs
 8006efa:	2304      	movcs	r3, #4
 8006efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3304      	adds	r3, #4
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d902      	bls.n	8006f0c <NVIC_EncodePriority+0x30>
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	3b03      	subs	r3, #3
 8006f0a:	e000      	b.n	8006f0e <NVIC_EncodePriority+0x32>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f10:	f04f 32ff 	mov.w	r2, #4294967295
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	401a      	ands	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f24:	f04f 31ff 	mov.w	r1, #4294967295
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	43d9      	mvns	r1, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f34:	4313      	orrs	r3, r2
         );
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3724      	adds	r7, #36	; 0x24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f54:	d301      	bcc.n	8006f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f56:	2301      	movs	r3, #1
 8006f58:	e00f      	b.n	8006f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <SysTick_Config+0x40>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f62:	210f      	movs	r1, #15
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	f7ff ff8e 	bl	8006e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <SysTick_Config+0x40>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f72:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <SysTick_Config+0x40>)
 8006f74:	2207      	movs	r2, #7
 8006f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	e000e010 	.word	0xe000e010

08006f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ff29 	bl	8006de8 <__NVIC_SetPriorityGrouping>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fac:	f7ff ff40 	bl	8006e30 <__NVIC_GetPriorityGrouping>
 8006fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	6978      	ldr	r0, [r7, #20]
 8006fb8:	f7ff ff90 	bl	8006edc <NVIC_EncodePriority>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff ff5f 	bl	8006e88 <__NVIC_SetPriority>
}
 8006fca:	bf00      	nop
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	4603      	mov	r3, r0
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff ff33 	bl	8006e4c <__NVIC_EnableIRQ>
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff ffa4 	bl	8006f44 <SysTick_Config>
 8006ffc:	4603      	mov	r3, r0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e08d      	b.n	8007136 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	4b47      	ldr	r3, [pc, #284]	; (8007140 <HAL_DMA_Init+0x138>)
 8007022:	429a      	cmp	r2, r3
 8007024:	d80f      	bhi.n	8007046 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	4b45      	ldr	r3, [pc, #276]	; (8007144 <HAL_DMA_Init+0x13c>)
 800702e:	4413      	add	r3, r2
 8007030:	4a45      	ldr	r2, [pc, #276]	; (8007148 <HAL_DMA_Init+0x140>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	009a      	lsls	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a42      	ldr	r2, [pc, #264]	; (800714c <HAL_DMA_Init+0x144>)
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
 8007044:	e00e      	b.n	8007064 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	4b40      	ldr	r3, [pc, #256]	; (8007150 <HAL_DMA_Init+0x148>)
 800704e:	4413      	add	r3, r2
 8007050:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <HAL_DMA_Init+0x140>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	091b      	lsrs	r3, r3, #4
 8007058:	009a      	lsls	r2, r3, #2
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a3c      	ldr	r2, [pc, #240]	; (8007154 <HAL_DMA_Init+0x14c>)
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa58 	bl	800756c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c4:	d102      	bne.n	80070cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80070e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d010      	beq.n	800710c <HAL_DMA_Init+0x104>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d80c      	bhi.n	800710c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa78 	bl	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	e008      	b.n	800711e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40020407 	.word	0x40020407
 8007144:	bffdfff8 	.word	0xbffdfff8
 8007148:	cccccccd 	.word	0xcccccccd
 800714c:	40020000 	.word	0x40020000
 8007150:	bffdfbf8 	.word	0xbffdfbf8
 8007154:	40020400 	.word	0x40020400

08007158 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_DMA_Start_IT+0x20>
 8007174:	2302      	movs	r3, #2
 8007176:	e066      	b.n	8007246 <HAL_DMA_Start_IT+0xee>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d155      	bne.n	8007238 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0201 	bic.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f99d 	bl	80074f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 020e 	orr.w	r2, r2, #14
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e00f      	b.n	80071f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0204 	bic.w	r2, r2, #4
 80071de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 020a 	orr.w	r2, r2, #10
 80071ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800720c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0201 	orr.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e005      	b.n	8007244 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007240:	2302      	movs	r3, #2
 8007242:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d005      	beq.n	8007272 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2204      	movs	r2, #4
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	e037      	b.n	80072e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 020e 	bic.w	r2, r2, #14
 8007280:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007290:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	f003 021f 	and.w	r2, r3, #31
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2101      	movs	r1, #1
 80072b0:	fa01 f202 	lsl.w	r2, r1, r2
 80072b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00c      	beq.n	80072e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80072e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2204      	movs	r2, #4
 8007322:	409a      	lsls	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d026      	beq.n	800737a <HAL_DMA_IRQHandler+0x7a>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d021      	beq.n	800737a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d107      	bne.n	8007354 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007358:	f003 021f 	and.w	r2, r3, #31
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2104      	movs	r1, #4
 8007362:	fa01 f202 	lsl.w	r2, r1, r2
 8007366:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	2b00      	cmp	r3, #0
 800736e:	d071      	beq.n	8007454 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007378:	e06c      	b.n	8007454 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2202      	movs	r2, #2
 8007384:	409a      	lsls	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02e      	beq.n	80073ec <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d029      	beq.n	80073ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 020a 	bic.w	r2, r2, #10
 80073b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c2:	f003 021f 	and.w	r2, r3, #31
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2102      	movs	r1, #2
 80073cc:	fa01 f202 	lsl.w	r2, r1, r2
 80073d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d038      	beq.n	8007454 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80073ea:	e033      	b.n	8007454 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2208      	movs	r2, #8
 80073f6:	409a      	lsls	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02a      	beq.n	8007456 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d025      	beq.n	8007456 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 020e 	bic.w	r2, r2, #14
 8007418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741e:	f003 021f 	and.w	r2, r3, #31
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	2101      	movs	r1, #1
 8007428:	fa01 f202 	lsl.w	r2, r1, r2
 800742c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007454:	bf00      	nop
 8007456:	bf00      	nop
}
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	460b      	mov	r3, r1
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_DMA_RegisterCallback+0x20>
 800747c:	2302      	movs	r3, #2
 800747e:	e031      	b.n	80074e4 <HAL_DMA_RegisterCallback+0x84>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b01      	cmp	r3, #1
 8007492:	d120      	bne.n	80074d6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	2b03      	cmp	r3, #3
 8007498:	d81a      	bhi.n	80074d0 <HAL_DMA_RegisterCallback+0x70>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <HAL_DMA_RegisterCallback+0x40>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074b9 	.word	0x080074b9
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074c9 	.word	0x080074c9
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80074b6:	e010      	b.n	80074da <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80074be:	e00c      	b.n	80074da <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80074c6:	e008      	b.n	80074da <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80074ce:	e004      	b.n	80074da <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
        break;
 80074d4:	e001      	b.n	80074da <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007506:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007518:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f003 021f 	and.w	r2, r3, #31
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	2101      	movs	r1, #1
 8007528:	fa01 f202 	lsl.w	r2, r1, r2
 800752c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2b10      	cmp	r3, #16
 800753c:	d108      	bne.n	8007550 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800754e:	e007      	b.n	8007560 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800757c:	429a      	cmp	r2, r3
 800757e:	d802      	bhi.n	8007586 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007580:	4b15      	ldr	r3, [pc, #84]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e001      	b.n	800758a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007586:	4b15      	ldr	r3, [pc, #84]	; (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007588:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	3b08      	subs	r3, #8
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007598:	fba2 2303 	umull	r2, r3, r2, r3
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	089b      	lsrs	r3, r3, #2
 80075a6:	009a      	lsls	r2, r3, #2
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4413      	add	r3, r2
 80075ac:	461a      	mov	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80075b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	409a      	lsls	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40020407 	.word	0x40020407
 80075d8:	40020800 	.word	0x40020800
 80075dc:	40020820 	.word	0x40020820
 80075e0:	cccccccd 	.word	0xcccccccd
 80075e4:	40020880 	.word	0x40020880

080075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a08      	ldr	r2, [pc, #32]	; (800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800760a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3b01      	subs	r3, #1
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	2201      	movs	r2, #1
 8007616:	409a      	lsls	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	1000823f 	.word	0x1000823f
 800762c:	40020940 	.word	0x40020940

08007630 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01a      	beq.n	800767e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007660:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	2b00      	cmp	r3, #0
 8007684:	d022      	beq.n	80076cc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	4013      	ands	r3, r2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01a      	beq.n	80076cc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80076ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
      }
    }
  }
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80076e2:	e15a      	b.n	800799a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2101      	movs	r1, #1
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	fa01 f303 	lsl.w	r3, r1, r3
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 814c 	beq.w	8007994 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f003 0303 	and.w	r3, r3, #3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d005      	beq.n	8007714 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007710:	2b02      	cmp	r3, #2
 8007712:	d130      	bne.n	8007776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	2203      	movs	r2, #3
 8007720:	fa02 f303 	lsl.w	r3, r2, r3
 8007724:	43db      	mvns	r3, r3
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4013      	ands	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800774a:	2201      	movs	r2, #1
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43db      	mvns	r3, r3
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4013      	ands	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 0201 	and.w	r2, r3, #1
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d017      	beq.n	80077b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	2203      	movs	r2, #3
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4013      	ands	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d123      	bne.n	8007806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	08da      	lsrs	r2, r3, #3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3208      	adds	r2, #8
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	220f      	movs	r2, #15
 80077d6:	fa02 f303 	lsl.w	r3, r2, r3
 80077da:	43db      	mvns	r3, r3
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4013      	ands	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	fa02 f303 	lsl.w	r3, r2, r3
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	08da      	lsrs	r2, r3, #3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3208      	adds	r2, #8
 8007800:	6939      	ldr	r1, [r7, #16]
 8007802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	2203      	movs	r2, #3
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	43db      	mvns	r3, r3
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4013      	ands	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f003 0203 	and.w	r2, r3, #3
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80a6 	beq.w	8007994 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007848:	4b5b      	ldr	r3, [pc, #364]	; (80079b8 <HAL_GPIO_Init+0x2e4>)
 800784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784c:	4a5a      	ldr	r2, [pc, #360]	; (80079b8 <HAL_GPIO_Init+0x2e4>)
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	6613      	str	r3, [r2, #96]	; 0x60
 8007854:	4b58      	ldr	r3, [pc, #352]	; (80079b8 <HAL_GPIO_Init+0x2e4>)
 8007856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007860:	4a56      	ldr	r2, [pc, #344]	; (80079bc <HAL_GPIO_Init+0x2e8>)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	3302      	adds	r3, #2
 8007868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	220f      	movs	r2, #15
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4013      	ands	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800788a:	d01f      	beq.n	80078cc <HAL_GPIO_Init+0x1f8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a4c      	ldr	r2, [pc, #304]	; (80079c0 <HAL_GPIO_Init+0x2ec>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d019      	beq.n	80078c8 <HAL_GPIO_Init+0x1f4>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a4b      	ldr	r2, [pc, #300]	; (80079c4 <HAL_GPIO_Init+0x2f0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_GPIO_Init+0x1f0>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a4a      	ldr	r2, [pc, #296]	; (80079c8 <HAL_GPIO_Init+0x2f4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00d      	beq.n	80078c0 <HAL_GPIO_Init+0x1ec>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a49      	ldr	r2, [pc, #292]	; (80079cc <HAL_GPIO_Init+0x2f8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <HAL_GPIO_Init+0x1e8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a48      	ldr	r2, [pc, #288]	; (80079d0 <HAL_GPIO_Init+0x2fc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d101      	bne.n	80078b8 <HAL_GPIO_Init+0x1e4>
 80078b4:	2305      	movs	r3, #5
 80078b6:	e00a      	b.n	80078ce <HAL_GPIO_Init+0x1fa>
 80078b8:	2306      	movs	r3, #6
 80078ba:	e008      	b.n	80078ce <HAL_GPIO_Init+0x1fa>
 80078bc:	2304      	movs	r3, #4
 80078be:	e006      	b.n	80078ce <HAL_GPIO_Init+0x1fa>
 80078c0:	2303      	movs	r3, #3
 80078c2:	e004      	b.n	80078ce <HAL_GPIO_Init+0x1fa>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e002      	b.n	80078ce <HAL_GPIO_Init+0x1fa>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_GPIO_Init+0x1fa>
 80078cc:	2300      	movs	r3, #0
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	f002 0203 	and.w	r2, r2, #3
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	4093      	lsls	r3, r2
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078de:	4937      	ldr	r1, [pc, #220]	; (80079bc <HAL_GPIO_Init+0x2e8>)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	3302      	adds	r3, #2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078ec:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <HAL_GPIO_Init+0x300>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	43db      	mvns	r3, r3
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4013      	ands	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007910:	4a30      	ldr	r2, [pc, #192]	; (80079d4 <HAL_GPIO_Init+0x300>)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007916:	4b2f      	ldr	r3, [pc, #188]	; (80079d4 <HAL_GPIO_Init+0x300>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	43db      	mvns	r3, r3
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	4013      	ands	r3, r2
 8007924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800793a:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <HAL_GPIO_Init+0x300>)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007940:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <HAL_GPIO_Init+0x300>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	43db      	mvns	r3, r3
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4013      	ands	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <HAL_GPIO_Init+0x300>)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <HAL_GPIO_Init+0x300>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	43db      	mvns	r3, r3
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4013      	ands	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800798e:	4a11      	ldr	r2, [pc, #68]	; (80079d4 <HAL_GPIO_Init+0x300>)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	3301      	adds	r3, #1
 8007998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f47f ae9d 	bne.w	80076e4 <HAL_GPIO_Init+0x10>
  }
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40010000 	.word	0x40010000
 80079c0:	48000400 	.word	0x48000400
 80079c4:	48000800 	.word	0x48000800
 80079c8:	48000c00 	.word	0x48000c00
 80079cc:	48001000 	.word	0x48001000
 80079d0:	48001400 	.word	0x48001400
 80079d4:	40010400 	.word	0x40010400

080079d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	887b      	ldrh	r3, [r7, #2]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e001      	b.n	80079fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
 8007a14:	4613      	mov	r3, r2
 8007a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a18:	787b      	ldrb	r3, [r7, #1]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a24:	e002      	b.n	8007a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a26:	887a      	ldrh	r2, [r7, #2]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d141      	bne.n	8007aca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a46:	4b4b      	ldr	r3, [pc, #300]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a52:	d131      	bne.n	8007ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a54:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5a:	4a46      	ldr	r2, [pc, #280]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a64:	4b43      	ldr	r3, [pc, #268]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a6c:	4a41      	ldr	r2, [pc, #260]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a74:	4b40      	ldr	r3, [pc, #256]	; (8007b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2232      	movs	r2, #50	; 0x32
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	4a3f      	ldr	r2, [pc, #252]	; (8007b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	0c9b      	lsrs	r3, r3, #18
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a8a:	e002      	b.n	8007a92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a92:	4b38      	ldr	r3, [pc, #224]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9e:	d102      	bne.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f2      	bne.n	8007a8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007aa6:	4b33      	ldr	r3, [pc, #204]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab2:	d158      	bne.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e057      	b.n	8007b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ab8:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007abe:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007ac8:	e04d      	b.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad0:	d141      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ad2:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ade:	d131      	bne.n	8007b44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae6:	4a23      	ldr	r2, [pc, #140]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007af0:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007af8:	4a1e      	ldr	r2, [pc, #120]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b00:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2232      	movs	r2, #50	; 0x32
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	0c9b      	lsrs	r3, r3, #18
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b16:	e002      	b.n	8007b1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b1e:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2a:	d102      	bne.n	8007b32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f2      	bne.n	8007b18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3e:	d112      	bne.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e011      	b.n	8007b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b54:	e007      	b.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b5e:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40007000 	.word	0x40007000
 8007b78:	20000000 	.word	0x20000000
 8007b7c:	431bde83 	.word	0x431bde83

08007b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e306      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d075      	beq.n	8007c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b9e:	4b97      	ldr	r3, [pc, #604]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 030c 	and.w	r3, r3, #12
 8007ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ba8:	4b94      	ldr	r3, [pc, #592]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	d102      	bne.n	8007bbe <HAL_RCC_OscConfig+0x3e>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d002      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x44>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d10b      	bne.n	8007bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc4:	4b8d      	ldr	r3, [pc, #564]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d05b      	beq.n	8007c88 <HAL_RCC_OscConfig+0x108>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d157      	bne.n	8007c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e2e1      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be4:	d106      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x74>
 8007be6:	4b85      	ldr	r3, [pc, #532]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a84      	ldr	r2, [pc, #528]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e01d      	b.n	8007c30 <HAL_RCC_OscConfig+0xb0>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bfc:	d10c      	bne.n	8007c18 <HAL_RCC_OscConfig+0x98>
 8007bfe:	4b7f      	ldr	r3, [pc, #508]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a7e      	ldr	r2, [pc, #504]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	4b7c      	ldr	r3, [pc, #496]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a7b      	ldr	r2, [pc, #492]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	e00b      	b.n	8007c30 <HAL_RCC_OscConfig+0xb0>
 8007c18:	4b78      	ldr	r3, [pc, #480]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a77      	ldr	r2, [pc, #476]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	4b75      	ldr	r3, [pc, #468]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a74      	ldr	r2, [pc, #464]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d013      	beq.n	8007c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fc fe9a 	bl	8004970 <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c40:	f7fc fe96 	bl	8004970 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b64      	cmp	r3, #100	; 0x64
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e2a6      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c52:	4b6a      	ldr	r3, [pc, #424]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f0      	beq.n	8007c40 <HAL_RCC_OscConfig+0xc0>
 8007c5e:	e014      	b.n	8007c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fc fe86 	bl	8004970 <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c68:	f7fc fe82 	bl	8004970 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b64      	cmp	r3, #100	; 0x64
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e292      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c7a:	4b60      	ldr	r3, [pc, #384]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f0      	bne.n	8007c68 <HAL_RCC_OscConfig+0xe8>
 8007c86:	e000      	b.n	8007c8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d075      	beq.n	8007d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c96:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 030c 	and.w	r3, r3, #12
 8007c9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ca0:	4b56      	ldr	r3, [pc, #344]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b0c      	cmp	r3, #12
 8007cae:	d102      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x136>
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d002      	beq.n	8007cbc <HAL_RCC_OscConfig+0x13c>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d11f      	bne.n	8007cfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cbc:	4b4f      	ldr	r3, [pc, #316]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x154>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e265      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd4:	4b49      	ldr	r3, [pc, #292]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	061b      	lsls	r3, r3, #24
 8007ce2:	4946      	ldr	r1, [pc, #280]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ce8:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <HAL_RCC_OscConfig+0x280>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fc fdf3 	bl	80048d8 <HAL_InitTick>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d043      	beq.n	8007d80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e251      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d023      	beq.n	8007d4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d04:	4b3d      	ldr	r3, [pc, #244]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a3c      	ldr	r2, [pc, #240]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d10:	f7fc fe2e 	bl	8004970 <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d18:	f7fc fe2a 	bl	8004970 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e23a      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d2a:	4b34      	ldr	r3, [pc, #208]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f0      	beq.n	8007d18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d36:	4b31      	ldr	r3, [pc, #196]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	061b      	lsls	r3, r3, #24
 8007d44:	492d      	ldr	r1, [pc, #180]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	604b      	str	r3, [r1, #4]
 8007d4a:	e01a      	b.n	8007d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d4c:	4b2b      	ldr	r3, [pc, #172]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d58:	f7fc fe0a 	bl	8004970 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d60:	f7fc fe06 	bl	8004970 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e216      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d72:	4b22      	ldr	r3, [pc, #136]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f0      	bne.n	8007d60 <HAL_RCC_OscConfig+0x1e0>
 8007d7e:	e000      	b.n	8007d82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d041      	beq.n	8007e12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01c      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d96:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d9c:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da6:	f7fc fde3 	bl	8004970 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dae:	f7fc fddf 	bl	8004970 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e1ef      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ef      	beq.n	8007dae <HAL_RCC_OscConfig+0x22e>
 8007dce:	e020      	b.n	8007e12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <HAL_RCC_OscConfig+0x27c>)
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de0:	f7fc fdc6 	bl	8004970 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007de6:	e00d      	b.n	8007e04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007de8:	f7fc fdc2 	bl	8004970 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d906      	bls.n	8007e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e1d2      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
 8007dfa:	bf00      	nop
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	20000128 	.word	0x20000128
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e04:	4b8c      	ldr	r3, [pc, #560]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1ea      	bne.n	8007de8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80a6 	beq.w	8007f6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e20:	2300      	movs	r3, #0
 8007e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e24:	4b84      	ldr	r3, [pc, #528]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_RCC_OscConfig+0x2b4>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <HAL_RCC_OscConfig+0x2b6>
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00d      	beq.n	8007e56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e3a:	4b7f      	ldr	r3, [pc, #508]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3e:	4a7e      	ldr	r2, [pc, #504]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e44:	6593      	str	r3, [r2, #88]	; 0x58
 8007e46:	4b7c      	ldr	r3, [pc, #496]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e52:	2301      	movs	r3, #1
 8007e54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e56:	4b79      	ldr	r3, [pc, #484]	; (800803c <HAL_RCC_OscConfig+0x4bc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d118      	bne.n	8007e94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e62:	4b76      	ldr	r3, [pc, #472]	; (800803c <HAL_RCC_OscConfig+0x4bc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a75      	ldr	r2, [pc, #468]	; (800803c <HAL_RCC_OscConfig+0x4bc>)
 8007e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e6e:	f7fc fd7f 	bl	8004970 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e74:	e008      	b.n	8007e88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e76:	f7fc fd7b 	bl	8004970 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e18b      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e88:	4b6c      	ldr	r3, [pc, #432]	; (800803c <HAL_RCC_OscConfig+0x4bc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0f0      	beq.n	8007e76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d108      	bne.n	8007eae <HAL_RCC_OscConfig+0x32e>
 8007e9c:	4b66      	ldr	r3, [pc, #408]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea2:	4a65      	ldr	r2, [pc, #404]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007eac:	e024      	b.n	8007ef8 <HAL_RCC_OscConfig+0x378>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d110      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x358>
 8007eb6:	4b60      	ldr	r3, [pc, #384]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebc:	4a5e      	ldr	r2, [pc, #376]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ebe:	f043 0304 	orr.w	r3, r3, #4
 8007ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ec6:	4b5c      	ldr	r3, [pc, #368]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ecc:	4a5a      	ldr	r2, [pc, #360]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ed6:	e00f      	b.n	8007ef8 <HAL_RCC_OscConfig+0x378>
 8007ed8:	4b57      	ldr	r3, [pc, #348]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ede:	4a56      	ldr	r2, [pc, #344]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ee8:	4b53      	ldr	r3, [pc, #332]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	4a52      	ldr	r2, [pc, #328]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ef0:	f023 0304 	bic.w	r3, r3, #4
 8007ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d016      	beq.n	8007f2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f00:	f7fc fd36 	bl	8004970 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f08:	f7fc fd32 	bl	8004970 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e140      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f1e:	4b46      	ldr	r3, [pc, #280]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0ed      	beq.n	8007f08 <HAL_RCC_OscConfig+0x388>
 8007f2c:	e015      	b.n	8007f5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2e:	f7fc fd1f 	bl	8004970 <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f34:	e00a      	b.n	8007f4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f36:	f7fc fd1b 	bl	8004970 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e129      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f4c:	4b3a      	ldr	r3, [pc, #232]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1ed      	bne.n	8007f36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f5a:	7ffb      	ldrb	r3, [r7, #31]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d105      	bne.n	8007f6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f60:	4b35      	ldr	r3, [pc, #212]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	4a34      	ldr	r2, [pc, #208]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0320 	and.w	r3, r3, #32
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d03c      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01c      	beq.n	8007fba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f80:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f86:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f90:	f7fc fcee 	bl	8004970 <HAL_GetTick>
 8007f94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f96:	e008      	b.n	8007faa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f98:	f7fc fcea 	bl	8004970 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e0fa      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007faa:	4b23      	ldr	r3, [pc, #140]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0ef      	beq.n	8007f98 <HAL_RCC_OscConfig+0x418>
 8007fb8:	e01b      	b.n	8007ff2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fba:	4b1f      	ldr	r3, [pc, #124]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fc0:	4a1d      	ldr	r2, [pc, #116]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fca:	f7fc fcd1 	bl	8004970 <HAL_GetTick>
 8007fce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fd2:	f7fc fccd 	bl	8004970 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e0dd      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fe4:	4b14      	ldr	r3, [pc, #80]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ef      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80d1 	beq.w	800819e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 030c 	and.w	r3, r3, #12
 8008004:	2b0c      	cmp	r3, #12
 8008006:	f000 808b 	beq.w	8008120 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d15e      	bne.n	80080d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a08      	ldr	r2, [pc, #32]	; (8008038 <HAL_RCC_OscConfig+0x4b8>)
 8008018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800801c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801e:	f7fc fca7 	bl	8004970 <HAL_GetTick>
 8008022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008024:	e00c      	b.n	8008040 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008026:	f7fc fca3 	bl	8004970 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d905      	bls.n	8008040 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e0b3      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
 8008038:	40021000 	.word	0x40021000
 800803c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008040:	4b59      	ldr	r3, [pc, #356]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1ec      	bne.n	8008026 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800804c:	4b56      	ldr	r3, [pc, #344]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	4b56      	ldr	r3, [pc, #344]	; (80081ac <HAL_RCC_OscConfig+0x62c>)
 8008052:	4013      	ands	r3, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6a11      	ldr	r1, [r2, #32]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800805c:	3a01      	subs	r2, #1
 800805e:	0112      	lsls	r2, r2, #4
 8008060:	4311      	orrs	r1, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008066:	0212      	lsls	r2, r2, #8
 8008068:	4311      	orrs	r1, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800806e:	0852      	lsrs	r2, r2, #1
 8008070:	3a01      	subs	r2, #1
 8008072:	0552      	lsls	r2, r2, #21
 8008074:	4311      	orrs	r1, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800807a:	0852      	lsrs	r2, r2, #1
 800807c:	3a01      	subs	r2, #1
 800807e:	0652      	lsls	r2, r2, #25
 8008080:	4311      	orrs	r1, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008086:	06d2      	lsls	r2, r2, #27
 8008088:	430a      	orrs	r2, r1
 800808a:	4947      	ldr	r1, [pc, #284]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 800808c:	4313      	orrs	r3, r2
 800808e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008090:	4b45      	ldr	r3, [pc, #276]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a44      	ldr	r2, [pc, #272]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 8008096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800809a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800809c:	4b42      	ldr	r3, [pc, #264]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	4a41      	ldr	r2, [pc, #260]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a8:	f7fc fc62 	bl	8004970 <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b0:	f7fc fc5e 	bl	8004970 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e06e      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080c2:	4b39      	ldr	r3, [pc, #228]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f0      	beq.n	80080b0 <HAL_RCC_OscConfig+0x530>
 80080ce:	e066      	b.n	800819e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080d0:	4b35      	ldr	r3, [pc, #212]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a34      	ldr	r2, [pc, #208]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80080dc:	4b32      	ldr	r3, [pc, #200]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4a31      	ldr	r2, [pc, #196]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80080e8:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	4a2e      	ldr	r2, [pc, #184]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 80080ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80080f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f8:	f7fc fc3a 	bl	8004970 <HAL_GetTick>
 80080fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080fe:	e008      	b.n	8008112 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008100:	f7fc fc36 	bl	8004970 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e046      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008112:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f0      	bne.n	8008100 <HAL_RCC_OscConfig+0x580>
 800811e:	e03e      	b.n	800819e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e039      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800812c:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <HAL_RCC_OscConfig+0x628>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f003 0203 	and.w	r2, r3, #3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	429a      	cmp	r2, r3
 800813e:	d12c      	bne.n	800819a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	3b01      	subs	r3, #1
 800814c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814e:	429a      	cmp	r2, r3
 8008150:	d123      	bne.n	800819a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800815e:	429a      	cmp	r2, r3
 8008160:	d11b      	bne.n	800819a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d113      	bne.n	800819a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817c:	085b      	lsrs	r3, r3, #1
 800817e:	3b01      	subs	r3, #1
 8008180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008182:	429a      	cmp	r2, r3
 8008184:	d109      	bne.n	800819a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	3b01      	subs	r3, #1
 8008194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008196:	429a      	cmp	r2, r3
 8008198:	d001      	beq.n	800819e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40021000 	.word	0x40021000
 80081ac:	019f800c 	.word	0x019f800c

080081b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e11e      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081c8:	4b91      	ldr	r3, [pc, #580]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d910      	bls.n	80081f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d6:	4b8e      	ldr	r3, [pc, #568]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 020f 	bic.w	r2, r3, #15
 80081de:	498c      	ldr	r1, [pc, #560]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e6:	4b8a      	ldr	r3, [pc, #552]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d001      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e106      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d073      	beq.n	80082ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d129      	bne.n	8008260 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800820c:	4b81      	ldr	r3, [pc, #516]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0f4      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800821c:	f000 f992 	bl	8008544 <RCC_GetSysClockFreqFromPLLSource>
 8008220:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	4a7c      	ldr	r2, [pc, #496]	; (8008418 <HAL_RCC_ClockConfig+0x268>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d93f      	bls.n	80082aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800822a:	4b7a      	ldr	r3, [pc, #488]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800823e:	2b00      	cmp	r3, #0
 8008240:	d033      	beq.n	80082aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008246:	2b00      	cmp	r3, #0
 8008248:	d12f      	bne.n	80082aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800824a:	4b72      	ldr	r3, [pc, #456]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008252:	4a70      	ldr	r2, [pc, #448]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e024      	b.n	80082aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d107      	bne.n	8008278 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008268:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e0c6      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008278:	4b66      	ldr	r3, [pc, #408]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e0be      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008288:	f000 f8ce 	bl	8008428 <HAL_RCC_GetSysClockFreq>
 800828c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	4a61      	ldr	r2, [pc, #388]	; (8008418 <HAL_RCC_ClockConfig+0x268>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d909      	bls.n	80082aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008296:	4b5f      	ldr	r3, [pc, #380]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800829e:	4a5d      	ldr	r2, [pc, #372]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80082a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80082a6:	2380      	movs	r3, #128	; 0x80
 80082a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082aa:	4b5a      	ldr	r3, [pc, #360]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f023 0203 	bic.w	r2, r3, #3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	4957      	ldr	r1, [pc, #348]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082bc:	f7fc fb58 	bl	8004970 <HAL_GetTick>
 80082c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082c2:	e00a      	b.n	80082da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082c4:	f7fc fb54 	bl	8004970 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e095      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082da:	4b4e      	ldr	r3, [pc, #312]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 020c 	and.w	r2, r3, #12
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d1eb      	bne.n	80082c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d023      	beq.n	8008340 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008304:	4b43      	ldr	r3, [pc, #268]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	4a42      	ldr	r2, [pc, #264]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800830a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800830e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800831c:	4b3d      	ldr	r3, [pc, #244]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008324:	4a3b      	ldr	r2, [pc, #236]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 8008326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800832a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800832c:	4b39      	ldr	r3, [pc, #228]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	4936      	ldr	r1, [pc, #216]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800833a:	4313      	orrs	r3, r2
 800833c:	608b      	str	r3, [r1, #8]
 800833e:	e008      	b.n	8008352 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b80      	cmp	r3, #128	; 0x80
 8008344:	d105      	bne.n	8008352 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008346:	4b33      	ldr	r3, [pc, #204]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	4a32      	ldr	r2, [pc, #200]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 800834c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008350:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008352:	4b2f      	ldr	r3, [pc, #188]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d21d      	bcs.n	800839c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008360:	4b2b      	ldr	r3, [pc, #172]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f023 020f 	bic.w	r2, r3, #15
 8008368:	4929      	ldr	r1, [pc, #164]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	4313      	orrs	r3, r2
 800836e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008370:	f7fc fafe 	bl	8004970 <HAL_GetTick>
 8008374:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008376:	e00a      	b.n	800838e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008378:	f7fc fafa 	bl	8004970 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	f241 3288 	movw	r2, #5000	; 0x1388
 8008386:	4293      	cmp	r3, r2
 8008388:	d901      	bls.n	800838e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e03b      	b.n	8008406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800838e:	4b20      	ldr	r3, [pc, #128]	; (8008410 <HAL_RCC_ClockConfig+0x260>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d1ed      	bne.n	8008378 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d008      	beq.n	80083ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083a8:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4917      	ldr	r1, [pc, #92]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0308 	and.w	r3, r3, #8
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	490f      	ldr	r1, [pc, #60]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083da:	f000 f825 	bl	8008428 <HAL_RCC_GetSysClockFreq>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <HAL_RCC_ClockConfig+0x264>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	091b      	lsrs	r3, r3, #4
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	490c      	ldr	r1, [pc, #48]	; (800841c <HAL_RCC_ClockConfig+0x26c>)
 80083ec:	5ccb      	ldrb	r3, [r1, r3]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	fa22 f303 	lsr.w	r3, r2, r3
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <HAL_RCC_ClockConfig+0x270>)
 80083f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <HAL_RCC_ClockConfig+0x274>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fc fa6a 	bl	80048d8 <HAL_InitTick>
 8008404:	4603      	mov	r3, r0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40022000 	.word	0x40022000
 8008414:	40021000 	.word	0x40021000
 8008418:	04c4b400 	.word	0x04c4b400
 800841c:	0800ba1c 	.word	0x0800ba1c
 8008420:	20000000 	.word	0x20000000
 8008424:	20000128 	.word	0x20000128

08008428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800842e:	4b2c      	ldr	r3, [pc, #176]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 030c 	and.w	r3, r3, #12
 8008436:	2b04      	cmp	r3, #4
 8008438:	d102      	bne.n	8008440 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800843a:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	e047      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008440:	4b27      	ldr	r3, [pc, #156]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b08      	cmp	r3, #8
 800844a:	d102      	bne.n	8008452 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800844c:	4b26      	ldr	r3, [pc, #152]	; (80084e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e03e      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b0c      	cmp	r3, #12
 800845c:	d136      	bne.n	80084cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800845e:	4b20      	ldr	r3, [pc, #128]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	3301      	adds	r3, #1
 8008474:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b03      	cmp	r3, #3
 800847a:	d10c      	bne.n	8008496 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800847c:	4a1a      	ldr	r2, [pc, #104]	; (80084e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	fbb2 f3f3 	udiv	r3, r2, r3
 8008484:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008486:	68d2      	ldr	r2, [r2, #12]
 8008488:	0a12      	lsrs	r2, r2, #8
 800848a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	617b      	str	r3, [r7, #20]
      break;
 8008494:	e00c      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008496:	4a13      	ldr	r2, [pc, #76]	; (80084e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	fbb2 f3f3 	udiv	r3, r2, r3
 800849e:	4a10      	ldr	r2, [pc, #64]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084a0:	68d2      	ldr	r2, [r2, #12]
 80084a2:	0a12      	lsrs	r2, r2, #8
 80084a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]
      break;
 80084ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	0e5b      	lsrs	r3, r3, #25
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	3301      	adds	r3, #1
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	e001      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80084d0:	693b      	ldr	r3, [r7, #16]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	40021000 	.word	0x40021000
 80084e4:	00f42400 	.word	0x00f42400
 80084e8:	007270e0 	.word	0x007270e0

080084ec <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <HAL_RCC_EnableCSS+0x1c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a04      	ldr	r2, [pc, #16]	; (8008508 <HAL_RCC_EnableCSS+0x1c>)
 80084f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084fa:	6013      	str	r3, [r2, #0]
}
 80084fc:	bf00      	nop
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40021000 	.word	0x40021000

0800850c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851c:	d105      	bne.n	800852a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800851e:	f000 f809 	bl	8008534 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008522:	4b03      	ldr	r3, [pc, #12]	; (8008530 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008528:	621a      	str	r2, [r3, #32]
  }
}
 800852a:	bf00      	nop
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40021000 	.word	0x40021000

08008534 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800854a:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	091b      	lsrs	r3, r3, #4
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	3301      	adds	r3, #1
 8008560:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b03      	cmp	r3, #3
 8008566:	d10c      	bne.n	8008582 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008568:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008570:	4a14      	ldr	r2, [pc, #80]	; (80085c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008572:	68d2      	ldr	r2, [r2, #12]
 8008574:	0a12      	lsrs	r2, r2, #8
 8008576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800857a:	fb02 f303 	mul.w	r3, r2, r3
 800857e:	617b      	str	r3, [r7, #20]
    break;
 8008580:	e00c      	b.n	800859c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008582:	4a12      	ldr	r2, [pc, #72]	; (80085cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	fbb2 f3f3 	udiv	r3, r2, r3
 800858a:	4a0e      	ldr	r2, [pc, #56]	; (80085c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800858c:	68d2      	ldr	r2, [r2, #12]
 800858e:	0a12      	lsrs	r2, r2, #8
 8008590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]
    break;
 800859a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	0e5b      	lsrs	r3, r3, #25
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	3301      	adds	r3, #1
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80085b6:	687b      	ldr	r3, [r7, #4]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	40021000 	.word	0x40021000
 80085c8:	007270e0 	.word	0x007270e0
 80085cc:	00f42400 	.word	0x00f42400

080085d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085d8:	2300      	movs	r3, #0
 80085da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085dc:	2300      	movs	r3, #0
 80085de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8098 	beq.w	800871e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ee:	2300      	movs	r3, #0
 80085f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085f2:	4b43      	ldr	r3, [pc, #268]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10d      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085fe:	4b40      	ldr	r3, [pc, #256]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	4a3f      	ldr	r2, [pc, #252]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008608:	6593      	str	r3, [r2, #88]	; 0x58
 800860a:	4b3d      	ldr	r3, [pc, #244]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800860c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008612:	60bb      	str	r3, [r7, #8]
 8008614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008616:	2301      	movs	r3, #1
 8008618:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800861a:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a39      	ldr	r2, [pc, #228]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008626:	f7fc f9a3 	bl	8004970 <HAL_GetTick>
 800862a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800862c:	e009      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800862e:	f7fc f99f 	bl	8004970 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d902      	bls.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	74fb      	strb	r3, [r7, #19]
        break;
 8008640:	e005      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008642:	4b30      	ldr	r3, [pc, #192]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0ef      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800864e:	7cfb      	ldrb	r3, [r7, #19]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d159      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008654:	4b2a      	ldr	r3, [pc, #168]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800865e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01e      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	429a      	cmp	r2, r3
 800866e:	d019      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008670:	4b23      	ldr	r3, [pc, #140]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800867a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800867c:	4b20      	ldr	r3, [pc, #128]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800868c:	4b1c      	ldr	r3, [pc, #112]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008692:	4a1b      	ldr	r2, [pc, #108]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800869c:	4a18      	ldr	r2, [pc, #96]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d016      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ae:	f7fc f95f 	bl	8004970 <HAL_GetTick>
 80086b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086b4:	e00b      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086b6:	f7fc f95b 	bl	8004970 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d902      	bls.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	74fb      	strb	r3, [r7, #19]
            break;
 80086cc:	e006      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086ce:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ec      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80086dc:	7cfb      	ldrb	r3, [r7, #19]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086e2:	4b07      	ldr	r3, [pc, #28]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f0:	4903      	ldr	r1, [pc, #12]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80086f8:	e008      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086fa:	7cfb      	ldrb	r3, [r7, #19]
 80086fc:	74bb      	strb	r3, [r7, #18]
 80086fe:	e005      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008700:	40021000 	.word	0x40021000
 8008704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800870c:	7c7b      	ldrb	r3, [r7, #17]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008712:	4ba7      	ldr	r3, [pc, #668]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	4aa6      	ldr	r2, [pc, #664]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800871c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800872a:	4ba1      	ldr	r3, [pc, #644]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008730:	f023 0203 	bic.w	r2, r3, #3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	499d      	ldr	r1, [pc, #628]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800874c:	4b98      	ldr	r3, [pc, #608]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008752:	f023 020c 	bic.w	r2, r3, #12
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	4995      	ldr	r1, [pc, #596]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800876e:	4b90      	ldr	r3, [pc, #576]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	498c      	ldr	r1, [pc, #560]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0308 	and.w	r3, r3, #8
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008790:	4b87      	ldr	r3, [pc, #540]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	4984      	ldr	r1, [pc, #528]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087b2:	4b7f      	ldr	r3, [pc, #508]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	497b      	ldr	r1, [pc, #492]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087d4:	4b76      	ldr	r3, [pc, #472]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	4973      	ldr	r1, [pc, #460]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087f6:	4b6e      	ldr	r3, [pc, #440]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	496a      	ldr	r1, [pc, #424]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008806:	4313      	orrs	r3, r2
 8008808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008818:	4b65      	ldr	r3, [pc, #404]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	4962      	ldr	r1, [pc, #392]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008828:	4313      	orrs	r3, r2
 800882a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800883a:	4b5d      	ldr	r3, [pc, #372]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	4959      	ldr	r1, [pc, #356]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800885c:	4b54      	ldr	r3, [pc, #336]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800885e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008862:	f023 0203 	bic.w	r2, r3, #3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	4951      	ldr	r1, [pc, #324]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800886c:	4313      	orrs	r3, r2
 800886e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800887e:	4b4c      	ldr	r3, [pc, #304]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	4948      	ldr	r1, [pc, #288]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800889c:	2b00      	cmp	r3, #0
 800889e:	d015      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088a0:	4b43      	ldr	r3, [pc, #268]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	4940      	ldr	r1, [pc, #256]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088be:	d105      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088c0:	4b3b      	ldr	r3, [pc, #236]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4a3a      	ldr	r2, [pc, #232]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d015      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80088d8:	4b35      	ldr	r3, [pc, #212]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e6:	4932      	ldr	r1, [pc, #200]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f6:	d105      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088f8:	4b2d      	ldr	r3, [pc, #180]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	4a2c      	ldr	r2, [pc, #176]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008902:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d015      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008910:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008916:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	4924      	ldr	r1, [pc, #144]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008920:	4313      	orrs	r3, r2
 8008922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800892e:	d105      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008930:	4b1f      	ldr	r3, [pc, #124]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	4a1e      	ldr	r2, [pc, #120]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800893a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d015      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008948:	4b19      	ldr	r3, [pc, #100]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800894a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	4916      	ldr	r1, [pc, #88]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008958:	4313      	orrs	r3, r2
 800895a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008966:	d105      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008968:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	4a10      	ldr	r2, [pc, #64]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008972:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d019      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	4908      	ldr	r1, [pc, #32]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800899e:	d109      	bne.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089a0:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4a02      	ldr	r2, [pc, #8]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089aa:	60d3      	str	r3, [r2, #12]
 80089ac:	e002      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80089ae:	bf00      	nop
 80089b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d015      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089c0:	4b29      	ldr	r3, [pc, #164]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	4926      	ldr	r1, [pc, #152]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089de:	d105      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089e0:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	4a20      	ldr	r2, [pc, #128]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d015      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80089f8:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a06:	4918      	ldr	r1, [pc, #96]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d105      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a18:	4b13      	ldr	r3, [pc, #76]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	4a12      	ldr	r2, [pc, #72]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d015      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3e:	490a      	ldr	r1, [pc, #40]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4e:	d105      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	40021000 	.word	0x40021000

08008a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e0c1      	b.n	8008c02 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d108      	bne.n	8008a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a8e:	d009      	beq.n	8008aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	61da      	str	r2, [r3, #28]
 8008a96:	e005      	b.n	8008aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d12a      	bne.n	8008b0c <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a52      	ldr	r2, [pc, #328]	; (8008c0c <HAL_SPI_Init+0x1a0>)
 8008ac2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a52      	ldr	r2, [pc, #328]	; (8008c10 <HAL_SPI_Init+0x1a4>)
 8008ac8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a51      	ldr	r2, [pc, #324]	; (8008c14 <HAL_SPI_Init+0x1a8>)
 8008ace:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a51      	ldr	r2, [pc, #324]	; (8008c18 <HAL_SPI_Init+0x1ac>)
 8008ad4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a50      	ldr	r2, [pc, #320]	; (8008c1c <HAL_SPI_Init+0x1b0>)
 8008ada:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a50      	ldr	r2, [pc, #320]	; (8008c20 <HAL_SPI_Init+0x1b4>)
 8008ae0:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a4f      	ldr	r2, [pc, #316]	; (8008c24 <HAL_SPI_Init+0x1b8>)
 8008ae6:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a4f      	ldr	r2, [pc, #316]	; (8008c28 <HAL_SPI_Init+0x1bc>)
 8008aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d103      	bne.n	8008b02 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a4b      	ldr	r2, [pc, #300]	; (8008c2c <HAL_SPI_Init+0x1c0>)
 8008afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b2c:	d902      	bls.n	8008b34 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	e002      	b.n	8008b3a <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008b42:	d007      	beq.n	8008b54 <HAL_SPI_Init+0xe8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b4c:	d002      	beq.n	8008b54 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b64:	431a      	orrs	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	ea42 0103 	orr.w	r1, r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	0c1b      	lsrs	r3, r3, #16
 8008bb0:	f003 0204 	and.w	r2, r3, #4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	f003 0310 	and.w	r3, r3, #16
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008bd0:	ea42 0103 	orr.w	r1, r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69da      	ldr	r2, [r3, #28]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	08008d7d 	.word	0x08008d7d
 8008c10:	08008d91 	.word	0x08008d91
 8008c14:	08008da5 	.word	0x08008da5
 8008c18:	08008db9 	.word	0x08008db9
 8008c1c:	08008dcd 	.word	0x08008dcd
 8008c20:	08008de1 	.word	0x08008de1
 8008c24:	08008df5 	.word	0x08008df5
 8008c28:	08008e09 	.word	0x08008e09
 8008c2c:	08003241 	.word	0x08003241

08008c30 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e08b      	b.n	8008d70 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <HAL_SPI_RegisterCallback+0x36>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e084      	b.n	8008d70 <HAL_SPI_RegisterCallback+0x140>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d14e      	bne.n	8008d18 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d842      	bhi.n	8008d06 <HAL_SPI_RegisterCallback+0xd6>
 8008c80:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <HAL_SPI_RegisterCallback+0x58>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008cb1 	.word	0x08008cb1
 8008c8c:	08008cb9 	.word	0x08008cb9
 8008c90:	08008cc1 	.word	0x08008cc1
 8008c94:	08008cc9 	.word	0x08008cc9
 8008c98:	08008cd1 	.word	0x08008cd1
 8008c9c:	08008cd9 	.word	0x08008cd9
 8008ca0:	08008ce1 	.word	0x08008ce1
 8008ca4:	08008ce9 	.word	0x08008ce9
 8008ca8:	08008cf3 	.word	0x08008cf3
 8008cac:	08008cfd 	.word	0x08008cfd
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008cb6:	e056      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008cbe:	e052      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008cc6:	e04e      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008cce:	e04a      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008cd6:	e046      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008cde:	e042      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008ce6:	e03e      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008cf0:	e039      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008cfa:	e034      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008d04:	e02f      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	75fb      	strb	r3, [r7, #23]
        break;
 8008d16:	e026      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d118      	bne.n	8008d56 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 8008d24:	7afb      	ldrb	r3, [r7, #11]
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d002      	beq.n	8008d30 <HAL_SPI_RegisterCallback+0x100>
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	d005      	beq.n	8008d3a <HAL_SPI_RegisterCallback+0x10a>
 8008d2e:	e009      	b.n	8008d44 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008d38:	e015      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008d42:	e010      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	75fb      	strb	r3, [r7, #23]
        break;
 8008d54:	e007      	b.n	8008d66 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e054      	b.n	8008ed8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d111      	bne.n	8008e5e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f002 f9e2 	bl	800b20c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a23      	ldr	r2, [pc, #140]	; (8008ee0 <HAL_TIM_Base_Init+0xc4>)
 8008e54:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f001 fb2d 	bl	800a4d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	08003ed1 	.word	0x08003ed1

08008ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d001      	beq.n	8008efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e04c      	b.n	8008f96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a26      	ldr	r2, [pc, #152]	; (8008fa4 <HAL_TIM_Base_Start+0xc0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d022      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f16:	d01d      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a22      	ldr	r2, [pc, #136]	; (8008fa8 <HAL_TIM_Base_Start+0xc4>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d018      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a21      	ldr	r2, [pc, #132]	; (8008fac <HAL_TIM_Base_Start+0xc8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d013      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <HAL_TIM_Base_Start+0xcc>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00e      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1e      	ldr	r2, [pc, #120]	; (8008fb4 <HAL_TIM_Base_Start+0xd0>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d009      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1c      	ldr	r2, [pc, #112]	; (8008fb8 <HAL_TIM_Base_Start+0xd4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d004      	beq.n	8008f54 <HAL_TIM_Base_Start+0x70>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a1b      	ldr	r2, [pc, #108]	; (8008fbc <HAL_TIM_Base_Start+0xd8>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d115      	bne.n	8008f80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <HAL_TIM_Base_Start+0xdc>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b06      	cmp	r3, #6
 8008f64:	d015      	beq.n	8008f92 <HAL_TIM_Base_Start+0xae>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6c:	d011      	beq.n	8008f92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0201 	orr.w	r2, r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7e:	e008      	b.n	8008f92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0201 	orr.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e000      	b.n	8008f94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	40013400 	.word	0x40013400
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40015000 	.word	0x40015000
 8008fc0:	00010007 	.word	0x00010007

08008fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d001      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e054      	b.n	8009086 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0201 	orr.w	r2, r2, #1
 8008ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a26      	ldr	r2, [pc, #152]	; (8009094 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d022      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009006:	d01d      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a22      	ldr	r2, [pc, #136]	; (8009098 <HAL_TIM_Base_Start_IT+0xd4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d018      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a21      	ldr	r2, [pc, #132]	; (800909c <HAL_TIM_Base_Start_IT+0xd8>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d013      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1f      	ldr	r2, [pc, #124]	; (80090a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00e      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1e      	ldr	r2, [pc, #120]	; (80090a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1c      	ldr	r2, [pc, #112]	; (80090a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d004      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x80>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1b      	ldr	r2, [pc, #108]	; (80090ac <HAL_TIM_Base_Start_IT+0xe8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d115      	bne.n	8009070 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	4b19      	ldr	r3, [pc, #100]	; (80090b0 <HAL_TIM_Base_Start_IT+0xec>)
 800904c:	4013      	ands	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b06      	cmp	r3, #6
 8009054:	d015      	beq.n	8009082 <HAL_TIM_Base_Start_IT+0xbe>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905c:	d011      	beq.n	8009082 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	e008      	b.n	8009082 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	e000      	b.n	8009084 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40000400 	.word	0x40000400
 800909c:	40000800 	.word	0x40000800
 80090a0:	40000c00 	.word	0x40000c00
 80090a4:	40013400 	.word	0x40013400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40015000 	.word	0x40015000
 80090b0:	00010007 	.word	0x00010007

080090b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e054      	b.n	8009170 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d111      	bne.n	80090f6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f002 f896 	bl	800b20c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a23      	ldr	r2, [pc, #140]	; (8009178 <HAL_TIM_PWM_Init+0xc4>)
 80090ec:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f001 f9e1 	bl	800a4d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	0800917d 	.word	0x0800917d

0800917c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e054      	b.n	800924c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d111      	bne.n	80091d2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f002 f828 	bl	800b20c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a23      	ldr	r2, [pc, #140]	; (8009254 <HAL_TIM_IC_Init+0xc4>)
 80091c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2202      	movs	r2, #2
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f001 f973 	bl	800a4d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08009259 	.word	0x08009259

08009258 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e04c      	b.n	800931a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d111      	bne.n	80092b0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 ffb9 	bl	800b20c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a1f      	ldr	r2, [pc, #124]	; (8009324 <HAL_TIM_OnePulse_Init+0xb8>)
 80092a6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f001 f904 	bl	800a4d0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0208 	bic.w	r2, r2, #8
 80092d6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6819      	ldr	r1, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	080041e5 	.word	0x080041e5

08009328 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009338:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009340:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009348:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009350:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d108      	bne.n	800936a <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d105      	bne.n	800936a <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800935e:	7b7b      	ldrb	r3, [r7, #13]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d102      	bne.n	800936a <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009364:	7b3b      	ldrb	r3, [r7, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d001      	beq.n	800936e <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e049      	b.n	8009402 <HAL_TIM_OnePulse_Start+0xda>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2202      	movs	r2, #2
 8009382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2201      	movs	r2, #1
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f001 ff12 	bl	800b1c0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2201      	movs	r2, #1
 80093a2:	2104      	movs	r1, #4
 80093a4:	4618      	mov	r0, r3
 80093a6:	f001 ff0b 	bl	800b1c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a17      	ldr	r2, [pc, #92]	; (800940c <HAL_TIM_OnePulse_Start+0xe4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d018      	beq.n	80093e6 <HAL_TIM_OnePulse_Start+0xbe>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a15      	ldr	r2, [pc, #84]	; (8009410 <HAL_TIM_OnePulse_Start+0xe8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_TIM_OnePulse_Start+0xbe>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a14      	ldr	r2, [pc, #80]	; (8009414 <HAL_TIM_OnePulse_Start+0xec>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00e      	beq.n	80093e6 <HAL_TIM_OnePulse_Start+0xbe>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a12      	ldr	r2, [pc, #72]	; (8009418 <HAL_TIM_OnePulse_Start+0xf0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_TIM_OnePulse_Start+0xbe>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a11      	ldr	r2, [pc, #68]	; (800941c <HAL_TIM_OnePulse_Start+0xf4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_TIM_OnePulse_Start+0xbe>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a0f      	ldr	r2, [pc, #60]	; (8009420 <HAL_TIM_OnePulse_Start+0xf8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d101      	bne.n	80093ea <HAL_TIM_OnePulse_Start+0xc2>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <HAL_TIM_OnePulse_Start+0xc4>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <HAL_TIM_OnePulse_Start+0xd8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	40012c00 	.word	0x40012c00
 8009410:	40013400 	.word	0x40013400
 8009414:	40014000 	.word	0x40014000
 8009418:	40014400 	.word	0x40014400
 800941c:	40014800 	.word	0x40014800
 8009420:	40015000 	.word	0x40015000

08009424 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009434:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800943c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009444:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800944c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d108      	bne.n	8009466 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d105      	bne.n	8009466 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800945a:	7b7b      	ldrb	r3, [r7, #13]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d102      	bne.n	8009466 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009460:	7b3b      	ldrb	r3, [r7, #12]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d001      	beq.n	800946a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e059      	b.n	800951e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2202      	movs	r2, #2
 800946e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2202      	movs	r2, #2
 8009476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2202      	movs	r2, #2
 800947e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2202      	movs	r2, #2
 8009486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 0202 	orr.w	r2, r2, #2
 8009498:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68da      	ldr	r2, [r3, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0204 	orr.w	r2, r2, #4
 80094a8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2201      	movs	r2, #1
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f001 fe84 	bl	800b1c0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2201      	movs	r2, #1
 80094be:	2104      	movs	r1, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fe7d 	bl	800b1c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a17      	ldr	r2, [pc, #92]	; (8009528 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d018      	beq.n	8009502 <HAL_TIM_OnePulse_Start_IT+0xde>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a15      	ldr	r2, [pc, #84]	; (800952c <HAL_TIM_OnePulse_Start_IT+0x108>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <HAL_TIM_OnePulse_Start_IT+0xde>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a14      	ldr	r2, [pc, #80]	; (8009530 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00e      	beq.n	8009502 <HAL_TIM_OnePulse_Start_IT+0xde>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a12      	ldr	r2, [pc, #72]	; (8009534 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d009      	beq.n	8009502 <HAL_TIM_OnePulse_Start_IT+0xde>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a11      	ldr	r2, [pc, #68]	; (8009538 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d004      	beq.n	8009502 <HAL_TIM_OnePulse_Start_IT+0xde>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a0f      	ldr	r2, [pc, #60]	; (800953c <HAL_TIM_OnePulse_Start_IT+0x118>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d101      	bne.n	8009506 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d007      	beq.n	800951c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800951a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	40012c00 	.word	0x40012c00
 800952c:	40013400 	.word	0x40013400
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800
 800953c:	40015000 	.word	0x40015000

08009540 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e0a2      	b.n	800969a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d111      	bne.n	8009584 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 fe4f 	bl	800b20c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a4a      	ldr	r2, [pc, #296]	; (80096a4 <HAL_TIM_Encoder_Init+0x164>)
 800957a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800959a:	f023 0307 	bic.w	r3, r3, #7
 800959e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4619      	mov	r1, r3
 80095aa:	4610      	mov	r0, r2
 80095ac:	f000 ff90 	bl	800a4d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d8:	f023 0303 	bic.w	r3, r3, #3
 80095dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	4313      	orrs	r3, r2
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095f6:	f023 030c 	bic.w	r3, r3, #12
 80095fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	4313      	orrs	r3, r2
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4313      	orrs	r3, r2
 8009618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	011a      	lsls	r2, r3, #4
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	031b      	lsls	r3, r3, #12
 8009626:	4313      	orrs	r3, r2
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009634:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800963c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	4313      	orrs	r3, r2
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08004115 	.word	0x08004115

080096a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d110      	bne.n	80096fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d102      	bne.n	80096e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096de:	7b7b      	ldrb	r3, [r7, #13]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d001      	beq.n	80096e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e069      	b.n	80097bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f8:	e031      	b.n	800975e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	d110      	bne.n	8009722 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d102      	bne.n	800970c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009706:	7b3b      	ldrb	r3, [r7, #12]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d001      	beq.n	8009710 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e055      	b.n	80097bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2202      	movs	r2, #2
 800971c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009720:	e01d      	b.n	800975e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d108      	bne.n	800973a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d105      	bne.n	800973a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800972e:	7b7b      	ldrb	r3, [r7, #13]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009734:	7b3b      	ldrb	r3, [r7, #12]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d001      	beq.n	800973e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e03e      	b.n	80097bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <HAL_TIM_Encoder_Start+0xc4>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b04      	cmp	r3, #4
 8009768:	d008      	beq.n	800977c <HAL_TIM_Encoder_Start+0xd4>
 800976a:	e00f      	b.n	800978c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2201      	movs	r2, #1
 8009772:	2100      	movs	r1, #0
 8009774:	4618      	mov	r0, r3
 8009776:	f001 fd23 	bl	800b1c0 <TIM_CCxChannelCmd>
      break;
 800977a:	e016      	b.n	80097aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2201      	movs	r2, #1
 8009782:	2104      	movs	r1, #4
 8009784:	4618      	mov	r0, r3
 8009786:	f001 fd1b 	bl	800b1c0 <TIM_CCxChannelCmd>
      break;
 800978a:	e00e      	b.n	80097aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2201      	movs	r2, #1
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f001 fd13 	bl	800b1c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2201      	movs	r2, #1
 80097a0:	2104      	movs	r1, #4
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 fd0c 	bl	800b1c0 <TIM_CCxChannelCmd>
      break;
 80097a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 0201 	orr.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d128      	bne.n	800982c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0302 	and.w	r3, r3, #2
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d121      	bne.n	800982c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0202 	mvn.w	r2, #2
 80097f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
 8009810:	e009      	b.n	8009826 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b04      	cmp	r3, #4
 8009838:	d128      	bne.n	800988c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b04      	cmp	r3, #4
 8009846:	d121      	bne.n	800988c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f06f 0204 	mvn.w	r2, #4
 8009850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2202      	movs	r2, #2
 8009856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
 8009870:	e009      	b.n	8009886 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b08      	cmp	r3, #8
 8009898:	d128      	bne.n	80098ec <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 0308 	and.w	r3, r3, #8
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d121      	bne.n	80098ec <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0208 	mvn.w	r2, #8
 80098b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2204      	movs	r2, #4
 80098b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
 80098d0:	e009      	b.n	80098e6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0310 	and.w	r3, r3, #16
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	d128      	bne.n	800994c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b10      	cmp	r3, #16
 8009906:	d121      	bne.n	800994c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0210 	mvn.w	r2, #16
 8009910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2208      	movs	r2, #8
 8009916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
 8009930:	e009      	b.n	8009946 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b01      	cmp	r3, #1
 8009958:	d110      	bne.n	800997c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b01      	cmp	r3, #1
 8009966:	d109      	bne.n	800997c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f06f 0201 	mvn.w	r2, #1
 8009970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009986:	2b80      	cmp	r3, #128	; 0x80
 8009988:	d110      	bne.n	80099ac <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d109      	bne.n	80099ac <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ba:	d110      	bne.n	80099de <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d109      	bne.n	80099de <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80099d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b40      	cmp	r3, #64	; 0x40
 80099ea:	d110      	bne.n	8009a0e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d109      	bne.n	8009a0e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d110      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d109      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f06f 0220 	mvn.w	r2, #32
 8009a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a4c:	d111      	bne.n	8009a72 <HAL_TIM_IRQHandler+0x2ae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a5c:	d109      	bne.n	8009a72 <HAL_TIM_IRQHandler+0x2ae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a80:	d111      	bne.n	8009aa6 <HAL_TIM_IRQHandler+0x2e2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a90:	d109      	bne.n	8009aa6 <HAL_TIM_IRQHandler+0x2e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab4:	d111      	bne.n	8009ada <HAL_TIM_IRQHandler+0x316>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ac4:	d109      	bne.n	8009ada <HAL_TIM_IRQHandler+0x316>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ae8:	d111      	bne.n	8009b0e <HAL_TIM_IRQHandler+0x34a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009af8:	d109      	bne.n	8009b0e <HAL_TIM_IRQHandler+0x34a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b086      	sub	sp, #24
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e088      	b.n	8009c46 <HAL_TIM_IC_ConfigChannel+0x130>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d11b      	bne.n	8009b7a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	6819      	ldr	r1, [r3, #0]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f001 f96f 	bl	800ae34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 020c 	bic.w	r2, r2, #12
 8009b64:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6999      	ldr	r1, [r3, #24]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	619a      	str	r2, [r3, #24]
 8009b78:	e060      	b.n	8009c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d11c      	bne.n	8009bba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	6819      	ldr	r1, [r3, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f001 f9f3 	bl	800af7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699a      	ldr	r2, [r3, #24]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ba2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6999      	ldr	r1, [r3, #24]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	021a      	lsls	r2, r3, #8
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	619a      	str	r2, [r3, #24]
 8009bb8:	e040      	b.n	8009c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d11b      	bne.n	8009bf8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6819      	ldr	r1, [r3, #0]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f001 fa40 	bl	800b054 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	69da      	ldr	r2, [r3, #28]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 020c 	bic.w	r2, r2, #12
 8009be2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	69d9      	ldr	r1, [r3, #28]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	689a      	ldr	r2, [r3, #8]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	61da      	str	r2, [r3, #28]
 8009bf6:	e021      	b.n	8009c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	d11c      	bne.n	8009c38 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f001 fa5d 	bl	800b0cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69da      	ldr	r2, [r3, #28]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69d9      	ldr	r1, [r3, #28]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	021a      	lsls	r2, r3, #8
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	61da      	str	r2, [r3, #28]
 8009c36:	e001      	b.n	8009c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e0ff      	b.n	8009e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b14      	cmp	r3, #20
 8009c7a:	f200 80f0 	bhi.w	8009e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009c7e:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009e5f 	.word	0x08009e5f
 8009c8c:	08009e5f 	.word	0x08009e5f
 8009c90:	08009e5f 	.word	0x08009e5f
 8009c94:	08009d19 	.word	0x08009d19
 8009c98:	08009e5f 	.word	0x08009e5f
 8009c9c:	08009e5f 	.word	0x08009e5f
 8009ca0:	08009e5f 	.word	0x08009e5f
 8009ca4:	08009d5b 	.word	0x08009d5b
 8009ca8:	08009e5f 	.word	0x08009e5f
 8009cac:	08009e5f 	.word	0x08009e5f
 8009cb0:	08009e5f 	.word	0x08009e5f
 8009cb4:	08009d9b 	.word	0x08009d9b
 8009cb8:	08009e5f 	.word	0x08009e5f
 8009cbc:	08009e5f 	.word	0x08009e5f
 8009cc0:	08009e5f 	.word	0x08009e5f
 8009cc4:	08009ddd 	.word	0x08009ddd
 8009cc8:	08009e5f 	.word	0x08009e5f
 8009ccc:	08009e5f 	.word	0x08009e5f
 8009cd0:	08009e5f 	.word	0x08009e5f
 8009cd4:	08009e1d 	.word	0x08009e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fc9e 	bl	800a620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0208 	orr.w	r2, r2, #8
 8009cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0204 	bic.w	r2, r2, #4
 8009d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6999      	ldr	r1, [r3, #24]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	691a      	ldr	r2, [r3, #16]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	619a      	str	r2, [r3, #24]
      break;
 8009d16:	e0a5      	b.n	8009e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fd18 	bl	800a754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6999      	ldr	r1, [r3, #24]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	021a      	lsls	r2, r3, #8
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	619a      	str	r2, [r3, #24]
      break;
 8009d58:	e084      	b.n	8009e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fd8b 	bl	800a87c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69da      	ldr	r2, [r3, #28]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f042 0208 	orr.w	r2, r2, #8
 8009d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0204 	bic.w	r2, r2, #4
 8009d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69d9      	ldr	r1, [r3, #28]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	691a      	ldr	r2, [r3, #16]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	61da      	str	r2, [r3, #28]
      break;
 8009d98:	e064      	b.n	8009e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fdfd 	bl	800a9a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69da      	ldr	r2, [r3, #28]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69da      	ldr	r2, [r3, #28]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69d9      	ldr	r1, [r3, #28]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	021a      	lsls	r2, r3, #8
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	61da      	str	r2, [r3, #28]
      break;
 8009dda:	e043      	b.n	8009e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68b9      	ldr	r1, [r7, #8]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 fe70 	bl	800aac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0208 	orr.w	r2, r2, #8
 8009df6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0204 	bic.w	r2, r2, #4
 8009e06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009e1a:	e023      	b.n	8009e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 feba 	bl	800ab9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	021a      	lsls	r2, r3, #8
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009e5c:	e002      	b.n	8009e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	75fb      	strb	r3, [r7, #23]
      break;
 8009e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop

08009e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d101      	bne.n	8009e94 <HAL_TIM_ConfigClockSource+0x1c>
 8009e90:	2302      	movs	r3, #2
 8009e92:	e0f6      	b.n	800a082 <HAL_TIM_ConfigClockSource+0x20a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a6f      	ldr	r2, [pc, #444]	; (800a08c <HAL_TIM_ConfigClockSource+0x214>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	f000 80c1 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009ed4:	4a6d      	ldr	r2, [pc, #436]	; (800a08c <HAL_TIM_ConfigClockSource+0x214>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	f200 80c6 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009edc:	4a6c      	ldr	r2, [pc, #432]	; (800a090 <HAL_TIM_ConfigClockSource+0x218>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	f000 80b9 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009ee4:	4a6a      	ldr	r2, [pc, #424]	; (800a090 <HAL_TIM_ConfigClockSource+0x218>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	f200 80be 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009eec:	4a69      	ldr	r2, [pc, #420]	; (800a094 <HAL_TIM_ConfigClockSource+0x21c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	f000 80b1 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009ef4:	4a67      	ldr	r2, [pc, #412]	; (800a094 <HAL_TIM_ConfigClockSource+0x21c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	f200 80b6 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009efc:	4a66      	ldr	r2, [pc, #408]	; (800a098 <HAL_TIM_ConfigClockSource+0x220>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	f000 80a9 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f04:	4a64      	ldr	r2, [pc, #400]	; (800a098 <HAL_TIM_ConfigClockSource+0x220>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	f200 80ae 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f0c:	4a63      	ldr	r2, [pc, #396]	; (800a09c <HAL_TIM_ConfigClockSource+0x224>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	f000 80a1 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f14:	4a61      	ldr	r2, [pc, #388]	; (800a09c <HAL_TIM_ConfigClockSource+0x224>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	f200 80a6 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f1c:	4a60      	ldr	r2, [pc, #384]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x228>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	f000 8099 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f24:	4a5e      	ldr	r2, [pc, #376]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x228>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	f200 809e 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f30:	f000 8091 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f38:	f200 8096 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f40:	f000 8089 	beq.w	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f48:	f200 808e 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f50:	d03e      	beq.n	8009fd0 <HAL_TIM_ConfigClockSource+0x158>
 8009f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f56:	f200 8087 	bhi.w	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5e:	f000 8086 	beq.w	800a06e <HAL_TIM_ConfigClockSource+0x1f6>
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f66:	d87f      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f68:	2b70      	cmp	r3, #112	; 0x70
 8009f6a:	d01a      	beq.n	8009fa2 <HAL_TIM_ConfigClockSource+0x12a>
 8009f6c:	2b70      	cmp	r3, #112	; 0x70
 8009f6e:	d87b      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f70:	2b60      	cmp	r3, #96	; 0x60
 8009f72:	d050      	beq.n	800a016 <HAL_TIM_ConfigClockSource+0x19e>
 8009f74:	2b60      	cmp	r3, #96	; 0x60
 8009f76:	d877      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f78:	2b50      	cmp	r3, #80	; 0x50
 8009f7a:	d03c      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0x17e>
 8009f7c:	2b50      	cmp	r3, #80	; 0x50
 8009f7e:	d873      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f80:	2b40      	cmp	r3, #64	; 0x40
 8009f82:	d058      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0x1be>
 8009f84:	2b40      	cmp	r3, #64	; 0x40
 8009f86:	d86f      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f88:	2b30      	cmp	r3, #48	; 0x30
 8009f8a:	d064      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f8c:	2b30      	cmp	r3, #48	; 0x30
 8009f8e:	d86b      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f90:	2b20      	cmp	r3, #32
 8009f92:	d060      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f94:	2b20      	cmp	r3, #32
 8009f96:	d867      	bhi.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d05c      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009f9c:	2b10      	cmp	r3, #16
 8009f9e:	d05a      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0x1de>
 8009fa0:	e062      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6818      	ldr	r0, [r3, #0]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6899      	ldr	r1, [r3, #8]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f001 f8e5 	bl	800b180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	609a      	str	r2, [r3, #8]
      break;
 8009fce:	e04f      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	6899      	ldr	r1, [r3, #8]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f001 f8ce 	bl	800b180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ff2:	609a      	str	r2, [r3, #8]
      break;
 8009ff4:	e03c      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	6859      	ldr	r1, [r3, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	461a      	mov	r2, r3
 800a004:	f000 ff8a 	bl	800af1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2150      	movs	r1, #80	; 0x50
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 f899 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800a014:	e02c      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6859      	ldr	r1, [r3, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	461a      	mov	r2, r3
 800a024:	f000 ffe6 	bl	800aff4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2160      	movs	r1, #96	; 0x60
 800a02e:	4618      	mov	r0, r3
 800a030:	f001 f889 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800a034:	e01c      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6859      	ldr	r1, [r3, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	461a      	mov	r2, r3
 800a044:	f000 ff6a 	bl	800af1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2140      	movs	r1, #64	; 0x40
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 f879 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800a054:	e00c      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f001 f870 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800a066:	e003      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
      break;
 800a06c:	e000      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a06e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	00100070 	.word	0x00100070
 800a090:	00100060 	.word	0x00100060
 800a094:	00100050 	.word	0x00100050
 800a098:	00100040 	.word	0x00100040
 800a09c:	00100030 	.word	0x00100030
 800a0a0:	00100020 	.word	0x00100020

0800a0a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_TIM_SlaveConfigSynchro+0x18>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e031      	b.n	800a120 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fdd0 	bl	800ac74 <TIM_SlaveTimer_SetConfig>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e018      	b.n	800a120 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a10c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e15a      	b.n	800a4c2 <HAL_TIM_RegisterCallback+0x2d2>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <HAL_TIM_RegisterCallback+0x2a>
 800a216:	2302      	movs	r3, #2
 800a218:	e153      	b.n	800a4c2 <HAL_TIM_RegisterCallback+0x2d2>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	f040 80de 	bne.w	800a3ec <HAL_TIM_RegisterCallback+0x1fc>
  {
    switch (CallbackID)
 800a230:	7afb      	ldrb	r3, [r7, #11]
 800a232:	2b1f      	cmp	r3, #31
 800a234:	f200 80d7 	bhi.w	800a3e6 <HAL_TIM_RegisterCallback+0x1f6>
 800a238:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <HAL_TIM_RegisterCallback+0x50>)
 800a23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23e:	bf00      	nop
 800a240:	0800a2c1 	.word	0x0800a2c1
 800a244:	0800a2c9 	.word	0x0800a2c9
 800a248:	0800a2d1 	.word	0x0800a2d1
 800a24c:	0800a2d9 	.word	0x0800a2d9
 800a250:	0800a2e1 	.word	0x0800a2e1
 800a254:	0800a2e9 	.word	0x0800a2e9
 800a258:	0800a2f1 	.word	0x0800a2f1
 800a25c:	0800a2f9 	.word	0x0800a2f9
 800a260:	0800a301 	.word	0x0800a301
 800a264:	0800a309 	.word	0x0800a309
 800a268:	0800a311 	.word	0x0800a311
 800a26c:	0800a319 	.word	0x0800a319
 800a270:	0800a321 	.word	0x0800a321
 800a274:	0800a329 	.word	0x0800a329
 800a278:	0800a333 	.word	0x0800a333
 800a27c:	0800a33d 	.word	0x0800a33d
 800a280:	0800a347 	.word	0x0800a347
 800a284:	0800a351 	.word	0x0800a351
 800a288:	0800a35b 	.word	0x0800a35b
 800a28c:	0800a365 	.word	0x0800a365
 800a290:	0800a36f 	.word	0x0800a36f
 800a294:	0800a379 	.word	0x0800a379
 800a298:	0800a383 	.word	0x0800a383
 800a29c:	0800a38d 	.word	0x0800a38d
 800a2a0:	0800a397 	.word	0x0800a397
 800a2a4:	0800a3a1 	.word	0x0800a3a1
 800a2a8:	0800a3ab 	.word	0x0800a3ab
 800a2ac:	0800a3b5 	.word	0x0800a3b5
 800a2b0:	0800a3bf 	.word	0x0800a3bf
 800a2b4:	0800a3c9 	.word	0x0800a3c9
 800a2b8:	0800a3d3 	.word	0x0800a3d3
 800a2bc:	0800a3dd 	.word	0x0800a3dd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a2c6:	e0f7      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a2ce:	e0f3      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a2d6:	e0ef      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a2de:	e0eb      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a2e6:	e0e7      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a2ee:	e0e3      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a2f6:	e0df      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a2fe:	e0db      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a306:	e0d7      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a30e:	e0d3      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a316:	e0cf      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a31e:	e0cb      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a326:	e0c7      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a330:	e0c2      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a33a:	e0bd      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a344:	e0b8      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a34e:	e0b3      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a358:	e0ae      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a362:	e0a9      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a36c:	e0a4      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a376:	e09f      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a380:	e09a      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a38a:	e095      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a394:	e090      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a39e:	e08b      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a3a8:	e086      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800a3b2:	e081      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 800a3bc:	e07c      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800a3c6:	e077      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 800a3d0:	e072      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800a3da:	e06d      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800a3e4:	e068      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	75fb      	strb	r3, [r7, #23]
        break;
 800a3ea:	e065      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d15d      	bne.n	800a4b4 <HAL_TIM_RegisterCallback+0x2c4>
  {
    switch (CallbackID)
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	2b0d      	cmp	r3, #13
 800a3fc:	d857      	bhi.n	800a4ae <HAL_TIM_RegisterCallback+0x2be>
 800a3fe:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <HAL_TIM_RegisterCallback+0x214>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a43d 	.word	0x0800a43d
 800a408:	0800a445 	.word	0x0800a445
 800a40c:	0800a44d 	.word	0x0800a44d
 800a410:	0800a455 	.word	0x0800a455
 800a414:	0800a45d 	.word	0x0800a45d
 800a418:	0800a465 	.word	0x0800a465
 800a41c:	0800a46d 	.word	0x0800a46d
 800a420:	0800a475 	.word	0x0800a475
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a485 	.word	0x0800a485
 800a42c:	0800a48d 	.word	0x0800a48d
 800a430:	0800a495 	.word	0x0800a495
 800a434:	0800a49d 	.word	0x0800a49d
 800a438:	0800a4a5 	.word	0x0800a4a5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a442:	e039      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a44a:	e035      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a452:	e031      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a45a:	e02d      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a462:	e029      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a46a:	e025      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a472:	e021      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a47a:	e01d      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a482:	e019      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a48a:	e015      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a492:	e011      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a49a:	e00d      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a4a2:	e009      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a4ac:	e004      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	75fb      	strb	r3, [r7, #23]
        break;
 800a4b2:	e001      	b.n	800a4b8 <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	371c      	adds	r7, #28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop

0800a4d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a46      	ldr	r2, [pc, #280]	; (800a5fc <TIM_Base_SetConfig+0x12c>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d017      	beq.n	800a518 <TIM_Base_SetConfig+0x48>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ee:	d013      	beq.n	800a518 <TIM_Base_SetConfig+0x48>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a43      	ldr	r2, [pc, #268]	; (800a600 <TIM_Base_SetConfig+0x130>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d00f      	beq.n	800a518 <TIM_Base_SetConfig+0x48>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a42      	ldr	r2, [pc, #264]	; (800a604 <TIM_Base_SetConfig+0x134>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00b      	beq.n	800a518 <TIM_Base_SetConfig+0x48>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a41      	ldr	r2, [pc, #260]	; (800a608 <TIM_Base_SetConfig+0x138>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d007      	beq.n	800a518 <TIM_Base_SetConfig+0x48>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a40      	ldr	r2, [pc, #256]	; (800a60c <TIM_Base_SetConfig+0x13c>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d003      	beq.n	800a518 <TIM_Base_SetConfig+0x48>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a3f      	ldr	r2, [pc, #252]	; (800a610 <TIM_Base_SetConfig+0x140>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d108      	bne.n	800a52a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a33      	ldr	r2, [pc, #204]	; (800a5fc <TIM_Base_SetConfig+0x12c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d023      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a538:	d01f      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a30      	ldr	r2, [pc, #192]	; (800a600 <TIM_Base_SetConfig+0x130>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d01b      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a2f      	ldr	r2, [pc, #188]	; (800a604 <TIM_Base_SetConfig+0x134>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d017      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a2e      	ldr	r2, [pc, #184]	; (800a608 <TIM_Base_SetConfig+0x138>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d013      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a2d      	ldr	r2, [pc, #180]	; (800a60c <TIM_Base_SetConfig+0x13c>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d00f      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a2d      	ldr	r2, [pc, #180]	; (800a614 <TIM_Base_SetConfig+0x144>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00b      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a2c      	ldr	r2, [pc, #176]	; (800a618 <TIM_Base_SetConfig+0x148>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d007      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a2b      	ldr	r2, [pc, #172]	; (800a61c <TIM_Base_SetConfig+0x14c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <TIM_Base_SetConfig+0xaa>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a26      	ldr	r2, [pc, #152]	; (800a610 <TIM_Base_SetConfig+0x140>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d108      	bne.n	800a58c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a12      	ldr	r2, [pc, #72]	; (800a5fc <TIM_Base_SetConfig+0x12c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d013      	beq.n	800a5e0 <TIM_Base_SetConfig+0x110>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a14      	ldr	r2, [pc, #80]	; (800a60c <TIM_Base_SetConfig+0x13c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00f      	beq.n	800a5e0 <TIM_Base_SetConfig+0x110>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a14      	ldr	r2, [pc, #80]	; (800a614 <TIM_Base_SetConfig+0x144>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00b      	beq.n	800a5e0 <TIM_Base_SetConfig+0x110>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a13      	ldr	r2, [pc, #76]	; (800a618 <TIM_Base_SetConfig+0x148>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d007      	beq.n	800a5e0 <TIM_Base_SetConfig+0x110>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a12      	ldr	r2, [pc, #72]	; (800a61c <TIM_Base_SetConfig+0x14c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d003      	beq.n	800a5e0 <TIM_Base_SetConfig+0x110>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <TIM_Base_SetConfig+0x140>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d103      	bne.n	800a5e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	691a      	ldr	r2, [r3, #16]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	615a      	str	r2, [r3, #20]
}
 800a5ee:	bf00      	nop
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	40012c00 	.word	0x40012c00
 800a600:	40000400 	.word	0x40000400
 800a604:	40000800 	.word	0x40000800
 800a608:	40000c00 	.word	0x40000c00
 800a60c:	40013400 	.word	0x40013400
 800a610:	40015000 	.word	0x40015000
 800a614:	40014000 	.word	0x40014000
 800a618:	40014400 	.word	0x40014400
 800a61c:	40014800 	.word	0x40014800

0800a620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	f023 0201 	bic.w	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4313      	orrs	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f023 0302 	bic.w	r3, r3, #2
 800a66c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	4313      	orrs	r3, r2
 800a676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a30      	ldr	r2, [pc, #192]	; (800a73c <TIM_OC1_SetConfig+0x11c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d013      	beq.n	800a6a8 <TIM_OC1_SetConfig+0x88>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a2f      	ldr	r2, [pc, #188]	; (800a740 <TIM_OC1_SetConfig+0x120>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d00f      	beq.n	800a6a8 <TIM_OC1_SetConfig+0x88>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a2e      	ldr	r2, [pc, #184]	; (800a744 <TIM_OC1_SetConfig+0x124>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d00b      	beq.n	800a6a8 <TIM_OC1_SetConfig+0x88>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a2d      	ldr	r2, [pc, #180]	; (800a748 <TIM_OC1_SetConfig+0x128>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d007      	beq.n	800a6a8 <TIM_OC1_SetConfig+0x88>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a2c      	ldr	r2, [pc, #176]	; (800a74c <TIM_OC1_SetConfig+0x12c>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d003      	beq.n	800a6a8 <TIM_OC1_SetConfig+0x88>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a2b      	ldr	r2, [pc, #172]	; (800a750 <TIM_OC1_SetConfig+0x130>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d10c      	bne.n	800a6c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f023 0308 	bic.w	r3, r3, #8
 800a6ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f023 0304 	bic.w	r3, r3, #4
 800a6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a1d      	ldr	r2, [pc, #116]	; (800a73c <TIM_OC1_SetConfig+0x11c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d013      	beq.n	800a6f2 <TIM_OC1_SetConfig+0xd2>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a1c      	ldr	r2, [pc, #112]	; (800a740 <TIM_OC1_SetConfig+0x120>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00f      	beq.n	800a6f2 <TIM_OC1_SetConfig+0xd2>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a1b      	ldr	r2, [pc, #108]	; (800a744 <TIM_OC1_SetConfig+0x124>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d00b      	beq.n	800a6f2 <TIM_OC1_SetConfig+0xd2>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a1a      	ldr	r2, [pc, #104]	; (800a748 <TIM_OC1_SetConfig+0x128>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d007      	beq.n	800a6f2 <TIM_OC1_SetConfig+0xd2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a19      	ldr	r2, [pc, #100]	; (800a74c <TIM_OC1_SetConfig+0x12c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d003      	beq.n	800a6f2 <TIM_OC1_SetConfig+0xd2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a18      	ldr	r2, [pc, #96]	; (800a750 <TIM_OC1_SetConfig+0x130>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d111      	bne.n	800a716 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4313      	orrs	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	4313      	orrs	r3, r2
 800a714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	621a      	str	r2, [r3, #32]
}
 800a730:	bf00      	nop
 800a732:	371c      	adds	r7, #28
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	40012c00 	.word	0x40012c00
 800a740:	40013400 	.word	0x40013400
 800a744:	40014000 	.word	0x40014000
 800a748:	40014400 	.word	0x40014400
 800a74c:	40014800 	.word	0x40014800
 800a750:	40015000 	.word	0x40015000

0800a754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	f023 0210 	bic.w	r2, r3, #16
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f023 0320 	bic.w	r3, r3, #32
 800a7a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a2c      	ldr	r2, [pc, #176]	; (800a864 <TIM_OC2_SetConfig+0x110>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_OC2_SetConfig+0x74>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a2b      	ldr	r2, [pc, #172]	; (800a868 <TIM_OC2_SetConfig+0x114>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_OC2_SetConfig+0x74>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a2a      	ldr	r2, [pc, #168]	; (800a86c <TIM_OC2_SetConfig+0x118>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d10d      	bne.n	800a7e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a1f      	ldr	r2, [pc, #124]	; (800a864 <TIM_OC2_SetConfig+0x110>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d013      	beq.n	800a814 <TIM_OC2_SetConfig+0xc0>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a1e      	ldr	r2, [pc, #120]	; (800a868 <TIM_OC2_SetConfig+0x114>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00f      	beq.n	800a814 <TIM_OC2_SetConfig+0xc0>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a1e      	ldr	r2, [pc, #120]	; (800a870 <TIM_OC2_SetConfig+0x11c>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d00b      	beq.n	800a814 <TIM_OC2_SetConfig+0xc0>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a1d      	ldr	r2, [pc, #116]	; (800a874 <TIM_OC2_SetConfig+0x120>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d007      	beq.n	800a814 <TIM_OC2_SetConfig+0xc0>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a1c      	ldr	r2, [pc, #112]	; (800a878 <TIM_OC2_SetConfig+0x124>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d003      	beq.n	800a814 <TIM_OC2_SetConfig+0xc0>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a17      	ldr	r2, [pc, #92]	; (800a86c <TIM_OC2_SetConfig+0x118>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d113      	bne.n	800a83c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a81a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	4313      	orrs	r3, r2
 800a83a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	621a      	str	r2, [r3, #32]
}
 800a856:	bf00      	nop
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	40012c00 	.word	0x40012c00
 800a868:	40013400 	.word	0x40013400
 800a86c:	40015000 	.word	0x40015000
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800

0800a87c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a2b      	ldr	r2, [pc, #172]	; (800a988 <TIM_OC3_SetConfig+0x10c>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d007      	beq.n	800a8ee <TIM_OC3_SetConfig+0x72>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a2a      	ldr	r2, [pc, #168]	; (800a98c <TIM_OC3_SetConfig+0x110>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d003      	beq.n	800a8ee <TIM_OC3_SetConfig+0x72>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a29      	ldr	r2, [pc, #164]	; (800a990 <TIM_OC3_SetConfig+0x114>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d10d      	bne.n	800a90a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	021b      	lsls	r3, r3, #8
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a1e      	ldr	r2, [pc, #120]	; (800a988 <TIM_OC3_SetConfig+0x10c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d013      	beq.n	800a93a <TIM_OC3_SetConfig+0xbe>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a1d      	ldr	r2, [pc, #116]	; (800a98c <TIM_OC3_SetConfig+0x110>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00f      	beq.n	800a93a <TIM_OC3_SetConfig+0xbe>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a1d      	ldr	r2, [pc, #116]	; (800a994 <TIM_OC3_SetConfig+0x118>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d00b      	beq.n	800a93a <TIM_OC3_SetConfig+0xbe>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a1c      	ldr	r2, [pc, #112]	; (800a998 <TIM_OC3_SetConfig+0x11c>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d007      	beq.n	800a93a <TIM_OC3_SetConfig+0xbe>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a1b      	ldr	r2, [pc, #108]	; (800a99c <TIM_OC3_SetConfig+0x120>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d003      	beq.n	800a93a <TIM_OC3_SetConfig+0xbe>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a16      	ldr	r2, [pc, #88]	; (800a990 <TIM_OC3_SetConfig+0x114>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d113      	bne.n	800a962 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4313      	orrs	r3, r2
 800a954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	621a      	str	r2, [r3, #32]
}
 800a97c:	bf00      	nop
 800a97e:	371c      	adds	r7, #28
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	40012c00 	.word	0x40012c00
 800a98c:	40013400 	.word	0x40013400
 800a990:	40015000 	.word	0x40015000
 800a994:	40014000 	.word	0x40014000
 800a998:	40014400 	.word	0x40014400
 800a99c:	40014800 	.word	0x40014800

0800a9a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	021b      	lsls	r3, r3, #8
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	031b      	lsls	r3, r3, #12
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a2c      	ldr	r2, [pc, #176]	; (800aab0 <TIM_OC4_SetConfig+0x110>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d007      	beq.n	800aa14 <TIM_OC4_SetConfig+0x74>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a2b      	ldr	r2, [pc, #172]	; (800aab4 <TIM_OC4_SetConfig+0x114>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_OC4_SetConfig+0x74>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a2a      	ldr	r2, [pc, #168]	; (800aab8 <TIM_OC4_SetConfig+0x118>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d10d      	bne.n	800aa30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	031b      	lsls	r3, r3, #12
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a1f      	ldr	r2, [pc, #124]	; (800aab0 <TIM_OC4_SetConfig+0x110>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d013      	beq.n	800aa60 <TIM_OC4_SetConfig+0xc0>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a1e      	ldr	r2, [pc, #120]	; (800aab4 <TIM_OC4_SetConfig+0x114>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00f      	beq.n	800aa60 <TIM_OC4_SetConfig+0xc0>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a1e      	ldr	r2, [pc, #120]	; (800aabc <TIM_OC4_SetConfig+0x11c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d00b      	beq.n	800aa60 <TIM_OC4_SetConfig+0xc0>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a1d      	ldr	r2, [pc, #116]	; (800aac0 <TIM_OC4_SetConfig+0x120>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d007      	beq.n	800aa60 <TIM_OC4_SetConfig+0xc0>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a1c      	ldr	r2, [pc, #112]	; (800aac4 <TIM_OC4_SetConfig+0x124>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_OC4_SetConfig+0xc0>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a17      	ldr	r2, [pc, #92]	; (800aab8 <TIM_OC4_SetConfig+0x118>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d113      	bne.n	800aa88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	019b      	lsls	r3, r3, #6
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	019b      	lsls	r3, r3, #6
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	621a      	str	r2, [r3, #32]
}
 800aaa2:	bf00      	nop
 800aaa4:	371c      	adds	r7, #28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	40012c00 	.word	0x40012c00
 800aab4:	40013400 	.word	0x40013400
 800aab8:	40015000 	.word	0x40015000
 800aabc:	40014000 	.word	0x40014000
 800aac0:	40014400 	.word	0x40014400
 800aac4:	40014800 	.word	0x40014800

0800aac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ab0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	041b      	lsls	r3, r3, #16
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a19      	ldr	r2, [pc, #100]	; (800ab84 <TIM_OC5_SetConfig+0xbc>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d013      	beq.n	800ab4a <TIM_OC5_SetConfig+0x82>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a18      	ldr	r2, [pc, #96]	; (800ab88 <TIM_OC5_SetConfig+0xc0>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d00f      	beq.n	800ab4a <TIM_OC5_SetConfig+0x82>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a17      	ldr	r2, [pc, #92]	; (800ab8c <TIM_OC5_SetConfig+0xc4>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d00b      	beq.n	800ab4a <TIM_OC5_SetConfig+0x82>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a16      	ldr	r2, [pc, #88]	; (800ab90 <TIM_OC5_SetConfig+0xc8>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d007      	beq.n	800ab4a <TIM_OC5_SetConfig+0x82>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a15      	ldr	r2, [pc, #84]	; (800ab94 <TIM_OC5_SetConfig+0xcc>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d003      	beq.n	800ab4a <TIM_OC5_SetConfig+0x82>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a14      	ldr	r2, [pc, #80]	; (800ab98 <TIM_OC5_SetConfig+0xd0>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d109      	bne.n	800ab5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	621a      	str	r2, [r3, #32]
}
 800ab78:	bf00      	nop
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	40012c00 	.word	0x40012c00
 800ab88:	40013400 	.word	0x40013400
 800ab8c:	40014000 	.word	0x40014000
 800ab90:	40014400 	.word	0x40014400
 800ab94:	40014800 	.word	0x40014800
 800ab98:	40015000 	.word	0x40015000

0800ab9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	021b      	lsls	r3, r3, #8
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	051b      	lsls	r3, r3, #20
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	4313      	orrs	r3, r2
 800abee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a1a      	ldr	r2, [pc, #104]	; (800ac5c <TIM_OC6_SetConfig+0xc0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d013      	beq.n	800ac20 <TIM_OC6_SetConfig+0x84>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a19      	ldr	r2, [pc, #100]	; (800ac60 <TIM_OC6_SetConfig+0xc4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d00f      	beq.n	800ac20 <TIM_OC6_SetConfig+0x84>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a18      	ldr	r2, [pc, #96]	; (800ac64 <TIM_OC6_SetConfig+0xc8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d00b      	beq.n	800ac20 <TIM_OC6_SetConfig+0x84>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a17      	ldr	r2, [pc, #92]	; (800ac68 <TIM_OC6_SetConfig+0xcc>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d007      	beq.n	800ac20 <TIM_OC6_SetConfig+0x84>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a16      	ldr	r2, [pc, #88]	; (800ac6c <TIM_OC6_SetConfig+0xd0>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d003      	beq.n	800ac20 <TIM_OC6_SetConfig+0x84>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a15      	ldr	r2, [pc, #84]	; (800ac70 <TIM_OC6_SetConfig+0xd4>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d109      	bne.n	800ac34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	029b      	lsls	r3, r3, #10
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	621a      	str	r2, [r3, #32]
}
 800ac4e:	bf00      	nop
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40012c00 	.word	0x40012c00
 800ac60:	40013400 	.word	0x40013400
 800ac64:	40014000 	.word	0x40014000
 800ac68:	40014400 	.word	0x40014400
 800ac6c:	40014800 	.word	0x40014800
 800ac70:	40015000 	.word	0x40015000

0800ac74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ac90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac94:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4a56      	ldr	r2, [pc, #344]	; (800ae1c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	f000 80a2 	beq.w	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800acca:	4a54      	ldr	r2, [pc, #336]	; (800ae1c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	f200 809b 	bhi.w	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800acd2:	4a53      	ldr	r2, [pc, #332]	; (800ae20 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	f000 809a 	beq.w	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800acda:	4a51      	ldr	r2, [pc, #324]	; (800ae20 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	f200 8093 	bhi.w	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ace2:	4a50      	ldr	r2, [pc, #320]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	f000 8092 	beq.w	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800acea:	4a4e      	ldr	r2, [pc, #312]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800acec:	4293      	cmp	r3, r2
 800acee:	f200 808b 	bhi.w	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800acf2:	4a4d      	ldr	r2, [pc, #308]	; (800ae28 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	f000 808a 	beq.w	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800acfa:	4a4b      	ldr	r2, [pc, #300]	; (800ae28 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	f200 8083 	bhi.w	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad02:	4a4a      	ldr	r2, [pc, #296]	; (800ae2c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	f000 8082 	beq.w	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad0a:	4a48      	ldr	r2, [pc, #288]	; (800ae2c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d87b      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad10:	4a47      	ldr	r2, [pc, #284]	; (800ae30 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d07b      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad16:	4a46      	ldr	r2, [pc, #280]	; (800ae30 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d875      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad20:	d075      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad22:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad26:	d86f      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad2c:	d06f      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad32:	d869      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad34:	2b70      	cmp	r3, #112	; 0x70
 800ad36:	d01a      	beq.n	800ad6e <TIM_SlaveTimer_SetConfig+0xfa>
 800ad38:	2b70      	cmp	r3, #112	; 0x70
 800ad3a:	d865      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad3c:	2b60      	cmp	r3, #96	; 0x60
 800ad3e:	d059      	beq.n	800adf4 <TIM_SlaveTimer_SetConfig+0x180>
 800ad40:	2b60      	cmp	r3, #96	; 0x60
 800ad42:	d861      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad44:	2b50      	cmp	r3, #80	; 0x50
 800ad46:	d04b      	beq.n	800ade0 <TIM_SlaveTimer_SetConfig+0x16c>
 800ad48:	2b50      	cmp	r3, #80	; 0x50
 800ad4a:	d85d      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad4c:	2b40      	cmp	r3, #64	; 0x40
 800ad4e:	d019      	beq.n	800ad84 <TIM_SlaveTimer_SetConfig+0x110>
 800ad50:	2b40      	cmp	r3, #64	; 0x40
 800ad52:	d859      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad54:	2b30      	cmp	r3, #48	; 0x30
 800ad56:	d05a      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad58:	2b30      	cmp	r3, #48	; 0x30
 800ad5a:	d855      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d056      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d851      	bhi.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d052      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad68:	2b10      	cmp	r3, #16
 800ad6a:	d050      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x19a>
 800ad6c:	e04c      	b.n	800ae08 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68d9      	ldr	r1, [r3, #12]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	689a      	ldr	r2, [r3, #8]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	f000 f9ff 	bl	800b180 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800ad82:	e045      	b.n	800ae10 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b05      	cmp	r3, #5
 800ad8a:	d004      	beq.n	800ad96 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800ad90:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800ad94:	d101      	bne.n	800ad9a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e03b      	b.n	800ae12 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6a1a      	ldr	r2, [r3, #32]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0201 	bic.w	r2, r2, #1
 800adb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	621a      	str	r2, [r3, #32]
      break;
 800adde:	e017      	b.n	800ae10 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6818      	ldr	r0, [r3, #0]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	6899      	ldr	r1, [r3, #8]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	461a      	mov	r2, r3
 800adee:	f000 f895 	bl	800af1c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800adf2:	e00d      	b.n	800ae10 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6818      	ldr	r0, [r3, #0]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	6899      	ldr	r1, [r3, #8]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	461a      	mov	r2, r3
 800ae02:	f000 f8f7 	bl	800aff4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800ae06:	e003      	b.n	800ae10 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae0c:	e000      	b.n	800ae10 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800ae0e:	bf00      	nop
  }

  return status;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	00100070 	.word	0x00100070
 800ae20:	00100060 	.word	0x00100060
 800ae24:	00100050 	.word	0x00100050
 800ae28:	00100040 	.word	0x00100040
 800ae2c:	00100030 	.word	0x00100030
 800ae30:	00100020 	.word	0x00100020

0800ae34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	f023 0201 	bic.w	r2, r3, #1
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4a28      	ldr	r2, [pc, #160]	; (800af00 <TIM_TI1_SetConfig+0xcc>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d01b      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae68:	d017      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4a25      	ldr	r2, [pc, #148]	; (800af04 <TIM_TI1_SetConfig+0xd0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d013      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4a24      	ldr	r2, [pc, #144]	; (800af08 <TIM_TI1_SetConfig+0xd4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00f      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4a23      	ldr	r2, [pc, #140]	; (800af0c <TIM_TI1_SetConfig+0xd8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00b      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4a22      	ldr	r2, [pc, #136]	; (800af10 <TIM_TI1_SetConfig+0xdc>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d007      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4a21      	ldr	r2, [pc, #132]	; (800af14 <TIM_TI1_SetConfig+0xe0>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d003      	beq.n	800ae9a <TIM_TI1_SetConfig+0x66>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4a20      	ldr	r2, [pc, #128]	; (800af18 <TIM_TI1_SetConfig+0xe4>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d101      	bne.n	800ae9e <TIM_TI1_SetConfig+0x6a>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <TIM_TI1_SetConfig+0x6c>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d008      	beq.n	800aeb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aeac:	697a      	ldr	r2, [r7, #20]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e003      	b.n	800aebe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f043 0301 	orr.w	r3, r3, #1
 800aebc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	011b      	lsls	r3, r3, #4
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	4313      	orrs	r3, r2
 800aed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	f023 030a 	bic.w	r3, r3, #10
 800aed8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f003 030a 	and.w	r3, r3, #10
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	621a      	str	r2, [r3, #32]
}
 800aef2:	bf00      	nop
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	40012c00 	.word	0x40012c00
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	40000c00 	.word	0x40000c00
 800af10:	40013400 	.word	0x40013400
 800af14:	40014000 	.word	0x40014000
 800af18:	40015000 	.word	0x40015000

0800af1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	f023 0201 	bic.w	r2, r3, #1
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f023 030a 	bic.w	r3, r3, #10
 800af58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	4313      	orrs	r3, r2
 800af60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	621a      	str	r2, [r3, #32]
}
 800af6e:	bf00      	nop
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
 800af86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	f023 0210 	bic.w	r2, r3, #16
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	031b      	lsls	r3, r3, #12
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	4313      	orrs	r3, r2
 800afda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	621a      	str	r2, [r3, #32]
}
 800afe8:	bf00      	nop
 800afea:	371c      	adds	r7, #28
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	f023 0210 	bic.w	r2, r3, #16
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b01e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	031b      	lsls	r3, r3, #12
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	4313      	orrs	r3, r2
 800b03a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	621a      	str	r2, [r3, #32]
}
 800b048:	bf00      	nop
 800b04a:	371c      	adds	r7, #28
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f023 0303 	bic.w	r3, r3, #3
 800b080:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b090:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	011b      	lsls	r3, r3, #4
 800b096:	b2db      	uxtb	r3, r3
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b0a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	021b      	lsls	r3, r3, #8
 800b0aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	621a      	str	r2, [r3, #32]
}
 800b0c0:	bf00      	nop
 800b0c2:	371c      	adds	r7, #28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b10a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	031b      	lsls	r3, r3, #12
 800b110:	b29b      	uxth	r3, r3
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	4313      	orrs	r3, r2
 800b116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b11e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	031b      	lsls	r3, r3, #12
 800b124:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	621a      	str	r2, [r3, #32]
}
 800b13a:	bf00      	nop
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b146:	b480      	push	{r7}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b15c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4313      	orrs	r3, r2
 800b168:	f043 0307 	orr.w	r3, r3, #7
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	609a      	str	r2, [r3, #8]
}
 800b174:	bf00      	nop
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b19a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	021a      	lsls	r2, r3, #8
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	609a      	str	r2, [r3, #8]
}
 800b1b4:	bf00      	nop
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f003 031f 	and.w	r3, r3, #31
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a1a      	ldr	r2, [r3, #32]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	43db      	mvns	r3, r3
 800b1e2:	401a      	ands	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6a1a      	ldr	r2, [r3, #32]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f003 031f 	and.w	r3, r3, #31
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	621a      	str	r2, [r3, #32]
}
 800b1fe:	bf00      	nop
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
	...

0800b20c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a26      	ldr	r2, [pc, #152]	; (800b2b0 <TIM_ResetCallback+0xa4>)
 800b218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a25      	ldr	r2, [pc, #148]	; (800b2b4 <TIM_ResetCallback+0xa8>)
 800b220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a24      	ldr	r2, [pc, #144]	; (800b2b8 <TIM_ResetCallback+0xac>)
 800b228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a23      	ldr	r2, [pc, #140]	; (800b2bc <TIM_ResetCallback+0xb0>)
 800b230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a22      	ldr	r2, [pc, #136]	; (800b2c0 <TIM_ResetCallback+0xb4>)
 800b238:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a21      	ldr	r2, [pc, #132]	; (800b2c4 <TIM_ResetCallback+0xb8>)
 800b240:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a20      	ldr	r2, [pc, #128]	; (800b2c8 <TIM_ResetCallback+0xbc>)
 800b248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a1f      	ldr	r2, [pc, #124]	; (800b2cc <TIM_ResetCallback+0xc0>)
 800b250:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a1e      	ldr	r2, [pc, #120]	; (800b2d0 <TIM_ResetCallback+0xc4>)
 800b258:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <TIM_ResetCallback+0xc8>)
 800b260:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a1c      	ldr	r2, [pc, #112]	; (800b2d8 <TIM_ResetCallback+0xcc>)
 800b268:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a1b      	ldr	r2, [pc, #108]	; (800b2dc <TIM_ResetCallback+0xd0>)
 800b270:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a1a      	ldr	r2, [pc, #104]	; (800b2e0 <TIM_ResetCallback+0xd4>)
 800b278:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a19      	ldr	r2, [pc, #100]	; (800b2e4 <TIM_ResetCallback+0xd8>)
 800b280:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a18      	ldr	r2, [pc, #96]	; (800b2e8 <TIM_ResetCallback+0xdc>)
 800b288:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a17      	ldr	r2, [pc, #92]	; (800b2ec <TIM_ResetCallback+0xe0>)
 800b290:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a16      	ldr	r2, [pc, #88]	; (800b2f0 <TIM_ResetCallback+0xe4>)
 800b298:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a15      	ldr	r2, [pc, #84]	; (800b2f4 <TIM_ResetCallback+0xe8>)
 800b2a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	0800a129 	.word	0x0800a129
 800b2b4:	0800a13d 	.word	0x0800a13d
 800b2b8:	0800a1b5 	.word	0x0800a1b5
 800b2bc:	0800a1c9 	.word	0x0800a1c9
 800b2c0:	0800a165 	.word	0x0800a165
 800b2c4:	0800a179 	.word	0x0800a179
 800b2c8:	0800a151 	.word	0x0800a151
 800b2cc:	0800a18d 	.word	0x0800a18d
 800b2d0:	0800a1a1 	.word	0x0800a1a1
 800b2d4:	0800a1dd 	.word	0x0800a1dd
 800b2d8:	0800b6a5 	.word	0x0800b6a5
 800b2dc:	0800b6b9 	.word	0x0800b6b9
 800b2e0:	0800b6cd 	.word	0x0800b6cd
 800b2e4:	0800b6e1 	.word	0x0800b6e1
 800b2e8:	0800b6f5 	.word	0x0800b6f5
 800b2ec:	0800b709 	.word	0x0800b709
 800b2f0:	0800b71d 	.word	0x0800b71d
 800b2f4:	0800b731 	.word	0x0800b731

0800b2f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e074      	b.n	800b3fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a34      	ldr	r2, [pc, #208]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d009      	beq.n	800b34e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a33      	ldr	r2, [pc, #204]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d004      	beq.n	800b34e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a31      	ldr	r2, [pc, #196]	; (800b410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d108      	bne.n	800b360 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a21      	ldr	r2, [pc, #132]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d022      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b390:	d01d      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a1f      	ldr	r2, [pc, #124]	; (800b414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d018      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a1d      	ldr	r2, [pc, #116]	; (800b418 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d013      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a1c      	ldr	r2, [pc, #112]	; (800b41c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d00e      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a15      	ldr	r2, [pc, #84]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d009      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a18      	ldr	r2, [pc, #96]	; (800b420 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d004      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a11      	ldr	r2, [pc, #68]	; (800b410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d10c      	bne.n	800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40012c00 	.word	0x40012c00
 800b40c:	40013400 	.word	0x40013400
 800b410:	40015000 	.word	0x40015000
 800b414:	40000400 	.word	0x40000400
 800b418:	40000800 	.word	0x40000800
 800b41c:	40000c00 	.word	0x40000c00
 800b420:	40014000 	.word	0x40014000

0800b424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e096      	b.n	800b56e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	4313      	orrs	r3, r2
 800b454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	4313      	orrs	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	041b      	lsls	r3, r3, #16
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a2f      	ldr	r2, [pc, #188]	; (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d009      	beq.n	800b4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a2d      	ldr	r2, [pc, #180]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d004      	beq.n	800b4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a2c      	ldr	r2, [pc, #176]	; (800b584 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d106      	bne.n	800b4e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a24      	ldr	r2, [pc, #144]	; (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d009      	beq.n	800b504 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a22      	ldr	r2, [pc, #136]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d004      	beq.n	800b504 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a21      	ldr	r2, [pc, #132]	; (800b584 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d12b      	bne.n	800b55c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50e:	051b      	lsls	r3, r3, #20
 800b510:	4313      	orrs	r3, r2
 800b512:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	4313      	orrs	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a11      	ldr	r2, [pc, #68]	; (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d009      	beq.n	800b54e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a10      	ldr	r2, [pc, #64]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d004      	beq.n	800b54e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a0e      	ldr	r2, [pc, #56]	; (800b584 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d106      	bne.n	800b55c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	4313      	orrs	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40012c00 	.word	0x40012c00
 800b580:	40013400 	.word	0x40013400
 800b584:	40015000 	.word	0x40015000

0800b588 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d101      	bne.n	800b5a6 <HAL_TIMEx_TISelection+0x1e>
 800b5a2:	2302      	movs	r3, #2
 800b5a4:	e073      	b.n	800b68e <HAL_TIMEx_TISelection+0x106>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b0c      	cmp	r3, #12
 800b5b2:	d864      	bhi.n	800b67e <HAL_TIMEx_TISelection+0xf6>
 800b5b4:	a201      	add	r2, pc, #4	; (adr r2, 800b5bc <HAL_TIMEx_TISelection+0x34>)
 800b5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ba:	bf00      	nop
 800b5bc:	0800b5f1 	.word	0x0800b5f1
 800b5c0:	0800b67f 	.word	0x0800b67f
 800b5c4:	0800b67f 	.word	0x0800b67f
 800b5c8:	0800b67f 	.word	0x0800b67f
 800b5cc:	0800b63d 	.word	0x0800b63d
 800b5d0:	0800b67f 	.word	0x0800b67f
 800b5d4:	0800b67f 	.word	0x0800b67f
 800b5d8:	0800b67f 	.word	0x0800b67f
 800b5dc:	0800b653 	.word	0x0800b653
 800b5e0:	0800b67f 	.word	0x0800b67f
 800b5e4:	0800b67f 	.word	0x0800b67f
 800b5e8:	0800b67f 	.word	0x0800b67f
 800b5ec:	0800b669 	.word	0x0800b669
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5f6:	f023 010f 	bic.w	r1, r3, #15
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	430a      	orrs	r2, r1
 800b602:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a24      	ldr	r2, [pc, #144]	; (800b69c <HAL_TIMEx_TISelection+0x114>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d004      	beq.n	800b618 <HAL_TIMEx_TISelection+0x90>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a23      	ldr	r2, [pc, #140]	; (800b6a0 <HAL_TIMEx_TISelection+0x118>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d108      	bne.n	800b62a <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f042 0201 	orr.w	r2, r2, #1
 800b626:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 800b628:	e02c      	b.n	800b684 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b63a:	e023      	b.n	800b684 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b642:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800b650:	e018      	b.n	800b684 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b658:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	430a      	orrs	r2, r1
 800b664:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800b666:	e00d      	b.n	800b684 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b66e:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	430a      	orrs	r2, r1
 800b67a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800b67c:	e002      	b.n	800b684 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	75fb      	strb	r3, [r7, #23]
      break;
 800b682:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	40014400 	.word	0x40014400
 800b6a0:	40014800 	.word	0x40014800

0800b6a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <__cxa_pure_virtual>:
 800b744:	b508      	push	{r3, lr}
 800b746:	f000 f80d 	bl	800b764 <_ZSt9terminatev>

0800b74a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b74a:	b508      	push	{r3, lr}
 800b74c:	4780      	blx	r0
 800b74e:	f000 f80e 	bl	800b76e <abort>
	...

0800b754 <_ZSt13get_terminatev>:
 800b754:	4b02      	ldr	r3, [pc, #8]	; (800b760 <_ZSt13get_terminatev+0xc>)
 800b756:	6818      	ldr	r0, [r3, #0]
 800b758:	f3bf 8f5b 	dmb	ish
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	20000130 	.word	0x20000130

0800b764 <_ZSt9terminatev>:
 800b764:	b508      	push	{r3, lr}
 800b766:	f7ff fff5 	bl	800b754 <_ZSt13get_terminatev>
 800b76a:	f7ff ffee 	bl	800b74a <_ZN10__cxxabiv111__terminateEPFvvE>

0800b76e <abort>:
 800b76e:	b508      	push	{r3, lr}
 800b770:	2006      	movs	r0, #6
 800b772:	f000 f85d 	bl	800b830 <raise>
 800b776:	2001      	movs	r0, #1
 800b778:	f7f7 fea6 	bl	80034c8 <_exit>

0800b77c <__errno>:
 800b77c:	4b01      	ldr	r3, [pc, #4]	; (800b784 <__errno+0x8>)
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	20000134 	.word	0x20000134

0800b788 <__libc_init_array>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	4d0d      	ldr	r5, [pc, #52]	; (800b7c0 <__libc_init_array+0x38>)
 800b78c:	4c0d      	ldr	r4, [pc, #52]	; (800b7c4 <__libc_init_array+0x3c>)
 800b78e:	1b64      	subs	r4, r4, r5
 800b790:	10a4      	asrs	r4, r4, #2
 800b792:	2600      	movs	r6, #0
 800b794:	42a6      	cmp	r6, r4
 800b796:	d109      	bne.n	800b7ac <__libc_init_array+0x24>
 800b798:	4d0b      	ldr	r5, [pc, #44]	; (800b7c8 <__libc_init_array+0x40>)
 800b79a:	4c0c      	ldr	r4, [pc, #48]	; (800b7cc <__libc_init_array+0x44>)
 800b79c:	f000 f864 	bl	800b868 <_init>
 800b7a0:	1b64      	subs	r4, r4, r5
 800b7a2:	10a4      	asrs	r4, r4, #2
 800b7a4:	2600      	movs	r6, #0
 800b7a6:	42a6      	cmp	r6, r4
 800b7a8:	d105      	bne.n	800b7b6 <__libc_init_array+0x2e>
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b0:	4798      	blx	r3
 800b7b2:	3601      	adds	r6, #1
 800b7b4:	e7ee      	b.n	800b794 <__libc_init_array+0xc>
 800b7b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ba:	4798      	blx	r3
 800b7bc:	3601      	adds	r6, #1
 800b7be:	e7f2      	b.n	800b7a6 <__libc_init_array+0x1e>
 800b7c0:	0800ba2c 	.word	0x0800ba2c
 800b7c4:	0800ba2c 	.word	0x0800ba2c
 800b7c8:	0800ba2c 	.word	0x0800ba2c
 800b7cc:	0800ba34 	.word	0x0800ba34

0800b7d0 <memset>:
 800b7d0:	4402      	add	r2, r0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d100      	bne.n	800b7da <memset+0xa>
 800b7d8:	4770      	bx	lr
 800b7da:	f803 1b01 	strb.w	r1, [r3], #1
 800b7de:	e7f9      	b.n	800b7d4 <memset+0x4>

0800b7e0 <_raise_r>:
 800b7e0:	291f      	cmp	r1, #31
 800b7e2:	b538      	push	{r3, r4, r5, lr}
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	d904      	bls.n	800b7f4 <_raise_r+0x14>
 800b7ea:	2316      	movs	r3, #22
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7f6:	b112      	cbz	r2, 800b7fe <_raise_r+0x1e>
 800b7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7fc:	b94b      	cbnz	r3, 800b812 <_raise_r+0x32>
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 f830 	bl	800b864 <_getpid_r>
 800b804:	462a      	mov	r2, r5
 800b806:	4601      	mov	r1, r0
 800b808:	4620      	mov	r0, r4
 800b80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b80e:	f000 b817 	b.w	800b840 <_kill_r>
 800b812:	2b01      	cmp	r3, #1
 800b814:	d00a      	beq.n	800b82c <_raise_r+0x4c>
 800b816:	1c59      	adds	r1, r3, #1
 800b818:	d103      	bne.n	800b822 <_raise_r+0x42>
 800b81a:	2316      	movs	r3, #22
 800b81c:	6003      	str	r3, [r0, #0]
 800b81e:	2001      	movs	r0, #1
 800b820:	e7e7      	b.n	800b7f2 <_raise_r+0x12>
 800b822:	2400      	movs	r4, #0
 800b824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b828:	4628      	mov	r0, r5
 800b82a:	4798      	blx	r3
 800b82c:	2000      	movs	r0, #0
 800b82e:	e7e0      	b.n	800b7f2 <_raise_r+0x12>

0800b830 <raise>:
 800b830:	4b02      	ldr	r3, [pc, #8]	; (800b83c <raise+0xc>)
 800b832:	4601      	mov	r1, r0
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	f7ff bfd3 	b.w	800b7e0 <_raise_r>
 800b83a:	bf00      	nop
 800b83c:	20000134 	.word	0x20000134

0800b840 <_kill_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d07      	ldr	r5, [pc, #28]	; (800b860 <_kill_r+0x20>)
 800b844:	2300      	movs	r3, #0
 800b846:	4604      	mov	r4, r0
 800b848:	4608      	mov	r0, r1
 800b84a:	4611      	mov	r1, r2
 800b84c:	602b      	str	r3, [r5, #0]
 800b84e:	f7f7 fe2b 	bl	80034a8 <_kill>
 800b852:	1c43      	adds	r3, r0, #1
 800b854:	d102      	bne.n	800b85c <_kill_r+0x1c>
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	b103      	cbz	r3, 800b85c <_kill_r+0x1c>
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	bd38      	pop	{r3, r4, r5, pc}
 800b85e:	bf00      	nop
 800b860:	20019580 	.word	0x20019580

0800b864 <_getpid_r>:
 800b864:	f7f7 be18 	b.w	8003498 <_getpid>

0800b868 <_init>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	bf00      	nop
 800b86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86e:	bc08      	pop	{r3}
 800b870:	469e      	mov	lr, r3
 800b872:	4770      	bx	lr

0800b874 <_fini>:
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b876:	bf00      	nop
 800b878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b87a:	bc08      	pop	{r3}
 800b87c:	469e      	mov	lr, r3
 800b87e:	4770      	bx	lr
