
VDPDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a378  0800a378  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800a378  0800a378  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a378  0800a378  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a380  0800a380  0001a380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193d0  20000098  0800a41c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019468  0800a41c  00029468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6e2  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b06  00000000  00000000  0003c7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00041aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8df  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5f3  00000000  00000000  000709d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bc2c  00000000  00000000  0008bfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7bf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  001a7c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000098 	.word	0x20000098
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a110 	.word	0x0800a110

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000009c 	.word	0x2000009c
 8000214:	0800a110 	.word	0x0800a110

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f009 ff21 	bl	800a078 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b36      	ldr	r3, [pc, #216]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800023e:	4b34      	ldr	r3, [pc, #208]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000246:	4b32      	ldr	r3, [pc, #200]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000248:	2210      	movs	r2, #16
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b30      	ldr	r3, [pc, #192]	; (8000310 <MX_ADC1_Init+0xf8>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <MX_ADC1_Init+0xf8>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <MX_ADC1_Init+0xf8>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000272:	2201      	movs	r2, #1
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b26      	ldr	r3, [pc, #152]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800028e:	4b20      	ldr	r3, [pc, #128]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000290:	2201      	movs	r2, #1
 8000292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <MX_ADC1_Init+0xf8>)
 8000298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800029c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800029e:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a6:	481a      	ldr	r0, [pc, #104]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002a8:	f003 fbd8 	bl	8003a5c <HAL_ADC_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80002b2:	f001 f88b 	bl	80013cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80002b6:	2306      	movs	r3, #6
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 80002ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002c8:	4619      	mov	r1, r3
 80002ca:	4811      	ldr	r0, [pc, #68]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002cc:	f004 fef0 	bl	80050b0 <HAL_ADCEx_MultiModeConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002d6:	f001 f879 	bl	80013cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_ADC1_Init+0xfc>)
 80002dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002de:	2306      	movs	r3, #6
 80002e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002e6:	237f      	movs	r3, #127	; 0x7f
 80002e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002ea:	2304      	movs	r3, #4
 80002ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002f8:	f003 fe76 	bl	8003fe8 <HAL_ADC_ConfigChannel>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000302:	f001 f863 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3730      	adds	r7, #48	; 0x30
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000b4 	.word	0x200000b4
 8000314:	04300002 	.word	0x04300002

08000318 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	463b      	mov	r3, r7
 8000320:	2220      	movs	r2, #32
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f009 fea7 	bl	800a078 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800032a:	4b28      	ldr	r3, [pc, #160]	; (80003cc <MX_ADC2_Init+0xb4>)
 800032c:	4a28      	ldr	r2, [pc, #160]	; (80003d0 <MX_ADC2_Init+0xb8>)
 800032e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000336:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC2_Init+0xb4>)
 800033a:	2210      	movs	r2, #16
 800033c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC2_Init+0xb4>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000352:	2204      	movs	r2, #4
 8000354:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000358:	2200      	movs	r2, #0
 800035a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_ADC2_Init+0xb4>)
 800035e:	2200      	movs	r2, #0
 8000360:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000364:	2201      	movs	r2, #1
 8000366:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_ADC2_Init+0xb4>)
 800036a:	2200      	movs	r2, #0
 800036c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC2_Init+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC2_Init+0xb4>)
 8000388:	f003 fb68 	bl	8003a5c <HAL_ADC_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000392:	f001 f81b 	bl	80013cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC2_Init+0xbc>)
 8000398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	; 0x7f
 80003a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ae:	463b      	mov	r3, r7
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <MX_ADC2_Init+0xb4>)
 80003b4:	f003 fe18 	bl	8003fe8 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003be:	f001 f805 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000014c 	.word	0x2000014c
 80003d0:	50000100 	.word	0x50000100
 80003d4:	08600004 	.word	0x08600004

080003d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0a0      	sub	sp, #128	; 0x80
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	2254      	movs	r2, #84	; 0x54
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f009 fe3d 	bl	800a078 <memset>
  if(adcHandle->Instance==ADC1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000406:	d16a      	bne.n	80004de <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800040e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000412:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f006 fe6f 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000424:	f000 ffd2 	bl	80013cc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000428:	4b50      	ldr	r3, [pc, #320]	; (800056c <HAL_ADC_MspInit+0x194>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a4f      	ldr	r2, [pc, #316]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000430:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000432:	4b4e      	ldr	r3, [pc, #312]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d10b      	bne.n	8000452 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800043a:	4b4d      	ldr	r3, [pc, #308]	; (8000570 <HAL_ADC_MspInit+0x198>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a4c      	ldr	r2, [pc, #304]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b4a      	ldr	r3, [pc, #296]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b47      	ldr	r3, [pc, #284]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a46      	ldr	r2, [pc, #280]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b44      	ldr	r3, [pc, #272]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800046a:	2301      	movs	r3, #1
 800046c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	2303      	movs	r3, #3
 8000470:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f005 fed6 	bl	8006230 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000486:	4a3c      	ldr	r2, [pc, #240]	; (8000578 <HAL_ADC_MspInit+0x1a0>)
 8000488:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800048a:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 800048c:	2205      	movs	r2, #5
 800048e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800049c:	4b35      	ldr	r3, [pc, #212]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004a2:	4b34      	ldr	r3, [pc, #208]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004b4:	2220      	movs	r2, #32
 80004b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80004be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004c0:	482c      	ldr	r0, [pc, #176]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004c2:	f005 fb4f 	bl	8005b64 <HAL_DMA_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80004cc:	f000 ff7e 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a28      	ldr	r2, [pc, #160]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004d4:	655a      	str	r2, [r3, #84]	; 0x54
 80004d6:	4a27      	ldr	r2, [pc, #156]	; (8000574 <HAL_ADC_MspInit+0x19c>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80004dc:	e042      	b.n	8000564 <HAL_ADC_MspInit+0x18c>
  else if(adcHandle->Instance==ADC2)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <HAL_ADC_MspInit+0x1a4>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d13d      	bne.n	8000564 <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80004ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	4618      	mov	r0, r3
 80004fa:	f006 fdff 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000504:	f000 ff62 	bl	80013cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_ADC_MspInit+0x194>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000510:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_ADC_MspInit+0x194>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d10b      	bne.n	8000532 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_ADC_MspInit+0x198>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_ADC_MspInit+0x198>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800054a:	2302      	movs	r3, #2
 800054c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	2303      	movs	r3, #3
 8000550:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f005 fe66 	bl	8006230 <HAL_GPIO_Init>
}
 8000564:	bf00      	nop
 8000566:	3780      	adds	r7, #128	; 0x80
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000244 	.word	0x20000244
 8000570:	40021000 	.word	0x40021000
 8000574:	200001e4 	.word	0x200001e4
 8000578:	40020008 	.word	0x40020008
 800057c:	50000100 	.word	0x50000100

08000580 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_COMP1_Init+0x48>)
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <MX_COMP1_Init+0x4c>)
 8000588:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_COMP1_Init+0x48>)
 800058c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000590:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_COMP1_Init+0x48>)
 8000594:	2260      	movs	r2, #96	; 0x60
 8000596:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_COMP1_Init+0x48>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005a0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80005a4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_COMP1_Init+0x48>)
 80005b4:	f004 ffe4 	bl	8005580 <HAL_COMP_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 80005be:	f000 ff05 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000248 	.word	0x20000248
 80005cc:	40010200 	.word	0x40010200

080005d0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a24      	ldr	r2, [pc, #144]	; (8000680 <HAL_COMP_MspInit+0xb0>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d141      	bne.n	8000676 <HAL_COMP_MspInit+0xa6>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_COMP_MspInit+0xb4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PA4     ------> COMP1_INM
    PA6     ------> COMP1_OUT
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000626:	2303      	movs	r3, #3
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f005 fdfa 	bl	8006230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 800064c:	2308      	movs	r3, #8
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f005 fde9 	bl	8006230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_COMP_MspInit+0xb8>)
 8000672:	f005 fddd 	bl	8006230 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40010200 	.word	0x40010200
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_DMA_Init+0x98>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	4a23      	ldr	r2, [pc, #140]	; (8000724 <MX_DMA_Init+0x98>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6493      	str	r3, [r2, #72]	; 0x48
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_DMA_Init+0x98>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_DMA_Init+0x98>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_DMA_Init+0x98>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6493      	str	r3, [r2, #72]	; 0x48
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_DMA_Init+0x98>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_DMA_Init+0x98>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_DMA_Init+0x98>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_DMA_Init+0x98>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f005 fa0b 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f005 fa22 	bl	8005b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	200c      	movs	r0, #12
 80006f0:	f005 fa03 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006f4:	200c      	movs	r0, #12
 80006f6:	f005 fa1a 	bl	8005b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2038      	movs	r0, #56	; 0x38
 8000700:	f005 f9fb 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000704:	2038      	movs	r0, #56	; 0x38
 8000706:	f005 fa12 	bl	8005b2e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	205e      	movs	r0, #94	; 0x5e
 8000710:	f005 f9f3 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000714:	205e      	movs	r0, #94	; 0x5e
 8000716:	f005 fa0a 	bl	8005b2e <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a5d      	ldr	r2, [pc, #372]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <MX_GPIO_Init+0x190>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a57      	ldr	r2, [pc, #348]	; (80008b8 <MX_GPIO_Init+0x190>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b55      	ldr	r3, [pc, #340]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b52      	ldr	r3, [pc, #328]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a51      	ldr	r2, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <MX_GPIO_Init+0x190>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x190>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007b6:	2200      	movs	r2, #0
 80007b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007bc:	483f      	ldr	r0, [pc, #252]	; (80008bc <MX_GPIO_Init+0x194>)
 80007be:	f005 feb9 	bl	8006534 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f005 feb3 	bl	8006534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80007d4:	483a      	ldr	r0, [pc, #232]	; (80008c0 <MX_GPIO_Init+0x198>)
 80007d6:	f005 fead 	bl	8006534 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2104      	movs	r1, #4
 80007de:	4839      	ldr	r0, [pc, #228]	; (80008c4 <MX_GPIO_Init+0x19c>)
 80007e0:	f005 fea8 	bl	8006534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x198>)
 80007ec:	f005 fea2 	bl	8006534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	482c      	ldr	r0, [pc, #176]	; (80008bc <MX_GPIO_Init+0x194>)
 800080a:	f005 fd11 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f005 fd02 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800082c:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	481e      	ldr	r0, [pc, #120]	; (80008c0 <MX_GPIO_Init+0x198>)
 8000846:	f005 fcf3 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000850:	2311      	movs	r3, #17
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4817      	ldr	r0, [pc, #92]	; (80008c0 <MX_GPIO_Init+0x198>)
 8000864:	f005 fce4 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x19c>)
 8000880:	f005 fcd6 	bl	8006230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x198>)
 800089e:	f005 fcc7 	bl	8006230 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x1a0>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x1a0>)
 80008a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ac:	6053      	str	r3, [r2, #4]

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800
 80008c0:	48000400 	.word	0x48000400
 80008c4:	48000c00 	.word	0x48000c00
 80008c8:	40010000 	.word	0x40010000

080008cc <initBitMap>:
// 00000000 -> 0
// 00000001 -> 1
// 00000010 -> 2
// 00000011 -> 2
// etc
void initBitMap() {
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e01a      	b.n	800090e <initBitMap+0x42>
		int bit = 1 << i;
 80008d8:	2201      	movs	r2, #1
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	607b      	str	r3, [r7, #4]
		for (int j = 0; j < bit; j++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e00b      	b.n	8000900 <initBitMap+0x34>
			bitMap[bit + j] = i + 1;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	440b      	add	r3, r1
 80008f2:	3201      	adds	r2, #1
 80008f4:	b2d1      	uxtb	r1, r2
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <initBitMap+0x58>)
 80008f8:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < bit; j++) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbef      	blt.n	80008e8 <initBitMap+0x1c>
	for (int i = 0; i < 8; i++) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b07      	cmp	r3, #7
 8000912:	dde1      	ble.n	80008d8 <initBitMap+0xc>
		}
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000036c 	.word	0x2000036c

08000928 <initColorMaps>:
		uint16_t rgb = rgbMap[i];
		rgbMap[i] = (rgb >> 8) | ((rgb & 0xff) << 8);
	}
}

void initColorMaps(float scaleFactor, float offset) {
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a4      	sub	sp, #144	; 0x90
 800092c:	af00      	add	r7, sp, #0
 800092e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000932:	edc7 0a00 	vstr	s1, [r7]

	float RY[16] = { 0, 0.47, 0.07, 0.17, 0.4, 0.43, 0.83, 0, 0.93, 0.93, 0.57,
			0.57, 0.13, 0.73, 0.47, 0.47 };
			*/

	float Y[16] = { 0, 0, 0.5, 0.6, 0.36, 0.5, 0.44, 0.66, 0.5, 0.62, 0.68,
 8000936:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <initColorMaps+0xd8>)
 8000938:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800093c:	461d      	mov	r5, r3
 800093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800094e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.78, 0.42, 0.48, 0.72, 0.92 };

	float RY[16] = { 0, 0.42, 0.06, 0.14, 0.34, 0.38, 0.76, 0, 0.84, 0.84, 0.5,
 8000952:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <initColorMaps+0xdc>)
 8000954:	f107 040c 	add.w	r4, r7, #12
 8000958:	461d      	mov	r5, r3
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800096a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.5, 0.12, 0.66, 0.42, 0.42 };

	// multiply by the initial scale factor and add the offset
	for(int i=0; i< 16; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000974:	e034      	b.n	80009e0 <initColorMaps+0xb8>
		Y[i] = (Y[i] * scaleFactor) + offset;
 8000976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	3390      	adds	r3, #144	; 0x90
 800097e:	443b      	add	r3, r7
 8000980:	3b44      	subs	r3, #68	; 0x44
 8000982:	ed93 7a00 	vldr	s14, [r3]
 8000986:	edd7 7a01 	vldr	s15, [r7, #4]
 800098a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800098e:	edd7 7a00 	vldr	s15, [r7]
 8000992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	3390      	adds	r3, #144	; 0x90
 800099e:	443b      	add	r3, r7
 80009a0:	3b44      	subs	r3, #68	; 0x44
 80009a2:	edc3 7a00 	vstr	s15, [r3]
		RY[i] = (RY[i] * scaleFactor) + offset;
 80009a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	3390      	adds	r3, #144	; 0x90
 80009ae:	443b      	add	r3, r7
 80009b0:	3b84      	subs	r3, #132	; 0x84
 80009b2:	ed93 7a00 	vldr	s14, [r3]
 80009b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009be:	edd7 7a00 	vldr	s15, [r7]
 80009c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	3390      	adds	r3, #144	; 0x90
 80009ce:	443b      	add	r3, r7
 80009d0:	3b84      	subs	r3, #132	; 0x84
 80009d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i< 16; i++) {
 80009d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009da:	3301      	adds	r3, #1
 80009dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80009e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	ddc6      	ble.n	8000976 <initColorMaps+0x4e>
	}

	setColorLevels(Y, RY);
 80009e8:	f107 020c 	add.w	r2, r7, #12
 80009ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f808 	bl	8000a08 <setColorLevels>
}
 80009f8:	bf00      	nop
 80009fa:	3790      	adds	r7, #144	; 0x90
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000a00:	0800a128 	.word	0x0800a128
 8000a04:	0800a168 	.word	0x0800a168

08000a08 <setColorLevels>:

void setColorLevels(float yLevels[16], float ryLevels[16]) {
 8000a08:	b480      	push	{r7}
 8000a0a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a14:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000a18:	6018      	str	r0, [r3, #0]
 8000a1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a1e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000a22:	6019      	str	r1, [r3, #0]
	float v = 0;
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	float oneBit = VREF / ADC_RESOLUTION_STEPS;
 8000a2c:	4ba4      	ldr	r3, [pc, #656]	; (8000cc0 <setColorLevels+0x2b8>)
 8000a2e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	uint16_t RYmap1[ADC_RESOLUTION_STEPS];

	float voltages[ADC_RESOLUTION_STEPS];

	// voltage to adc reading map
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a38:	e017      	b.n	8000a6a <setColorLevels+0x62>
		voltages[i] = v;
 8000a3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a3e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000a42:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000a4e:	601a      	str	r2, [r3, #0]
		v += oneBit;
 8000a50:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000a54:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8000a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a5c:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224
	for (int i = 0; i < ADC_RESOLUTION_STEPS; i++) {
 8000a60:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a64:	3301      	adds	r3, #1
 8000a66:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a6a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a70:	dde3      	ble.n	8000a3a <setColorLevels+0x32>
	}

	// Clear the color maps
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a78:	e022      	b.n	8000ac0 <setColorLevels+0xb8>
		YMap[j] = 0;
 8000a7a:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <setColorLevels+0x2bc>)
 8000a7c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a80:	2100      	movs	r1, #0
 8000a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RYMap[j] = 0;
 8000a86:	4a90      	ldr	r2, [pc, #576]	; (8000cc8 <setColorLevels+0x2c0>)
 8000a88:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Ymap1[j] = 0;
 8000a92:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000a9c:	443b      	add	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f823 2ca0 	strh.w	r2, [r3, #-160]
		RYmap1[j] = 0;
 8000aa4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000aa8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000aac:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < ADC_RESOLUTION_STEPS; j++) {
 8000ab6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000aba:	3301      	adds	r3, #1
 8000abc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000ac0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ac4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac6:	ddd8      	ble.n	8000a7a <setColorLevels+0x72>
	}

	// Create the voltage to color name bitmaps
	for (int i = 0; i < 16; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000ace:	e0ee      	b.n	8000cae <setColorLevels+0x2a6>

		v = yLevels[i];
 8000ad0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000ada:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000aee:	e041      	b.n	8000b74 <setColorLevels+0x16c>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8000af0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000af4:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000af8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	edd3 7a00 	vldr	s15, [r3]
 8000b04:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	db2b      	blt.n	8000b6a <setColorLevels+0x162>
 8000b12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b16:	3301      	adds	r3, #1
 8000b18:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000b1c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	d519      	bpl.n	8000b6a <setColorLevels+0x162>
				Ymap1[j] |= (1 << i);
 8000b36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b40:	443b      	add	r3, r7
 8000b42:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	2101      	movs	r1, #1
 8000b4a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000b64:	443b      	add	r3, r7
 8000b66:	f823 2ca0 	strh.w	r2, [r3, #-160]
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000b6a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000b74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b78:	2b3e      	cmp	r3, #62	; 0x3e
 8000b7a:	ddb9      	ble.n	8000af0 <setColorLevels+0xe8>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS-1] <= v) {
 8000b7c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b80:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000b84:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000b88:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	db0d      	blt.n	8000bb2 <setColorLevels+0x1aa>
			Ymap1[ADC_RESOLUTION_STEPS-1] |= (1 << i);
 8000b96:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		}
		v = ryLevels[i];
 8000bb2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000bbc:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000bd0:	e041      	b.n	8000c56 <setColorLevels+0x24e>
			if (voltages[j] <= v && voltages[j + 1] > v) {
 8000bd2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000bd6:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8000bda:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	edd3 7a00 	vldr	s15, [r3]
 8000be6:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf2:	db2b      	blt.n	8000c4c <setColorLevels+0x244>
 8000bf4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000bfe:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	d519      	bpl.n	8000c4c <setColorLevels+0x244>
				RYmap1[j] |= (1 << i);
 8000c18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c20:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000c24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c44:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000c48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = 0; j < ADC_RESOLUTION_STEPS-1; j++) {
 8000c4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c50:	3301      	adds	r3, #1
 8000c52:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000c56:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8000c5c:	ddb9      	ble.n	8000bd2 <setColorLevels+0x1ca>
			}
		}
		if (voltages[ADC_RESOLUTION_STEPS-1] <= v) {
 8000c5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c62:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000c66:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000c6a:	ed97 7a89 	vldr	s14, [r7, #548]	; 0x224
 8000c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c76:	db15      	blt.n	8000ca4 <setColorLevels+0x29c>
			RYmap1[ADC_RESOLUTION_STEPS-1] |= (1 << i);
 8000c78:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c80:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	2101      	movs	r1, #1
 8000c88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	for (int i = 0; i < 16; i++) {
 8000ca4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000cae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	f77f af0c 	ble.w	8000ad0 <setColorLevels+0xc8>
	}

	// now propagate the map to each neighbouring entry
	// to allow for noise and inaccuracy

	for(uint16_t i=0; i<ADC_RESOLUTION_STEPS-1; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000cbe:	e080      	b.n	8000dc2 <setColorLevels+0x3ba>
 8000cc0:	3d533333 	.word	0x3d533333
 8000cc4:	2000026c 	.word	0x2000026c
 8000cc8:	200002ec 	.word	0x200002ec

		YMap[i] = Ymap1[i];
 8000ccc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000cd0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000cda:	443b      	add	r3, r7
 8000cdc:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <setColorLevels+0x3d4>)
 8000ce2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		RYMap[i] = RYmap1[i];
 8000ce6:	f8b7 120e 	ldrh.w	r1, [r7, #526]	; 0x20e
 8000cea:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000cee:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000cf2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000cf6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000cfa:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <setColorLevels+0x3d8>)
 8000cfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(i>0) {
 8000d00:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d029      	beq.n	8000d5c <setColorLevels+0x354>
			YMap[i] |= Ymap1[i-1];
 8000d08:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d0c:	4a33      	ldr	r2, [pc, #204]	; (8000ddc <setColorLevels+0x3d4>)
 8000d0e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d12:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d16:	3b01      	subs	r3, #1
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d1e:	443b      	add	r3, r7
 8000d20:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8000d24:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	b291      	uxth	r1, r2
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <setColorLevels+0x3d4>)
 8000d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i-1];
 8000d32:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <setColorLevels+0x3d8>)
 8000d38:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d3c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d4a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d4e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d52:	430a      	orrs	r2, r1
 8000d54:	b291      	uxth	r1, r2
 8000d56:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <setColorLevels+0x3d8>)
 8000d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if(i<ADC_RESOLUTION_STEPS-1) {
 8000d5c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d60:	2b3e      	cmp	r3, #62	; 0x3e
 8000d62:	d829      	bhi.n	8000db8 <setColorLevels+0x3b0>
			YMap[i] |= Ymap1[i+1];
 8000d64:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <setColorLevels+0x3d4>)
 8000d6a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d6e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d72:	3301      	adds	r3, #1
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d7a:	443b      	add	r3, r7
 8000d7c:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8000d80:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d84:	430a      	orrs	r2, r1
 8000d86:	b291      	uxth	r1, r2
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <setColorLevels+0x3d4>)
 8000d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RYMap[i] |= RYmap1[i+1];
 8000d8e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <setColorLevels+0x3d8>)
 8000d94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d98:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000da2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000da6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000daa:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dae:	430a      	orrs	r2, r1
 8000db0:	b291      	uxth	r1, r2
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <setColorLevels+0x3d8>)
 8000db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<ADC_RESOLUTION_STEPS-1; i++) {
 8000db8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000dc2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8000dc8:	d980      	bls.n	8000ccc <setColorLevels+0x2c4>

	//white = (0.47 / VREF * ADC_RESOLUTION_STEPS) + offsetBinary;
	//RYMap[white-1] |= 0x8000;
	//RYMap[white] |= 0x8000;
	//RYMap[white+1] |= 0x8000;
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000026c 	.word	0x2000026c
 8000de0:	200002ec 	.word	0x200002ec

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f002 fb50 	bl	800348c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f986 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f7ff fc9a 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f7ff fc4a 	bl	800068c <MX_DMA_Init>
  MX_TIM8_Init();
 8000df8:	f001 ff14 	bl	8002c24 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000dfc:	f001 fc52 	bl	80026a4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000e00:	f7ff fa0a 	bl	8000218 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e04:	f7ff fa88 	bl	8000318 <MX_ADC2_Init>
  MX_SPI1_Init();
 8000e08:	f001 fab0 	bl	800236c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e0c:	f001 fd54 	bl	80028b8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e10:	f001 fd18 	bl	8002844 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e14:	f001 fe04 	bl	8002a20 <MX_TIM4_Init>
  MX_COMP1_Init();
 8000e18:	f7ff fbb2 	bl	8000580 <MX_COMP1_Init>
  MX_TIM5_Init();
 8000e1c:	f001 fec8 	bl	8002bb0 <MX_TIM5_Init>
  MX_TIM16_Init();
 8000e20:	f001 ffba 	bl	8002d98 <MX_TIM16_Init>
  MX_TIM20_Init();
 8000e24:	f002 f83a 	bl	8002e9c <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8000e28:	4b9a      	ldr	r3, [pc, #616]	; (8001094 <main+0x2b0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e30:	4a98      	ldr	r2, [pc, #608]	; (8001094 <main+0x2b0>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6013      	str	r3, [r2, #0]
	mysetup();
 8000e38:	f001 f9b8 	bl	80021ac <mysetup>

	initBitMap();
 8000e3c:	f7ff fd46 	bl	80008cc <initBitMap>
	initColorMaps(0.43/0.47, 1.72);
 8000e40:	eddf 0a95 	vldr	s1, [pc, #596]	; 8001098 <main+0x2b4>
 8000e44:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800109c <main+0x2b8>
 8000e48:	f7ff fd6e 	bl	8000928 <initColorMaps>

#ifndef PAR_TFT
	swapRGBBytes();
#endif

	setLeftWindow();
 8000e4c:	f001 f9dc 	bl	8002208 <setLeftWindow>

	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID,
 8000e50:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <main+0x2bc>)
 8000e52:	2114      	movs	r1, #20
 8000e54:	4893      	ldr	r0, [pc, #588]	; (80010a4 <main+0x2c0>)
 8000e56:	f007 fe1f 	bl	8008a98 <HAL_TIM_RegisterCallback>
			VSyncCallback);

	HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_TX_COMPLETE_CB_ID,
 8000e5a:	4a93      	ldr	r2, [pc, #588]	; (80010a8 <main+0x2c4>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4893      	ldr	r0, [pc, #588]	; (80010ac <main+0x2c8>)
 8000e60:	f006 fc7c 	bl	800775c <HAL_SPI_RegisterCallback>
			SPIFullCallback);
	HAL_DMA_RegisterCallback(&hdma_tim20_ch1, HAL_DMA_XFER_CPLT_CB_ID,
 8000e64:	4a92      	ldr	r2, [pc, #584]	; (80010b0 <main+0x2cc>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4892      	ldr	r0, [pc, #584]	; (80010b4 <main+0x2d0>)
 8000e6a:	f005 f8a7 	bl	8005fbc <HAL_DMA_RegisterCallback>
			DMAHalfComplete);

	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID,
 8000e6e:	4a92      	ldr	r2, [pc, #584]	; (80010b8 <main+0x2d4>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4892      	ldr	r0, [pc, #584]	; (80010bc <main+0x2d8>)
 8000e74:	f002 fff2 	bl	8003e5c <HAL_ADC_RegisterCallback>
			ADCCallback);
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_HALF_CB_ID,
 8000e78:	4a8f      	ldr	r2, [pc, #572]	; (80010b8 <main+0x2d4>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	488f      	ldr	r0, [pc, #572]	; (80010bc <main+0x2d8>)
 8000e7e:	f002 ffed 	bl	8003e5c <HAL_ADC_RegisterCallback>
			ADCCallback);

	HAL_COMP_Start(&hcomp1);
 8000e82:	488f      	ldr	r0, [pc, #572]	; (80010c0 <main+0x2dc>)
 8000e84:	f004 fd16 	bl	80058b4 <HAL_COMP_Start>
	HAL_TIM_Base_Start(&htim4); // hysnc
 8000e88:	488e      	ldr	r0, [pc, #568]	; (80010c4 <main+0x2e0>)
 8000e8a:	f006 fdc1 	bl	8007a10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1); // sample clock
 8000e8e:	488e      	ldr	r0, [pc, #568]	; (80010c8 <main+0x2e4>)
 8000e90:	f006 fdbe 	bl	8007a10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3); // vsync
 8000e94:	4883      	ldr	r0, [pc, #524]	; (80010a4 <main+0x2c0>)
 8000e96:	f006 fe2b 	bl	8007af0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8); // Parallel TFT DMA line clock
 8000e9a:	488c      	ldr	r0, [pc, #560]	; (80010cc <main+0x2e8>)
 8000e9c:	f006 fdb8 	bl	8007a10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim20); // Parallel TFT DMA pixel clock
 8000ea0:	488b      	ldr	r0, [pc, #556]	; (80010d0 <main+0x2ec>)
 8000ea2:	f006 fdb5 	bl	8007a10 <HAL_TIM_Base_Start>

	//HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_LEN);
	__HAL_TIM_ENABLE_DMA(&htim20, TIM_DMA_CC1);
 8000ea6:	4b8a      	ldr	r3, [pc, #552]	; (80010d0 <main+0x2ec>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	4b88      	ldr	r3, [pc, #544]	; (80010d0 <main+0x2ec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb4:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_OnePulse_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4882      	ldr	r0, [pc, #520]	; (80010c4 <main+0x2e0>)
 8000eba:	f006 ffcb 	bl	8007e54 <HAL_TIM_OnePulse_Start>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <main+0xe4>
		/* Starting Error */
		Error_Handler();
 8000ec4:	f000 fa82 	bl	80013cc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8000ec8:	2100      	movs	r1, #0
 8000eca:	487f      	ldr	r0, [pc, #508]	; (80010c8 <main+0x2e4>)
 8000ecc:	f006 ffc2 	bl	8007e54 <HAL_TIM_OnePulse_Start>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <main+0xf6>
		/* Starting Error */
		Error_Handler();
 8000ed6:	f000 fa79 	bl	80013cc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK) {
 8000eda:	2100      	movs	r1, #0
 8000edc:	4871      	ldr	r0, [pc, #452]	; (80010a4 <main+0x2c0>)
 8000ede:	f007 f837 	bl	8007f50 <HAL_TIM_OnePulse_Start_IT>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <main+0x108>
		/* Starting Error */
		Error_Handler();
 8000ee8:	f000 fa70 	bl	80013cc <Error_Handler>
	}

	if (HAL_TIM_OnePulse_Start_IT(&htim20, TIM_CHANNEL_1) != HAL_OK) {
 8000eec:	2100      	movs	r1, #0
 8000eee:	4878      	ldr	r0, [pc, #480]	; (80010d0 <main+0x2ec>)
 8000ef0:	f007 f82e 	bl	8007f50 <HAL_TIM_OnePulse_Start_IT>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <main+0x11a>
		/* Starting Error */
		Error_Handler();
 8000efa:	f000 fa67 	bl	80013cc <Error_Handler>
	}
	HAL_TIM_OnePulse_Start(&htim8, TIM_CHANNEL_1);
 8000efe:	2100      	movs	r1, #0
 8000f00:	4872      	ldr	r0, [pc, #456]	; (80010cc <main+0x2e8>)
 8000f02:	f006 ffa7 	bl	8007e54 <HAL_TIM_OnePulse_Start>

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 8000f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0a:	4972      	ldr	r1, [pc, #456]	; (80010d4 <main+0x2f0>)
 8000f0c:	486b      	ldr	r0, [pc, #428]	; (80010bc <main+0x2d8>)
 8000f0e:	f003 fefb 	bl	8004d08 <HAL_ADCEx_MultiModeStart_DMA>

	line = BLANKING_LINES; // Line 0 is when we detect vsync at the end of a frame
 8000f12:	4b71      	ldr	r3, [pc, #452]	; (80010d8 <main+0x2f4>)
 8000f14:	2227      	movs	r2, #39	; 0x27
 8000f16:	801a      	strh	r2, [r3, #0]
	captureState = CAPTURE_STATE_SEEKING_SYNC;
 8000f18:	4b70      	ldr	r3, [pc, #448]	; (80010dc <main+0x2f8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]

	dmaState = DMA_CAPTURE_STATE_IDLE;
 8000f1e:	4b70      	ldr	r3, [pc, #448]	; (80010e0 <main+0x2fc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

	rgbBufIdx = 0;
 8000f24:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <main+0x300>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
	rgbBufchunk = 0;
 8000f2a:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <main+0x304>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	pix = 0;
 8000f30:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <main+0x308>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	801a      	strh	r2, [r3, #0]
	frameReady = 0;
 8000f36:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <main+0x30c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]

	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <main+0x2b0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f44:	4a53      	ldr	r2, [pc, #332]	; (8001094 <main+0x2b0>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6013      	str	r3, [r2, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (captureState) {
 8000f4c:	4b63      	ldr	r3, [pc, #396]	; (80010dc <main+0x2f8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d825      	bhi.n	8000fa2 <main+0x1be>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <main+0x178>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000fa3 	.word	0x08000fa3
 8000f60:	08000f75 	.word	0x08000f75
 8000f64:	08000fa3 	.word	0x08000fa3
 8000f68:	08000fa3 	.word	0x08000fa3
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f8b 	.word	0x08000f8b

		case CAPTURE_STATE_SEEKING_SYNC:
			break;

		case CAPTURE_STATE_FOUND_SYNC:
			captureState = CAPTURE_STATE_START_GRAB;
 8000f74:	4b59      	ldr	r3, [pc, #356]	; (80010dc <main+0x2f8>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e015      	b.n	8000fa8 <main+0x1c4>

		case CAPTURE_STATE_GRABBED:
			captureState = CAPTURE_STATE_IDLE;
 8000f7c:	4b57      	ldr	r3, [pc, #348]	; (80010dc <main+0x2f8>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	701a      	strb	r2, [r3, #0]
			frameReady = 1;
 8000f82:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <main+0x30c>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
			break;
 8000f88:	e00e      	b.n	8000fa8 <main+0x1c4>

		case CAPTURE_STATE_IDLE:

			if (frameReady == 0) {
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <main+0x30c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <main+0x1c2>
				captureState = CAPTURE_STATE_START_GRAB;
 8000f94:	4b51      	ldr	r3, [pc, #324]	; (80010dc <main+0x2f8>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
				pix=0;
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <main+0x308>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
			}

			break;
 8000fa0:	e001      	b.n	8000fa6 <main+0x1c2>

		default:
			break;
 8000fa2:	bf00      	nop
 8000fa4:	e000      	b.n	8000fa8 <main+0x1c4>
			break;
 8000fa6:	bf00      	nop
		}

		switch (dmaState) {
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <main+0x2fc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d86c      	bhi.n	800108c <main+0x2a8>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <main+0x1d4>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fdb 	.word	0x08000fdb
 8000fc0:	0800108d 	.word	0x0800108d
 8000fc4:	08001021 	.word	0x08001021

		case DMA_CAPTURE_STATE_IDLE:
			if (frameReady == 1) {
 8000fc8:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <main+0x30c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d15e      	bne.n	8001090 <main+0x2ac>
				dmaState = DMA_STATE_START;
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <main+0x2fc>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fd8:	e05a      	b.n	8001090 <main+0x2ac>
			vsync();
			while(SPI1->SR & SPI_SR_BSY) {
				__NOP();
			}
#else
			vsync();
 8000fda:	f001 f973 	bl	80022c4 <vsync>
#endif

			rgbBufchunk = 0;
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <main+0x304>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
			rgbBufIdx = 0;
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <main+0x300>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
			dmaState = DMA_STATE_RUNNING;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <main+0x2fc>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	701a      	strb	r2, [r3, #0]
#ifndef PAR_TFT
			HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&rgbBuf, RGB_BUF_CHUNK_BYTES);
#else
			HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)rgbBuf, (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 8000ff0:	4940      	ldr	r1, [pc, #256]	; (80010f4 <main+0x310>)
 8000ff2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ff6:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <main+0x314>)
 8000ff8:	482e      	ldr	r0, [pc, #184]	; (80010b4 <main+0x2d0>)
 8000ffa:	f004 fe5b 	bl	8005cb4 <HAL_DMA_Start_IT>

			GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <main+0x2b0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <main+0x2b0>)
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6013      	str	r3, [r2, #0]

			__HAL_TIM_ENABLE(&htim8);
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <main+0x2e8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <main+0x2e8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
#endif
			break;
 800101e:	e038      	b.n	8001092 <main+0x2ae>

		case DMA_STATE_RUNNING:
			break;

		case DMA_STATE_CHUNK_COMPLETE:
			rgbBufchunk++;
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <main+0x304>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <main+0x304>)
 800102a:	701a      	strb	r2, [r3, #0]

			if (rgbBufchunk == RGB_BUF_CHUNKS) {
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <main+0x304>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d106      	bne.n	8001042 <main+0x25e>
				dmaState = DMA_CAPTURE_STATE_IDLE;
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <main+0x2fc>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
				frameReady = 0;
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <main+0x30c>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
				__HAL_TIM_ENABLE(&htim8);
#endif
				}
			break;
 8001040:	e027      	b.n	8001092 <main+0x2ae>
				dmaState = DMA_STATE_RUNNING;
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <main+0x2fc>)
 8001044:	2202      	movs	r2, #2
 8001046:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Start_IT(&hdma_tim20_ch1, (uint32_t)&rgbBuf[rgbBufchunk * (RGB_BUF_LEN / RGB_BUF_CHUNKS)], (uint32_t)&GPIOC->ODR, RGB_BUF_CHUNK_BYTES/2);
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <main+0x304>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	031b      	lsls	r3, r3, #12
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <main+0x310>)
 800105a:	4413      	add	r3, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001062:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <main+0x314>)
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <main+0x2d0>)
 8001066:	f004 fe25 	bl	8005cb4 <HAL_DMA_Start_IT>
				GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000020;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <main+0x2b0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <main+0x2b0>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6013      	str	r3, [r2, #0]
				__HAL_TIM_ENABLE(&htim8);
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <main+0x2e8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <main+0x2e8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	601a      	str	r2, [r3, #0]
			break;
 800108a:	e002      	b.n	8001092 <main+0x2ae>

		default:
			break;
 800108c:	bf00      	nop
 800108e:	e75d      	b.n	8000f4c <main+0x168>
			break;
 8001090:	bf00      	nop
		switch (captureState) {
 8001092:	e75b      	b.n	8000f4c <main+0x168>
 8001094:	48000400 	.word	0x48000400
 8001098:	3fdc28f6 	.word	0x3fdc28f6
 800109c:	3f6a3678 	.word	0x3f6a3678
 80010a0:	080012c5 	.word	0x080012c5
 80010a4:	20018f38 	.word	0x20018f38
 80010a8:	08001345 	.word	0x08001345
 80010ac:	20018cb4 	.word	0x20018cb4
 80010b0:	08001365 	.word	0x08001365
 80010b4:	20019400 	.word	0x20019400
 80010b8:	08001195 	.word	0x08001195
 80010bc:	200000b4 	.word	0x200000b4
 80010c0:	20000248 	.word	0x20000248
 80010c4:	20019004 	.word	0x20019004
 80010c8:	20018da0 	.word	0x20018da0
 80010cc:	2001919c 	.word	0x2001919c
 80010d0:	20019334 	.word	0x20019334
 80010d4:	20018474 	.word	0x20018474
 80010d8:	20018c74 	.word	0x20018c74
 80010dc:	20018c76 	.word	0x20018c76
 80010e0:	20018c78 	.word	0x20018c78
 80010e4:	2001846c 	.word	0x2001846c
 80010e8:	20018470 	.word	0x20018470
 80010ec:	20018c7a 	.word	0x20018c7a
 80010f0:	20018c77 	.word	0x20018c77
 80010f4:	2000046c 	.word	0x2000046c
 80010f8:	48000814 	.word	0x48000814

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2238      	movs	r2, #56	; 0x38
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f008 ffb4 	bl	800a078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001122:	f005 fa1f 	bl	8006564 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800112a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001134:	2303      	movs	r3, #3
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001138:	2301      	movs	r3, #1
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 800113c:	2320      	movs	r3, #32
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001140:	2304      	movs	r3, #4
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4618      	mov	r0, r3
 8001152:	f005 faab 	bl	80066ac <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800115c:	f000 f936 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2103      	movs	r1, #3
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fdaf 	bl	8006cdc <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001184:	f000 f922 	bl	80013cc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001188:	f005 ff46 	bl	8007018 <HAL_RCC_EnableCSS>
}
 800118c:	bf00      	nop
 800118e:	3750      	adds	r7, #80	; 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <ADCCallback>:

/* USER CODE BEGIN 4 */

void ADCCallback(ADC_HandleTypeDef *hadc) {
 8001194:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	register uint8_t y;
	register uint8_t ry;
	register uint16_t bits;
	register uint8_t b;
	register uint16_t pixel = pix;
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <ADCCallback+0x108>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29c      	uxth	r4, r3
	register uint16_t i = PIXELS_PER_LINE;
 80011a4:	f44f 7680 	mov.w	r6, #256	; 0x100
	line++;
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <ADCCallback+0x10c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <ADCCallback+0x10c>)
 80011b8:	801a      	strh	r2, [r3, #0]
	if (line > FRAME_LINES)
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <ADCCallback+0x10c>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80011c4:	db02      	blt.n	80011cc <ADCCallback+0x38>
		line = 1;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <ADCCallback+0x10c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	801a      	strh	r2, [r3, #0]

	if (captureState != CAPTURE_STATE_GRABBING)
 80011cc:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <ADCCallback+0x110>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d15b      	bne.n	800128e <ADCCallback+0xfa>
		return;

	if (line > FIRST_VISIBLE_LINE && line < (LAST_VISIBLE_LINE + 2)) { // don't capture the previous line - it was part of frame blanking
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <ADCCallback+0x10c>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	2b28      	cmp	r3, #40	; 0x28
 80011de:	dd4e      	ble.n	800127e <ADCCallback+0xea>
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <ADCCallback+0x10c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	2be8      	cmp	r3, #232	; 0xe8
 80011e8:	dc49      	bgt.n	800127e <ADCCallback+0xea>

		while (i > 0) {
 80011ea:	e046      	b.n	800127a <ADCCallback+0xe6>

			y = (((uint16_t*) adcbuf)[pixel] & 0xff) >> (8 - ADC_RESOLUTION_BITS);
 80011ec:	4623      	mov	r3, r4
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <ADCCallback+0x114>)
 80011f2:	4413      	add	r3, r2
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	109b      	asrs	r3, r3, #2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011fe:	fa5f f883 	uxtb.w	r8, r3
			ry = (((uint16_t*) adcbuf)[pixel] >> (16 - ADC_RESOLUTION_BITS));
 8001202:	4623      	mov	r3, r4
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <ADCCallback+0x114>)
 8001208:	4413      	add	r3, r2
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	0a9b      	lsrs	r3, r3, #10
 800120e:	b29b      	uxth	r3, r3
 8001210:	b2dd      	uxtb	r5, r3

			bits = YMap[y] & RYMap[ry];
 8001212:	4642      	mov	r2, r8
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <ADCCallback+0x118>)
 8001216:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800121a:	4629      	mov	r1, r5
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <ADCCallback+0x11c>)
 800121e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001222:	4013      	ands	r3, r2
 8001224:	fa1f f883 	uxth.w	r8, r3

			b = bitMap[bits >> 8];
 8001228:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800122c:	b29b      	uxth	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <ADCCallback+0x120>)
 8001232:	5c9d      	ldrb	r5, [r3, r2]
			if(b == 0) {
 8001234:	2d00      	cmp	r5, #0
 8001236:	d104      	bne.n	8001242 <ADCCallback+0xae>
				b = bitMap[bits & 0xff];
 8001238:	4643      	mov	r3, r8
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <ADCCallback+0x120>)
 800123e:	5cd5      	ldrb	r5, [r2, r3]
 8001240:	e002      	b.n	8001248 <ADCCallback+0xb4>
			} else {
				b+=8;
 8001242:	f105 0308 	add.w	r3, r5, #8
 8001246:	b2dd      	uxtb	r5, r3
			}

			if (rgbBufIdx < RGB_BUF_LEN) {
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <ADCCallback+0x124>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001250:	d20d      	bcs.n	800126e <ADCCallback+0xda>

				rgbBuf[rgbBufIdx] = rgbMap[b];
 8001252:	4629      	mov	r1, r5
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <ADCCallback+0x124>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <ADCCallback+0x128>)
 800125a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <ADCCallback+0x12c>)
 8001260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				rgbBufIdx++;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <ADCCallback+0x124>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <ADCCallback+0x124>)
 800126c:	6013      	str	r3, [r2, #0]
			}
			pixel++;
 800126e:	4623      	mov	r3, r4
 8001270:	3301      	adds	r3, #1
 8001272:	b29c      	uxth	r4, r3
			i--;
 8001274:	4633      	mov	r3, r6
 8001276:	3b01      	subs	r3, #1
 8001278:	b29e      	uxth	r6, r3
		while (i > 0) {
 800127a:	2e00      	cmp	r6, #0
 800127c:	d1b6      	bne.n	80011ec <ADCCallback+0x58>
		}
	}

	if (pixel >= 512) {
 800127e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8001282:	d300      	bcc.n	8001286 <ADCCallback+0xf2>
		pixel = 0;
 8001284:	2400      	movs	r4, #0
	}

	pix = pixel;
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <ADCCallback+0x108>)
 8001288:	4622      	mov	r2, r4
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e000      	b.n	8001290 <ADCCallback+0xfc>
		return;
 800128e:	bf00      	nop
}
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20018c7a 	.word	0x20018c7a
 80012a0:	20018c74 	.word	0x20018c74
 80012a4:	20018c76 	.word	0x20018c76
 80012a8:	20018474 	.word	0x20018474
 80012ac:	2000026c 	.word	0x2000026c
 80012b0:	200002ec 	.word	0x200002ec
 80012b4:	2000036c 	.word	0x2000036c
 80012b8:	2001846c 	.word	0x2001846c
 80012bc:	20000000 	.word	0x20000000
 80012c0:	2000046c 	.word	0x2000046c

080012c4 <VSyncCallback>:

void VSyncCallback(TIM_HandleTypeDef *htim) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	line = LAST_VISIBLE_LINE + BOTTOM_BORDER;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <VSyncCallback+0x68>)
 80012ce:	f240 1207 	movw	r2, #263	; 0x107
 80012d2:	801a      	strh	r2, [r3, #0]
	pix = 0;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <VSyncCallback+0x6c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]

	switch (captureState) {
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <VSyncCallback+0x70>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <VSyncCallback+0x50>
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	dc1b      	bgt.n	8001320 <VSyncCallback+0x5c>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <VSyncCallback+0x2e>
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d004      	beq.n	80012fa <VSyncCallback+0x36>
	case CAPTURE_STATE_GRABBING:
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		captureState = CAPTURE_STATE_GRABBED;

	default:
		break;
 80012f0:	e016      	b.n	8001320 <VSyncCallback+0x5c>
		captureState = CAPTURE_STATE_FOUND_SYNC;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <VSyncCallback+0x70>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
		break;
 80012f8:	e013      	b.n	8001322 <VSyncCallback+0x5e>
		captureState = CAPTURE_STATE_GRABBING;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <VSyncCallback+0x70>)
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
		rgbBufIdx = 0;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <VSyncCallback+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcbuf, 512);
 8001306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130a:	490c      	ldr	r1, [pc, #48]	; (800133c <VSyncCallback+0x78>)
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <VSyncCallback+0x7c>)
 800130e:	f003 fcfb 	bl	8004d08 <HAL_ADCEx_MultiModeStart_DMA>
		break;
 8001312:	e006      	b.n	8001322 <VSyncCallback+0x5e>
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <VSyncCallback+0x7c>)
 8001316:	f003 fdb9 	bl	8004e8c <HAL_ADCEx_MultiModeStop_DMA>
		captureState = CAPTURE_STATE_GRABBED;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <VSyncCallback+0x70>)
 800131c:	2204      	movs	r2, #4
 800131e:	701a      	strb	r2, [r3, #0]
		break;
 8001320:	bf00      	nop

	}
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20018c74 	.word	0x20018c74
 8001330:	20018c7a 	.word	0x20018c7a
 8001334:	20018c76 	.word	0x20018c76
 8001338:	2001846c 	.word	0x2001846c
 800133c:	20018474 	.word	0x20018474
 8001340:	200000b4 	.word	0x200000b4

08001344 <SPIFullCallback>:

void SPIFullCallback(SPI_HandleTypeDef *spi) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SPIFullCallback+0x1c>)
 800134e:	2203      	movs	r2, #3
 8001350:	701a      	strb	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20018c78 	.word	0x20018c78

08001364 <DMAHalfComplete>:

void DMAHalfComplete(DMA_HandleTypeDef *dma) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	dmaState = DMA_STATE_CHUNK_COMPLETE;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <DMAHalfComplete+0x5c>)
 800136e:	2203      	movs	r2, #3
 8001370:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim8);
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <DMAHalfComplete+0x60>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	f241 1311 	movw	r3, #4369	; 0x1111
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <DMAHalfComplete+0x3e>
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <DMAHalfComplete+0x60>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	f244 4344 	movw	r3, #17476	; 0x4444
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d107      	bne.n	80013a2 <DMAHalfComplete+0x3e>
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <DMAHalfComplete+0x60>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <DMAHalfComplete+0x60>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0201 	bic.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER = (GPIOB->MODER & 0xFFFFFFCF) | 0x00000010;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <DMAHalfComplete+0x64>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <DMAHalfComplete+0x64>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20018c78 	.word	0x20018c78
 80013c4:	2001919c 	.word	0x2001919c
 80013c8:	48000400 	.word	0x48000400

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013d4:	e7fe      	b.n	80013d4 <Error_Handler+0x8>
	...

080013d8 <_ZN6GFX_HWC1Ev>:
#ifndef INC_GFX_HW_H_
#define INC_GFX_HW_H_

#include "main.h"

class GFX_HW {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <_ZN6GFX_HWC1Ev+0x1c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	0800a334 	.word	0x0800a334

080013f8 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>:
#include "GFX_HW.h"

class GFX_HW_PAR16: public GFX_HW {
public:

	GFX_HW_PAR16(
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	807b      	strh	r3, [r7, #2]
			GPIO_TypeDef *dataPort,
			GPIO_TypeDef *csPort, uint16_t csPin,
			GPIO_TypeDef *dcPort, uint16_t dcPin,
			GPIO_TypeDef *wrPort, uint16_t wrPin,
			GPIO_TypeDef *rdPort, uint16_t rdPin,
			GPIO_TypeDef *rsPort, uint16_t rsPin) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ffe5 	bl	80013d8 <_ZN6GFX_HWC1Ev>
 800140e:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t+0xb8>)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	601a      	str	r2, [r3, #0]

		_dataPort = dataPort;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	605a      	str	r2, [r3, #4]
		_csPort = csPort; _csPin = csPin;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	839a      	strh	r2, [r3, #28]
		_dcPort = dcPort; _dcPin = dcPin;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8bba      	ldrh	r2, [r7, #28]
 8001430:	83da      	strh	r2, [r3, #30]
		_wrPort = wrPort; _wrPin = wrPin;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a3a      	ldr	r2, [r7, #32]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800143c:	841a      	strh	r2, [r3, #32]
		_rdPort = rdPort; _rdPin = rdPin;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001448:	845a      	strh	r2, [r3, #34]	; 0x22
		_rsPort = rsPort; _rsPin = rsPin;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800144e:	619a      	str	r2, [r3, #24]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001454:	849a      	strh	r2, [r3, #36]	; 0x24
		high(_dcPort, _dcPin);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	68d9      	ldr	r1, [r3, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8bdb      	ldrh	r3, [r3, #30]
 800145e:	461a      	mov	r2, r3
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 fc74 	bl	8001d4e <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_csPort, _csPin);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8b9b      	ldrh	r3, [r3, #28]
 800146e:	461a      	mov	r2, r3
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 fc6c 	bl	8001d4e <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_wrPort, _wrPin);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6919      	ldr	r1, [r3, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8c1b      	ldrh	r3, [r3, #32]
 800147e:	461a      	mov	r2, r3
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 fc64 	bl	8001d4e <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rdPort, _rdPin);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6959      	ldr	r1, [r3, #20]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800148e:	461a      	mov	r2, r3
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fc5c 	bl	8001d4e <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
		high(_rsPort, _rsPin);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6999      	ldr	r1, [r3, #24]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800149e:	461a      	mov	r2, r3
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fc54 	bl	8001d4e <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>
	}
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800a2e8 	.word	0x0800a2e8

080014b4 <_ZN12GFX_HW_PAR165resetEm>:

	virtual void reset(uint32_t delay_us) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]

		high(_dcPort, _dcPin);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3338      	adds	r3, #56	; 0x38
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68d1      	ldr	r1, [r2, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	8bd2      	ldrh	r2, [r2, #30]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
		high(_csPort, _csPin);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3338      	adds	r3, #56	; 0x38
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6891      	ldr	r1, [r2, #8]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	8b92      	ldrh	r2, [r2, #28]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3338      	adds	r3, #56	; 0x38
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6911      	ldr	r1, [r2, #16]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	8c12      	ldrh	r2, [r2, #32]
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
		high(_rdPort, _rdPin);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3338      	adds	r3, #56	; 0x38
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6951      	ldr	r1, [r2, #20]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
		high(_rsPort, _rsPin);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3338      	adds	r3, #56	; 0x38
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6991      	ldr	r1, [r2, #24]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3

		low(_rsPort, _rsPin);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3334      	adds	r3, #52	; 0x34
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6991      	ldr	r1, [r2, #24]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
		MY_Delay1();
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
		high(_rsPort, _rsPin);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3338      	adds	r3, #56	; 0x38
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6991      	ldr	r1, [r2, #24]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4798      	blx	r3
	}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_ZN12GFX_HW_PAR1611sendCommandEhPKhh>:



	virtual void sendCommand(uint8_t commandByte, const uint8_t *dataBytes =
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	460b      	mov	r3, r1
 800156c:	72fb      	strb	r3, [r7, #11]
 800156e:	4613      	mov	r3, r2
 8001570:	72bb      	strb	r3, [r7, #10]
	NULL, uint8_t numDataBytes = 0) {
		MY_Delay();
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	333c      	adds	r3, #60	; 0x3c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	4798      	blx	r3
		low(_csPort, _csPin);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3334      	adds	r3, #52	; 0x34
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6891      	ldr	r1, [r2, #8]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	8b92      	ldrh	r2, [r2, #28]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	4798      	blx	r3
		MY_Delay();
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	333c      	adds	r3, #60	; 0x3c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	4798      	blx	r3
		low(_dcPort, _dcPin);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3334      	adds	r3, #52	; 0x34
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	68d1      	ldr	r1, [r2, #12]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	8bd2      	ldrh	r2, [r2, #30]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	4798      	blx	r3
		MY_Delay();
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	333c      	adds	r3, #60	; 0x3c
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	4798      	blx	r3
		low(_wrPort, _wrPin);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3334      	adds	r3, #52	; 0x34
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	6911      	ldr	r1, [r2, #16]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	8c12      	ldrh	r2, [r2, #32]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	7afa      	ldrb	r2, [r7, #11]
 80015d8:	615a      	str	r2, [r3, #20]
		MY_Delay();
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	333c      	adds	r3, #60	; 0x3c
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	4798      	blx	r3

		high(_wrPort, _wrPin);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3338      	adds	r3, #56	; 0x38
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	6911      	ldr	r1, [r2, #16]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	8c12      	ldrh	r2, [r2, #32]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	4798      	blx	r3
		MY_Delay();
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	333c      	adds	r3, #60	; 0x3c
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3338      	adds	r3, #56	; 0x38
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	68d1      	ldr	r1, [r2, #12]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	8bd2      	ldrh	r2, [r2, #30]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3324      	adds	r3, #36	; 0x24
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	7aba      	ldrb	r2, [r7, #10]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	4798      	blx	r3

		high(_csPort, _csPin);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3338      	adds	r3, #56	; 0x38
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	6891      	ldr	r1, [r2, #8]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	8b92      	ldrh	r2, [r2, #28]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	4798      	blx	r3
	}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZN12GFX_HW_PAR1613sendCommand16EtPKhh>:

	virtual void sendCommand16(uint16_t commandWord, const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	461a      	mov	r2, r3
 8001652:	460b      	mov	r3, r1
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	4613      	mov	r3, r2
 8001658:	727b      	strb	r3, [r7, #9]
		MY_Delay();
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	333c      	adds	r3, #60	; 0x3c
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	4798      	blx	r3
		low(_csPort, _csPin);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3334      	adds	r3, #52	; 0x34
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6891      	ldr	r1, [r2, #8]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	8b92      	ldrh	r2, [r2, #28]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	4798      	blx	r3
		MY_Delay();
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	333c      	adds	r3, #60	; 0x3c
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3334      	adds	r3, #52	; 0x34
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	68d1      	ldr	r1, [r2, #12]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	8bd2      	ldrh	r2, [r2, #30]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	897a      	ldrh	r2, [r7, #10]
 80016a0:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3334      	adds	r3, #52	; 0x34
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6911      	ldr	r1, [r2, #16]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	8c12      	ldrh	r2, [r2, #32]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	4798      	blx	r3
		MY_Delay();
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	333c      	adds	r3, #60	; 0x3c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3338      	adds	r3, #56	; 0x38
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	6911      	ldr	r1, [r2, #16]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	8c12      	ldrh	r2, [r2, #32]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	4798      	blx	r3

		MY_Delay();
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	333c      	adds	r3, #60	; 0x3c
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3338      	adds	r3, #56	; 0x38
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	68d1      	ldr	r1, [r2, #12]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	8bd2      	ldrh	r2, [r2, #30]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	4798      	blx	r3

		writeData(dataBytes, numDataBytes);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3324      	adds	r3, #36	; 0x24
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	7a7a      	ldrb	r2, [r7, #9]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	4798      	blx	r3

		high(_csPort, _csPin);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3338      	adds	r3, #56	; 0x38
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6891      	ldr	r1, [r2, #8]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	8b92      	ldrh	r2, [r2, #28]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	4798      	blx	r3
	}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_ZN12GFX_HW_PAR1613sendCommand16Ett>:

	virtual void sendCommand16(uint16_t commandWord, uint16_t data) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]

		MY_Delay1();
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3340      	adds	r3, #64	; 0x40
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
		low(_dcPort, _dcPin);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3334      	adds	r3, #52	; 0x34
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68d1      	ldr	r1, [r2, #12]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	8bd2      	ldrh	r2, [r2, #30]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
		MY_Delay1();
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3340      	adds	r3, #64	; 0x40
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
		low(_csPort, _csPin);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3334      	adds	r3, #52	; 0x34
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6891      	ldr	r1, [r2, #8]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	8b92      	ldrh	r2, [r2, #28]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
		MY_Delay1();
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3340      	adds	r3, #64	; 0x40
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3

		_dataPort->ODR = commandWord;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3334      	adds	r3, #52	; 0x34
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6911      	ldr	r1, [r2, #16]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	8c12      	ldrh	r2, [r2, #32]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
		MY_Delay1();
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3340      	adds	r3, #64	; 0x40
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3338      	adds	r3, #56	; 0x38
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6911      	ldr	r1, [r2, #16]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	8c12      	ldrh	r2, [r2, #32]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3

		MY_Delay1();
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3340      	adds	r3, #64	; 0x40
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3338      	adds	r3, #56	; 0x38
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68d1      	ldr	r1, [r2, #12]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	8bd2      	ldrh	r2, [r2, #30]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
		MY_Delay1();
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3340      	adds	r3, #64	; 0x40
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3

		_dataPort->ODR = data;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	883a      	ldrh	r2, [r7, #0]
 80017ec:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3334      	adds	r3, #52	; 0x34
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6911      	ldr	r1, [r2, #16]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	8c12      	ldrh	r2, [r2, #32]
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
		MY_Delay1();
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3340      	adds	r3, #64	; 0x40
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
		high(_wrPort, _wrPin);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3338      	adds	r3, #56	; 0x38
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6911      	ldr	r1, [r2, #16]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	8c12      	ldrh	r2, [r2, #32]
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3

		high(_csPort, _csPin);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3338      	adds	r3, #56	; 0x38
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6891      	ldr	r1, [r2, #8]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	8b92      	ldrh	r2, [r2, #28]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3338      	adds	r3, #56	; 0x38
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68d1      	ldr	r1, [r2, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	8bd2      	ldrh	r2, [r2, #30]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3

		MY_Delay();
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	333c      	adds	r3, #60	; 0x3c
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
	}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZN12GFX_HW_PAR1612readcommand8Ehh>:

	virtual uint8_t readcommand8(uint8_t commandByte, uint8_t index = 0) {
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	70fb      	strb	r3, [r7, #3]
 800186a:	4613      	mov	r3, r2
 800186c:	70bb      	strb	r3, [r7, #2]

		uint8_t result = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
		low(_dcPort, _dcPin);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3334      	adds	r3, #52	; 0x34
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68d1      	ldr	r1, [r2, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	8bd2      	ldrh	r2, [r2, #30]
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
		MY_Delay();
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	333c      	adds	r3, #60	; 0x3c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
		low(_csPort, _csPin);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3334      	adds	r3, #52	; 0x34
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6891      	ldr	r1, [r2, #8]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	8b92      	ldrh	r2, [r2, #28]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
		low(_wrPort, _wrPin);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3334      	adds	r3, #52	; 0x34
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6911      	ldr	r1, [r2, #16]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	8c12      	ldrh	r2, [r2, #32]
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	615a      	str	r2, [r3, #20]
		MY_Delay();
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	333c      	adds	r3, #60	; 0x3c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
		high(_wrPort, _wrPin);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3338      	adds	r3, #56	; 0x38
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6911      	ldr	r1, [r2, #16]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	8c12      	ldrh	r2, [r2, #32]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
		MY_Delay();
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	333c      	adds	r3, #60	; 0x3c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
		high(_dcPort, _dcPin);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3338      	adds	r3, #56	; 0x38
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68d1      	ldr	r1, [r2, #12]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	8bd2      	ldrh	r2, [r2, #30]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

		while(index > 0) {
 800190a:	78bb      	ldrb	r3, [r7, #2]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d027      	beq.n	8001960 <_ZN12GFX_HW_PAR1612readcommand8Ehh+0x102>

			MY_Delay();
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	333c      	adds	r3, #60	; 0x3c
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
			low(_rdPort, _rdPin);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3334      	adds	r3, #52	; 0x34
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6951      	ldr	r1, [r2, #20]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
			MY_Delay();
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	333c      	adds	r3, #60	; 0x3c
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4798      	blx	r3

			result = _dataPort->IDR & 0x00ff;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	73fb      	strb	r3, [r7, #15]
			index--;
 8001944:	78bb      	ldrb	r3, [r7, #2]
 8001946:	3b01      	subs	r3, #1
 8001948:	70bb      	strb	r3, [r7, #2]

			high(_rdPort, _rdPin);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3338      	adds	r3, #56	; 0x38
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6951      	ldr	r1, [r2, #20]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
		while(index > 0) {
 800195e:	e7d4      	b.n	800190a <_ZN12GFX_HW_PAR1612readcommand8Ehh+0xac>
		}

		high(_csPort, _csPin);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3338      	adds	r3, #56	; 0x38
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6891      	ldr	r1, [r2, #8]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	8b92      	ldrh	r2, [r2, #28]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
		MY_Delay();
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	333c      	adds	r3, #60	; 0x3c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
		_dataPort->MODER = 0x5555;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f245 5255 	movw	r2, #21845	; 0x5555
 8001988:	601a      	str	r2, [r3, #0]

		return result;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
	}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN12GFX_HW_PAR1613readcommand16Eh>:

	virtual uint16_t readcommand16(uint8_t commandByte) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]

		uint16_t result = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	81fb      	strh	r3, [r7, #14]
		low(_dcPort, _dcPin);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3334      	adds	r3, #52	; 0x34
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68d1      	ldr	r1, [r2, #12]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	8bd2      	ldrh	r2, [r2, #30]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
		MY_Delay();
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	333c      	adds	r3, #60	; 0x3c
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
		low(_csPort, _csPin);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3334      	adds	r3, #52	; 0x34
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6891      	ldr	r1, [r2, #8]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	8b92      	ldrh	r2, [r2, #28]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
		low(_wrPort, _wrPin);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3334      	adds	r3, #52	; 0x34
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6911      	ldr	r1, [r2, #16]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	8c12      	ldrh	r2, [r2, #32]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3

		_dataPort->ODR = commandByte & 0x00ff;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	615a      	str	r2, [r3, #20]
		MY_Delay();
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	333c      	adds	r3, #60	; 0x3c
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3338      	adds	r3, #56	; 0x38
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6911      	ldr	r1, [r2, #16]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	8c12      	ldrh	r2, [r2, #32]
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
		MY_Delay();
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	333c      	adds	r3, #60	; 0x3c
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3338      	adds	r3, #56	; 0x38
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68d1      	ldr	r1, [r2, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	8bd2      	ldrh	r2, [r2, #30]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
		MY_Delay();
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	333c      	adds	r3, #60	; 0x3c
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3

		_dataPort->MODER = 0x00;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

		MY_Delay();
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	333c      	adds	r3, #60	; 0x3c
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
		low(_rdPort, _rdPin);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3334      	adds	r3, #52	; 0x34
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6951      	ldr	r1, [r2, #20]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
		MY_Delay();
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	333c      	adds	r3, #60	; 0x3c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3

		result = _dataPort->IDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	81fb      	strh	r3, [r7, #14]

		high(_rdPort, _rdPin);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3338      	adds	r3, #56	; 0x38
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6951      	ldr	r1, [r2, #20]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
		high(_csPort, _csPin);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6891      	ldr	r1, [r2, #8]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	8b92      	ldrh	r2, [r2, #28]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
		MY_Delay();
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	333c      	adds	r3, #60	; 0x3c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
		_dataPort->MODER = 0x55555555;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001ab8:	601a      	str	r2, [r3, #0]

		return result;
 8001aba:	89fb      	ldrh	r3, [r7, #14]
	}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_ZN12GFX_HW_PAR1612beginCommandEv>:

	virtual void beginCommand() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
		MY_Delay();
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	333c      	adds	r3, #60	; 0x3c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
		low(_dcPort, _dcPin);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3334      	adds	r3, #52	; 0x34
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68d1      	ldr	r1, [r2, #12]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	8bd2      	ldrh	r2, [r2, #30]
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
		MY_Delay();
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	333c      	adds	r3, #60	; 0x3c
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
		low(_csPort, _csPin);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3334      	adds	r3, #52	; 0x34
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6891      	ldr	r1, [r2, #8]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	8b92      	ldrh	r2, [r2, #28]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
		MY_Delay();
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	333c      	adds	r3, #60	; 0x3c
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
	}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZN12GFX_HW_PAR1612writeCommandEh>:

	virtual void writeCommand(uint8_t commandByte) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
		low(_dcPort, _dcPin);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3334      	adds	r3, #52	; 0x34
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68d1      	ldr	r1, [r2, #12]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	8bd2      	ldrh	r2, [r2, #30]
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
		MY_Delay();
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	333c      	adds	r3, #60	; 0x3c
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
		write(commandByte);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3328      	adds	r3, #40	; 0x28
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	4611      	mov	r1, r2
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3338      	adds	r3, #56	; 0x38
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68d1      	ldr	r1, [r2, #12]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	8bd2      	ldrh	r2, [r2, #30]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
		MY_Delay();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	333c      	adds	r3, #60	; 0x3c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
	}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZN12GFX_HW_PAR1614writeCommand16Et>:

	virtual void writeCommand16(uint16_t commandWord) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
		low(_wrPort, _wrPin);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3334      	adds	r3, #52	; 0x34
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6911      	ldr	r1, [r2, #16]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	8c12      	ldrh	r2, [r2, #32]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
		_dataPort->ODR = commandWord;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	887a      	ldrh	r2, [r7, #2]
 8001baa:	615a      	str	r2, [r3, #20]
		MY_Delay();
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	333c      	adds	r3, #60	; 0x3c
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
		high(_wrPort, _wrPin);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3338      	adds	r3, #56	; 0x38
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6911      	ldr	r1, [r2, #16]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	8c12      	ldrh	r2, [r2, #32]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3

		MY_Delay();
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	333c      	adds	r3, #60	; 0x3c
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3338      	adds	r3, #56	; 0x38
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68d1      	ldr	r1, [r2, #12]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	8bd2      	ldrh	r2, [r2, #30]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
		MY_Delay();
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	333c      	adds	r3, #60	; 0x3c
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
	}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_ZN12GFX_HW_PAR169writeDataEPKhh>:

	virtual void writeData(const uint8_t *dataBytes = NULL, uint8_t numDataBytes = 0) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	71fb      	strb	r3, [r7, #7]

		while(numDataBytes > 0) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d02a      	beq.n	8001c6a <_ZN12GFX_HW_PAR169writeDataEPKhh+0x6a>
			MY_Delay();
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	333c      	adds	r3, #60	; 0x3c
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	4798      	blx	r3

			low(_wrPort, _wrPin);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3334      	adds	r3, #52	; 0x34
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	6911      	ldr	r1, [r2, #16]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	8c12      	ldrh	r2, [r2, #32]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	4798      	blx	r3

			_dataPort->ODR = *dataBytes++ & 0x00ff;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	615a      	str	r2, [r3, #20]
			numDataBytes--;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	71fb      	strb	r3, [r7, #7]

			MY_Delay();
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	333c      	adds	r3, #60	; 0x3c
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	4798      	blx	r3
			high(_wrPort, _wrPin);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3338      	adds	r3, #56	; 0x38
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	6911      	ldr	r1, [r2, #16]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	8c12      	ldrh	r2, [r2, #32]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	4798      	blx	r3
		while(numDataBytes > 0) {
 8001c68:	e7d1      	b.n	8001c0e <_ZN12GFX_HW_PAR169writeDataEPKhh+0xe>
		}
	}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZN12GFX_HW_PAR165writeEh>:

	virtual void write(uint8_t data) {
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
		writeData(&data, 1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3324      	adds	r3, #36	; 0x24
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1cf9      	adds	r1, r7, #3
 8001c88:	2201      	movs	r2, #1
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
	}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZN12GFX_HW_PAR167write16Et>:

	virtual void write16(uint16_t data) {
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]
		_dataPort->ODR = data;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	615a      	str	r2, [r3, #20]
		low(_wrPort, _wrPin);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3334      	adds	r3, #52	; 0x34
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6911      	ldr	r1, [r2, #16]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	8c12      	ldrh	r2, [r2, #32]
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
		__NOP();
 8001cbe:	bf00      	nop
		__NOP();
 8001cc0:	bf00      	nop
		__NOP();
 8001cc2:	bf00      	nop
		__NOP();
 8001cc4:	bf00      	nop
		__NOP();
 8001cc6:	bf00      	nop
		__NOP();
 8001cc8:	bf00      	nop
		high(_wrPort, _wrPin);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3338      	adds	r3, #56	; 0x38
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6911      	ldr	r1, [r2, #16]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	8c12      	ldrh	r2, [r2, #32]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
		__NOP();
 8001cde:	bf00      	nop
		__NOP();
 8001ce0:	bf00      	nop
		__NOP();
 8001ce2:	bf00      	nop
		__NOP();
 8001ce4:	bf00      	nop
		__NOP();
 8001ce6:	bf00      	nop
		__NOP();
 8001ce8:	bf00      	nop
		__NOP();
 8001cea:	bf00      	nop
		__NOP();
 8001cec:	bf00      	nop
	}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZN12GFX_HW_PAR163endEv>:

	virtual void end() {
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
		high(_csPort, _csPin);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6891      	ldr	r1, [r2, #8]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	8b92      	ldrh	r2, [r2, #28]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
		high(_dcPort, _dcPin);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3338      	adds	r3, #56	; 0x38
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68d1      	ldr	r1, [r2, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	8bd2      	ldrh	r2, [r2, #30]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
	}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN12GFX_HW_PAR163lowEP12GPIO_TypeDeft>:

	virtual inline void low(GPIO_TypeDef *port, uint16_t pin) {
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]
		port->BRR = (uint32_t)pin;
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_ZN12GFX_HW_PAR164highEP12GPIO_TypeDeft>:

	virtual inline void high(GPIO_TypeDef *port, uint16_t pin) {
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
		port->BSRR = (uint32_t)pin;
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	619a      	str	r2, [r3, #24]
	}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_ZN12GFX_HW_PAR168MY_DelayEv>:

	virtual void MY_Delay() {
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
		__NOP();
 8001d76:	bf00      	nop
	}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_ZN12GFX_HW_PAR169MY_Delay1Ev>:

	virtual void MY_Delay1() {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
		__NOP();
 8001d8c:	bf00      	nop
	}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_ZN3GFXC1ER6GFX_HW>:
#endif

class GFX {
public:

	GFX(GFX_HW &hw) : _hw(hw) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <_ZN3GFXC1ER6GFX_HW+0x24>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	605a      	str	r2, [r3, #4]
	}
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	0800a2c4 	.word	0x0800a2c4

08001dc4 <_ZN11GFX_ILI9325C1ER6GFX_HW>:
// clang-format on

class GFX_ILI9325: public GFX {
public:

	GFX_ILI9325(GFX_HW &hw) :
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
			GFX(hw) {
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffe2 	bl	8001d9c <_ZN3GFXC1ER6GFX_HW>
 8001dd8:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_ZN11GFX_ILI9325C1ER6GFX_HW+0x2c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	731a      	strb	r2, [r3, #12]
	}
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	0800a2a0 	.word	0x0800a2a0

08001df4 <_ZN11GFX_ILI93254initEv>:

	virtual void init() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

		uint16_t a, d, i;
		i = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	81fb      	strh	r3, [r7, #14]

		_hw.reset(300);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e10:	4610      	mov	r0, r2
 8001e12:	4798      	blx	r3
		HAL_Delay(30);
 8001e14:	201e      	movs	r0, #30
 8001e16:	f001 fbb1 	bl	800357c <HAL_Delay>

		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8001e1a:	89fb      	ldrh	r3, [r7, #14]
 8001e1c:	2b65      	cmp	r3, #101	; 0x65
 8001e1e:	d826      	bhi.n	8001e6e <_ZN11GFX_ILI93254initEv+0x7a>
			a = ILI932x_regValues[i++];
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	81fa      	strh	r2, [r7, #14]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <_ZN11GFX_ILI93254initEv+0x90>)
 8001e2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e2e:	81bb      	strh	r3, [r7, #12]
			d = ILI932x_regValues[i++];
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	81fa      	strh	r2, [r7, #14]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <_ZN11GFX_ILI93254initEv+0x90>)
 8001e3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e3e:	817b      	strh	r3, [r7, #10]
			if (a == TFTLCD_DELAY)
 8001e40:	89bb      	ldrh	r3, [r7, #12]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d105      	bne.n	8001e52 <_ZN11GFX_ILI93254initEv+0x5e>
				HAL_Delay(d * 4);
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 fb96 	bl	800357c <HAL_Delay>
 8001e50:	e009      	b.n	8001e66 <_ZN11GFX_ILI93254initEv+0x72>
			else
				_hw.sendCommand16(a, d);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6858      	ldr	r0, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	89b9      	ldrh	r1, [r7, #12]
 8001e64:	4798      	blx	r3
			HAL_Delay(10);
 8001e66:	200a      	movs	r0, #10
 8001e68:	f001 fb88 	bl	800357c <HAL_Delay>
		while (i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
 8001e6c:	e7d5      	b.n	8001e1a <_ZN11GFX_ILI93254initEv+0x26>
		}

		//uint16_t r = _hw.readcommand16(0);

		_width = ILI9325_TFTWIDTH;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e74:	811a      	strh	r2, [r3, #8]
		_height = ILI9325_TFTHEIGHT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	22f0      	movs	r2, #240	; 0xf0
 8001e7a:	815a      	strh	r2, [r3, #10]
	}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	0800a1cc 	.word	0x0800a1cc

08001e88 <_ZN11GFX_ILI93253clsEv>:

	virtual void cls() {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

	}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_ZN11GFX_ILI932511setRotationEh>:

	virtual void setRotation(uint8_t m) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
		_rotation = m % 4; // can't be higher than 3
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	731a      	strb	r2, [r3, #12]

		uint16_t cmd = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	81fb      	strh	r3, [r7, #14]

		switch (_rotation) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7b1b      	ldrb	r3, [r3, #12]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d837      	bhi.n	8001f30 <_ZN11GFX_ILI932511setRotationEh+0x94>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <_ZN11GFX_ILI932511setRotationEh+0x2c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08001eef 	.word	0x08001eef
 8001ed0:	08001f05 	.word	0x08001f05
 8001ed4:	08001f1b 	.word	0x08001f1b
		case 0:
			cmd = 0x1030;
 8001ed8:	f241 0330 	movw	r3, #4144	; 0x1030
 8001edc:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee4:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	22f0      	movs	r2, #240	; 0xf0
 8001eea:	815a      	strh	r2, [r3, #10]
			break;
 8001eec:	e020      	b.n	8001f30 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 1:
			cmd = 0x1028;
 8001eee:	f241 0328 	movw	r3, #4136	; 0x1028
 8001ef2:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	22f0      	movs	r2, #240	; 0xf0
 8001ef8:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f00:	815a      	strh	r2, [r3, #10]
			break;
 8001f02:	e015      	b.n	8001f30 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 2:
			cmd = 0x1000;
 8001f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f08:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTWIDTH;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f10:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTHEIGHT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	22f0      	movs	r2, #240	; 0xf0
 8001f16:	815a      	strh	r2, [r3, #10]
			break;
 8001f18:	e00a      	b.n	8001f30 <_ZN11GFX_ILI932511setRotationEh+0x94>
		case 3:
			cmd = 0x1018;
 8001f1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f1e:	81fb      	strh	r3, [r7, #14]
			_width = ILI9325_TFTHEIGHT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	22f0      	movs	r2, #240	; 0xf0
 8001f24:	811a      	strh	r2, [r3, #8]
			_height = ILI9325_TFTWIDTH;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f2c:	815a      	strh	r2, [r3, #10]
			break;
 8001f2e:	bf00      	nop
		}

		_hw.sendCommand16(ILI932X_ENTRY_MOD, cmd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6858      	ldr	r0, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	330c      	adds	r3, #12
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	89fa      	ldrh	r2, [r7, #14]
 8001f40:	2103      	movs	r1, #3
 8001f42:	4798      	blx	r3
		HAL_Delay(10);
 8001f44:	200a      	movs	r0, #10
 8001f46:	f001 fb19 	bl	800357c <HAL_Delay>
	}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop

08001f54 <_ZN11GFX_ILI932516setAddressWindowEtttt>:

	virtual void setAddressWindow(uint16_t left, uint16_t top, uint16_t width,
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	817b      	strh	r3, [r7, #10]
 8001f66:	460b      	mov	r3, r1
 8001f68:	813b      	strh	r3, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
			uint16_t height) {

		uint16_t t, l, w, h;

		switch (_rotation) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	7b1b      	ldrb	r3, [r3, #12]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d84c      	bhi.n	8002010 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbc>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <_ZN11GFX_ILI932516setAddressWindowEtttt+0x28>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001f9f 	.word	0x08001f9f
 8001f84:	08001fc9 	.word	0x08001fc9
 8001f88:	08001ff3 	.word	0x08001ff3
		case 0: // (0,0) is top left
			t = top;
 8001f8c:	893b      	ldrh	r3, [r7, #8]
 8001f8e:	82fb      	strh	r3, [r7, #22]
			l = left;
 8001f90:	897b      	ldrh	r3, [r7, #10]
 8001f92:	82bb      	strh	r3, [r7, #20]
			w = width;
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	827b      	strh	r3, [r7, #18]
			h = height;
 8001f98:	8c3b      	ldrh	r3, [r7, #32]
 8001f9a:	823b      	strh	r3, [r7, #16]
			break;
 8001f9c:	e039      	b.n	8002012 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 1: // (0,0) is top right - portrait
			t = _height - (left + width);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	895a      	ldrh	r2, [r3, #10]
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	82fb      	strh	r3, [r7, #22]
			l = _width - (top + height);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	891a      	ldrh	r2, [r3, #8]
 8001fb2:	8939      	ldrh	r1, [r7, #8]
 8001fb4:	8c3b      	ldrh	r3, [r7, #32]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	82bb      	strh	r3, [r7, #20]
			w = height;
 8001fbe:	8c3b      	ldrh	r3, [r7, #32]
 8001fc0:	827b      	strh	r3, [r7, #18]
			h = width;
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	823b      	strh	r3, [r7, #16]
			break;
 8001fc6:	e024      	b.n	8002012 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 2:
			t = _height - (top + height);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	895a      	ldrh	r2, [r3, #10]
 8001fcc:	8939      	ldrh	r1, [r7, #8]
 8001fce:	8c3b      	ldrh	r3, [r7, #32]
 8001fd0:	440b      	add	r3, r1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	82fb      	strh	r3, [r7, #22]
			l = _width - (left + width);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	891a      	ldrh	r2, [r3, #8]
 8001fdc:	8979      	ldrh	r1, [r7, #10]
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	82bb      	strh	r3, [r7, #20]
			w = width;
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	827b      	strh	r3, [r7, #18]
			h = height;
 8001fec:	8c3b      	ldrh	r3, [r7, #32]
 8001fee:	823b      	strh	r3, [r7, #16]
			break;
 8001ff0:	e00f      	b.n	8002012 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		case 3:
			t = _height - (left + width);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	895a      	ldrh	r2, [r3, #10]
 8001ff6:	8979      	ldrh	r1, [r7, #10]
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	82fb      	strh	r3, [r7, #22]
			l = top;
 8002002:	893b      	ldrh	r3, [r7, #8]
 8002004:	82bb      	strh	r3, [r7, #20]
			w = height;
 8002006:	8c3b      	ldrh	r3, [r7, #32]
 8002008:	827b      	strh	r3, [r7, #18]
			h = width;
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	823b      	strh	r3, [r7, #16]
			break;
 800200e:	e000      	b.n	8002012 <_ZN11GFX_ILI932516setAddressWindowEtttt+0xbe>
		default:
			break;
 8002010:	bf00      	nop

		}

		_hw.sendCommand16(ILI932X_HOR_START_AD, l);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6858      	ldr	r0, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	330c      	adds	r3, #12
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	8aba      	ldrh	r2, [r7, #20]
 8002022:	2150      	movs	r1, #80	; 0x50
 8002024:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_HOR_END_AD, l + w - 1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6858      	ldr	r0, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	330c      	adds	r3, #12
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	8ab9      	ldrh	r1, [r7, #20]
 8002036:	8a7a      	ldrh	r2, [r7, #18]
 8002038:	440a      	add	r2, r1
 800203a:	b292      	uxth	r2, r2
 800203c:	3a01      	subs	r2, #1
 800203e:	b292      	uxth	r2, r2
 8002040:	2151      	movs	r1, #81	; 0x51
 8002042:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_VER_START_AD, t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6858      	ldr	r0, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	330c      	adds	r3, #12
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	8afa      	ldrh	r2, [r7, #22]
 8002054:	2152      	movs	r1, #82	; 0x52
 8002056:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_VER_END_AD, t + h - 1);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6858      	ldr	r0, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	330c      	adds	r3, #12
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	8af9      	ldrh	r1, [r7, #22]
 8002068:	8a3a      	ldrh	r2, [r7, #16]
 800206a:	440a      	add	r2, r1
 800206c:	b292      	uxth	r2, r2
 800206e:	3a01      	subs	r2, #1
 8002070:	b292      	uxth	r2, r2
 8002072:	2153      	movs	r1, #83	; 0x53
 8002074:	4798      	blx	r3

		_hw.sendCommand16(ILI932X_GRAM_HOR_AD, l);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6858      	ldr	r0, [r3, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	8aba      	ldrh	r2, [r7, #20]
 8002086:	2120      	movs	r1, #32
 8002088:	4798      	blx	r3
		_hw.sendCommand16(ILI932X_GRAM_VER_AD, t);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6858      	ldr	r0, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	8afa      	ldrh	r2, [r7, #22]
 800209a:	2121      	movs	r1, #33	; 0x21
 800209c:	4798      	blx	r3

		_hw.beginCommand();
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3318      	adds	r3, #24
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3320      	adds	r3, #32
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2122      	movs	r1, #34	; 0x22
 80020c0:	4610      	mov	r0, r2
 80020c2:	4798      	blx	r3
	}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZN11GFX_ILI93259drawPixelEttt>:

	virtual void drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	817b      	strh	r3, [r7, #10]
 80020de:	460b      	mov	r3, r1
 80020e0:	813b      	strh	r3, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
		setAddressWindow(x, y, 1, 1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	681c      	ldr	r4, [r3, #0]
 80020ee:	893a      	ldrh	r2, [r7, #8]
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	47a0      	blx	r4
		_hw.beginCommand();
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3318      	adds	r3, #24
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
		_hw.writeCommand16(ILI932X_RW_GRAM);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3320      	adds	r3, #32
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2122      	movs	r1, #34	; 0x22
 800211e:	4610      	mov	r0, r2
 8002120:	4798      	blx	r3
		pushPixel(color);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3314      	adds	r3, #20
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	4611      	mov	r1, r2
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	4798      	blx	r3
		_hw.end();
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3330      	adds	r3, #48	; 0x30
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4610      	mov	r0, r2
 8002142:	4798      	blx	r3
	}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bd90      	pop	{r4, r7, pc}

0800214c <_ZN11GFX_ILI93259pushPixelEt>:

	virtual inline void pushPixel(uint16_t color) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
		_hw.write16(color);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	332c      	adds	r3, #44	; 0x2c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	8879      	ldrh	r1, [r7, #2]
 8002168:	4610      	mov	r0, r2
 800216a:	4798      	blx	r3
	}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN11GFX_ILI93253endEv>:

	virtual void end() {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
		_hw.end();
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3330      	adds	r3, #48	; 0x30
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4610      	mov	r0, r2
 800218c:	4798      	blx	r3
		_hw.readcommand16(ILI932X_GRAM_HOR_AD);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3314      	adds	r3, #20
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2120      	movs	r1, #32
 800219e:	4610      	mov	r0, r2
 80021a0:	4798      	blx	r3
	}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <mysetup>:
	void startDMA();

	void pushpixel(uint16_t c);
}

void mysetup() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af02      	add	r7, sp, #8
	tft.init();
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <mysetup+0x58>)
 80021b4:	f7ff fe1e 	bl	8001df4 <_ZN11GFX_ILI93254initEv>
	tft.setRotation(3);
 80021b8:	2103      	movs	r1, #3
 80021ba:	4812      	ldr	r0, [pc, #72]	; (8002204 <mysetup+0x58>)
 80021bc:	f7ff fe6e 	bl	8001e9c <_ZN11GFX_ILI932511setRotationEh>
	HAL_Delay(10);
 80021c0:	200a      	movs	r0, #10
 80021c2:	f001 f9db 	bl	800357c <HAL_Delay>
	tft.setAddressWindow(0,0,320,240);
 80021c6:	23f0      	movs	r3, #240	; 0xf0
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	480c      	ldr	r0, [pc, #48]	; (8002204 <mysetup+0x58>)
 80021d4:	f7ff febe 	bl	8001f54 <_ZN11GFX_ILI932516setAddressWindowEtttt>
	HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f001 f9cf 	bl	800357c <HAL_Delay>
	for(int i=0; i<(320*240); i++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80021e8:	da08      	bge.n	80021fc <mysetup+0x50>

		tft.pushPixel(0xffff);
 80021ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <mysetup+0x58>)
 80021f0:	f7ff ffac 	bl	800214c <_ZN11GFX_ILI93259pushPixelEt>
	for(int i=0; i<(320*240); i++) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	e7f2      	b.n	80021e2 <mysetup+0x36>
	}
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20018ca4 	.word	0x20018ca4

08002208 <setLeftWindow>:
#define MAP(R,G,B) (((R & 0xf8) << 8) | ((G & 0xfc) << 3) | ((B & 0xF8) >> 3))
void setLeftWindow() {
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b090      	sub	sp, #64	; 0x40
 800220c:	af02      	add	r7, sp, #8
	uint16_t rgbMap[17] = { MAP(0, 0, 0), MAP(0, 0, 0), MAP(0, 0, 0), MAP(33, 200,
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <setLeftWindow+0xb4>)
 8002210:	1d3c      	adds	r4, r7, #4
 8002212:	461d      	mov	r5, r3
 8002214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800221a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	8023      	strh	r3, [r4, #0]
			66), MAP(94, 220, 120), MAP(84, 85, 237), MAP(125, 118, 252), MAP(212,
			82, 77), MAP(66, 235, 245), MAP(252, 85, 84), MAP(255, 121, 120), MAP(
			212, 193, 84), MAP(230, 206, 128), MAP(33, 176, 59), MAP(201, 91, 186),
			MAP(204, 204, 204), MAP(255, 255, 255) };

	tft.setAddressWindow(10,30,10,160);
 8002220:	23a0      	movs	r3, #160	; 0xa0
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	230a      	movs	r3, #10
 8002226:	221e      	movs	r2, #30
 8002228:	210a      	movs	r1, #10
 800222a:	4825      	ldr	r0, [pc, #148]	; (80022c0 <setLeftWindow+0xb8>)
 800222c:	f7ff fe92 	bl	8001f54 <_ZN11GFX_ILI932516setAddressWindowEtttt>


	// write the colors as blocks down the left
	for(int i=0; i<15; i++) {
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	2b0e      	cmp	r3, #14
 8002238:	dc3a      	bgt.n	80022b0 <setLeftWindow+0xa8>
		uint16_t color = rgbMap[i+1];
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	3301      	adds	r3, #1
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	3338      	adds	r3, #56	; 0x38
 8002242:	443b      	add	r3, r7
 8002244:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8002248:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int y=0; y<8;y++) {
 800224a:	2300      	movs	r3, #0
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	2b07      	cmp	r3, #7
 8002252:	dc1b      	bgt.n	800228c <setLeftWindow+0x84>
			// fill the gaps
			tft.pushPixel(0xffff);
 8002254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002258:	4819      	ldr	r0, [pc, #100]	; (80022c0 <setLeftWindow+0xb8>)
 800225a:	f7ff ff77 	bl	800214c <_ZN11GFX_ILI93259pushPixelEt>
			tft.pushPixel(0xffff);
 800225e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002262:	4817      	ldr	r0, [pc, #92]	; (80022c0 <setLeftWindow+0xb8>)
 8002264:	f7ff ff72 	bl	800214c <_ZN11GFX_ILI93259pushPixelEt>
			for(int x=0; x<8; x++) {
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	2b07      	cmp	r3, #7
 8002270:	dc08      	bgt.n	8002284 <setLeftWindow+0x7c>
				tft.pushPixel(color);
 8002272:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002274:	4619      	mov	r1, r3
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <setLeftWindow+0xb8>)
 8002278:	f7ff ff68 	bl	800214c <_ZN11GFX_ILI93259pushPixelEt>
			for(int x=0; x<8; x++) {
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	3301      	adds	r3, #1
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002282:	e7f3      	b.n	800226c <setLeftWindow+0x64>
		for(int y=0; y<8;y++) {
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	3301      	adds	r3, #1
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
 800228a:	e7e0      	b.n	800224e <setLeftWindow+0x46>
			}

		}

		for(int z = 0; z<20; z++) {
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	2b13      	cmp	r3, #19
 8002294:	dc08      	bgt.n	80022a8 <setLeftWindow+0xa0>
			tft.pushPixel(0xffff);
 8002296:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800229a:	4809      	ldr	r0, [pc, #36]	; (80022c0 <setLeftWindow+0xb8>)
 800229c:	f7ff ff56 	bl	800214c <_ZN11GFX_ILI93259pushPixelEt>
		for(int z = 0; z<20; z++) {
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	3301      	adds	r3, #1
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a6:	e7f3      	b.n	8002290 <setLeftWindow+0x88>
	for(int i=0; i<15; i++) {
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	3301      	adds	r3, #1
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
 80022ae:	e7c1      	b.n	8002234 <setLeftWindow+0x2c>
		}
	}

	vsync();
 80022b0:	f000 f808 	bl	80022c4 <vsync>
}
 80022b4:	bf00      	nop
 80022b6:	3738      	adds	r7, #56	; 0x38
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bdb0      	pop	{r4, r5, r7, pc}
 80022bc:	0800a1a8 	.word	0x0800a1a8
 80022c0:	20018ca4 	.word	0x20018ca4

080022c4 <vsync>:

void vsync() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af02      	add	r7, sp, #8
	tft.end();
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <vsync+0x24>)
 80022cc:	f7ff ff52 	bl	8002174 <_ZN11GFX_ILI93253endEv>
	tft.setAddressWindow((320-256)/2,(240-192)/2, 256, 192);
 80022d0:	23c0      	movs	r3, #192	; 0xc0
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	2218      	movs	r2, #24
 80022da:	2120      	movs	r1, #32
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <vsync+0x24>)
 80022de:	f7ff fe39 	bl	8001f54 <_ZN11GFX_ILI932516setAddressWindowEtttt>
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20018ca4 	.word	0x20018ca4

080022ec <_Z41__static_initialization_and_destruction_0ii>:

}

void pushpixel(uint16_t c) {
	tft.pushPixel(c);
}
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af08      	add	r7, sp, #32
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d122      	bne.n	8002342 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002302:	4293      	cmp	r3, r2
 8002304:	d11d      	bne.n	8002342 <_Z41__static_initialization_and_destruction_0ii+0x56>
GFX_HW_PAR16 hwspi = GFX_HW_PAR16(GPIOC,
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	9307      	str	r3, [sp, #28]
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800230e:	9306      	str	r3, [sp, #24]
 8002310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002318:	9304      	str	r3, [sp, #16]
 800231a:	2304      	movs	r3, #4
 800231c:	9303      	str	r3, [sp, #12]
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002330:	4a06      	ldr	r2, [pc, #24]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002332:	4907      	ldr	r1, [pc, #28]	; (8002350 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002334:	4807      	ldr	r0, [pc, #28]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002336:	f7ff f85f 	bl	80013f8 <_ZN12GFX_HW_PAR16C1EP12GPIO_TypeDefS1_tS1_tS1_tS1_tS1_t>
GFX_ILI9325 tft = GFX_ILI9325(hwspi);
 800233a:	4906      	ldr	r1, [pc, #24]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800233e:	f7ff fd41 	bl	8001dc4 <_ZN11GFX_ILI9325C1ER6GFX_HW>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	20018c7c 	.word	0x20018c7c
 8002358:	20018ca4 	.word	0x20018ca4

0800235c <_GLOBAL__sub_I_hwspi>:
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
 8002360:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002364:	2001      	movs	r0, #1
 8002366:	f7ff ffc1 	bl	80022ec <_Z41__static_initialization_and_destruction_0ii>
 800236a:	bd80      	pop	{r7, pc}

0800236c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_SPI1_Init+0x74>)
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <MX_SPI1_Init+0x78>)
 8002374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_SPI1_Init+0x74>)
 8002378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800237c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_SPI1_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_SPI1_Init+0x74>)
 8002386:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800238a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <MX_SPI1_Init+0x74>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_SPI1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <MX_SPI1_Init+0x74>)
 800239a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023a2:	2208      	movs	r2, #8
 80023a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023ba:	2207      	movs	r2, #7
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023c6:	2208      	movs	r2, #8
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_SPI1_Init+0x74>)
 80023cc:	f005 f8e4 	bl	8007598 <HAL_SPI_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023d6:	f7fe fff9 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20018cb4 	.word	0x20018cb4
 80023e4:	40013000 	.word	0x40013000

080023e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a42      	ldr	r2, [pc, #264]	; (8002510 <HAL_SPI_MspInit+0x128>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d17e      	bne.n	8002508 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	4a41      	ldr	r2, [pc, #260]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002414:	6613      	str	r3, [r2, #96]	; 0x60
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002446:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_SPI_MspInit+0x12c>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002462:	2305      	movs	r3, #5
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002470:	f003 fede 	bl	8006230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002474:	2308      	movs	r3, #8
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002484:	2305      	movs	r3, #5
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4822      	ldr	r0, [pc, #136]	; (8002518 <HAL_SPI_MspInit+0x130>)
 8002490:	f003 fece 	bl	8006230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002494:	2310      	movs	r3, #16
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a4:	2305      	movs	r3, #5
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	481a      	ldr	r0, [pc, #104]	; (8002518 <HAL_SPI_MspInit+0x130>)
 80024b0:	f003 febe 	bl	8006230 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024b6:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <HAL_SPI_MspInit+0x138>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024bc:	220b      	movs	r2, #11
 80024be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024c2:	2210      	movs	r2, #16
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024ec:	480b      	ldr	r0, [pc, #44]	; (800251c <HAL_SPI_MspInit+0x134>)
 80024ee:	f003 fb39 	bl	8005b64 <HAL_DMA_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 80024f8:	f7fe ff68 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_SPI_MspInit+0x134>)
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_SPI_MspInit+0x134>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002508:	bf00      	nop
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40013000 	.word	0x40013000
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400
 800251c:	20018d40 	.word	0x20018d40
 8002520:	4002001c 	.word	0x4002001c

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_MspInit+0x44>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <HAL_MspInit+0x44>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6613      	str	r3, [r2, #96]	; 0x60
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_MspInit+0x44>)
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_MspInit+0x44>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_MspInit+0x44>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_MspInit+0x44>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002570:	f004 fd62 	bl	8007038 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <NMI_Handler+0x8>

08002576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <HardFault_Handler+0x4>

0800257c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <MemManage_Handler+0x4>

08002582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <BusFault_Handler+0x4>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <UsageFault_Handler+0x4>

0800258e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025bc:	f000 ffc0 	bl	8003540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <DMA1_Channel1_IRQHandler+0x10>)
 80025ca:	f003 fc47 	bl	8005e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200001e4 	.word	0x200001e4

080025d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <DMA1_Channel2_IRQHandler+0x10>)
 80025de:	f003 fc3d 	bl	8005e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20018d40 	.word	0x20018d40

080025ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80025f2:	f005 fd3b 	bl	800806c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20018da0 	.word	0x20018da0

08002600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <TIM3_IRQHandler+0x10>)
 8002606:	f005 fd31 	bl	800806c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20018f38 	.word	0x20018f38

08002614 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim20_ch1);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMA2_Channel1_IRQHandler+0x10>)
 800261a:	f003 fc1f 	bl	8005e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20019400 	.word	0x20019400

08002628 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMAMUX_OVR_IRQHandler+0x10>)
 800262e:	f003 fdad 	bl	800618c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200001e4 	.word	0x200001e4

0800263c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	return 1;
 8002640:	2301      	movs	r3, #1
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_kill>:

int _kill(int pid, int sig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002656:	f007 fce5 	bl	800a024 <__errno>
 800265a:	4603      	mov	r3, r0
 800265c:	2216      	movs	r2, #22
 800265e:	601a      	str	r2, [r3, #0]
	return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_exit>:

void _exit (int status)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffe7 	bl	800264c <_kill>
	while (1) {}		/* Make sure we hang here */
 800267e:	e7fe      	b.n	800267e <_exit+0x12>

08002680 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim20;
DMA_HandleTypeDef hdma_tim20_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b0a0      	sub	sp, #128	; 0x80
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
 80026e4:	615a      	str	r2, [r3, #20]
 80026e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026e8:	463b      	mov	r3, r7
 80026ea:	2234      	movs	r2, #52	; 0x34
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f007 fcc2 	bl	800a078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026f4:	4b51      	ldr	r3, [pc, #324]	; (800283c <MX_TIM1_Init+0x198>)
 80026f6:	4a52      	ldr	r2, [pc, #328]	; (8002840 <MX_TIM1_Init+0x19c>)
 80026f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026fa:	4b50      	ldr	r3, [pc, #320]	; (800283c <MX_TIM1_Init+0x198>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b4e      	ldr	r3, [pc, #312]	; (800283c <MX_TIM1_Init+0x198>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31;
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <MX_TIM1_Init+0x198>)
 8002708:	221f      	movs	r2, #31
 800270a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <MX_TIM1_Init+0x198>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 255;
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <MX_TIM1_Init+0x198>)
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002718:	4b48      	ldr	r3, [pc, #288]	; (800283c <MX_TIM1_Init+0x198>)
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800271e:	4847      	ldr	r0, [pc, #284]	; (800283c <MX_TIM1_Init+0x198>)
 8002720:	f005 f912 	bl	8007948 <HAL_TIM_Base_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800272a:	f7fe fe4f 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800272e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002732:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002734:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002738:	4619      	mov	r1, r3
 800273a:	4840      	ldr	r0, [pc, #256]	; (800283c <MX_TIM1_Init+0x198>)
 800273c:	f005 fff0 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002746:	f7fe fe41 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800274a:	483c      	ldr	r0, [pc, #240]	; (800283c <MX_TIM1_Init+0x198>)
 800274c:	f005 fa48 	bl	8007be0 <HAL_TIM_PWM_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002756:	f7fe fe39 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800275a:	2108      	movs	r1, #8
 800275c:	4837      	ldr	r0, [pc, #220]	; (800283c <MX_TIM1_Init+0x198>)
 800275e:	f005 fb1b 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002768:	f7fe fe30 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800276c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002770:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8002772:	2330      	movs	r3, #48	; 0x30
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002776:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800277a:	4619      	mov	r1, r3
 800277c:	482f      	ldr	r0, [pc, #188]	; (800283c <MX_TIM1_Init+0x198>)
 800277e:	f006 f8e5 	bl	800894c <HAL_TIM_SlaveConfigSynchro>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8002788:	f7fe fe20 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002798:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800279c:	4619      	mov	r1, r3
 800279e:	4827      	ldr	r0, [pc, #156]	; (800283c <MX_TIM1_Init+0x198>)
 80027a0:	f007 f9fe 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80027aa:	f7fe fe0f 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80027ae:	2370      	movs	r3, #112	; 0x70
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 15;
 80027b2:	230f      	movs	r3, #15
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ba:	2300      	movs	r3, #0
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027ce:	2200      	movs	r2, #0
 80027d0:	4619      	mov	r1, r3
 80027d2:	481a      	ldr	r0, [pc, #104]	; (800283c <MX_TIM1_Init+0x198>)
 80027d4:	f005 fe90 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80027de:	f7fe fdf5 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800281a:	463b      	mov	r3, r7
 800281c:	4619      	mov	r1, r3
 800281e:	4807      	ldr	r0, [pc, #28]	; (800283c <MX_TIM1_Init+0x198>)
 8002820:	f007 fa54 	bl	8009ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800282a:	f7fe fdcf 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800282e:	4803      	ldr	r0, [pc, #12]	; (800283c <MX_TIM1_Init+0x198>)
 8002830:	f000 fd5a 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002834:	bf00      	nop
 8002836:	3780      	adds	r7, #128	; 0x80
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20018da0 	.word	0x20018da0
 8002840:	40012c00 	.word	0x40012c00

08002844 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <MX_TIM2_Init+0x70>)
 8002856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800285a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <MX_TIM2_Init+0x70>)
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <MX_TIM2_Init+0x70>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <MX_TIM2_Init+0x70>)
 800286a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800286e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <MX_TIM2_Init+0x70>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <MX_TIM2_Init+0x70>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800287c:	2108      	movs	r1, #8
 800287e:	480d      	ldr	r0, [pc, #52]	; (80028b4 <MX_TIM2_Init+0x70>)
 8002880:	f005 fa8a 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 800288a:	f7fe fd9f 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4806      	ldr	r0, [pc, #24]	; (80028b4 <MX_TIM2_Init+0x70>)
 800289c:	f007 f980 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80028a6:	f7fe fd91 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20018e6c 	.word	0x20018e6c

080028b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b094      	sub	sp, #80	; 0x50
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]
 80028ea:	615a      	str	r2, [r3, #20]
 80028ec:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <MX_TIM3_Init+0x160>)
 80028fc:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <MX_TIM3_Init+0x164>)
 80028fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002900:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <MX_TIM3_Init+0x160>)
 800290e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002912:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <MX_TIM3_Init+0x160>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002920:	483d      	ldr	r0, [pc, #244]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002922:	f005 f811 	bl	8007948 <HAL_TIM_Base_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800292c:	f7fe fd4e 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002930:	4839      	ldr	r0, [pc, #228]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002932:	f005 f955 	bl	8007be0 <HAL_TIM_PWM_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800293c:	f7fe fd46 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002940:	4835      	ldr	r0, [pc, #212]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002942:	f005 f9bb 	bl	8007cbc <HAL_TIM_IC_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800294c:	f7fe fd3e 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002950:	2108      	movs	r1, #8
 8002952:	4831      	ldr	r0, [pc, #196]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002954:	f005 fa20 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800295e:	f7fe fd35 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002968:	2360      	movs	r3, #96	; 0x60
 800296a:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800296c:	2302      	movs	r3, #2
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002974:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002978:	4619      	mov	r1, r3
 800297a:	4827      	ldr	r0, [pc, #156]	; (8002a18 <MX_TIM3_Init+0x160>)
 800297c:	f005 ffe6 	bl	800894c <HAL_TIM_SlaveConfigSynchro>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002986:	f7fe fd21 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002996:	4619      	mov	r1, r3
 8002998:	481f      	ldr	r0, [pc, #124]	; (8002a18 <MX_TIM3_Init+0x160>)
 800299a:	f007 f901 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80029a4:	f7fe fd12 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80029a8:	2370      	movs	r3, #112	; 0x70
 80029aa:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 12000;
 80029ac:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80029b0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	2200      	movs	r2, #0
 80029c0:	4619      	mov	r1, r3
 80029c2:	4815      	ldr	r0, [pc, #84]	; (8002a18 <MX_TIM3_Init+0x160>)
 80029c4:	f005 fd98 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80029ce:	f7fe fcfd 	bl	80013cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029d2:	2302      	movs	r3, #2
 80029d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029d6:	2301      	movs	r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	2204      	movs	r2, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	480b      	ldr	r0, [pc, #44]	; (8002a18 <MX_TIM3_Init+0x160>)
 80029ea:	f005 fce8 	bl	80083be <HAL_TIM_IC_ConfigChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM3_Init+0x140>
  {
    Error_Handler();
 80029f4:	f7fe fcea 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim3, TIM_TIM3_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 80029f8:	2204      	movs	r2, #4
 80029fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029fe:	4806      	ldr	r0, [pc, #24]	; (8002a18 <MX_TIM3_Init+0x160>)
 8002a00:	f007 fa16 	bl	8009e30 <HAL_TIMEx_TISelection>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM3_Init+0x156>
  {
    Error_Handler();
 8002a0a:	f7fe fcdf 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	3750      	adds	r7, #80	; 0x50
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20018f38 	.word	0x20018f38
 8002a1c:	40000400 	.word	0x40000400

08002a20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b098      	sub	sp, #96	; 0x60
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
 8002a60:	615a      	str	r2, [r3, #20]
 8002a62:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a72:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <MX_TIM4_Init+0x18c>)
 8002a74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3800;
 8002a82:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a84:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002a88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a90:	4b45      	ldr	r3, [pc, #276]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a96:	4844      	ldr	r0, [pc, #272]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002a98:	f004 ff56 	bl	8007948 <HAL_TIM_Base_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8002aa2:	f7fe fc93 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aaa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	483d      	ldr	r0, [pc, #244]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002ab4:	f005 fe34 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002abe:	f7fe fc85 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ac2:	4839      	ldr	r0, [pc, #228]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002ac4:	f005 f88c 	bl	8007be0 <HAL_TIM_PWM_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002ace:	f7fe fc7d 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002ad2:	4835      	ldr	r0, [pc, #212]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002ad4:	f005 f8f2 	bl	8007cbc <HAL_TIM_IC_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8002ade:	f7fe fc75 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	4830      	ldr	r0, [pc, #192]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002ae6:	f005 f957 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002af0:	f7fe fc6c 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002afa:	2360      	movs	r3, #96	; 0x60
 8002afc:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002afe:	2300      	movs	r3, #0
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4826      	ldr	r0, [pc, #152]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002b0e:	f005 ff1d 	bl	800894c <HAL_TIM_SlaveConfigSynchro>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8002b18:	f7fe fc58 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b28:	4619      	mov	r1, r3
 8002b2a:	481f      	ldr	r0, [pc, #124]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002b2c:	f007 f838 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002b36:	f7fe fc49 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002b3a:	2370      	movs	r3, #112	; 0x70
 8002b3c:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 1148;
 8002b3e:	f240 437c 	movw	r3, #1148	; 0x47c
 8002b42:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4814      	ldr	r0, [pc, #80]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002b56:	f005 fccf 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM4_Init+0x144>
  {
    Error_Handler();
 8002b60:	f7fe fc34 	bl	80013cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	2204      	movs	r2, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	480b      	ldr	r0, [pc, #44]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002b7c:	f005 fc1f 	bl	80083be <HAL_TIM_IC_ConfigChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM4_Init+0x16a>
  {
    Error_Handler();
 8002b86:	f7fe fc21 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim4, TIM_TIM4_TI2_COMP1, TIM_CHANNEL_2) != HAL_OK)
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_TIM4_Init+0x188>)
 8002b92:	f007 f94d 	bl	8009e30 <HAL_TIMEx_TISelection>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM4_Init+0x180>
  {
    Error_Handler();
 8002b9c:	f7fe fc16 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	3760      	adds	r7, #96	; 0x60
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20019004 	.word	0x20019004
 8002bac:	40000800 	.word	0x40000800

08002bb0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002bc2:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <MX_TIM5_Init+0x70>)
 8002bc4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 160;
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002bd4:	22a0      	movs	r2, #160	; 0xa0
 8002bd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8002be4:	2108      	movs	r1, #8
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002be8:	f005 f8d6 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM5_Init+0x46>
  {
    Error_Handler();
 8002bf2:	f7fe fbeb 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <MX_TIM5_Init+0x6c>)
 8002c04:	f006 ffcc 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8002c0e:	f7fe fbdd 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200190d0 	.word	0x200190d0
 8002c20:	40000c00 	.word	0x40000c00

08002c24 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b09c      	sub	sp, #112	; 0x70
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
 8002c54:	615a      	str	r2, [r3, #20]
 8002c56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2234      	movs	r2, #52	; 0x34
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f007 fa0a 	bl	800a078 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c64:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c66:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <MX_TIM8_Init+0x170>)
 8002c68:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 34;
 8002c6a:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c6c:	2222      	movs	r2, #34	; 0x22
 8002c6e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 300;
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 47;
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c86:	222f      	movs	r2, #47	; 0x2f
 8002c88:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c90:	483f      	ldr	r0, [pc, #252]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002c92:	f004 fe59 	bl	8007948 <HAL_TIM_Base_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002c9c:	f7fe fb96 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ca6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002caa:	4619      	mov	r1, r3
 8002cac:	4838      	ldr	r0, [pc, #224]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002cae:	f005 fd37 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002cb8:	f7fe fb88 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cbc:	4834      	ldr	r0, [pc, #208]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002cbe:	f004 ff8f 	bl	8007be0 <HAL_TIM_PWM_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002cc8:	f7fe fb80 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002ccc:	2108      	movs	r1, #8
 8002cce:	4830      	ldr	r0, [pc, #192]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002cd0:	f005 f862 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8002cda:	f7fe fb77 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002cde:	2330      	movs	r3, #48	; 0x30
 8002ce0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4827      	ldr	r0, [pc, #156]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002cf2:	f006 ff55 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002cfc:	f7fe fb66 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002d00:	2370      	movs	r3, #112	; 0x70
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 150;
 8002d04:	2396      	movs	r3, #150	; 0x96
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d20:	2200      	movs	r2, #0
 8002d22:	4619      	mov	r1, r3
 8002d24:	481a      	ldr	r0, [pc, #104]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002d26:	f005 fbe7 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002d30:	f7fe fb4c 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4807      	ldr	r0, [pc, #28]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002d72:	f006 ffab 	bl	8009ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8002d7c:	f7fe fb26 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <MX_TIM8_Init+0x16c>)
 8002d82:	f000 fab1 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002d86:	bf00      	nop
 8002d88:	3770      	adds	r7, #112	; 0x70
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2001919c 	.word	0x2001919c
 8002d94:	40013400 	.word	0x40013400

08002d98 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b094      	sub	sp, #80	; 0x50
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	615a      	str	r2, [r3, #20]
 8002db0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002db2:	463b      	mov	r3, r7
 8002db4:	2234      	movs	r2, #52	; 0x34
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f007 f95d 	bl	800a078 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002dbe:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <MX_TIM16_Init+0x100>)
 8002dc2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170;
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dc6:	22aa      	movs	r2, #170	; 0xaa
 8002dc8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 260;
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dd2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dd6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 191;
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002de0:	22bf      	movs	r2, #191	; 0xbf
 8002de2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002dea:	482a      	ldr	r0, [pc, #168]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dec:	f004 fdac 	bl	8007948 <HAL_TIM_Base_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002df6:	f7fe fae9 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002dfa:	4826      	ldr	r0, [pc, #152]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002dfc:	f004 fef0 	bl	8007be0 <HAL_TIM_PWM_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002e06:	f7fe fae1 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002e0a:	2108      	movs	r1, #8
 8002e0c:	4821      	ldr	r0, [pc, #132]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002e0e:	f004 ffc3 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002e18:	f7fe fad8 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002e1c:	2370      	movs	r3, #112	; 0x70
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 130;
 8002e20:	2382      	movs	r3, #130	; 0x82
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e24:	2300      	movs	r3, #0
 8002e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4814      	ldr	r0, [pc, #80]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002e42:	f005 fb59 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM16_Init+0xb8>
  {
    Error_Handler();
 8002e4c:	f7fe fabe 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002e72:	463b      	mov	r3, r7
 8002e74:	4619      	mov	r1, r3
 8002e76:	4807      	ldr	r0, [pc, #28]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002e78:	f006 ff28 	bl	8009ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8002e82:	f7fe faa3 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <MX_TIM16_Init+0xfc>)
 8002e88:	f000 fa2e 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002e8c:	bf00      	nop
 8002e8e:	3750      	adds	r7, #80	; 0x50
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20019268 	.word	0x20019268
 8002e98:	40014400 	.word	0x40014400

08002e9c <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b0a0      	sub	sp, #128	; 0x80
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002eb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	2234      	movs	r2, #52	; 0x34
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f007 f8c6 	bl	800a078 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002eec:	4b52      	ldr	r3, [pc, #328]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002eee:	4a53      	ldr	r2, [pc, #332]	; (800303c <MX_TIM20_Init+0x1a0>)
 8002ef0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002ef2:	4b51      	ldr	r3, [pc, #324]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 34;
 8002efe:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f00:	2222      	movs	r2, #34	; 0x22
 8002f02:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f04:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 255;
 8002f0a:	4b4b      	ldr	r3, [pc, #300]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f10:	4b49      	ldr	r3, [pc, #292]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002f16:	4848      	ldr	r0, [pc, #288]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f18:	f004 fd16 	bl	8007948 <HAL_TIM_Base_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 8002f22:	f7fe fa53 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002f2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f30:	4619      	mov	r1, r3
 8002f32:	4841      	ldr	r0, [pc, #260]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f34:	f005 fbf4 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM20_Init+0xa6>
  {
    Error_Handler();
 8002f3e:	f7fe fa45 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002f42:	483d      	ldr	r0, [pc, #244]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f44:	f004 fe4c 	bl	8007be0 <HAL_TIM_PWM_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM20_Init+0xb6>
  {
    Error_Handler();
 8002f4e:	f7fe fa3d 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim20, TIM_OPMODE_SINGLE) != HAL_OK)
 8002f52:	2108      	movs	r1, #8
 8002f54:	4838      	ldr	r0, [pc, #224]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f56:	f004 ff1f 	bl	8007d98 <HAL_TIM_OnePulse_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 8002f60:	f7fe fa34 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8002f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 8002f6a:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
 8002f6e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8002f70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f74:	4619      	mov	r1, r3
 8002f76:	4830      	ldr	r0, [pc, #192]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f78:	f005 fce8 	bl	800894c <HAL_TIM_SlaveConfigSynchro>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 8002f82:	f7fe fa23 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002f86:	2330      	movs	r3, #48	; 0x30
 8002f88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f96:	4619      	mov	r1, r3
 8002f98:	4827      	ldr	r0, [pc, #156]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002f9a:	f006 fe01 	bl	8009ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM20_Init+0x10c>
  {
    Error_Handler();
 8002fa4:	f7fe fa12 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002fa8:	2370      	movs	r3, #112	; 0x70
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 8;
 8002fac:	2308      	movs	r3, #8
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	481a      	ldr	r0, [pc, #104]	; (8003038 <MX_TIM20_Init+0x19c>)
 8002fce:	f005 fa93 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM20_Init+0x140>
  {
    Error_Handler();
 8002fd8:	f7fe f9f8 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003014:	463b      	mov	r3, r7
 8003016:	4619      	mov	r1, r3
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <MX_TIM20_Init+0x19c>)
 800301a:	f006 fe57 	bl	8009ccc <HAL_TIMEx_ConfigBreakDeadTime>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM20_Init+0x18c>
  {
    Error_Handler();
 8003024:	f7fe f9d2 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <MX_TIM20_Init+0x19c>)
 800302a:	f000 f95d 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 800302e:	bf00      	nop
 8003030:	3780      	adds	r7, #128	; 0x80
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20019334 	.word	0x20019334
 800303c:	40015000 	.word	0x40015000

08003040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b090      	sub	sp, #64	; 0x40
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7f      	ldr	r2, [pc, #508]	; (800325c <HAL_TIM_Base_MspInit+0x21c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d132      	bne.n	80030c8 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003062:	4b7f      	ldr	r3, [pc, #508]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	4a7e      	ldr	r2, [pc, #504]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800306c:	6613      	str	r3, [r2, #96]	; 0x60
 800306e:	4b7c      	ldr	r3, [pc, #496]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b79      	ldr	r3, [pc, #484]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4a78      	ldr	r2, [pc, #480]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80030a4:	2306      	movs	r3, #6
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ac:	4619      	mov	r1, r3
 80030ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b2:	f003 f8bd 	bl	8006230 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	201a      	movs	r0, #26
 80030bc:	f002 fd1d 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80030c0:	201a      	movs	r0, #26
 80030c2:	f002 fd34 	bl	8005b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80030c6:	e0c4      	b.n	8003252 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a65      	ldr	r2, [pc, #404]	; (8003264 <HAL_TIM_Base_MspInit+0x224>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d130      	bne.n	8003134 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	4a62      	ldr	r2, [pc, #392]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	4b5d      	ldr	r3, [pc, #372]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	4a5c      	ldr	r2, [pc, #368]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f6:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003102:	2320      	movs	r3, #32
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003112:	2302      	movs	r3, #2
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800311a:	4619      	mov	r1, r3
 800311c:	4852      	ldr	r0, [pc, #328]	; (8003268 <HAL_TIM_Base_MspInit+0x228>)
 800311e:	f003 f887 	bl	8006230 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	201d      	movs	r0, #29
 8003128:	f002 fce7 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800312c:	201d      	movs	r0, #29
 800312e:	f002 fcfe 	bl	8005b2e <HAL_NVIC_EnableIRQ>
}
 8003132:	e08e      	b.n	8003252 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM4)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_TIM_Base_MspInit+0x22c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d128      	bne.n	8003190 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800313e:	4b48      	ldr	r3, [pc, #288]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	4a47      	ldr	r2, [pc, #284]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6593      	str	r3, [r2, #88]	; 0x58
 800314a:	4b45      	ldr	r3, [pc, #276]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b42      	ldr	r3, [pc, #264]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	4a41      	ldr	r2, [pc, #260]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003162:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800317e:	2302      	movs	r3, #2
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003186:	4619      	mov	r1, r3
 8003188:	4837      	ldr	r0, [pc, #220]	; (8003268 <HAL_TIM_Base_MspInit+0x228>)
 800318a:	f003 f851 	bl	8006230 <HAL_GPIO_Init>
}
 800318e:	e060      	b.n	8003252 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM8)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a36      	ldr	r2, [pc, #216]	; (8003270 <HAL_TIM_Base_MspInit+0x230>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10c      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	4a30      	ldr	r2, [pc, #192]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031a4:	6613      	str	r3, [r2, #96]	; 0x60
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
}
 80031b2:	e04e      	b.n	8003252 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM16)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	; (8003274 <HAL_TIM_Base_MspInit+0x234>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10c      	bne.n	80031d8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	6613      	str	r3, [r2, #96]	; 0x60
 80031ca:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
}
 80031d6:	e03c      	b.n	8003252 <HAL_TIM_Base_MspInit+0x212>
  else if(tim_baseHandle->Instance==TIM20)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a26      	ldr	r2, [pc, #152]	; (8003278 <HAL_TIM_Base_MspInit+0x238>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d137      	bne.n	8003252 <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ec:	6613      	str	r3, [r2, #96]	; 0x60
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_TIM_Base_MspInit+0x220>)
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim20_ch1.Instance = DMA2_Channel1;
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 80031fc:	4a20      	ldr	r2, [pc, #128]	; (8003280 <HAL_TIM_Base_MspInit+0x240>)
 80031fe:	601a      	str	r2, [r3, #0]
    hdma_tim20_ch1.Init.Request = DMA_REQUEST_TIM20_CH1;
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 8003202:	2256      	movs	r2, #86	; 0x56
 8003204:	605a      	str	r2, [r3, #4]
    hdma_tim20_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 8003208:	2210      	movs	r2, #16
 800320a:	609a      	str	r2, [r3, #8]
    hdma_tim20_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
    hdma_tim20_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	611a      	str	r2, [r3, #16]
    hdma_tim20_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 800321a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321e:	615a      	str	r2, [r3, #20]
    hdma_tim20_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 8003222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003226:	619a      	str	r2, [r3, #24]
    hdma_tim20_ch1.Init.Mode = DMA_NORMAL;
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
    hdma_tim20_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 8003230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim20_ch1) != HAL_OK)
 8003236:	4811      	ldr	r0, [pc, #68]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 8003238:	f002 fc94 	bl	8005b64 <HAL_DMA_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_TIM_Base_MspInit+0x206>
      Error_Handler();
 8003242:	f7fe f8c3 	bl	80013cc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim20_ch1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a0c      	ldr	r2, [pc, #48]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
 800324c:	4a0b      	ldr	r2, [pc, #44]	; (800327c <HAL_TIM_Base_MspInit+0x23c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003252:	bf00      	nop
 8003254:	3740      	adds	r7, #64	; 0x40
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40000400 	.word	0x40000400
 8003268:	48000400 	.word	0x48000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40013400 	.word	0x40013400
 8003274:	40014400 	.word	0x40014400
 8003278:	40015000 	.word	0x40015000
 800327c:	20019400 	.word	0x20019400
 8003280:	40020408 	.word	0x40020408

08003284 <HAL_TIM_OnePulse_MspInit>:

void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* tim_onepulseHandle)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  if(tim_onepulseHandle->Instance==TIM2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d10c      	bne.n	80032b0 <HAL_TIM_OnePulse_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_TIM_OnePulse_MspInit+0x5c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80032ae:	e010      	b.n	80032d2 <HAL_TIM_OnePulse_MspInit+0x4e>
  else if(tim_onepulseHandle->Instance==TIM5)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <HAL_TIM_OnePulse_MspInit+0x60>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10b      	bne.n	80032d2 <HAL_TIM_OnePulse_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032c0:	f043 0308 	orr.w	r3, r3, #8
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_TIM_OnePulse_MspInit+0x5c>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40000c00 	.word	0x40000c00

080032e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a46      	ldr	r2, [pc, #280]	; (8003420 <HAL_TIM_MspPostInit+0x138>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d11e      	bne.n	8003348 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	4a45      	ldr	r2, [pc, #276]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003334:	2306      	movs	r3, #6
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003342:	f002 ff75 	bl	8006230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003346:	e066      	b.n	8003416 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_TIM_MspPostInit+0x140>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d11c      	bne.n	800338c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	4a33      	ldr	r2, [pc, #204]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800337a:	2305      	movs	r3, #5
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	4619      	mov	r1, r3
 8003384:	4829      	ldr	r0, [pc, #164]	; (800342c <HAL_TIM_MspPostInit+0x144>)
 8003386:	f002 ff53 	bl	8006230 <HAL_GPIO_Init>
}
 800338a:	e044      	b.n	8003416 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM16)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_TIM_MspPostInit+0x148>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d11e      	bne.n	80033d4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003396:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033bc:	2300      	movs	r3, #0
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80033c0:	2301      	movs	r3, #1
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ce:	f002 ff2f 	bl	8006230 <HAL_GPIO_Init>
}
 80033d2:	e020      	b.n	8003416 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM20)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_TIM_MspPostInit+0x14c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d11b      	bne.n	8003416 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_TIM_MspPostInit+0x13c>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033f6:	2304      	movs	r3, #4
 80033f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003402:	2302      	movs	r3, #2
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003406:	2303      	movs	r3, #3
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	4619      	mov	r1, r3
 8003410:	4806      	ldr	r0, [pc, #24]	; (800342c <HAL_TIM_MspPostInit+0x144>)
 8003412:	f002 ff0d 	bl	8006230 <HAL_GPIO_Init>
}
 8003416:	bf00      	nop
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40013400 	.word	0x40013400
 800342c:	48000400 	.word	0x48000400
 8003430:	40014400 	.word	0x40014400
 8003434:	40015000 	.word	0x40015000

08003438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003438:	480d      	ldr	r0, [pc, #52]	; (8003470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800343a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800343c:	480d      	ldr	r0, [pc, #52]	; (8003474 <LoopForever+0x6>)
  ldr r1, =_edata
 800343e:	490e      	ldr	r1, [pc, #56]	; (8003478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003440:	4a0e      	ldr	r2, [pc, #56]	; (800347c <LoopForever+0xe>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003444:	e002      	b.n	800344c <LoopCopyDataInit>

08003446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344a:	3304      	adds	r3, #4

0800344c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800344c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003450:	d3f9      	bcc.n	8003446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003454:	4c0b      	ldr	r4, [pc, #44]	; (8003484 <LoopForever+0x16>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003458:	e001      	b.n	800345e <LoopFillZerobss>

0800345a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800345c:	3204      	adds	r2, #4

0800345e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003460:	d3fb      	bcc.n	800345a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003462:	f7ff f90d 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003466:	f006 fde3 	bl	800a030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800346a:	f7fd fcbb 	bl	8000de4 <main>

0800346e <LoopForever>:

LoopForever:
    b LoopForever
 800346e:	e7fe      	b.n	800346e <LoopForever>
  ldr   r0, =_estack
 8003470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003478:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800347c:	0800a384 	.word	0x0800a384
  ldr r2, =_sbss
 8003480:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003484:	20019468 	.word	0x20019468

08003488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003488:	e7fe      	b.n	8003488 <ADC1_2_IRQHandler>
	...

0800348c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_Init+0x3c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_Init+0x3c>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a2:	2003      	movs	r0, #3
 80034a4:	f002 fb1e 	bl	8005ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034a8:	200f      	movs	r0, #15
 80034aa:	f000 f80f 	bl	80034cc <HAL_InitTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	71fb      	strb	r3, [r7, #7]
 80034b8:	e001      	b.n	80034be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034ba:	f7ff f833 	bl	8002524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034be:	79fb      	ldrb	r3, [r7, #7]

}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40022000 	.word	0x40022000

080034cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_InitTick+0x68>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d022      	beq.n	8003526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_InitTick+0x6c>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_InitTick+0x68>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 fb28 	bl	8005b4a <HAL_SYSTICK_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10f      	bne.n	8003520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b0f      	cmp	r3, #15
 8003504:	d809      	bhi.n	800351a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003506:	2200      	movs	r2, #0
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	f002 faf4 	bl	8005afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <HAL_InitTick+0x70>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e007      	b.n	800352a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	e004      	b.n	800352a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e001      	b.n	800352a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000002c 	.word	0x2000002c
 8003538:	20000024 	.word	0x20000024
 800353c:	20000028 	.word	0x20000028

08003540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_IncTick+0x1c>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_IncTick+0x20>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4413      	add	r3, r2
 800354e:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_IncTick+0x1c>)
 8003550:	6013      	str	r3, [r2, #0]
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	20019460 	.word	0x20019460
 8003560:	2000002c 	.word	0x2000002c

08003564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return uwTick;
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_GetTick+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20019460 	.word	0x20019460

0800357c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff ffee 	bl	8003564 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d004      	beq.n	80035a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_Delay+0x40>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035a0:	bf00      	nop
 80035a2:	f7ff ffdf 	bl	8003564 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d8f7      	bhi.n	80035a2 <HAL_Delay+0x26>
  {
  }
}
 80035b2:	bf00      	nop
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2000002c 	.word	0x2000002c

080035c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3360      	adds	r3, #96	; 0x60
 800363a:	461a      	mov	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <LL_ADC_SetOffset+0x44>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	4313      	orrs	r3, r2
 8003658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	03fff000 	.word	0x03fff000

08003670 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3360      	adds	r3, #96	; 0x60
 800367e:	461a      	mov	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3360      	adds	r3, #96	; 0x60
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3360      	adds	r3, #96	; 0x60
 80036e2:	461a      	mov	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3360      	adds	r3, #96	; 0x60
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	615a      	str	r2, [r3, #20]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800378a:	b480      	push	{r7}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3330      	adds	r3, #48	; 0x30
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	4413      	add	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	211f      	movs	r1, #31
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	401a      	ands	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	f003 011f 	and.w	r1, r3, #31
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	431a      	orrs	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3314      	adds	r3, #20
 80037f2:	461a      	mov	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	0e5b      	lsrs	r3, r3, #25
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	4413      	add	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2107      	movs	r1, #7
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	401a      	ands	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	0d1b      	lsrs	r3, r3, #20
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10a      	bne.n	8003862 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003860:	e00a      	b.n	8003878 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	43db      	mvns	r3, r3
 8003870:	401a      	ands	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	407f0000 	.word	0x407f0000

08003888 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6093      	str	r3, [r2, #8]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c0:	d101      	bne.n	80038c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003910:	d101      	bne.n	8003916 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800395c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <LL_ADC_IsEnabled+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_ADC_IsEnabled+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d101      	bne.n	80039b2 <LL_ADC_IsDisableOngoing+0x18>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_ADC_IsDisableOngoing+0x1a>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d101      	bne.n	8003a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d101      	bne.n	8003a4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e1ea      	b.n	8003e4c <HAL_ADC_Init+0x3f0>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d133      	bne.n	8003aec <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <HAL_ADC_Init+0x1cc>)
 8003a88:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a67      	ldr	r2, [pc, #412]	; (8003c2c <HAL_ADC_Init+0x1d0>)
 8003a8e:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a67      	ldr	r2, [pc, #412]	; (8003c30 <HAL_ADC_Init+0x1d4>)
 8003a94:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a66      	ldr	r2, [pc, #408]	; (8003c34 <HAL_ADC_Init+0x1d8>)
 8003a9a:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <HAL_ADC_Init+0x1dc>)
 8003aa0:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a65      	ldr	r2, [pc, #404]	; (8003c3c <HAL_ADC_Init+0x1e0>)
 8003aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a64      	ldr	r2, [pc, #400]	; (8003c40 <HAL_ADC_Init+0x1e4>)
 8003aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a63      	ldr	r2, [pc, #396]	; (8003c44 <HAL_ADC_Init+0x1e8>)
 8003ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a62      	ldr	r2, [pc, #392]	; (8003c48 <HAL_ADC_Init+0x1ec>)
 8003abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a5f      	ldr	r2, [pc, #380]	; (8003c4c <HAL_ADC_Init+0x1f0>)
 8003ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fedb 	bl	80038ac <LL_ADC_IsDeepPowerDownEnabled>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fec1 	bl	8003888 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fef6 	bl	80038fc <LL_ADC_IsInternalRegulatorEnabled>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff feda 	bl	80038d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_ADC_Init+0x1f4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <HAL_ADC_Init+0x1f8>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	3301      	adds	r3, #1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b34:	e002      	b.n	8003b3c <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f9      	bne.n	8003b36 <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fed8 	bl	80038fc <LL_ADC_IsInternalRegulatorEnabled>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff38 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8003b78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 8159 	bne.w	8003e3a <HAL_ADC_Init+0x3de>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 8155 	bne.w	8003e3a <HAL_ADC_Init+0x3de>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fee5 	bl	8003974 <LL_ADC_IsEnabled>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d164      	bne.n	8003c7a <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb8:	d004      	beq.n	8003bc4 <HAL_ADC_Init+0x168>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_ADC_Init+0x1fc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10f      	bne.n	8003be4 <HAL_ADC_Init+0x188>
 8003bc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bc8:	f7ff fed4 	bl	8003974 <LL_ADC_IsEnabled>
 8003bcc:	4604      	mov	r4, r0
 8003bce:	4822      	ldr	r0, [pc, #136]	; (8003c58 <HAL_ADC_Init+0x1fc>)
 8003bd0:	f7ff fed0 	bl	8003974 <LL_ADC_IsEnabled>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4323      	orrs	r3, r4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e012      	b.n	8003c0a <HAL_ADC_Init+0x1ae>
 8003be4:	481d      	ldr	r0, [pc, #116]	; (8003c5c <HAL_ADC_Init+0x200>)
 8003be6:	f7ff fec5 	bl	8003974 <LL_ADC_IsEnabled>
 8003bea:	4604      	mov	r4, r0
 8003bec:	481c      	ldr	r0, [pc, #112]	; (8003c60 <HAL_ADC_Init+0x204>)
 8003bee:	f7ff fec1 	bl	8003974 <LL_ADC_IsEnabled>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	431c      	orrs	r4, r3
 8003bf6:	481b      	ldr	r0, [pc, #108]	; (8003c64 <HAL_ADC_Init+0x208>)
 8003bf8:	f7ff febc 	bl	8003974 <LL_ADC_IsEnabled>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4323      	orrs	r3, r4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d035      	beq.n	8003c7a <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c16:	d004      	beq.n	8003c22 <HAL_ADC_Init+0x1c6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_ADC_Init+0x1fc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d124      	bne.n	8003c6c <HAL_ADC_Init+0x210>
 8003c22:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_ADC_Init+0x20c>)
 8003c24:	e023      	b.n	8003c6e <HAL_ADC_Init+0x212>
 8003c26:	bf00      	nop
 8003c28:	08003f99 	.word	0x08003f99
 8003c2c:	08003fad 	.word	0x08003fad
 8003c30:	08003fc1 	.word	0x08003fc1
 8003c34:	08003fd5 	.word	0x08003fd5
 8003c38:	0800504d 	.word	0x0800504d
 8003c3c:	08005061 	.word	0x08005061
 8003c40:	08005075 	.word	0x08005075
 8003c44:	08005089 	.word	0x08005089
 8003c48:	0800509d 	.word	0x0800509d
 8003c4c:	080003d9 	.word	0x080003d9
 8003c50:	20000024 	.word	0x20000024
 8003c54:	053e2d63 	.word	0x053e2d63
 8003c58:	50000100 	.word	0x50000100
 8003c5c:	50000400 	.word	0x50000400
 8003c60:	50000500 	.word	0x50000500
 8003c64:	50000600 	.word	0x50000600
 8003c68:	50000300 	.word	0x50000300
 8003c6c:	4a79      	ldr	r2, [pc, #484]	; (8003e54 <HAL_ADC_Init+0x3f8>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7ff fca3 	bl	80035c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	7f5b      	ldrb	r3, [r3, #29]
 8003c7e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c84:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003c8a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003c90:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c98:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_ADC_Init+0x25a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	045b      	lsls	r3, r3, #17
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_ADC_Init+0x276>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <HAL_ADC_Init+0x3fc>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fe71 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8003d06:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fe92 	bl	8003a36 <LL_ADC_INJ_IsConversionOngoing>
 8003d12:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d16d      	bne.n	8003df6 <HAL_ADC_Init+0x39a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d16a      	bne.n	8003df6 <HAL_ADC_Init+0x39a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d24:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d2c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3c:	f023 0302 	bic.w	r3, r3, #2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	430b      	orrs	r3, r1
 8003d48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d017      	beq.n	8003d82 <HAL_ADC_Init+0x326>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d60:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6911      	ldr	r1, [r2, #16]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003d80:	e013      	b.n	8003daa <HAL_ADC_Init+0x34e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d90:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003da2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003da6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d118      	bne.n	8003de6 <HAL_ADC_Init+0x38a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003dbe:	f023 0304 	bic.w	r3, r3, #4
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	611a      	str	r2, [r3, #16]
 8003de4:	e007      	b.n	8003df6 <HAL_ADC_Init+0x39a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10c      	bne.n	8003e18 <HAL_ADC_Init+0x3bc>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	f023 010f 	bic.w	r1, r3, #15
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
 8003e16:	e007      	b.n	8003e28 <HAL_ADC_Init+0x3cc>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 020f 	bic.w	r2, r2, #15
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f023 0303 	bic.w	r3, r3, #3
 8003e30:	f043 0201 	orr.w	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e38:	e007      	b.n	8003e4a <HAL_ADC_Init+0x3ee>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	f043 0210 	orr.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3724      	adds	r7, #36	; 0x24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}
 8003e54:	50000700 	.word	0x50000700
 8003e58:	fff04007 	.word	0xfff04007

08003e5c <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	460b      	mov	r3, r1
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e082      	b.n	8003f8a <HAL_ADC_RegisterCallback+0x12e>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d056      	beq.n	8003f3e <HAL_ADC_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	2b0a      	cmp	r3, #10
 8003e94:	d84a      	bhi.n	8003f2c <HAL_ADC_RegisterCallback+0xd0>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_ADC_RegisterCallback+0x40>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	08003ed1 	.word	0x08003ed1
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ef1 	.word	0x08003ef1
 8003eb4:	08003efb 	.word	0x08003efb
 8003eb8:	08003f05 	.word	0x08003f05
 8003ebc:	08003f0f 	.word	0x08003f0f
 8003ec0:	08003f19 	.word	0x08003f19
 8003ec4:	08003f23 	.word	0x08003f23
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003ece:	e05b      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003ed6:	e057      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003ede:	e053      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003ee6:	e04f      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003eee:	e04b      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
        hadc->InjectedQueueOverflowCallback = pCallback;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003ef8:	e046      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003f02:	e041      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003f0c:	e03c      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003f16:	e037      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003f20:	e032      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003f2a:	e02d      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f043 0210 	orr.w	r2, r3, #16
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]
        break;
 8003f3c:	e024      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_ADC_RegisterCallback+0x11c>
  {
    switch (CallbackID)
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	2b09      	cmp	r3, #9
 8003f4a:	d002      	beq.n	8003f52 <HAL_ADC_RegisterCallback+0xf6>
 8003f4c:	2b0a      	cmp	r3, #10
 8003f4e:	d005      	beq.n	8003f5c <HAL_ADC_RegisterCallback+0x100>
 8003f50:	e009      	b.n	8003f66 <HAL_ADC_RegisterCallback+0x10a>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003f5a:	e015      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003f64:	e010      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
        break;
 8003f76:	e007      	b.n	8003f88 <HAL_ADC_RegisterCallback+0x12c>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	f043 0210 	orr.w	r2, r3, #16
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop

08003f98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b0b6      	sub	sp, #216	; 0xd8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004002:	2b01      	cmp	r3, #1
 8004004:	d102      	bne.n	800400c <HAL_ADC_ConfigChannel+0x24>
 8004006:	2302      	movs	r3, #2
 8004008:	f000 bc13 	b.w	8004832 <HAL_ADC_ConfigChannel+0x84a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fce5 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 83f3 	bne.w	800480c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7ff fba9 	bl	800378a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fcd3 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8004042:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fcf3 	bl	8003a36 <LL_ADC_INJ_IsConversionOngoing>
 8004050:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004054:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 81d9 	bne.w	8004410 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800405e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 81d4 	bne.w	8004410 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004070:	d10f      	bne.n	8004092 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	4619      	mov	r1, r3
 800407e:	f7ff fbb0 	bl	80037e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fb57 	bl	800373e <LL_ADC_SetSamplingTimeCommonConfig>
 8004090:	e00e      	b.n	80040b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6819      	ldr	r1, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	461a      	mov	r2, r3
 80040a0:	f7ff fb9f 	bl	80037e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fb47 	bl	800373e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	08db      	lsrs	r3, r3, #3
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d022      	beq.n	8004118 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040e2:	f7ff faa1 	bl	8003628 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7ff faed 	bl	80036d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6919      	ldr	r1, [r3, #16]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	7f1b      	ldrb	r3, [r3, #28]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d102      	bne.n	800410e <HAL_ADC_ConfigChannel+0x126>
 8004108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410c:	e000      	b.n	8004110 <HAL_ADC_ConfigChannel+0x128>
 800410e:	2300      	movs	r3, #0
 8004110:	461a      	mov	r2, r3
 8004112:	f7ff faf9 	bl	8003708 <LL_ADC_SetOffsetSaturation>
 8004116:	e17b      	b.n	8004410 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff faa6 	bl	8003670 <LL_ADC_GetOffsetChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x15c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fa9b 	bl	8003670 <LL_ADC_GetOffsetChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	f003 021f 	and.w	r2, r3, #31
 8004142:	e01e      	b.n	8004182 <HAL_ADC_ConfigChannel+0x19a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fa90 	bl	8003670 <LL_ADC_GetOffsetChannel>
 8004150:	4603      	mov	r3, r0
 8004152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800416a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e004      	b.n	8004180 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_ADC_ConfigChannel+0x1b2>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0e9b      	lsrs	r3, r3, #26
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	e018      	b.n	80041cc <HAL_ADC_ConfigChannel+0x1e4>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80041ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80041b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80041be:	2320      	movs	r3, #32
 80041c0:	e004      	b.n	80041cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80041c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d106      	bne.n	80041de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fa5f 	bl	800369c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fa43 	bl	8003670 <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_ADC_ConfigChannel+0x222>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fa38 	bl	8003670 <LL_ADC_GetOffsetChannel>
 8004200:	4603      	mov	r3, r0
 8004202:	0e9b      	lsrs	r3, r3, #26
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	e01e      	b.n	8004248 <HAL_ADC_ConfigChannel+0x260>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2101      	movs	r1, #1
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fa2d 	bl	8003670 <LL_ADC_GetOffsetChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004228:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800422c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004238:	2320      	movs	r3, #32
 800423a:	e004      	b.n	8004246 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800423c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x278>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e9b      	lsrs	r3, r3, #26
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	e018      	b.n	8004292 <HAL_ADC_ConfigChannel+0x2aa>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800427c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004284:	2320      	movs	r3, #32
 8004286:	e004      	b.n	8004292 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004292:	429a      	cmp	r2, r3
 8004294:	d106      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	2101      	movs	r1, #1
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff f9fc 	bl	800369c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f9e0 	bl	8003670 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x2e8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f9d5 	bl	8003670 <LL_ADC_GetOffsetChannel>
 80042c6:	4603      	mov	r3, r0
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	f003 021f 	and.w	r2, r3, #31
 80042ce:	e01e      	b.n	800430e <HAL_ADC_ConfigChannel+0x326>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2102      	movs	r1, #2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff f9ca 	bl	8003670 <LL_ADC_GetOffsetChannel>
 80042dc:	4603      	mov	r3, r0
 80042de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e004      	b.n	800430c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x33e>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0e9b      	lsrs	r3, r3, #26
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	e016      	b.n	8004354 <HAL_ADC_ConfigChannel+0x36c>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800433a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800433e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e004      	b.n	8004354 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800434a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004354:	429a      	cmp	r2, r3
 8004356:	d106      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff f99b 	bl	800369c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f97f 	bl	8003670 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x3aa>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2103      	movs	r1, #3
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff f974 	bl	8003670 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	0e9b      	lsrs	r3, r3, #26
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	e017      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x3da>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2103      	movs	r1, #3
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff f969 	bl	8003670 <LL_ADC_GetOffsetChannel>
 800439e:	4603      	mov	r3, r0
 80043a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80043aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80043ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80043b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <HAL_ADC_ConfigChannel+0x3f2>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	0e9b      	lsrs	r3, r3, #26
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	e011      	b.n	80043fe <HAL_ADC_ConfigChannel+0x416>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e003      	b.n	80043fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80043f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043fe:	429a      	cmp	r2, r3
 8004400:	d106      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	2103      	movs	r1, #3
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f946 	bl	800369c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff faad 	bl	8003974 <LL_ADC_IsEnabled>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 813d 	bne.w	800469c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	461a      	mov	r2, r3
 8004430:	f7ff fa02 	bl	8003838 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4aa2      	ldr	r2, [pc, #648]	; (80046c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	f040 812e 	bne.w	800469c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x480>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	3301      	adds	r3, #1
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2b09      	cmp	r3, #9
 800445e:	bf94      	ite	ls
 8004460:	2301      	movls	r3, #1
 8004462:	2300      	movhi	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e019      	b.n	800449c <HAL_ADC_ConfigChannel+0x4b4>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004478:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800447a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e003      	b.n	800448c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3301      	adds	r3, #1
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b09      	cmp	r3, #9
 8004494:	bf94      	ite	ls
 8004496:	2301      	movls	r3, #1
 8004498:	2300      	movhi	r3, #0
 800449a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800449c:	2b00      	cmp	r3, #0
 800449e:	d079      	beq.n	8004594 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x4d4>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0e9b      	lsrs	r3, r3, #26
 80044b2:	3301      	adds	r3, #1
 80044b4:	069b      	lsls	r3, r3, #26
 80044b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ba:	e015      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x500>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80044d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	069b      	lsls	r3, r3, #26
 80044e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x520>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	3301      	adds	r3, #1
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	e017      	b.n	8004538 <HAL_ADC_ConfigChannel+0x550>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004518:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004520:	2320      	movs	r3, #32
 8004522:	e003      	b.n	800452c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3301      	adds	r3, #1
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2101      	movs	r1, #1
 8004534:	fa01 f303 	lsl.w	r3, r1, r3
 8004538:	ea42 0103 	orr.w	r1, r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_ADC_ConfigChannel+0x576>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	051b      	lsls	r3, r3, #20
 800455c:	e018      	b.n	8004590 <HAL_ADC_ConfigChannel+0x5a8>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004576:	2320      	movs	r3, #32
 8004578:	e003      	b.n	8004582 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3301      	adds	r3, #1
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	430b      	orrs	r3, r1
 8004592:	e07e      	b.n	8004692 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x5c8>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	3301      	adds	r3, #1
 80045a8:	069b      	lsls	r3, r3, #26
 80045aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ae:	e015      	b.n	80045dc <HAL_ADC_ConfigChannel+0x5f4>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80045c8:	2320      	movs	r3, #32
 80045ca:	e003      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x614>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	e017      	b.n	800462c <HAL_ADC_ConfigChannel+0x644>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	61fb      	str	r3, [r7, #28]
  return result;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004614:	2320      	movs	r3, #32
 8004616:	e003      	b.n	8004620 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x670>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0e9b      	lsrs	r3, r3, #26
 8004642:	3301      	adds	r3, #1
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	3b1e      	subs	r3, #30
 8004650:	051b      	lsls	r3, r3, #20
 8004652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004656:	e01b      	b.n	8004690 <HAL_ADC_ConfigChannel+0x6a8>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	613b      	str	r3, [r7, #16]
  return result;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e003      	b.n	800467c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3301      	adds	r3, #1
 800467e:	f003 021f 	and.w	r2, r3, #31
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	3b1e      	subs	r3, #30
 800468a:	051b      	lsls	r3, r3, #20
 800468c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004690:	430b      	orrs	r3, r1
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6892      	ldr	r2, [r2, #8]
 8004696:	4619      	mov	r1, r3
 8004698:	f7ff f8a3 	bl	80037e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80be 	beq.w	8004826 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b2:	d004      	beq.n	80046be <HAL_ADC_ConfigChannel+0x6d6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_ADC_ConfigChannel+0x6e4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10a      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x6ec>
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80046c0:	e009      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x6ee>
 80046c2:	bf00      	nop
 80046c4:	407f0000 	.word	0x407f0000
 80046c8:	80080000 	.word	0x80080000
 80046cc:	50000100 	.word	0x50000100
 80046d0:	50000300 	.word	0x50000300
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_ADC_ConfigChannel+0x854>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe ff98 	bl	800360c <LL_ADC_GetCommonPathInternalCh>
 80046dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a56      	ldr	r2, [pc, #344]	; (8004840 <HAL_ADC_ConfigChannel+0x858>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_ADC_ConfigChannel+0x70c>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a55      	ldr	r2, [pc, #340]	; (8004844 <HAL_ADC_ConfigChannel+0x85c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d13a      	bne.n	800476a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d134      	bne.n	800476a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004708:	d005      	beq.n	8004716 <HAL_ADC_ConfigChannel+0x72e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4e      	ldr	r2, [pc, #312]	; (8004848 <HAL_ADC_ConfigChannel+0x860>)
 8004710:	4293      	cmp	r3, r2
 8004712:	f040 8085 	bne.w	8004820 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800471e:	d004      	beq.n	800472a <HAL_ADC_ConfigChannel+0x742>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_ADC_ConfigChannel+0x864>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d101      	bne.n	800472e <HAL_ADC_ConfigChannel+0x746>
 800472a:	4a49      	ldr	r2, [pc, #292]	; (8004850 <HAL_ADC_ConfigChannel+0x868>)
 800472c:	e000      	b.n	8004730 <HAL_ADC_ConfigChannel+0x748>
 800472e:	4a43      	ldr	r2, [pc, #268]	; (800483c <HAL_ADC_ConfigChannel+0x854>)
 8004730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004734:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7fe ff53 	bl	80035e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004740:	4b44      	ldr	r3, [pc, #272]	; (8004854 <HAL_ADC_ConfigChannel+0x86c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	4a44      	ldr	r2, [pc, #272]	; (8004858 <HAL_ADC_ConfigChannel+0x870>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	099b      	lsrs	r3, r3, #6
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800475a:	e002      	b.n	8004762 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3b01      	subs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f9      	bne.n	800475c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004768:	e05a      	b.n	8004820 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3b      	ldr	r2, [pc, #236]	; (800485c <HAL_ADC_ConfigChannel+0x874>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d125      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x7d8>
 8004774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11f      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a31      	ldr	r2, [pc, #196]	; (800484c <HAL_ADC_ConfigChannel+0x864>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d104      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x7ac>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a34      	ldr	r2, [pc, #208]	; (8004860 <HAL_ADC_ConfigChannel+0x878>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d047      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800479c:	d004      	beq.n	80047a8 <HAL_ADC_ConfigChannel+0x7c0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2a      	ldr	r2, [pc, #168]	; (800484c <HAL_ADC_ConfigChannel+0x864>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d101      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x7c4>
 80047a8:	4a29      	ldr	r2, [pc, #164]	; (8004850 <HAL_ADC_ConfigChannel+0x868>)
 80047aa:	e000      	b.n	80047ae <HAL_ADC_ConfigChannel+0x7c6>
 80047ac:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_ADC_ConfigChannel+0x854>)
 80047ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe ff14 	bl	80035e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047be:	e031      	b.n	8004824 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a27      	ldr	r2, [pc, #156]	; (8004864 <HAL_ADC_ConfigChannel+0x87c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d12d      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d127      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_ADC_ConfigChannel+0x864>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d022      	beq.n	8004826 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e8:	d004      	beq.n	80047f4 <HAL_ADC_ConfigChannel+0x80c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a17      	ldr	r2, [pc, #92]	; (800484c <HAL_ADC_ConfigChannel+0x864>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x810>
 80047f4:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_ADC_ConfigChannel+0x868>)
 80047f6:	e000      	b.n	80047fa <HAL_ADC_ConfigChannel+0x812>
 80047f8:	4a10      	ldr	r2, [pc, #64]	; (800483c <HAL_ADC_ConfigChannel+0x854>)
 80047fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe feee 	bl	80035e6 <LL_ADC_SetCommonPathInternalCh>
 800480a:	e00c      	b.n	8004826 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800481e:	e002      	b.n	8004826 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004824:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800482e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004832:	4618      	mov	r0, r3
 8004834:	37d8      	adds	r7, #216	; 0xd8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	50000700 	.word	0x50000700
 8004840:	c3210000 	.word	0xc3210000
 8004844:	90c00010 	.word	0x90c00010
 8004848:	50000600 	.word	0x50000600
 800484c:	50000100 	.word	0x50000100
 8004850:	50000300 	.word	0x50000300
 8004854:	20000024 	.word	0x20000024
 8004858:	053e2d63 	.word	0x053e2d63
 800485c:	c7520000 	.word	0xc7520000
 8004860:	50000500 	.word	0x50000500
 8004864:	cb840000 	.word	0xcb840000

08004868 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff f8b2 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8004884:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff f8d3 	bl	8003a36 <LL_ADC_INJ_IsConversionOngoing>
 8004890:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8098 	beq.w	80049d0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02a      	beq.n	8004904 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7f5b      	ldrb	r3, [r3, #29]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d126      	bne.n	8004904 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7f1b      	ldrb	r3, [r3, #28]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d122      	bne.n	8004904 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80048be:	2301      	movs	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80048c2:	e014      	b.n	80048ee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4a45      	ldr	r2, [pc, #276]	; (80049dc <ADC_ConversionStop+0x174>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d90d      	bls.n	80048e8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e074      	b.n	80049d2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d1e3      	bne.n	80048c4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d014      	beq.n	8004934 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f86a 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f83b 	bl	800399a <LL_ADC_IsDisableOngoing>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff f846 	bl	80039c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d014      	beq.n	8004964 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f879 	bl	8003a36 <LL_ADC_INJ_IsConversionOngoing>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff f823 	bl	800399a <LL_ADC_IsDisableOngoing>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff f855 	bl	8003a0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d005      	beq.n	8004976 <ADC_ConversionStop+0x10e>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d105      	bne.n	800497c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004970:	230c      	movs	r3, #12
 8004972:	617b      	str	r3, [r7, #20]
        break;
 8004974:	e005      	b.n	8004982 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004976:	2308      	movs	r3, #8
 8004978:	617b      	str	r3, [r7, #20]
        break;
 800497a:	e002      	b.n	8004982 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800497c:	2304      	movs	r3, #4
 800497e:	617b      	str	r3, [r7, #20]
        break;
 8004980:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004982:	f7fe fdef 	bl	8003564 <HAL_GetTick>
 8004986:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004988:	e01b      	b.n	80049c2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800498a:	f7fe fdeb 	bl	8003564 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b05      	cmp	r3, #5
 8004996:	d914      	bls.n	80049c2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049aa:	f043 0210 	orr.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e007      	b.n	80049d2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1dc      	bne.n	800498a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	a33fffff 	.word	0xa33fffff

080049e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe ffc1 	bl	8003974 <LL_ADC_IsEnabled>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d14d      	bne.n	8004a94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <ADC_Enable+0xc0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	f043 0210 	orr.w	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	f043 0201 	orr.w	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e039      	b.n	8004a96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe ff7c 	bl	8003924 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a2c:	f7fe fd9a 	bl	8003564 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a32:	e028      	b.n	8004a86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe ff9b 	bl	8003974 <LL_ADC_IsEnabled>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe ff6b 	bl	8003924 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a4e:	f7fe fd89 	bl	8003564 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d914      	bls.n	8004a86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d00d      	beq.n	8004a86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	f043 0210 	orr.w	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	f043 0201 	orr.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e007      	b.n	8004a96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d1cf      	bne.n	8004a34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	8000003f 	.word	0x8000003f

08004aa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe ff72 	bl	800399a <LL_ADC_IsDisableOngoing>
 8004ab6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe ff59 	bl	8003974 <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d047      	beq.n	8004b58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d144      	bne.n	8004b58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030d 	and.w	r3, r3, #13
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10c      	bne.n	8004af6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe ff33 	bl	800394c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2203      	movs	r2, #3
 8004aec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aee:	f7fe fd39 	bl	8003564 <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004af4:	e029      	b.n	8004b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f043 0210 	orr.w	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	f043 0201 	orr.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e023      	b.n	8004b5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b12:	f7fe fd27 	bl	8003564 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d914      	bls.n	8004b4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	f043 0210 	orr.w	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e007      	b.n	8004b5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1dc      	bne.n	8004b12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d14c      	bne.n	8004c16 <ADC_DMAConvCplt+0xb4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d021      	beq.n	8004bda <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fde2 	bl	8003764 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d032      	beq.n	8004c0c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d12b      	bne.n	8004c0c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11f      	bne.n	8004c0c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bd8:	e018      	b.n	8004c0c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d111      	bne.n	8004c0c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c14:	e00f      	b.n	8004c36 <ADC_DMAConvCplt+0xd4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <ADC_DMAConvCplt+0xca>
      hadc->ErrorCallback(hadc);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	4798      	blx	r3
}
 8004c2a:	e004      	b.n	8004c36 <ADC_DMAConvCplt+0xd4>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7a:	f043 0204 	orr.w	r2, r3, #4
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <LL_ADC_IsEnabled>:
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <LL_ADC_IsEnabled+0x18>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <LL_ADC_IsEnabled+0x1a>
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_ADC_REG_StartConversion>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ccc:	f043 0204 	orr.w	r2, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d101      	bne.n	8004cf8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b0ac      	sub	sp, #176	; 0xb0
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ffe1 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
 8004d26:	e09c      	b.n	8004e62 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e095      	b.n	8004e62 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d5a:	d102      	bne.n	8004d62 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	e009      	b.n	8004d76 <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a42      	ldr	r2, [pc, #264]	; (8004e70 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d102      	bne.n	8004d72 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8004d6c:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	e001      	b.n	8004d76 <HAL_ADCEx_MultiModeStart_DMA+0x6e>
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e066      	b.n	8004e62 <HAL_ADCEx_MultiModeStart_DMA+0x15a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fe23 	bl	80049e0 <ADC_Enable>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    if (tmp_hal_status == HAL_OK)
 8004da0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_ADCEx_MultiModeStart_DMA+0xb0>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fe17 	bl	80049e0 <ADC_Enable>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8004db8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d14a      	bne.n	8004e56 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dfa:	d004      	beq.n	8004e06 <HAL_ADCEx_MultiModeStart_DMA+0xfe>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_ADCEx_MultiModeStart_DMA+0x102>
 8004e06:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8004e08:	e000      	b.n	8004e0c <HAL_ADCEx_MultiModeStart_DMA+0x104>
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8004e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	221c      	movs	r2, #28
 8004e16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0210 	orr.w	r2, r2, #16
 8004e2e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e38:	330c      	adds	r3, #12
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f000 ff38 	bl	8005cb4 <HAL_DMA_Start_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ff32 	bl	8004cb8 <LL_ADC_REG_StartConversion>
 8004e54:	e003      	b.n	8004e5e <HAL_ADCEx_MultiModeStart_DMA+0x156>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004e5e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	37b0      	adds	r7, #176	; 0xb0
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000400 	.word	0x50000400
 8004e74:	50000500 	.word	0x50000500
 8004e78:	08004b63 	.word	0x08004b63
 8004e7c:	08004c3f 	.word	0x08004c3f
 8004e80:	08004c5d 	.word	0x08004c5d
 8004e84:	50000300 	.word	0x50000300
 8004e88:	50000700 	.word	0x50000700

08004e8c <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b0ac      	sub	sp, #176	; 0xb0
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e0c9      	b.n	8005036 <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004eaa:	2103      	movs	r1, #3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fcdb 	bl	8004868 <ADC_ConversionStop>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004eb8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 80b4 	bne.w	800502a <HAL_ADCEx_MultiModeStop_DMA+0x19e>
  {
    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ede:	d102      	bne.n	8004ee6 <HAL_ADCEx_MultiModeStop_DMA+0x5a>
 8004ee0:	4b57      	ldr	r3, [pc, #348]	; (8005040 <HAL_ADCEx_MultiModeStop_DMA+0x1b4>)
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	e009      	b.n	8004efa <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a56      	ldr	r2, [pc, #344]	; (8005044 <HAL_ADCEx_MultiModeStop_DMA+0x1b8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d102      	bne.n	8004ef6 <HAL_ADCEx_MultiModeStop_DMA+0x6a>
 8004ef0:	4b55      	ldr	r3, [pc, #340]	; (8005048 <HAL_ADCEx_MultiModeStop_DMA+0x1bc>)
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	e001      	b.n	8004efa <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]

    if (tmphadcSlave.Instance == NULL)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <HAL_ADCEx_MultiModeStop_DMA+0x8c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e08e      	b.n	8005036 <HAL_ADCEx_MultiModeStop_DMA+0x1aa>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8004f18:	f7fe fb24 	bl	8003564 <HAL_GetTick>
 8004f1c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fedc 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8004f28:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8004f2c:	e02b      	b.n	8004f86 <HAL_ADCEx_MultiModeStop_DMA+0xfa>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004f2e:	f7fe fb19 	bl	8003564 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d91d      	bls.n	8004f7a <HAL_ADCEx_MultiModeStop_DMA+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fecd 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8004f46:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fec6 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d003      	beq.n	8004f62 <HAL_ADCEx_MultiModeStop_DMA+0xd6>
            || (tmphadcSlave_conversion_on_going == 1UL)
 8004f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10b      	bne.n	8004f7a <HAL_ADCEx_MultiModeStop_DMA+0xee>
           )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	f043 0210 	orr.w	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e05d      	b.n	8005036 <HAL_ADCEx_MultiModeStop_DMA+0x1aa>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff feaf 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8004f82:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fea8 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d0cb      	beq.n	8004f2e <HAL_ADCEx_MultiModeStop_DMA+0xa2>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8004f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d0c7      	beq.n	8004f2e <HAL_ADCEx_MultiModeStop_DMA+0xa2>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 ff01 	bl	8005daa <HAL_DMA_Abort>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8004fae:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_ADCEx_MultiModeStop_DMA+0x136>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0210 	bic.w	r2, r2, #16
 8004fd0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8004fd2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d115      	bne.n	8005006 <HAL_ADCEx_MultiModeStop_DMA+0x17a>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fd60 	bl	8004aa4 <ADC_Disable>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fd5a 	bl	8004aa4 <ADC_Disable>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <HAL_ADCEx_MultiModeStop_DMA+0x18a>
 8004ff6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_ADCEx_MultiModeStop_DMA+0x18a>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8005004:	e007      	b.n	8005016 <HAL_ADCEx_MultiModeStop_DMA+0x18a>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fd4c 	bl	8004aa4 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 800500c:	f107 0308 	add.w	r3, r7, #8
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fd47 	bl	8004aa4 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005032:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8005036:	4618      	mov	r0, r3
 8005038:	37b0      	adds	r7, #176	; 0xb0
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	50000100 	.word	0x50000100
 8005044:	50000400 	.word	0x50000400
 8005048:	50000500 	.word	0x50000500

0800504c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b0ad      	sub	sp, #180	; 0xb4
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0f8      	b.n	80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80050d6:	2300      	movs	r3, #0
 80050d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050da:	2300      	movs	r3, #0
 80050dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80050e6:	2300      	movs	r3, #0
 80050e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f2:	d102      	bne.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80050f4:	4b74      	ldr	r3, [pc, #464]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e009      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a73      	ldr	r2, [pc, #460]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d102      	bne.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8005104:	4b72      	ldr	r3, [pc, #456]	; (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e001      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0c9      	b.n	80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fdd6 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8005134:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fdcf 	bl	8004ce0 <LL_ADC_REG_IsConversionOngoing>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	f040 80aa 	bne.w	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800514a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 80a5 	bne.w	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800515c:	d004      	beq.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 800516a:	e000      	b.n	800516e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 800516c:	4b5a      	ldr	r3, [pc, #360]	; (80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 800516e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04f      	beq.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800517a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800518e:	035b      	lsls	r3, r3, #13
 8005190:	430b      	orrs	r3, r1
 8005192:	431a      	orrs	r2, r3
 8005194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005198:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051a2:	d004      	beq.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a47      	ldr	r2, [pc, #284]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10f      	bne.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 80051ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80051b2:	f7ff fd6e 	bl	8004c92 <LL_ADC_IsEnabled>
 80051b6:	4604      	mov	r4, r0
 80051b8:	4843      	ldr	r0, [pc, #268]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80051ba:	f7ff fd6a 	bl	8004c92 <LL_ADC_IsEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	4323      	orrs	r3, r4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	e012      	b.n	80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 80051ce:	483f      	ldr	r0, [pc, #252]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80051d0:	f7ff fd5f 	bl	8004c92 <LL_ADC_IsEnabled>
 80051d4:	4604      	mov	r4, r0
 80051d6:	483e      	ldr	r0, [pc, #248]	; (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80051d8:	f7ff fd5b 	bl	8004c92 <LL_ADC_IsEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	431c      	orrs	r4, r3
 80051e0:	483e      	ldr	r0, [pc, #248]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 80051e2:	f7ff fd56 	bl	8004c92 <LL_ADC_IsEnabled>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4323      	orrs	r3, r4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05c      	beq.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005202:	f023 030f 	bic.w	r3, r3, #15
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	6811      	ldr	r1, [r2, #0]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	6892      	ldr	r2, [r2, #8]
 800520e:	430a      	orrs	r2, r1
 8005210:	431a      	orrs	r2, r3
 8005212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005216:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005218:	e04b      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800521a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005228:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005232:	d004      	beq.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10f      	bne.n	800525e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800523e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005242:	f7ff fd26 	bl	8004c92 <LL_ADC_IsEnabled>
 8005246:	4604      	mov	r4, r0
 8005248:	481f      	ldr	r0, [pc, #124]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800524a:	f7ff fd22 	bl	8004c92 <LL_ADC_IsEnabled>
 800524e:	4603      	mov	r3, r0
 8005250:	4323      	orrs	r3, r4
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e012      	b.n	8005284 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 800525e:	481b      	ldr	r0, [pc, #108]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8005260:	f7ff fd17 	bl	8004c92 <LL_ADC_IsEnabled>
 8005264:	4604      	mov	r4, r0
 8005266:	481a      	ldr	r0, [pc, #104]	; (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8005268:	f7ff fd13 	bl	8004c92 <LL_ADC_IsEnabled>
 800526c:	4603      	mov	r3, r0
 800526e:	431c      	orrs	r4, r3
 8005270:	481a      	ldr	r0, [pc, #104]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8005272:	f7ff fd0e 	bl	8004c92 <LL_ADC_IsEnabled>
 8005276:	4603      	mov	r3, r0
 8005278:	4323      	orrs	r3, r4
 800527a:	2b00      	cmp	r3, #0
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d014      	beq.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005292:	f023 030f 	bic.w	r3, r3, #15
 8005296:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800529a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800529c:	e009      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80052b0:	e000      	b.n	80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80052bc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	37b4      	adds	r7, #180	; 0xb4
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd90      	pop	{r4, r7, pc}
 80052c8:	50000100 	.word	0x50000100
 80052cc:	50000400 	.word	0x50000400
 80052d0:	50000500 	.word	0x50000500
 80052d4:	50000300 	.word	0x50000300
 80052d8:	50000700 	.word	0x50000700
 80052dc:	50000600 	.word	0x50000600

080052e0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <LL_EXTI_EnableIT_0_31+0x20>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4904      	ldr	r1, [pc, #16]	; (8005300 <LL_EXTI_EnableIT_0_31+0x20>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40010400 	.word	0x40010400

08005304 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <LL_EXTI_EnableIT_32_63+0x20>)
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	4904      	ldr	r1, [pc, #16]	; (8005324 <LL_EXTI_EnableIT_32_63+0x20>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	620b      	str	r3, [r1, #32]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40010400 	.word	0x40010400

08005328 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <LL_EXTI_DisableIT_0_31+0x24>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	43db      	mvns	r3, r3
 8005338:	4904      	ldr	r1, [pc, #16]	; (800534c <LL_EXTI_DisableIT_0_31+0x24>)
 800533a:	4013      	ands	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40010400 	.word	0x40010400

08005350 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <LL_EXTI_DisableIT_32_63+0x24>)
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	43db      	mvns	r3, r3
 8005360:	4904      	ldr	r1, [pc, #16]	; (8005374 <LL_EXTI_DisableIT_32_63+0x24>)
 8005362:	4013      	ands	r3, r2
 8005364:	620b      	str	r3, [r1, #32]
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010400 	.word	0x40010400

08005378 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4904      	ldr	r1, [pc, #16]	; (8005398 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]

}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40010400 	.word	0x40010400

0800539c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <LL_EXTI_EnableEvent_32_63+0x20>)
 80053a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a8:	4904      	ldr	r1, [pc, #16]	; (80053bc <LL_EXTI_EnableEvent_32_63+0x20>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40010400 	.word	0x40010400

080053c0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	43db      	mvns	r3, r3
 80053d0:	4904      	ldr	r1, [pc, #16]	; (80053e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	604b      	str	r3, [r1, #4]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010400 	.word	0x40010400

080053e8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <LL_EXTI_DisableEvent_32_63+0x24>)
 80053f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	4904      	ldr	r1, [pc, #16]	; (800540c <LL_EXTI_DisableEvent_32_63+0x24>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010400 	.word	0x40010400

08005410 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4904      	ldr	r1, [pc, #16]	; (8005430 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4313      	orrs	r3, r2
 8005422:	608b      	str	r3, [r1, #8]

}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40010400 	.word	0x40010400

08005434 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800543e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005440:	4904      	ldr	r1, [pc, #16]	; (8005454 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4313      	orrs	r3, r2
 8005446:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40010400 	.word	0x40010400

08005458 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	43db      	mvns	r3, r3
 8005468:	4904      	ldr	r1, [pc, #16]	; (800547c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800546a:	4013      	ands	r3, r2
 800546c:	608b      	str	r3, [r1, #8]

}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40010400 	.word	0x40010400

08005480 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800548a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	43db      	mvns	r3, r3
 8005490:	4904      	ldr	r1, [pc, #16]	; (80054a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005492:	4013      	ands	r3, r2
 8005494:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40010400 	.word	0x40010400

080054a8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	4904      	ldr	r1, [pc, #16]	; (80054c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60cb      	str	r3, [r1, #12]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	40010400 	.word	0x40010400

080054cc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	4904      	ldr	r1, [pc, #16]	; (80054ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4313      	orrs	r3, r2
 80054de:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40010400 	.word	0x40010400

080054f0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	43db      	mvns	r3, r3
 8005500:	4904      	ldr	r1, [pc, #16]	; (8005514 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005502:	4013      	ands	r3, r2
 8005504:	60cb      	str	r3, [r1, #12]
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010400 	.word	0x40010400

08005518 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	43db      	mvns	r3, r3
 8005528:	4904      	ldr	r1, [pc, #16]	; (800553c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800552a:	4013      	ands	r3, r2
 800552c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40010400 	.word	0x40010400

08005540 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6153      	str	r3, [r2, #20]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010400 	.word	0x40010400

08005560 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010400 	.word	0x40010400

08005580 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e181      	b.n	80058a0 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055aa:	d102      	bne.n	80055b2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e176      	b.n	80058a0 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7f5b      	ldrb	r3, [r3, #29]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb f801 	bl	80005d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b90      	ldr	r3, [pc, #576]	; (8005840 <HAL_COMP_Init+0x2c0>)
 8005600:	4013      	ands	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	6979      	ldr	r1, [r7, #20]
 8005608:	430b      	orrs	r3, r1
 800560a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_COMP_Init+0xc8>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d113      	bne.n	8005648 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005620:	4b88      	ldr	r3, [pc, #544]	; (8005844 <HAL_COMP_Init+0x2c4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	4a88      	ldr	r2, [pc, #544]	; (8005848 <HAL_COMP_Init+0x2c8>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800563a:	e002      	b.n	8005642 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b01      	subs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f9      	bne.n	800563c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a7f      	ldr	r2, [pc, #508]	; (800584c <HAL_COMP_Init+0x2cc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d028      	beq.n	80056a4 <HAL_COMP_Init+0x124>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7e      	ldr	r2, [pc, #504]	; (8005850 <HAL_COMP_Init+0x2d0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d020      	beq.n	800569e <HAL_COMP_Init+0x11e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a7c      	ldr	r2, [pc, #496]	; (8005854 <HAL_COMP_Init+0x2d4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_COMP_Init+0x118>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a7b      	ldr	r2, [pc, #492]	; (8005858 <HAL_COMP_Init+0x2d8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d010      	beq.n	8005692 <HAL_COMP_Init+0x112>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a79      	ldr	r2, [pc, #484]	; (800585c <HAL_COMP_Init+0x2dc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d008      	beq.n	800568c <HAL_COMP_Init+0x10c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a78      	ldr	r2, [pc, #480]	; (8005860 <HAL_COMP_Init+0x2e0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d101      	bne.n	8005688 <HAL_COMP_Init+0x108>
 8005684:	2301      	movs	r3, #1
 8005686:	e00f      	b.n	80056a8 <HAL_COMP_Init+0x128>
 8005688:	2302      	movs	r3, #2
 800568a:	e00d      	b.n	80056a8 <HAL_COMP_Init+0x128>
 800568c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005690:	e00a      	b.n	80056a8 <HAL_COMP_Init+0x128>
 8005692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005696:	e007      	b.n	80056a8 <HAL_COMP_Init+0x128>
 8005698:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800569c:	e004      	b.n	80056a8 <HAL_COMP_Init+0x128>
 800569e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056a2:	e001      	b.n	80056a8 <HAL_COMP_Init+0x128>
 80056a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056a8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80b6 	beq.w	8005824 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d011      	beq.n	80056e8 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	; (8005860 <HAL_COMP_Init+0x2e0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_COMP_Init+0x158>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a64      	ldr	r2, [pc, #400]	; (8005864 <HAL_COMP_Init+0x2e4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80056d8:	6938      	ldr	r0, [r7, #16]
 80056da:	f7ff feab 	bl	8005434 <LL_EXTI_EnableRisingTrig_32_63>
 80056de:	e014      	b.n	800570a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f7ff fe95 	bl	8005410 <LL_EXTI_EnableRisingTrig_0_31>
 80056e6:	e010      	b.n	800570a <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a5c      	ldr	r2, [pc, #368]	; (8005860 <HAL_COMP_Init+0x2e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_COMP_Init+0x17c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a5b      	ldr	r2, [pc, #364]	; (8005864 <HAL_COMP_Init+0x2e4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d103      	bne.n	8005704 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80056fc:	6938      	ldr	r0, [r7, #16]
 80056fe:	f7ff febf 	bl	8005480 <LL_EXTI_DisableRisingTrig_32_63>
 8005702:	e002      	b.n	800570a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005704:	6938      	ldr	r0, [r7, #16]
 8005706:	f7ff fea7 	bl	8005458 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a51      	ldr	r2, [pc, #324]	; (8005860 <HAL_COMP_Init+0x2e0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_COMP_Init+0x1aa>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a4f      	ldr	r2, [pc, #316]	; (8005864 <HAL_COMP_Init+0x2e4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d103      	bne.n	8005732 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f7ff fece 	bl	80054cc <LL_EXTI_EnableFallingTrig_32_63>
 8005730:	e014      	b.n	800575c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005732:	6938      	ldr	r0, [r7, #16]
 8005734:	f7ff feb8 	bl	80054a8 <LL_EXTI_EnableFallingTrig_0_31>
 8005738:	e010      	b.n	800575c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a48      	ldr	r2, [pc, #288]	; (8005860 <HAL_COMP_Init+0x2e0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_COMP_Init+0x1ce>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a46      	ldr	r2, [pc, #280]	; (8005864 <HAL_COMP_Init+0x2e4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d103      	bne.n	8005756 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800574e:	6938      	ldr	r0, [r7, #16]
 8005750:	f7ff fee2 	bl	8005518 <LL_EXTI_DisableFallingTrig_32_63>
 8005754:	e002      	b.n	800575c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005756:	6938      	ldr	r0, [r7, #16]
 8005758:	f7ff feca 	bl	80054f0 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3f      	ldr	r2, [pc, #252]	; (8005860 <HAL_COMP_Init+0x2e0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_COMP_Init+0x1f0>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3e      	ldr	r2, [pc, #248]	; (8005864 <HAL_COMP_Init+0x2e4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d103      	bne.n	8005778 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005770:	6938      	ldr	r0, [r7, #16]
 8005772:	f7ff fef5 	bl	8005560 <LL_EXTI_ClearFlag_32_63>
 8005776:	e002      	b.n	800577e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005778:	6938      	ldr	r0, [r7, #16]
 800577a:	f7ff fee1 	bl	8005540 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d011      	beq.n	80057ae <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a34      	ldr	r2, [pc, #208]	; (8005860 <HAL_COMP_Init+0x2e0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_COMP_Init+0x21e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a32      	ldr	r2, [pc, #200]	; (8005864 <HAL_COMP_Init+0x2e4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d103      	bne.n	80057a6 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7ff fdfc 	bl	800539c <LL_EXTI_EnableEvent_32_63>
 80057a4:	e014      	b.n	80057d0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80057a6:	6938      	ldr	r0, [r7, #16]
 80057a8:	f7ff fde6 	bl	8005378 <LL_EXTI_EnableEvent_0_31>
 80057ac:	e010      	b.n	80057d0 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <HAL_COMP_Init+0x2e0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_COMP_Init+0x242>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a29      	ldr	r2, [pc, #164]	; (8005864 <HAL_COMP_Init+0x2e4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d103      	bne.n	80057ca <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80057c2:	6938      	ldr	r0, [r7, #16]
 80057c4:	f7ff fe10 	bl	80053e8 <LL_EXTI_DisableEvent_32_63>
 80057c8:	e002      	b.n	80057d0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80057ca:	6938      	ldr	r0, [r7, #16]
 80057cc:	f7ff fdf8 	bl	80053c0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d011      	beq.n	8005800 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <HAL_COMP_Init+0x2e0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_COMP_Init+0x270>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_COMP_Init+0x2e4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d103      	bne.n	80057f8 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80057f0:	6938      	ldr	r0, [r7, #16]
 80057f2:	f7ff fd87 	bl	8005304 <LL_EXTI_EnableIT_32_63>
 80057f6:	e04b      	b.n	8005890 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80057f8:	6938      	ldr	r0, [r7, #16]
 80057fa:	f7ff fd71 	bl	80052e0 <LL_EXTI_EnableIT_0_31>
 80057fe:	e047      	b.n	8005890 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_COMP_Init+0x2e0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_COMP_Init+0x294>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <HAL_COMP_Init+0x2e4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005814:	6938      	ldr	r0, [r7, #16]
 8005816:	f7ff fd9b 	bl	8005350 <LL_EXTI_DisableIT_32_63>
 800581a:	e039      	b.n	8005890 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800581c:	6938      	ldr	r0, [r7, #16]
 800581e:	f7ff fd83 	bl	8005328 <LL_EXTI_DisableIT_0_31>
 8005822:	e035      	b.n	8005890 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <HAL_COMP_Init+0x2e0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_COMP_Init+0x2b8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <HAL_COMP_Init+0x2e4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d117      	bne.n	8005868 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8005838:	6938      	ldr	r0, [r7, #16]
 800583a:	f7ff fdd5 	bl	80053e8 <LL_EXTI_DisableEvent_32_63>
 800583e:	e016      	b.n	800586e <HAL_COMP_Init+0x2ee>
 8005840:	ff007e0f 	.word	0xff007e0f
 8005844:	20000024 	.word	0x20000024
 8005848:	053e2d63 	.word	0x053e2d63
 800584c:	40010200 	.word	0x40010200
 8005850:	40010204 	.word	0x40010204
 8005854:	40010208 	.word	0x40010208
 8005858:	4001020c 	.word	0x4001020c
 800585c:	40010210 	.word	0x40010210
 8005860:	40010214 	.word	0x40010214
 8005864:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005868:	6938      	ldr	r0, [r7, #16]
 800586a:	f7ff fda9 	bl	80053c0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a0e      	ldr	r2, [pc, #56]	; (80058ac <HAL_COMP_Init+0x32c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_COMP_Init+0x302>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <HAL_COMP_Init+0x330>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d103      	bne.n	800588a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f7ff fd64 	bl	8005350 <LL_EXTI_DisableIT_32_63>
 8005888:	e002      	b.n	8005890 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800588a:	6938      	ldr	r0, [r7, #16]
 800588c:	f7ff fd4c 	bl	8005328 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7f5b      	ldrb	r3, [r3, #29]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40010214 	.word	0x40010214
 80058b0:	40010218 	.word	0x40010218

080058b4 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80058bc:	2300      	movs	r3, #0
 80058be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	e02e      	b.n	800592e <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058de:	d102      	bne.n	80058e6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e023      	b.n	800592e <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7f5b      	ldrb	r3, [r3, #29]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d11c      	bne.n	800592a <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_COMP_Start+0x88>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <HAL_COMP_Start+0x8c>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	0cda      	lsrs	r2, r3, #19
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800591a:	e002      	b.n	8005922 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	3b01      	subs	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f9      	bne.n	800591c <HAL_COMP_Start+0x68>
 8005928:	e001      	b.n	800592e <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800592e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20000024 	.word	0x20000024
 8005940:	431bde83 	.word	0x431bde83

08005944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <__NVIC_SetPriorityGrouping+0x44>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005960:	4013      	ands	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800596c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005976:	4a04      	ldr	r2, [pc, #16]	; (8005988 <__NVIC_SetPriorityGrouping+0x44>)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	60d3      	str	r3, [r2, #12]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	e000ed00 	.word	0xe000ed00

0800598c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	f003 0307 	and.w	r3, r3, #7
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	db0b      	blt.n	80059d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	f003 021f 	and.w	r2, r3, #31
 80059c0:	4907      	ldr	r1, [pc, #28]	; (80059e0 <__NVIC_EnableIRQ+0x38>)
 80059c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2001      	movs	r0, #1
 80059ca:	fa00 f202 	lsl.w	r2, r0, r2
 80059ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	e000e100 	.word	0xe000e100

080059e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	6039      	str	r1, [r7, #0]
 80059ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db0a      	blt.n	8005a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	490c      	ldr	r1, [pc, #48]	; (8005a30 <__NVIC_SetPriority+0x4c>)
 80059fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a02:	0112      	lsls	r2, r2, #4
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	440b      	add	r3, r1
 8005a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a0c:	e00a      	b.n	8005a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	4908      	ldr	r1, [pc, #32]	; (8005a34 <__NVIC_SetPriority+0x50>)
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	0112      	lsls	r2, r2, #4
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	440b      	add	r3, r1
 8005a22:	761a      	strb	r2, [r3, #24]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	e000e100 	.word	0xe000e100
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f1c3 0307 	rsb	r3, r3, #7
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	bf28      	it	cs
 8005a56:	2304      	movcs	r3, #4
 8005a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d902      	bls.n	8005a68 <NVIC_EncodePriority+0x30>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3b03      	subs	r3, #3
 8005a66:	e000      	b.n	8005a6a <NVIC_EncodePriority+0x32>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a80:	f04f 31ff 	mov.w	r1, #4294967295
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	43d9      	mvns	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a90:	4313      	orrs	r3, r2
         );
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab0:	d301      	bcc.n	8005ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e00f      	b.n	8005ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <SysTick_Config+0x40>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005abe:	210f      	movs	r1, #15
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	f7ff ff8e 	bl	80059e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <SysTick_Config+0x40>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <SysTick_Config+0x40>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	e000e010 	.word	0xe000e010

08005ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff29 	bl	8005944 <__NVIC_SetPriorityGrouping>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4603      	mov	r3, r0
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b08:	f7ff ff40 	bl	800598c <__NVIC_GetPriorityGrouping>
 8005b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	6978      	ldr	r0, [r7, #20]
 8005b14:	f7ff ff90 	bl	8005a38 <NVIC_EncodePriority>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ff5f 	bl	80059e4 <__NVIC_SetPriority>
}
 8005b26:	bf00      	nop
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	4603      	mov	r3, r0
 8005b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ff33 	bl	80059a8 <__NVIC_EnableIRQ>
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff ffa4 	bl	8005aa0 <SysTick_Config>
 8005b58:	4603      	mov	r3, r0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e08d      	b.n	8005c92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <HAL_DMA_Init+0x138>)
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d80f      	bhi.n	8005ba2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <HAL_DMA_Init+0x13c>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4a45      	ldr	r2, [pc, #276]	; (8005ca4 <HAL_DMA_Init+0x140>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	009a      	lsls	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a42      	ldr	r2, [pc, #264]	; (8005ca8 <HAL_DMA_Init+0x144>)
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba0:	e00e      	b.n	8005bc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <HAL_DMA_Init+0x148>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <HAL_DMA_Init+0x140>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <HAL_DMA_Init+0x14c>)
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa58 	bl	80060c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c20:	d102      	bne.n	8005c28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_DMA_Init+0x104>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d80c      	bhi.n	8005c68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa78 	bl	8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c64:	605a      	str	r2, [r3, #4]
 8005c66:	e008      	b.n	8005c7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40020407 	.word	0x40020407
 8005ca0:	bffdfff8 	.word	0xbffdfff8
 8005ca4:	cccccccd 	.word	0xcccccccd
 8005ca8:	40020000 	.word	0x40020000
 8005cac:	bffdfbf8 	.word	0xbffdfbf8
 8005cb0:	40020400 	.word	0x40020400

08005cb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_DMA_Start_IT+0x20>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e066      	b.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d155      	bne.n	8005d94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f99d 	bl	800604c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 020e 	orr.w	r2, r2, #14
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e00f      	b.n	8005d4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0204 	bic.w	r2, r2, #4
 8005d3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 020a 	orr.w	r2, r2, #10
 8005d4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e005      	b.n	8005da0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d005      	beq.n	8005dce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	73fb      	strb	r3, [r7, #15]
 8005dcc:	e037      	b.n	8005e3e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 020e 	bic.w	r2, r2, #14
 8005ddc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f003 021f 	and.w	r2, r3, #31
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e10:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e1a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e32:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e3c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d026      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x7a>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d021      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0204 	bic.w	r2, r2, #4
 8005eae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb4:	f003 021f 	and.w	r2, r3, #31
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2104      	movs	r1, #4
 8005ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d071      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005ed4:	e06c      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	2202      	movs	r2, #2
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02e      	beq.n	8005f48 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d029      	beq.n	8005f48 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 020a 	bic.w	r2, r2, #10
 8005f10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	f003 021f 	and.w	r2, r3, #31
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	2102      	movs	r1, #2
 8005f28:	fa01 f202 	lsl.w	r2, r1, r2
 8005f2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d038      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f46:	e033      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	2208      	movs	r2, #8
 8005f52:	409a      	lsls	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02a      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d025      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 020e 	bic.w	r2, r2, #14
 8005f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f003 021f 	and.w	r2, r3, #31
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2101      	movs	r1, #1
 8005f84:	fa01 f202 	lsl.w	r2, r1, r2
 8005f88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
}
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_DMA_RegisterCallback+0x20>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e031      	b.n	8006040 <HAL_DMA_RegisterCallback+0x84>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d120      	bne.n	8006032 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d81a      	bhi.n	800602c <HAL_DMA_RegisterCallback+0x70>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_DMA_RegisterCallback+0x40>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800600d 	.word	0x0800600d
 8006000:	08006015 	.word	0x08006015
 8006004:	0800601d 	.word	0x0800601d
 8006008:	08006025 	.word	0x08006025
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8006012:	e010      	b.n	8006036 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800601a:	e00c      	b.n	8006036 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8006022:	e008      	b.n	8006036 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800602a:	e004      	b.n	8006036 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	75fb      	strb	r3, [r7, #23]
        break;
 8006030:	e001      	b.n	8006036 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006062:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006074:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f003 021f 	and.w	r2, r3, #31
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2101      	movs	r1, #1
 8006084:	fa01 f202 	lsl.w	r2, r1, r2
 8006088:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b10      	cmp	r3, #16
 8006098:	d108      	bne.n	80060ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060aa:	e007      	b.n	80060bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d802      	bhi.n	80060e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060dc:	4b15      	ldr	r3, [pc, #84]	; (8006134 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e001      	b.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80060e2:	4b15      	ldr	r3, [pc, #84]	; (8006138 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	3b08      	subs	r3, #8
 80060f2:	4a12      	ldr	r2, [pc, #72]	; (800613c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	009a      	lsls	r2, r3, #2
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	461a      	mov	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006112:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2201      	movs	r2, #1
 800611c:	409a      	lsls	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40020407 	.word	0x40020407
 8006134:	40020800 	.word	0x40020800
 8006138:	40020820 	.word	0x40020820
 800613c:	cccccccd 	.word	0xcccccccd
 8006140:	40020880 	.word	0x40020880

08006144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	461a      	mov	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a08      	ldr	r2, [pc, #32]	; (8006188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006166:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3b01      	subs	r3, #1
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	2201      	movs	r2, #1
 8006172:	409a      	lsls	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	1000823f 	.word	0x1000823f
 8006188:	40020940 	.word	0x40020940

0800618c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01a      	beq.n	80061da <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d022      	beq.n	8006228 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01a      	beq.n	8006228 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006200:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800620a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
      }
    }
  }
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800623e:	e15a      	b.n	80064f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	2101      	movs	r1, #1
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	fa01 f303 	lsl.w	r3, r1, r3
 800624c:	4013      	ands	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 814c 	beq.w	80064f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d005      	beq.n	8006270 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800626c:	2b02      	cmp	r3, #2
 800626e:	d130      	bne.n	80062d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	2203      	movs	r2, #3
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4013      	ands	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062a6:	2201      	movs	r2, #1
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	43db      	mvns	r3, r3
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4013      	ands	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 0201 	and.w	r2, r3, #1
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d017      	beq.n	800630e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	2203      	movs	r2, #3
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d123      	bne.n	8006362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	08da      	lsrs	r2, r3, #3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3208      	adds	r2, #8
 8006322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	220f      	movs	r2, #15
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4013      	ands	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	08da      	lsrs	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3208      	adds	r2, #8
 800635c:	6939      	ldr	r1, [r7, #16]
 800635e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	2203      	movs	r2, #3
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43db      	mvns	r3, r3
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4013      	ands	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0203 	and.w	r2, r3, #3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 80a6 	beq.w	80064f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a4:	4b5b      	ldr	r3, [pc, #364]	; (8006514 <HAL_GPIO_Init+0x2e4>)
 80063a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a8:	4a5a      	ldr	r2, [pc, #360]	; (8006514 <HAL_GPIO_Init+0x2e4>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6613      	str	r3, [r2, #96]	; 0x60
 80063b0:	4b58      	ldr	r3, [pc, #352]	; (8006514 <HAL_GPIO_Init+0x2e4>)
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063bc:	4a56      	ldr	r2, [pc, #344]	; (8006518 <HAL_GPIO_Init+0x2e8>)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	089b      	lsrs	r3, r3, #2
 80063c2:	3302      	adds	r3, #2
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	220f      	movs	r2, #15
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43db      	mvns	r3, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4013      	ands	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80063e6:	d01f      	beq.n	8006428 <HAL_GPIO_Init+0x1f8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a4c      	ldr	r2, [pc, #304]	; (800651c <HAL_GPIO_Init+0x2ec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d019      	beq.n	8006424 <HAL_GPIO_Init+0x1f4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a4b      	ldr	r2, [pc, #300]	; (8006520 <HAL_GPIO_Init+0x2f0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <HAL_GPIO_Init+0x1f0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a4a      	ldr	r2, [pc, #296]	; (8006524 <HAL_GPIO_Init+0x2f4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00d      	beq.n	800641c <HAL_GPIO_Init+0x1ec>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a49      	ldr	r2, [pc, #292]	; (8006528 <HAL_GPIO_Init+0x2f8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <HAL_GPIO_Init+0x1e8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a48      	ldr	r2, [pc, #288]	; (800652c <HAL_GPIO_Init+0x2fc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <HAL_GPIO_Init+0x1e4>
 8006410:	2305      	movs	r3, #5
 8006412:	e00a      	b.n	800642a <HAL_GPIO_Init+0x1fa>
 8006414:	2306      	movs	r3, #6
 8006416:	e008      	b.n	800642a <HAL_GPIO_Init+0x1fa>
 8006418:	2304      	movs	r3, #4
 800641a:	e006      	b.n	800642a <HAL_GPIO_Init+0x1fa>
 800641c:	2303      	movs	r3, #3
 800641e:	e004      	b.n	800642a <HAL_GPIO_Init+0x1fa>
 8006420:	2302      	movs	r3, #2
 8006422:	e002      	b.n	800642a <HAL_GPIO_Init+0x1fa>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <HAL_GPIO_Init+0x1fa>
 8006428:	2300      	movs	r3, #0
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	f002 0203 	and.w	r2, r2, #3
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	4093      	lsls	r3, r2
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800643a:	4937      	ldr	r1, [pc, #220]	; (8006518 <HAL_GPIO_Init+0x2e8>)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	3302      	adds	r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006448:	4b39      	ldr	r3, [pc, #228]	; (8006530 <HAL_GPIO_Init+0x300>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	43db      	mvns	r3, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4013      	ands	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800646c:	4a30      	ldr	r2, [pc, #192]	; (8006530 <HAL_GPIO_Init+0x300>)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006472:	4b2f      	ldr	r3, [pc, #188]	; (8006530 <HAL_GPIO_Init+0x300>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	43db      	mvns	r3, r3
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006496:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_GPIO_Init+0x300>)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800649c:	4b24      	ldr	r3, [pc, #144]	; (8006530 <HAL_GPIO_Init+0x300>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <HAL_GPIO_Init+0x300>)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80064c6:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <HAL_GPIO_Init+0x300>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4013      	ands	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064ea:	4a11      	ldr	r2, [pc, #68]	; (8006530 <HAL_GPIO_Init+0x300>)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	3301      	adds	r3, #1
 80064f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f ae9d 	bne.w	8006240 <HAL_GPIO_Init+0x10>
  }
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	40021000 	.word	0x40021000
 8006518:	40010000 	.word	0x40010000
 800651c:	48000400 	.word	0x48000400
 8006520:	48000800 	.word	0x48000800
 8006524:	48000c00 	.word	0x48000c00
 8006528:	48001000 	.word	0x48001000
 800652c:	48001400 	.word	0x48001400
 8006530:	40010400 	.word	0x40010400

08006534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	807b      	strh	r3, [r7, #2]
 8006540:	4613      	mov	r3, r2
 8006542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006544:	787b      	ldrb	r3, [r7, #1]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800654a:	887a      	ldrh	r2, [r7, #2]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006550:	e002      	b.n	8006558 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d141      	bne.n	80065f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006572:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657e:	d131      	bne.n	80065e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006580:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006586:	4a46      	ldr	r2, [pc, #280]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800658c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006590:	4b43      	ldr	r3, [pc, #268]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006598:	4a41      	ldr	r2, [pc, #260]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800659a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800659e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065a0:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2232      	movs	r2, #50	; 0x32
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	0c9b      	lsrs	r3, r3, #18
 80065b2:	3301      	adds	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065b6:	e002      	b.n	80065be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065be:	4b38      	ldr	r3, [pc, #224]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ca:	d102      	bne.n	80065d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f2      	bne.n	80065b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065d2:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065de:	d158      	bne.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e057      	b.n	8006694 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065e4:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ea:	4a2d      	ldr	r2, [pc, #180]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80065f4:	e04d      	b.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d141      	bne.n	8006682 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065fe:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660a:	d131      	bne.n	8006670 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800660c:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800660e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006612:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800661c:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800662a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2232      	movs	r2, #50	; 0x32
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	0c9b      	lsrs	r3, r3, #18
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006642:	e002      	b.n	800664a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b01      	subs	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800664a:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006656:	d102      	bne.n	800665e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f2      	bne.n	8006644 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800665e:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666a:	d112      	bne.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e011      	b.n	8006694 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006676:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006680:	e007      	b.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006682:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800668a:	4a05      	ldr	r2, [pc, #20]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006690:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40007000 	.word	0x40007000
 80066a4:	20000024 	.word	0x20000024
 80066a8:	431bde83 	.word	0x431bde83

080066ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e306      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d075      	beq.n	80067b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ca:	4b97      	ldr	r3, [pc, #604]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066d4:	4b94      	ldr	r3, [pc, #592]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b0c      	cmp	r3, #12
 80066e2:	d102      	bne.n	80066ea <HAL_RCC_OscConfig+0x3e>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d002      	beq.n	80066f0 <HAL_RCC_OscConfig+0x44>
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d10b      	bne.n	8006708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f0:	4b8d      	ldr	r3, [pc, #564]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05b      	beq.n	80067b4 <HAL_RCC_OscConfig+0x108>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d157      	bne.n	80067b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e2e1      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d106      	bne.n	8006720 <HAL_RCC_OscConfig+0x74>
 8006712:	4b85      	ldr	r3, [pc, #532]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a84      	ldr	r2, [pc, #528]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e01d      	b.n	800675c <HAL_RCC_OscConfig+0xb0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006728:	d10c      	bne.n	8006744 <HAL_RCC_OscConfig+0x98>
 800672a:	4b7f      	ldr	r3, [pc, #508]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a7e      	ldr	r2, [pc, #504]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4b7c      	ldr	r3, [pc, #496]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a7b      	ldr	r2, [pc, #492]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 800673c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e00b      	b.n	800675c <HAL_RCC_OscConfig+0xb0>
 8006744:	4b78      	ldr	r3, [pc, #480]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a77      	ldr	r2, [pc, #476]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 800674a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	4b75      	ldr	r3, [pc, #468]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a74      	ldr	r2, [pc, #464]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800675a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d013      	beq.n	800678c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fc fefe 	bl	8003564 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800676c:	f7fc fefa 	bl	8003564 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b64      	cmp	r3, #100	; 0x64
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e2a6      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800677e:	4b6a      	ldr	r3, [pc, #424]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0xc0>
 800678a:	e014      	b.n	80067b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fc feea 	bl	8003564 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006794:	f7fc fee6 	bl	8003564 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	; 0x64
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e292      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067a6:	4b60      	ldr	r3, [pc, #384]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f0      	bne.n	8006794 <HAL_RCC_OscConfig+0xe8>
 80067b2:	e000      	b.n	80067b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d075      	beq.n	80068ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067c2:	4b59      	ldr	r3, [pc, #356]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 030c 	and.w	r3, r3, #12
 80067ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067cc:	4b56      	ldr	r3, [pc, #344]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b0c      	cmp	r3, #12
 80067da:	d102      	bne.n	80067e2 <HAL_RCC_OscConfig+0x136>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d002      	beq.n	80067e8 <HAL_RCC_OscConfig+0x13c>
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d11f      	bne.n	8006828 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067e8:	4b4f      	ldr	r3, [pc, #316]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_RCC_OscConfig+0x154>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e265      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006800:	4b49      	ldr	r3, [pc, #292]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	061b      	lsls	r3, r3, #24
 800680e:	4946      	ldr	r1, [pc, #280]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006810:	4313      	orrs	r3, r2
 8006812:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006814:	4b45      	ldr	r3, [pc, #276]	; (800692c <HAL_RCC_OscConfig+0x280>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f7fc fe57 	bl	80034cc <HAL_InitTick>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d043      	beq.n	80068ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e251      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d023      	beq.n	8006878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006830:	4b3d      	ldr	r3, [pc, #244]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a3c      	ldr	r2, [pc, #240]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fc fe92 	bl	8003564 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006844:	f7fc fe8e 	bl	8003564 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e23a      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006856:	4b34      	ldr	r3, [pc, #208]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006862:	4b31      	ldr	r3, [pc, #196]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	061b      	lsls	r3, r3, #24
 8006870:	492d      	ldr	r1, [pc, #180]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006872:	4313      	orrs	r3, r2
 8006874:	604b      	str	r3, [r1, #4]
 8006876:	e01a      	b.n	80068ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006878:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2a      	ldr	r2, [pc, #168]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 800687e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fc fe6e 	bl	8003564 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800688c:	f7fc fe6a 	bl	8003564 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e216      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x1e0>
 80068aa:	e000      	b.n	80068ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d041      	beq.n	800693e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01c      	beq.n	80068fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068c2:	4b19      	ldr	r3, [pc, #100]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80068c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c8:	4a17      	ldr	r2, [pc, #92]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d2:	f7fc fe47 	bl	8003564 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068da:	f7fc fe43 	bl	8003564 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e1ef      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80068ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0ef      	beq.n	80068da <HAL_RCC_OscConfig+0x22e>
 80068fa:	e020      	b.n	800693e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 80068fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006902:	4a09      	ldr	r2, [pc, #36]	; (8006928 <HAL_RCC_OscConfig+0x27c>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690c:	f7fc fe2a 	bl	8003564 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006912:	e00d      	b.n	8006930 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006914:	f7fc fe26 	bl	8003564 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d906      	bls.n	8006930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e1d2      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
 800692c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006930:	4b8c      	ldr	r3, [pc, #560]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1ea      	bne.n	8006914 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80a6 	beq.w	8006a98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694c:	2300      	movs	r3, #0
 800694e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006950:	4b84      	ldr	r3, [pc, #528]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RCC_OscConfig+0x2b4>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x2b6>
 8006960:	2300      	movs	r3, #0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00d      	beq.n	8006982 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006966:	4b7f      	ldr	r3, [pc, #508]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	4a7e      	ldr	r2, [pc, #504]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 800696c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006970:	6593      	str	r3, [r2, #88]	; 0x58
 8006972:	4b7c      	ldr	r3, [pc, #496]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800697e:	2301      	movs	r3, #1
 8006980:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006982:	4b79      	ldr	r3, [pc, #484]	; (8006b68 <HAL_RCC_OscConfig+0x4bc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698a:	2b00      	cmp	r3, #0
 800698c:	d118      	bne.n	80069c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800698e:	4b76      	ldr	r3, [pc, #472]	; (8006b68 <HAL_RCC_OscConfig+0x4bc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a75      	ldr	r2, [pc, #468]	; (8006b68 <HAL_RCC_OscConfig+0x4bc>)
 8006994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800699a:	f7fc fde3 	bl	8003564 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a2:	f7fc fddf 	bl	8003564 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e18b      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b4:	4b6c      	ldr	r3, [pc, #432]	; (8006b68 <HAL_RCC_OscConfig+0x4bc>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d108      	bne.n	80069da <HAL_RCC_OscConfig+0x32e>
 80069c8:	4b66      	ldr	r3, [pc, #408]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	4a65      	ldr	r2, [pc, #404]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069d8:	e024      	b.n	8006a24 <HAL_RCC_OscConfig+0x378>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d110      	bne.n	8006a04 <HAL_RCC_OscConfig+0x358>
 80069e2:	4b60      	ldr	r3, [pc, #384]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	4a5e      	ldr	r2, [pc, #376]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 80069ea:	f043 0304 	orr.w	r3, r3, #4
 80069ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069f2:	4b5c      	ldr	r3, [pc, #368]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f8:	4a5a      	ldr	r2, [pc, #360]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a02:	e00f      	b.n	8006a24 <HAL_RCC_OscConfig+0x378>
 8006a04:	4b57      	ldr	r3, [pc, #348]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0a:	4a56      	ldr	r2, [pc, #344]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a14:	4b53      	ldr	r3, [pc, #332]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	4a52      	ldr	r2, [pc, #328]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a1c:	f023 0304 	bic.w	r3, r3, #4
 8006a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fc fd9a 	bl	8003564 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a34:	f7fc fd96 	bl	8003564 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e140      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a4a:	4b46      	ldr	r3, [pc, #280]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0ed      	beq.n	8006a34 <HAL_RCC_OscConfig+0x388>
 8006a58:	e015      	b.n	8006a86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5a:	f7fc fd83 	bl	8003564 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a60:	e00a      	b.n	8006a78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a62:	f7fc fd7f 	bl	8003564 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e129      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a78:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ed      	bne.n	8006a62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a86:	7ffb      	ldrb	r3, [r7, #31]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d105      	bne.n	8006a98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a8c:	4b35      	ldr	r3, [pc, #212]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	4a34      	ldr	r2, [pc, #208]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d03c      	beq.n	8006b1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01c      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006aac:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ab2:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abc:	f7fc fd52 	bl	8003564 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ac4:	f7fc fd4e 	bl	8003564 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e0fa      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0ef      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x418>
 8006ae4:	e01b      	b.n	8006b1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ae6:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af6:	f7fc fd35 	bl	8003564 <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006afe:	f7fc fd31 	bl	8003564 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e0dd      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1ef      	bne.n	8006afe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80d1 	beq.w	8006cca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b28:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
 8006b30:	2b0c      	cmp	r3, #12
 8006b32:	f000 808b 	beq.w	8006c4c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d15e      	bne.n	8006bfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <HAL_RCC_OscConfig+0x4b8>)
 8006b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4a:	f7fc fd0b 	bl	8003564 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b50:	e00c      	b.n	8006b6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fc fd07 	bl	8003564 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d905      	bls.n	8006b6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e0b3      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
 8006b64:	40021000 	.word	0x40021000
 8006b68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b6c:	4b59      	ldr	r3, [pc, #356]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ec      	bne.n	8006b52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b78:	4b56      	ldr	r3, [pc, #344]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	4b56      	ldr	r3, [pc, #344]	; (8006cd8 <HAL_RCC_OscConfig+0x62c>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6a11      	ldr	r1, [r2, #32]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	0112      	lsls	r2, r2, #4
 8006b8c:	4311      	orrs	r1, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006b92:	0212      	lsls	r2, r2, #8
 8006b94:	4311      	orrs	r1, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b9a:	0852      	lsrs	r2, r2, #1
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	0552      	lsls	r2, r2, #21
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ba6:	0852      	lsrs	r2, r2, #1
 8006ba8:	3a01      	subs	r2, #1
 8006baa:	0652      	lsls	r2, r2, #25
 8006bac:	4311      	orrs	r1, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bb2:	06d2      	lsls	r2, r2, #27
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	4947      	ldr	r1, [pc, #284]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bbc:	4b45      	ldr	r3, [pc, #276]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a44      	ldr	r2, [pc, #272]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bc8:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a41      	ldr	r2, [pc, #260]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd4:	f7fc fcc6 	bl	8003564 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fc fcc2 	bl	8003564 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e06e      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0x530>
 8006bfa:	e066      	b.n	8006cca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a34      	ldr	r2, [pc, #208]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c06:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c08:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4a31      	ldr	r2, [pc, #196]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c14:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c1a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fc fc9e 	bl	8003564 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fc fc9a 	bl	8003564 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e046      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c3e:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x580>
 8006c4a:	e03e      	b.n	8006cca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e039      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <HAL_RCC_OscConfig+0x628>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f003 0203 	and.w	r2, r3, #3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d12c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	3b01      	subs	r3, #1
 8006c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d123      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d11b      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d113      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	3b01      	subs	r3, #1
 8006cac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d109      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbc:	085b      	lsrs	r3, r3, #1
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d001      	beq.n	8006cca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	019f800c 	.word	0x019f800c

08006cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e11e      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf4:	4b91      	ldr	r3, [pc, #580]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d910      	bls.n	8006d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d02:	4b8e      	ldr	r3, [pc, #568]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f023 020f 	bic.w	r2, r3, #15
 8006d0a:	498c      	ldr	r1, [pc, #560]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d12:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d001      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e106      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d073      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d129      	bne.n	8006d8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d38:	4b81      	ldr	r3, [pc, #516]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0f4      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d48:	f000 f992 	bl	8007070 <RCC_GetSysClockFreqFromPLLSource>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4a7c      	ldr	r2, [pc, #496]	; (8006f44 <HAL_RCC_ClockConfig+0x268>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d93f      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d56:	4b7a      	ldr	r3, [pc, #488]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d033      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d12f      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d76:	4b72      	ldr	r3, [pc, #456]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d7e:	4a70      	ldr	r2, [pc, #448]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d86:	2380      	movs	r3, #128	; 0x80
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e024      	b.n	8006dd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d107      	bne.n	8006da4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d94:	4b6a      	ldr	r3, [pc, #424]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d109      	bne.n	8006db4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0c6      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006da4:	4b66      	ldr	r3, [pc, #408]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0be      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006db4:	f000 f8ce 	bl	8006f54 <HAL_RCC_GetSysClockFreq>
 8006db8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4a61      	ldr	r2, [pc, #388]	; (8006f44 <HAL_RCC_ClockConfig+0x268>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d909      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dca:	4a5d      	ldr	r2, [pc, #372]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dd6:	4b5a      	ldr	r3, [pc, #360]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f023 0203 	bic.w	r2, r3, #3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4957      	ldr	r1, [pc, #348]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de8:	f7fc fbbc 	bl	8003564 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df0:	f7fc fbb8 	bl	8003564 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e095      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e06:	4b4e      	ldr	r3, [pc, #312]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 020c 	and.w	r2, r3, #12
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1eb      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d023      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e30:	4b43      	ldr	r3, [pc, #268]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	4a42      	ldr	r2, [pc, #264]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e48:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e50:	4a3b      	ldr	r2, [pc, #236]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	4936      	ldr	r1, [pc, #216]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b80      	cmp	r3, #128	; 0x80
 8006e70:	d105      	bne.n	8006e7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e72:	4b33      	ldr	r3, [pc, #204]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	4a32      	ldr	r2, [pc, #200]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e7e:	4b2f      	ldr	r3, [pc, #188]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d21d      	bcs.n	8006ec8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f023 020f 	bic.w	r2, r3, #15
 8006e94:	4929      	ldr	r1, [pc, #164]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e9c:	f7fc fb62 	bl	8003564 <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea4:	f7fc fb5e 	bl	8003564 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e03b      	b.n	8006f32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_RCC_ClockConfig+0x260>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d1ed      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4917      	ldr	r1, [pc, #92]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	490f      	ldr	r1, [pc, #60]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f06:	f000 f825 	bl	8006f54 <HAL_RCC_GetSysClockFreq>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <HAL_RCC_ClockConfig+0x264>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	091b      	lsrs	r3, r3, #4
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	490c      	ldr	r1, [pc, #48]	; (8006f48 <HAL_RCC_ClockConfig+0x26c>)
 8006f18:	5ccb      	ldrb	r3, [r1, r3]
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <HAL_RCC_ClockConfig+0x270>)
 8006f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <HAL_RCC_ClockConfig+0x274>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fc face 	bl	80034cc <HAL_InitTick>
 8006f30:	4603      	mov	r3, r0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40022000 	.word	0x40022000
 8006f40:	40021000 	.word	0x40021000
 8006f44:	04c4b400 	.word	0x04c4b400
 8006f48:	0800a368 	.word	0x0800a368
 8006f4c:	20000024 	.word	0x20000024
 8006f50:	20000028 	.word	0x20000028

08006f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f5a:	4b2c      	ldr	r3, [pc, #176]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d102      	bne.n	8006f6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f66:	4b2a      	ldr	r3, [pc, #168]	; (8007010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e047      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006f6c:	4b27      	ldr	r3, [pc, #156]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 030c 	and.w	r3, r3, #12
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d102      	bne.n	8006f7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f78:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	e03e      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006f7e:	4b23      	ldr	r3, [pc, #140]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 030c 	and.w	r3, r3, #12
 8006f86:	2b0c      	cmp	r3, #12
 8006f88:	d136      	bne.n	8006ff8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f8a:	4b20      	ldr	r3, [pc, #128]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f94:	4b1d      	ldr	r3, [pc, #116]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d10c      	bne.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fa8:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fb2:	68d2      	ldr	r2, [r2, #12]
 8006fb4:	0a12      	lsrs	r2, r2, #8
 8006fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	617b      	str	r3, [r7, #20]
      break;
 8006fc0:	e00c      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fc2:	4a13      	ldr	r2, [pc, #76]	; (8007010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	4a10      	ldr	r2, [pc, #64]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fcc:	68d2      	ldr	r2, [r2, #12]
 8006fce:	0a12      	lsrs	r2, r2, #8
 8006fd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	617b      	str	r3, [r7, #20]
      break;
 8006fda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fdc:	4b0b      	ldr	r3, [pc, #44]	; (800700c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	0e5b      	lsrs	r3, r3, #25
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	e001      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ffc:	693b      	ldr	r3, [r7, #16]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	00f42400 	.word	0x00f42400
 8007014:	007270e0 	.word	0x007270e0

08007018 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <HAL_RCC_EnableCSS+0x1c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a04      	ldr	r2, [pc, #16]	; (8007034 <HAL_RCC_EnableCSS+0x1c>)
 8007022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007026:	6013      	str	r3, [r2, #0]
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40021000 	.word	0x40021000

08007038 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <HAL_RCC_NMI_IRQHandler+0x24>)
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007048:	d105      	bne.n	8007056 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800704a:	f000 f809 	bl	8007060 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <HAL_RCC_NMI_IRQHandler+0x24>)
 8007050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007054:	621a      	str	r2, [r3, #32]
  }
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40021000 	.word	0x40021000

08007060 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007076:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	091b      	lsrs	r3, r3, #4
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b03      	cmp	r3, #3
 8007092:	d10c      	bne.n	80070ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007094:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800709e:	68d2      	ldr	r2, [r2, #12]
 80070a0:	0a12      	lsrs	r2, r2, #8
 80070a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	617b      	str	r3, [r7, #20]
    break;
 80070ac:	e00c      	b.n	80070c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070ae:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b6:	4a0e      	ldr	r2, [pc, #56]	; (80070f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070b8:	68d2      	ldr	r2, [r2, #12]
 80070ba:	0a12      	lsrs	r2, r2, #8
 80070bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]
    break;
 80070c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	0e5b      	lsrs	r3, r3, #25
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	3301      	adds	r3, #1
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80070e2:	687b      	ldr	r3, [r7, #4]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40021000 	.word	0x40021000
 80070f4:	007270e0 	.word	0x007270e0
 80070f8:	00f42400 	.word	0x00f42400

080070fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007104:	2300      	movs	r3, #0
 8007106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007108:	2300      	movs	r3, #0
 800710a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8098 	beq.w	800724a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800711a:	2300      	movs	r3, #0
 800711c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800711e:	4b43      	ldr	r3, [pc, #268]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800712a:	4b40      	ldr	r3, [pc, #256]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	4a3f      	ldr	r2, [pc, #252]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007134:	6593      	str	r3, [r2, #88]	; 0x58
 8007136:	4b3d      	ldr	r3, [pc, #244]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007142:	2301      	movs	r3, #1
 8007144:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007146:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a39      	ldr	r2, [pc, #228]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007152:	f7fc fa07 	bl	8003564 <HAL_GetTick>
 8007156:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007158:	e009      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800715a:	f7fc fa03 	bl	8003564 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d902      	bls.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	74fb      	strb	r3, [r7, #19]
        break;
 800716c:	e005      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800716e:	4b30      	ldr	r3, [pc, #192]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0ef      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800717a:	7cfb      	ldrb	r3, [r7, #19]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d159      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007180:	4b2a      	ldr	r3, [pc, #168]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01e      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	429a      	cmp	r2, r3
 800719a:	d019      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800719c:	4b23      	ldr	r3, [pc, #140]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071a8:	4b20      	ldr	r3, [pc, #128]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ae:	4a1f      	ldr	r2, [pc, #124]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071b8:	4b1c      	ldr	r3, [pc, #112]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071be:	4a1b      	ldr	r2, [pc, #108]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071c8:	4a18      	ldr	r2, [pc, #96]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fc f9c3 	bl	8003564 <HAL_GetTick>
 80071de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071e0:	e00b      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e2:	f7fc f9bf 	bl	8003564 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d902      	bls.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	74fb      	strb	r3, [r7, #19]
            break;
 80071f8:	e006      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071fa:	4b0c      	ldr	r3, [pc, #48]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0ec      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007208:	7cfb      	ldrb	r3, [r7, #19]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	4903      	ldr	r1, [pc, #12]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007224:	e008      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007226:	7cfb      	ldrb	r3, [r7, #19]
 8007228:	74bb      	strb	r3, [r7, #18]
 800722a:	e005      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800722c:	40021000 	.word	0x40021000
 8007230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007238:	7c7b      	ldrb	r3, [r7, #17]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d105      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723e:	4ba7      	ldr	r3, [pc, #668]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	4aa6      	ldr	r2, [pc, #664]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007256:	4ba1      	ldr	r3, [pc, #644]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725c:	f023 0203 	bic.w	r2, r3, #3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	499d      	ldr	r1, [pc, #628]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007278:	4b98      	ldr	r3, [pc, #608]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727e:	f023 020c 	bic.w	r2, r3, #12
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	4995      	ldr	r1, [pc, #596]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800729a:	4b90      	ldr	r3, [pc, #576]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	498c      	ldr	r1, [pc, #560]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072bc:	4b87      	ldr	r3, [pc, #540]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	4984      	ldr	r1, [pc, #528]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072de:	4b7f      	ldr	r3, [pc, #508]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	497b      	ldr	r1, [pc, #492]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007300:	4b76      	ldr	r3, [pc, #472]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	4973      	ldr	r1, [pc, #460]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007322:	4b6e      	ldr	r3, [pc, #440]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	496a      	ldr	r1, [pc, #424]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007344:	4b65      	ldr	r3, [pc, #404]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4962      	ldr	r1, [pc, #392]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007366:	4b5d      	ldr	r3, [pc, #372]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	4959      	ldr	r1, [pc, #356]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007388:	4b54      	ldr	r3, [pc, #336]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800738e:	f023 0203 	bic.w	r2, r3, #3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	4951      	ldr	r1, [pc, #324]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073aa:	4b4c      	ldr	r3, [pc, #304]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	4948      	ldr	r1, [pc, #288]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d015      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073cc:	4b43      	ldr	r3, [pc, #268]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	4940      	ldr	r1, [pc, #256]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ea:	d105      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ec:	4b3b      	ldr	r3, [pc, #236]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a3a      	ldr	r2, [pc, #232]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007400:	2b00      	cmp	r3, #0
 8007402:	d015      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007404:	4b35      	ldr	r3, [pc, #212]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	4932      	ldr	r1, [pc, #200]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007422:	d105      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007424:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800742e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d015      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800743c:	4b27      	ldr	r3, [pc, #156]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800743e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007442:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	4924      	ldr	r1, [pc, #144]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800745a:	d105      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800745c:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007474:	4b19      	ldr	r3, [pc, #100]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	4916      	ldr	r1, [pc, #88]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007492:	d105      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007494:	4b11      	ldr	r3, [pc, #68]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	4a10      	ldr	r2, [pc, #64]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800749e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d019      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074ac:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	4908      	ldr	r1, [pc, #32]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074ca:	d109      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	4a02      	ldr	r2, [pc, #8]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d6:	60d3      	str	r3, [r2, #12]
 80074d8:	e002      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80074da:	bf00      	nop
 80074dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d015      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80074ec:	4b29      	ldr	r3, [pc, #164]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	4926      	ldr	r1, [pc, #152]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800750a:	d105      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800750c:	4b21      	ldr	r3, [pc, #132]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4a20      	ldr	r2, [pc, #128]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007516:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d015      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007524:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007532:	4918      	ldr	r1, [pc, #96]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d105      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007544:	4b13      	ldr	r3, [pc, #76]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a12      	ldr	r2, [pc, #72]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800754a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800754e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d015      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800755e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	490a      	ldr	r1, [pc, #40]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756c:	4313      	orrs	r3, r2
 800756e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800757a:	d105      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	4a04      	ldr	r2, [pc, #16]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007586:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007588:	7cbb      	ldrb	r3, [r7, #18]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40021000 	.word	0x40021000

08007598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0c1      	b.n	800772e <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d108      	bne.n	80075c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ba:	d009      	beq.n	80075d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	61da      	str	r2, [r3, #28]
 80075c2:	e005      	b.n	80075d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d12a      	bne.n	8007638 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a52      	ldr	r2, [pc, #328]	; (8007738 <HAL_SPI_Init+0x1a0>)
 80075ee:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a52      	ldr	r2, [pc, #328]	; (800773c <HAL_SPI_Init+0x1a4>)
 80075f4:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a51      	ldr	r2, [pc, #324]	; (8007740 <HAL_SPI_Init+0x1a8>)
 80075fa:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a51      	ldr	r2, [pc, #324]	; (8007744 <HAL_SPI_Init+0x1ac>)
 8007600:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a50      	ldr	r2, [pc, #320]	; (8007748 <HAL_SPI_Init+0x1b0>)
 8007606:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a50      	ldr	r2, [pc, #320]	; (800774c <HAL_SPI_Init+0x1b4>)
 800760c:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a4f      	ldr	r2, [pc, #316]	; (8007750 <HAL_SPI_Init+0x1b8>)
 8007612:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a4f      	ldr	r2, [pc, #316]	; (8007754 <HAL_SPI_Init+0x1bc>)
 8007618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007622:	2b00      	cmp	r3, #0
 8007624:	d103      	bne.n	800762e <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <HAL_SPI_Init+0x1c0>)
 800762a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007658:	d902      	bls.n	8007660 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e002      	b.n	8007666 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007664:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800766e:	d007      	beq.n	8007680 <HAL_SPI_Init+0xe8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c2:	ea42 0103 	orr.w	r1, r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	f003 0204 	and.w	r2, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80076fc:	ea42 0103 	orr.w	r1, r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800771c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	080078a9 	.word	0x080078a9
 800773c:	080078bd 	.word	0x080078bd
 8007740:	080078d1 	.word	0x080078d1
 8007744:	080078e5 	.word	0x080078e5
 8007748:	080078f9 	.word	0x080078f9
 800774c:	0800790d 	.word	0x0800790d
 8007750:	08007921 	.word	0x08007921
 8007754:	08007935 	.word	0x08007935
 8007758:	080023e9 	.word	0x080023e9

0800775c <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	460b      	mov	r3, r1
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d107      	bne.n	8007784 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e08b      	b.n	800789c <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_SPI_RegisterCallback+0x36>
 800778e:	2302      	movs	r3, #2
 8007790:	e084      	b.n	800789c <HAL_SPI_RegisterCallback+0x140>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d14e      	bne.n	8007844 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d842      	bhi.n	8007832 <HAL_SPI_RegisterCallback+0xd6>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <HAL_SPI_RegisterCallback+0x58>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077dd 	.word	0x080077dd
 80077b8:	080077e5 	.word	0x080077e5
 80077bc:	080077ed 	.word	0x080077ed
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	08007805 	.word	0x08007805
 80077cc:	0800780d 	.word	0x0800780d
 80077d0:	08007815 	.word	0x08007815
 80077d4:	0800781f 	.word	0x0800781f
 80077d8:	08007829 	.word	0x08007829
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80077e2:	e056      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80077ea:	e052      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80077f2:	e04e      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80077fa:	e04a      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007802:	e046      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800780a:	e042      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007812:	e03e      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800781c:	e039      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007826:	e034      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007830:	e02f      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007836:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
        break;
 8007842:	e026      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d118      	bne.n	8007882 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	2b08      	cmp	r3, #8
 8007854:	d002      	beq.n	800785c <HAL_SPI_RegisterCallback+0x100>
 8007856:	2b09      	cmp	r3, #9
 8007858:	d005      	beq.n	8007866 <HAL_SPI_RegisterCallback+0x10a>
 800785a:	e009      	b.n	8007870 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007864:	e015      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800786e:	e010      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007874:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
        break;
 8007880:	e007      	b.n	8007892 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e054      	b.n	8007a04 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d111      	bne.n	800798a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f002 f8a0 	bl	8009ab4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a23      	ldr	r2, [pc, #140]	; (8007a0c <HAL_TIM_Base_Init+0xc4>)
 8007980:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f001 f9eb 	bl	8008d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	08003041 	.word	0x08003041

08007a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d001      	beq.n	8007a28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e04c      	b.n	8007ac2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a26      	ldr	r2, [pc, #152]	; (8007ad0 <HAL_TIM_Base_Start+0xc0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d022      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a42:	d01d      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a22      	ldr	r2, [pc, #136]	; (8007ad4 <HAL_TIM_Base_Start+0xc4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d018      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a21      	ldr	r2, [pc, #132]	; (8007ad8 <HAL_TIM_Base_Start+0xc8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d013      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1f      	ldr	r2, [pc, #124]	; (8007adc <HAL_TIM_Base_Start+0xcc>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00e      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <HAL_TIM_Base_Start+0xd0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d009      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1c      	ldr	r2, [pc, #112]	; (8007ae4 <HAL_TIM_Base_Start+0xd4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_TIM_Base_Start+0x70>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <HAL_TIM_Base_Start+0xd8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d115      	bne.n	8007aac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	4b19      	ldr	r3, [pc, #100]	; (8007aec <HAL_TIM_Base_Start+0xdc>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b06      	cmp	r3, #6
 8007a90:	d015      	beq.n	8007abe <HAL_TIM_Base_Start+0xae>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a98:	d011      	beq.n	8007abe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aaa:	e008      	b.n	8007abe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e000      	b.n	8007ac0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007abe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40000400 	.word	0x40000400
 8007ad8:	40000800 	.word	0x40000800
 8007adc:	40000c00 	.word	0x40000c00
 8007ae0:	40013400 	.word	0x40013400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40015000 	.word	0x40015000
 8007aec:	00010007 	.word	0x00010007

08007af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d001      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e054      	b.n	8007bb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a26      	ldr	r2, [pc, #152]	; (8007bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d022      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b32:	d01d      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a22      	ldr	r2, [pc, #136]	; (8007bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d018      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d013      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00e      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d009      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d004      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x80>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d115      	bne.n	8007b9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <HAL_TIM_Base_Start_IT+0xec>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b06      	cmp	r3, #6
 8007b80:	d015      	beq.n	8007bae <HAL_TIM_Base_Start_IT+0xbe>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d011      	beq.n	8007bae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0201 	orr.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b9a:	e008      	b.n	8007bae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e000      	b.n	8007bb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40013400 	.word	0x40013400
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40015000 	.word	0x40015000
 8007bdc:	00010007 	.word	0x00010007

08007be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e054      	b.n	8007c9c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d111      	bne.n	8007c22 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 ff54 	bl	8009ab4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a23      	ldr	r2, [pc, #140]	; (8007ca4 <HAL_TIM_PWM_Init+0xc4>)
 8007c18:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3304      	adds	r3, #4
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f001 f89f 	bl	8008d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	08007ca9 	.word	0x08007ca9

08007ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e054      	b.n	8007d78 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d111      	bne.n	8007cfe <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fee6 	bl	8009ab4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a23      	ldr	r2, [pc, #140]	; (8007d80 <HAL_TIM_IC_Init+0xc4>)
 8007cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f001 f831 	bl	8008d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	08007d85 	.word	0x08007d85

08007d84 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e04c      	b.n	8007e46 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d111      	bne.n	8007ddc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fe77 	bl	8009ab4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d102      	bne.n	8007dd4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a1f      	ldr	r2, [pc, #124]	; (8007e50 <HAL_TIM_OnePulse_Init+0xb8>)
 8007dd2:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3304      	adds	r3, #4
 8007dec:	4619      	mov	r1, r3
 8007dee:	4610      	mov	r0, r2
 8007df0:	f000 ffc2 	bl	8008d78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0208 	bic.w	r2, r2, #8
 8007e02:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	08003285 	.word	0x08003285

08007e54 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e7c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d108      	bne.n	8007e96 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d105      	bne.n	8007e96 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e8a:	7b7b      	ldrb	r3, [r7, #13]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d102      	bne.n	8007e96 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e90:	7b3b      	ldrb	r3, [r7, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d001      	beq.n	8007e9a <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e049      	b.n	8007f2e <HAL_TIM_OnePulse_Start+0xda>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fdd0 	bl	8009a68 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2104      	movs	r1, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 fdc9 	bl	8009a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <HAL_TIM_OnePulse_Start+0xe4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d018      	beq.n	8007f12 <HAL_TIM_OnePulse_Start+0xbe>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <HAL_TIM_OnePulse_Start+0xe8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d013      	beq.n	8007f12 <HAL_TIM_OnePulse_Start+0xbe>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <HAL_TIM_OnePulse_Start+0xec>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00e      	beq.n	8007f12 <HAL_TIM_OnePulse_Start+0xbe>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <HAL_TIM_OnePulse_Start+0xf0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d009      	beq.n	8007f12 <HAL_TIM_OnePulse_Start+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a11      	ldr	r2, [pc, #68]	; (8007f48 <HAL_TIM_OnePulse_Start+0xf4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d004      	beq.n	8007f12 <HAL_TIM_OnePulse_Start+0xbe>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <HAL_TIM_OnePulse_Start+0xf8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d101      	bne.n	8007f16 <HAL_TIM_OnePulse_Start+0xc2>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <HAL_TIM_OnePulse_Start+0xc4>
 8007f16:	2300      	movs	r3, #0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <HAL_TIM_OnePulse_Start+0xd8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40013400 	.word	0x40013400
 8007f40:	40014000 	.word	0x40014000
 8007f44:	40014400 	.word	0x40014400
 8007f48:	40014800 	.word	0x40014800
 8007f4c:	40015000 	.word	0x40015000

08007f50 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f78:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d108      	bne.n	8007f92 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d105      	bne.n	8007f92 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f86:	7b7b      	ldrb	r3, [r7, #13]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d102      	bne.n	8007f92 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f8c:	7b3b      	ldrb	r3, [r7, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d001      	beq.n	8007f96 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e059      	b.n	800804a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0202 	orr.w	r2, r2, #2
 8007fc4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0204 	orr.w	r2, r2, #4
 8007fd4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fd42 	bl	8009a68 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2104      	movs	r1, #4
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 fd3b 	bl	8009a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a17      	ldr	r2, [pc, #92]	; (8008054 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d018      	beq.n	800802e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a15      	ldr	r2, [pc, #84]	; (8008058 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a14      	ldr	r2, [pc, #80]	; (800805c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00e      	beq.n	800802e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a12      	ldr	r2, [pc, #72]	; (8008060 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d009      	beq.n	800802e <HAL_TIM_OnePulse_Start_IT+0xde>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a11      	ldr	r2, [pc, #68]	; (8008064 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a0f      	ldr	r2, [pc, #60]	; (8008068 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d101      	bne.n	8008032 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d007      	beq.n	8008048 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008046:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	40012c00 	.word	0x40012c00
 8008058:	40013400 	.word	0x40013400
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	40015000 	.word	0x40015000

0800806c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b02      	cmp	r3, #2
 8008080:	d128      	bne.n	80080d4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b02      	cmp	r3, #2
 800808e:	d121      	bne.n	80080d4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0202 	mvn.w	r2, #2
 8008098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
 80080b8:	e009      	b.n	80080ce <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d128      	bne.n	8008134 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d121      	bne.n	8008134 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0204 	mvn.w	r2, #4
 80080f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
 8008118:	e009      	b.n	800812e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b08      	cmp	r3, #8
 8008140:	d128      	bne.n	8008194 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b08      	cmp	r3, #8
 800814e:	d121      	bne.n	8008194 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0208 	mvn.w	r2, #8
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2204      	movs	r2, #4
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
 8008178:	e009      	b.n	800818e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d128      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	2b10      	cmp	r3, #16
 80081ae:	d121      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0210 	mvn.w	r2, #16
 80081b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2208      	movs	r2, #8
 80081be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
 80081d8:	e009      	b.n	80081ee <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d110      	bne.n	8008224 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b01      	cmp	r3, #1
 800820e:	d109      	bne.n	8008224 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0201 	mvn.w	r2, #1
 8008218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822e:	2b80      	cmp	r3, #128	; 0x80
 8008230:	d110      	bne.n	8008254 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823c:	2b80      	cmp	r3, #128	; 0x80
 800823e:	d109      	bne.n	8008254 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d110      	bne.n	8008286 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	d109      	bne.n	8008286 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800827a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d110      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d109      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d110      	bne.n	80082e6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d109      	bne.n	80082e6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f06f 0220 	mvn.w	r2, #32
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082f4:	d111      	bne.n	800831a <HAL_TIM_IRQHandler+0x2ae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008304:	d109      	bne.n	800831a <HAL_TIM_IRQHandler+0x2ae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800830e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008328:	d111      	bne.n	800834e <HAL_TIM_IRQHandler+0x2e2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008338:	d109      	bne.n	800834e <HAL_TIM_IRQHandler+0x2e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800835c:	d111      	bne.n	8008382 <HAL_TIM_IRQHandler+0x316>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800836c:	d109      	bne.n	8008382 <HAL_TIM_IRQHandler+0x316>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800838c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008390:	d111      	bne.n	80083b6 <HAL_TIM_IRQHandler+0x34a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800839c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083a0:	d109      	bne.n	80083b6 <HAL_TIM_IRQHandler+0x34a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80083aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_TIM_IC_ConfigChannel+0x1e>
 80083d8:	2302      	movs	r3, #2
 80083da:	e088      	b.n	80084ee <HAL_TIM_IC_ConfigChannel+0x130>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d11b      	bne.n	8008422 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6819      	ldr	r1, [r3, #0]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f001 f96f 	bl	80096dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 020c 	bic.w	r2, r2, #12
 800840c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6999      	ldr	r1, [r3, #24]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	619a      	str	r2, [r3, #24]
 8008420:	e060      	b.n	80084e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d11c      	bne.n	8008462 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6819      	ldr	r1, [r3, #0]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f001 f9f3 	bl	8009822 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800844a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6999      	ldr	r1, [r3, #24]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	021a      	lsls	r2, r3, #8
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	619a      	str	r2, [r3, #24]
 8008460:	e040      	b.n	80084e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d11b      	bne.n	80084a0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6819      	ldr	r1, [r3, #0]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f001 fa40 	bl	80098fc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69da      	ldr	r2, [r3, #28]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 020c 	bic.w	r2, r2, #12
 800848a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69d9      	ldr	r1, [r3, #28]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	61da      	str	r2, [r3, #28]
 800849e:	e021      	b.n	80084e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b0c      	cmp	r3, #12
 80084a4:	d11c      	bne.n	80084e0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	f001 fa5d 	bl	8009974 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80084c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69d9      	ldr	r1, [r3, #28]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	021a      	lsls	r2, r3, #8
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	61da      	str	r2, [r3, #28]
 80084de:	e001      	b.n	80084e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008512:	2302      	movs	r3, #2
 8008514:	e0ff      	b.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b14      	cmp	r3, #20
 8008522:	f200 80f0 	bhi.w	8008706 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008526:	a201      	add	r2, pc, #4	; (adr r2, 800852c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008581 	.word	0x08008581
 8008530:	08008707 	.word	0x08008707
 8008534:	08008707 	.word	0x08008707
 8008538:	08008707 	.word	0x08008707
 800853c:	080085c1 	.word	0x080085c1
 8008540:	08008707 	.word	0x08008707
 8008544:	08008707 	.word	0x08008707
 8008548:	08008707 	.word	0x08008707
 800854c:	08008603 	.word	0x08008603
 8008550:	08008707 	.word	0x08008707
 8008554:	08008707 	.word	0x08008707
 8008558:	08008707 	.word	0x08008707
 800855c:	08008643 	.word	0x08008643
 8008560:	08008707 	.word	0x08008707
 8008564:	08008707 	.word	0x08008707
 8008568:	08008707 	.word	0x08008707
 800856c:	08008685 	.word	0x08008685
 8008570:	08008707 	.word	0x08008707
 8008574:	08008707 	.word	0x08008707
 8008578:	08008707 	.word	0x08008707
 800857c:	080086c5 	.word	0x080086c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68b9      	ldr	r1, [r7, #8]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fc9e 	bl	8008ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0208 	orr.w	r2, r2, #8
 800859a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699a      	ldr	r2, [r3, #24]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0204 	bic.w	r2, r2, #4
 80085aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6999      	ldr	r1, [r3, #24]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	619a      	str	r2, [r3, #24]
      break;
 80085be:	e0a5      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fd18 	bl	8008ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6999      	ldr	r1, [r3, #24]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	021a      	lsls	r2, r3, #8
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	619a      	str	r2, [r3, #24]
      break;
 8008600:	e084      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fd8b 	bl	8009124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0208 	orr.w	r2, r2, #8
 800861c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69da      	ldr	r2, [r3, #28]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0204 	bic.w	r2, r2, #4
 800862c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69d9      	ldr	r1, [r3, #28]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	61da      	str	r2, [r3, #28]
      break;
 8008640:	e064      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fdfd 	bl	8009248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800865c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800866c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69d9      	ldr	r1, [r3, #28]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	021a      	lsls	r2, r3, #8
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	61da      	str	r2, [r3, #28]
      break;
 8008682:	e043      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fe70 	bl	8009370 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0208 	orr.w	r2, r2, #8
 800869e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0204 	bic.w	r2, r2, #4
 80086ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086c2:	e023      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 feba 	bl	8009444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	021a      	lsls	r2, r3, #8
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008704:	e002      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
      break;
 800870a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop

08008720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_TIM_ConfigClockSource+0x1c>
 8008738:	2302      	movs	r3, #2
 800873a:	e0f6      	b.n	800892a <HAL_TIM_ConfigClockSource+0x20a>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800875a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800875e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a6f      	ldr	r2, [pc, #444]	; (8008934 <HAL_TIM_ConfigClockSource+0x214>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f000 80c1 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 800877c:	4a6d      	ldr	r2, [pc, #436]	; (8008934 <HAL_TIM_ConfigClockSource+0x214>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f200 80c6 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008784:	4a6c      	ldr	r2, [pc, #432]	; (8008938 <HAL_TIM_ConfigClockSource+0x218>)
 8008786:	4293      	cmp	r3, r2
 8008788:	f000 80b9 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 800878c:	4a6a      	ldr	r2, [pc, #424]	; (8008938 <HAL_TIM_ConfigClockSource+0x218>)
 800878e:	4293      	cmp	r3, r2
 8008790:	f200 80be 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008794:	4a69      	ldr	r2, [pc, #420]	; (800893c <HAL_TIM_ConfigClockSource+0x21c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f000 80b1 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 800879c:	4a67      	ldr	r2, [pc, #412]	; (800893c <HAL_TIM_ConfigClockSource+0x21c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	f200 80b6 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 80087a4:	4a66      	ldr	r2, [pc, #408]	; (8008940 <HAL_TIM_ConfigClockSource+0x220>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	f000 80a9 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 80087ac:	4a64      	ldr	r2, [pc, #400]	; (8008940 <HAL_TIM_ConfigClockSource+0x220>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f200 80ae 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 80087b4:	4a63      	ldr	r2, [pc, #396]	; (8008944 <HAL_TIM_ConfigClockSource+0x224>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	f000 80a1 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 80087bc:	4a61      	ldr	r2, [pc, #388]	; (8008944 <HAL_TIM_ConfigClockSource+0x224>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	f200 80a6 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 80087c4:	4a60      	ldr	r2, [pc, #384]	; (8008948 <HAL_TIM_ConfigClockSource+0x228>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	f000 8099 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 80087cc:	4a5e      	ldr	r2, [pc, #376]	; (8008948 <HAL_TIM_ConfigClockSource+0x228>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	f200 809e 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 80087d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087d8:	f000 8091 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 80087dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087e0:	f200 8096 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 80087e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e8:	f000 8089 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 80087ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f0:	f200 808e 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 80087f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f8:	d03e      	beq.n	8008878 <HAL_TIM_ConfigClockSource+0x158>
 80087fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fe:	f200 8087 	bhi.w	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008806:	f000 8086 	beq.w	8008916 <HAL_TIM_ConfigClockSource+0x1f6>
 800880a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880e:	d87f      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008810:	2b70      	cmp	r3, #112	; 0x70
 8008812:	d01a      	beq.n	800884a <HAL_TIM_ConfigClockSource+0x12a>
 8008814:	2b70      	cmp	r3, #112	; 0x70
 8008816:	d87b      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008818:	2b60      	cmp	r3, #96	; 0x60
 800881a:	d050      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x19e>
 800881c:	2b60      	cmp	r3, #96	; 0x60
 800881e:	d877      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008820:	2b50      	cmp	r3, #80	; 0x50
 8008822:	d03c      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x17e>
 8008824:	2b50      	cmp	r3, #80	; 0x50
 8008826:	d873      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d058      	beq.n	80088de <HAL_TIM_ConfigClockSource+0x1be>
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d86f      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008830:	2b30      	cmp	r3, #48	; 0x30
 8008832:	d064      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	d86b      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008838:	2b20      	cmp	r3, #32
 800883a:	d060      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 800883c:	2b20      	cmp	r3, #32
 800883e:	d867      	bhi.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d05c      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 8008844:	2b10      	cmp	r3, #16
 8008846:	d05a      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0x1de>
 8008848:	e062      	b.n	8008910 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6899      	ldr	r1, [r3, #8]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f001 f8e5 	bl	8009a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800886c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	609a      	str	r2, [r3, #8]
      break;
 8008876:	e04f      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	6899      	ldr	r1, [r3, #8]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f001 f8ce 	bl	8009a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800889a:	609a      	str	r2, [r3, #8]
      break;
 800889c:	e03c      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6859      	ldr	r1, [r3, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f000 ff8a 	bl	80097c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2150      	movs	r1, #80	; 0x50
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 f899 	bl	80099ee <TIM_ITRx_SetConfig>
      break;
 80088bc:	e02c      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	6859      	ldr	r1, [r3, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f000 ffe6 	bl	800989c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2160      	movs	r1, #96	; 0x60
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f889 	bl	80099ee <TIM_ITRx_SetConfig>
      break;
 80088dc:	e01c      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	6859      	ldr	r1, [r3, #4]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f000 ff6a 	bl	80097c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2140      	movs	r1, #64	; 0x40
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 f879 	bl	80099ee <TIM_ITRx_SetConfig>
      break;
 80088fc:	e00c      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f001 f870 	bl	80099ee <TIM_ITRx_SetConfig>
      break;
 800890e:	e003      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	73fb      	strb	r3, [r7, #15]
      break;
 8008914:	e000      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	00100070 	.word	0x00100070
 8008938:	00100060 	.word	0x00100060
 800893c:	00100050 	.word	0x00100050
 8008940:	00100040 	.word	0x00100040
 8008944:	00100030 	.word	0x00100030
 8008948:	00100020 	.word	0x00100020

0800894c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008960:	2302      	movs	r3, #2
 8008962:	e031      	b.n	80089c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fdd0 	bl	800951c <TIM_SlaveTimer_SetConfig>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e018      	b.n	80089c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e15a      	b.n	8008d6a <HAL_TIM_RegisterCallback+0x2d2>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_TIM_RegisterCallback+0x2a>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e153      	b.n	8008d6a <HAL_TIM_RegisterCallback+0x2d2>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	f040 80de 	bne.w	8008c94 <HAL_TIM_RegisterCallback+0x1fc>
  {
    switch (CallbackID)
 8008ad8:	7afb      	ldrb	r3, [r7, #11]
 8008ada:	2b1f      	cmp	r3, #31
 8008adc:	f200 80d7 	bhi.w	8008c8e <HAL_TIM_RegisterCallback+0x1f6>
 8008ae0:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <HAL_TIM_RegisterCallback+0x50>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008b69 	.word	0x08008b69
 8008aec:	08008b71 	.word	0x08008b71
 8008af0:	08008b79 	.word	0x08008b79
 8008af4:	08008b81 	.word	0x08008b81
 8008af8:	08008b89 	.word	0x08008b89
 8008afc:	08008b91 	.word	0x08008b91
 8008b00:	08008b99 	.word	0x08008b99
 8008b04:	08008ba1 	.word	0x08008ba1
 8008b08:	08008ba9 	.word	0x08008ba9
 8008b0c:	08008bb1 	.word	0x08008bb1
 8008b10:	08008bb9 	.word	0x08008bb9
 8008b14:	08008bc1 	.word	0x08008bc1
 8008b18:	08008bc9 	.word	0x08008bc9
 8008b1c:	08008bd1 	.word	0x08008bd1
 8008b20:	08008bdb 	.word	0x08008bdb
 8008b24:	08008be5 	.word	0x08008be5
 8008b28:	08008bef 	.word	0x08008bef
 8008b2c:	08008bf9 	.word	0x08008bf9
 8008b30:	08008c03 	.word	0x08008c03
 8008b34:	08008c0d 	.word	0x08008c0d
 8008b38:	08008c17 	.word	0x08008c17
 8008b3c:	08008c21 	.word	0x08008c21
 8008b40:	08008c2b 	.word	0x08008c2b
 8008b44:	08008c35 	.word	0x08008c35
 8008b48:	08008c3f 	.word	0x08008c3f
 8008b4c:	08008c49 	.word	0x08008c49
 8008b50:	08008c53 	.word	0x08008c53
 8008b54:	08008c5d 	.word	0x08008c5d
 8008b58:	08008c67 	.word	0x08008c67
 8008b5c:	08008c71 	.word	0x08008c71
 8008b60:	08008c7b 	.word	0x08008c7b
 8008b64:	08008c85 	.word	0x08008c85
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008b6e:	e0f7      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008b76:	e0f3      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008b7e:	e0ef      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008b86:	e0eb      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008b8e:	e0e7      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008b96:	e0e3      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008b9e:	e0df      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008ba6:	e0db      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008bae:	e0d7      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008bb6:	e0d3      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008bbe:	e0cf      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008bc6:	e0cb      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008bce:	e0c7      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008bd8:	e0c2      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008be2:	e0bd      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008bec:	e0b8      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008bf6:	e0b3      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008c00:	e0ae      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008c0a:	e0a9      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008c14:	e0a4      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008c1e:	e09f      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008c28:	e09a      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008c32:	e095      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008c3c:	e090      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008c46:	e08b      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008c50:	e086      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8008c5a:	e081      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8008c64:	e07c      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8008c6e:	e077      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8008c78:	e072      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8008c82:	e06d      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8008c8c:	e068      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75fb      	strb	r3, [r7, #23]
        break;
 8008c92:	e065      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d15d      	bne.n	8008d5c <HAL_TIM_RegisterCallback+0x2c4>
  {
    switch (CallbackID)
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	2b0d      	cmp	r3, #13
 8008ca4:	d857      	bhi.n	8008d56 <HAL_TIM_RegisterCallback+0x2be>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <HAL_TIM_RegisterCallback+0x214>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008ced 	.word	0x08008ced
 8008cb4:	08008cf5 	.word	0x08008cf5
 8008cb8:	08008cfd 	.word	0x08008cfd
 8008cbc:	08008d05 	.word	0x08008d05
 8008cc0:	08008d0d 	.word	0x08008d0d
 8008cc4:	08008d15 	.word	0x08008d15
 8008cc8:	08008d1d 	.word	0x08008d1d
 8008ccc:	08008d25 	.word	0x08008d25
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008d35 	.word	0x08008d35
 8008cd8:	08008d3d 	.word	0x08008d3d
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008d4d 	.word	0x08008d4d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008cea:	e039      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008cf2:	e035      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008cfa:	e031      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d02:	e02d      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d0a:	e029      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008d12:	e025      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008d1a:	e021      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008d22:	e01d      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d2a:	e019      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d32:	e015      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008d3a:	e011      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008d42:	e00d      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008d4a:	e009      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008d54:	e004      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	75fb      	strb	r3, [r7, #23]
        break;
 8008d5a:	e001      	b.n	8008d60 <HAL_TIM_RegisterCallback+0x2c8>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop

08008d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a46      	ldr	r2, [pc, #280]	; (8008ea4 <TIM_Base_SetConfig+0x12c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d017      	beq.n	8008dc0 <TIM_Base_SetConfig+0x48>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d96:	d013      	beq.n	8008dc0 <TIM_Base_SetConfig+0x48>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a43      	ldr	r2, [pc, #268]	; (8008ea8 <TIM_Base_SetConfig+0x130>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00f      	beq.n	8008dc0 <TIM_Base_SetConfig+0x48>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a42      	ldr	r2, [pc, #264]	; (8008eac <TIM_Base_SetConfig+0x134>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00b      	beq.n	8008dc0 <TIM_Base_SetConfig+0x48>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a41      	ldr	r2, [pc, #260]	; (8008eb0 <TIM_Base_SetConfig+0x138>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d007      	beq.n	8008dc0 <TIM_Base_SetConfig+0x48>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a40      	ldr	r2, [pc, #256]	; (8008eb4 <TIM_Base_SetConfig+0x13c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_Base_SetConfig+0x48>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a3f      	ldr	r2, [pc, #252]	; (8008eb8 <TIM_Base_SetConfig+0x140>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d108      	bne.n	8008dd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a33      	ldr	r2, [pc, #204]	; (8008ea4 <TIM_Base_SetConfig+0x12c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d023      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de0:	d01f      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a30      	ldr	r2, [pc, #192]	; (8008ea8 <TIM_Base_SetConfig+0x130>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d01b      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a2f      	ldr	r2, [pc, #188]	; (8008eac <TIM_Base_SetConfig+0x134>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d017      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2e      	ldr	r2, [pc, #184]	; (8008eb0 <TIM_Base_SetConfig+0x138>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2d      	ldr	r2, [pc, #180]	; (8008eb4 <TIM_Base_SetConfig+0x13c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00f      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2d      	ldr	r2, [pc, #180]	; (8008ebc <TIM_Base_SetConfig+0x144>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00b      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a2c      	ldr	r2, [pc, #176]	; (8008ec0 <TIM_Base_SetConfig+0x148>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d007      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a2b      	ldr	r2, [pc, #172]	; (8008ec4 <TIM_Base_SetConfig+0x14c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d003      	beq.n	8008e22 <TIM_Base_SetConfig+0xaa>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a26      	ldr	r2, [pc, #152]	; (8008eb8 <TIM_Base_SetConfig+0x140>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d108      	bne.n	8008e34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a12      	ldr	r2, [pc, #72]	; (8008ea4 <TIM_Base_SetConfig+0x12c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d013      	beq.n	8008e88 <TIM_Base_SetConfig+0x110>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a14      	ldr	r2, [pc, #80]	; (8008eb4 <TIM_Base_SetConfig+0x13c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00f      	beq.n	8008e88 <TIM_Base_SetConfig+0x110>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a14      	ldr	r2, [pc, #80]	; (8008ebc <TIM_Base_SetConfig+0x144>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <TIM_Base_SetConfig+0x110>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <TIM_Base_SetConfig+0x148>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d007      	beq.n	8008e88 <TIM_Base_SetConfig+0x110>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a12      	ldr	r2, [pc, #72]	; (8008ec4 <TIM_Base_SetConfig+0x14c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_Base_SetConfig+0x110>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a0d      	ldr	r2, [pc, #52]	; (8008eb8 <TIM_Base_SetConfig+0x140>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d103      	bne.n	8008e90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	615a      	str	r2, [r3, #20]
}
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40012c00 	.word	0x40012c00
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000800 	.word	0x40000800
 8008eb0:	40000c00 	.word	0x40000c00
 8008eb4:	40013400 	.word	0x40013400
 8008eb8:	40015000 	.word	0x40015000
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40014400 	.word	0x40014400
 8008ec4:	40014800 	.word	0x40014800

08008ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f023 0201 	bic.w	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f023 0302 	bic.w	r3, r3, #2
 8008f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a30      	ldr	r2, [pc, #192]	; (8008fe4 <TIM_OC1_SetConfig+0x11c>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <TIM_OC1_SetConfig+0x88>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a2f      	ldr	r2, [pc, #188]	; (8008fe8 <TIM_OC1_SetConfig+0x120>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00f      	beq.n	8008f50 <TIM_OC1_SetConfig+0x88>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a2e      	ldr	r2, [pc, #184]	; (8008fec <TIM_OC1_SetConfig+0x124>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00b      	beq.n	8008f50 <TIM_OC1_SetConfig+0x88>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a2d      	ldr	r2, [pc, #180]	; (8008ff0 <TIM_OC1_SetConfig+0x128>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d007      	beq.n	8008f50 <TIM_OC1_SetConfig+0x88>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a2c      	ldr	r2, [pc, #176]	; (8008ff4 <TIM_OC1_SetConfig+0x12c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <TIM_OC1_SetConfig+0x88>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a2b      	ldr	r2, [pc, #172]	; (8008ff8 <TIM_OC1_SetConfig+0x130>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d10c      	bne.n	8008f6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f023 0308 	bic.w	r3, r3, #8
 8008f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 0304 	bic.w	r3, r3, #4
 8008f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <TIM_OC1_SetConfig+0x11c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d013      	beq.n	8008f9a <TIM_OC1_SetConfig+0xd2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a1c      	ldr	r2, [pc, #112]	; (8008fe8 <TIM_OC1_SetConfig+0x120>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00f      	beq.n	8008f9a <TIM_OC1_SetConfig+0xd2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a1b      	ldr	r2, [pc, #108]	; (8008fec <TIM_OC1_SetConfig+0x124>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00b      	beq.n	8008f9a <TIM_OC1_SetConfig+0xd2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1a      	ldr	r2, [pc, #104]	; (8008ff0 <TIM_OC1_SetConfig+0x128>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d007      	beq.n	8008f9a <TIM_OC1_SetConfig+0xd2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <TIM_OC1_SetConfig+0x12c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d003      	beq.n	8008f9a <TIM_OC1_SetConfig+0xd2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a18      	ldr	r2, [pc, #96]	; (8008ff8 <TIM_OC1_SetConfig+0x130>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d111      	bne.n	8008fbe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	621a      	str	r2, [r3, #32]
}
 8008fd8:	bf00      	nop
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	40012c00 	.word	0x40012c00
 8008fe8:	40013400 	.word	0x40013400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40014400 	.word	0x40014400
 8008ff4:	40014800 	.word	0x40014800
 8008ff8:	40015000 	.word	0x40015000

08008ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f023 0210 	bic.w	r2, r3, #16
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800902a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f023 0320 	bic.w	r3, r3, #32
 800904a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	4313      	orrs	r3, r2
 8009056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a2c      	ldr	r2, [pc, #176]	; (800910c <TIM_OC2_SetConfig+0x110>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d007      	beq.n	8009070 <TIM_OC2_SetConfig+0x74>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a2b      	ldr	r2, [pc, #172]	; (8009110 <TIM_OC2_SetConfig+0x114>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_OC2_SetConfig+0x74>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a2a      	ldr	r2, [pc, #168]	; (8009114 <TIM_OC2_SetConfig+0x118>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d10d      	bne.n	800908c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800908a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a1f      	ldr	r2, [pc, #124]	; (800910c <TIM_OC2_SetConfig+0x110>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d013      	beq.n	80090bc <TIM_OC2_SetConfig+0xc0>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a1e      	ldr	r2, [pc, #120]	; (8009110 <TIM_OC2_SetConfig+0x114>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d00f      	beq.n	80090bc <TIM_OC2_SetConfig+0xc0>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a1e      	ldr	r2, [pc, #120]	; (8009118 <TIM_OC2_SetConfig+0x11c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00b      	beq.n	80090bc <TIM_OC2_SetConfig+0xc0>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1d      	ldr	r2, [pc, #116]	; (800911c <TIM_OC2_SetConfig+0x120>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d007      	beq.n	80090bc <TIM_OC2_SetConfig+0xc0>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a1c      	ldr	r2, [pc, #112]	; (8009120 <TIM_OC2_SetConfig+0x124>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_OC2_SetConfig+0xc0>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a17      	ldr	r2, [pc, #92]	; (8009114 <TIM_OC2_SetConfig+0x118>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d113      	bne.n	80090e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	621a      	str	r2, [r3, #32]
}
 80090fe:	bf00      	nop
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40012c00 	.word	0x40012c00
 8009110:	40013400 	.word	0x40013400
 8009114:	40015000 	.word	0x40015000
 8009118:	40014000 	.word	0x40014000
 800911c:	40014400 	.word	0x40014400
 8009120:	40014800 	.word	0x40014800

08009124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0303 	bic.w	r3, r3, #3
 800915e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2b      	ldr	r2, [pc, #172]	; (8009230 <TIM_OC3_SetConfig+0x10c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <TIM_OC3_SetConfig+0x72>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2a      	ldr	r2, [pc, #168]	; (8009234 <TIM_OC3_SetConfig+0x110>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_OC3_SetConfig+0x72>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a29      	ldr	r2, [pc, #164]	; (8009238 <TIM_OC3_SetConfig+0x114>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d10d      	bne.n	80091b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800919c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <TIM_OC3_SetConfig+0x10c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <TIM_OC3_SetConfig+0xbe>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <TIM_OC3_SetConfig+0x110>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <TIM_OC3_SetConfig+0xbe>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a1d      	ldr	r2, [pc, #116]	; (800923c <TIM_OC3_SetConfig+0x118>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00b      	beq.n	80091e2 <TIM_OC3_SetConfig+0xbe>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a1c      	ldr	r2, [pc, #112]	; (8009240 <TIM_OC3_SetConfig+0x11c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <TIM_OC3_SetConfig+0xbe>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a1b      	ldr	r2, [pc, #108]	; (8009244 <TIM_OC3_SetConfig+0x120>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_OC3_SetConfig+0xbe>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a16      	ldr	r2, [pc, #88]	; (8009238 <TIM_OC3_SetConfig+0x114>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d113      	bne.n	800920a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	621a      	str	r2, [r3, #32]
}
 8009224:	bf00      	nop
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	40012c00 	.word	0x40012c00
 8009234:	40013400 	.word	0x40013400
 8009238:	40015000 	.word	0x40015000
 800923c:	40014000 	.word	0x40014000
 8009240:	40014400 	.word	0x40014400
 8009244:	40014800 	.word	0x40014800

08009248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	031b      	lsls	r3, r3, #12
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a2c      	ldr	r2, [pc, #176]	; (8009358 <TIM_OC4_SetConfig+0x110>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d007      	beq.n	80092bc <TIM_OC4_SetConfig+0x74>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a2b      	ldr	r2, [pc, #172]	; (800935c <TIM_OC4_SetConfig+0x114>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_OC4_SetConfig+0x74>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a2a      	ldr	r2, [pc, #168]	; (8009360 <TIM_OC4_SetConfig+0x118>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d10d      	bne.n	80092d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	031b      	lsls	r3, r3, #12
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a1f      	ldr	r2, [pc, #124]	; (8009358 <TIM_OC4_SetConfig+0x110>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d013      	beq.n	8009308 <TIM_OC4_SetConfig+0xc0>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a1e      	ldr	r2, [pc, #120]	; (800935c <TIM_OC4_SetConfig+0x114>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00f      	beq.n	8009308 <TIM_OC4_SetConfig+0xc0>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a1e      	ldr	r2, [pc, #120]	; (8009364 <TIM_OC4_SetConfig+0x11c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d00b      	beq.n	8009308 <TIM_OC4_SetConfig+0xc0>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a1d      	ldr	r2, [pc, #116]	; (8009368 <TIM_OC4_SetConfig+0x120>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d007      	beq.n	8009308 <TIM_OC4_SetConfig+0xc0>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a1c      	ldr	r2, [pc, #112]	; (800936c <TIM_OC4_SetConfig+0x124>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d003      	beq.n	8009308 <TIM_OC4_SetConfig+0xc0>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a17      	ldr	r2, [pc, #92]	; (8009360 <TIM_OC4_SetConfig+0x118>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d113      	bne.n	8009330 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800930e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009316:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	019b      	lsls	r3, r3, #6
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	019b      	lsls	r3, r3, #6
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	4313      	orrs	r3, r2
 800932e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	621a      	str	r2, [r3, #32]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	40012c00 	.word	0x40012c00
 800935c:	40013400 	.word	0x40013400
 8009360:	40015000 	.word	0x40015000
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a19      	ldr	r2, [pc, #100]	; (800942c <TIM_OC5_SetConfig+0xbc>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d013      	beq.n	80093f2 <TIM_OC5_SetConfig+0x82>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a18      	ldr	r2, [pc, #96]	; (8009430 <TIM_OC5_SetConfig+0xc0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00f      	beq.n	80093f2 <TIM_OC5_SetConfig+0x82>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a17      	ldr	r2, [pc, #92]	; (8009434 <TIM_OC5_SetConfig+0xc4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00b      	beq.n	80093f2 <TIM_OC5_SetConfig+0x82>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a16      	ldr	r2, [pc, #88]	; (8009438 <TIM_OC5_SetConfig+0xc8>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d007      	beq.n	80093f2 <TIM_OC5_SetConfig+0x82>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a15      	ldr	r2, [pc, #84]	; (800943c <TIM_OC5_SetConfig+0xcc>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d003      	beq.n	80093f2 <TIM_OC5_SetConfig+0x82>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a14      	ldr	r2, [pc, #80]	; (8009440 <TIM_OC5_SetConfig+0xd0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d109      	bne.n	8009406 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	4313      	orrs	r3, r2
 8009404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	621a      	str	r2, [r3, #32]
}
 8009420:	bf00      	nop
 8009422:	371c      	adds	r7, #28
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	40012c00 	.word	0x40012c00
 8009430:	40013400 	.word	0x40013400
 8009434:	40014000 	.word	0x40014000
 8009438:	40014400 	.word	0x40014400
 800943c:	40014800 	.word	0x40014800
 8009440:	40015000 	.word	0x40015000

08009444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800948a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	051b      	lsls	r3, r3, #20
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1a      	ldr	r2, [pc, #104]	; (8009504 <TIM_OC6_SetConfig+0xc0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d013      	beq.n	80094c8 <TIM_OC6_SetConfig+0x84>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a19      	ldr	r2, [pc, #100]	; (8009508 <TIM_OC6_SetConfig+0xc4>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00f      	beq.n	80094c8 <TIM_OC6_SetConfig+0x84>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a18      	ldr	r2, [pc, #96]	; (800950c <TIM_OC6_SetConfig+0xc8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d00b      	beq.n	80094c8 <TIM_OC6_SetConfig+0x84>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a17      	ldr	r2, [pc, #92]	; (8009510 <TIM_OC6_SetConfig+0xcc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d007      	beq.n	80094c8 <TIM_OC6_SetConfig+0x84>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a16      	ldr	r2, [pc, #88]	; (8009514 <TIM_OC6_SetConfig+0xd0>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d003      	beq.n	80094c8 <TIM_OC6_SetConfig+0x84>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a15      	ldr	r2, [pc, #84]	; (8009518 <TIM_OC6_SetConfig+0xd4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d109      	bne.n	80094dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	029b      	lsls	r3, r3, #10
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	621a      	str	r2, [r3, #32]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	40012c00 	.word	0x40012c00
 8009508:	40013400 	.word	0x40013400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800
 8009518:	40015000 	.word	0x40015000

0800951c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4313      	orrs	r3, r2
 8009546:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954e:	f023 0307 	bic.w	r3, r3, #7
 8009552:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	4a56      	ldr	r2, [pc, #344]	; (80096c4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	f000 80a2 	beq.w	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009572:	4a54      	ldr	r2, [pc, #336]	; (80096c4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	f200 809b 	bhi.w	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 800957a:	4a53      	ldr	r2, [pc, #332]	; (80096c8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800957c:	4293      	cmp	r3, r2
 800957e:	f000 809a 	beq.w	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009582:	4a51      	ldr	r2, [pc, #324]	; (80096c8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009584:	4293      	cmp	r3, r2
 8009586:	f200 8093 	bhi.w	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 800958a:	4a50      	ldr	r2, [pc, #320]	; (80096cc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800958c:	4293      	cmp	r3, r2
 800958e:	f000 8092 	beq.w	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009592:	4a4e      	ldr	r2, [pc, #312]	; (80096cc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	f200 808b 	bhi.w	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 800959a:	4a4d      	ldr	r2, [pc, #308]	; (80096d0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	f000 808a 	beq.w	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80095a2:	4a4b      	ldr	r2, [pc, #300]	; (80096d0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	f200 8083 	bhi.w	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095aa:	4a4a      	ldr	r2, [pc, #296]	; (80096d4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	f000 8082 	beq.w	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80095b2:	4a48      	ldr	r2, [pc, #288]	; (80096d4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d87b      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095b8:	4a47      	ldr	r2, [pc, #284]	; (80096d8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d07b      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80095be:	4a46      	ldr	r2, [pc, #280]	; (80096d8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d875      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095c8:	d075      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80095ca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095ce:	d86f      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095d4:	d06f      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80095d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095da:	d869      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095dc:	2b70      	cmp	r3, #112	; 0x70
 80095de:	d01a      	beq.n	8009616 <TIM_SlaveTimer_SetConfig+0xfa>
 80095e0:	2b70      	cmp	r3, #112	; 0x70
 80095e2:	d865      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095e4:	2b60      	cmp	r3, #96	; 0x60
 80095e6:	d059      	beq.n	800969c <TIM_SlaveTimer_SetConfig+0x180>
 80095e8:	2b60      	cmp	r3, #96	; 0x60
 80095ea:	d861      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095ec:	2b50      	cmp	r3, #80	; 0x50
 80095ee:	d04b      	beq.n	8009688 <TIM_SlaveTimer_SetConfig+0x16c>
 80095f0:	2b50      	cmp	r3, #80	; 0x50
 80095f2:	d85d      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d019      	beq.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d859      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 80095fc:	2b30      	cmp	r3, #48	; 0x30
 80095fe:	d05a      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009600:	2b30      	cmp	r3, #48	; 0x30
 8009602:	d855      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 8009604:	2b20      	cmp	r3, #32
 8009606:	d056      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009608:	2b20      	cmp	r3, #32
 800960a:	d851      	bhi.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d052      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009610:	2b10      	cmp	r3, #16
 8009612:	d050      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8009614:	e04c      	b.n	80096b0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	68d9      	ldr	r1, [r3, #12]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	689a      	ldr	r2, [r3, #8]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f000 f9ff 	bl	8009a28 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800962a:	e045      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b05      	cmp	r3, #5
 8009632:	d004      	beq.n	800963e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009638:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800963c:	d101      	bne.n	8009642 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e03b      	b.n	80096ba <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6a1a      	ldr	r2, [r3, #32]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0201 	bic.w	r2, r2, #1
 8009658:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009668:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	4313      	orrs	r3, r2
 8009674:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	621a      	str	r2, [r3, #32]
      break;
 8009686:	e017      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6899      	ldr	r1, [r3, #8]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	461a      	mov	r2, r3
 8009696:	f000 f895 	bl	80097c4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800969a:	e00d      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	6899      	ldr	r1, [r3, #8]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	461a      	mov	r2, r3
 80096aa:	f000 f8f7 	bl	800989c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80096ae:	e003      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	75fb      	strb	r3, [r7, #23]
      break;
 80096b4:	e000      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80096b6:	bf00      	nop
  }

  return status;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	00100070 	.word	0x00100070
 80096c8:	00100060 	.word	0x00100060
 80096cc:	00100050 	.word	0x00100050
 80096d0:	00100040 	.word	0x00100040
 80096d4:	00100030 	.word	0x00100030
 80096d8:	00100020 	.word	0x00100020

080096dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f023 0201 	bic.w	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4a28      	ldr	r2, [pc, #160]	; (80097a8 <TIM_TI1_SetConfig+0xcc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d01b      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009710:	d017      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a25      	ldr	r2, [pc, #148]	; (80097ac <TIM_TI1_SetConfig+0xd0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4a24      	ldr	r2, [pc, #144]	; (80097b0 <TIM_TI1_SetConfig+0xd4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00f      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4a23      	ldr	r2, [pc, #140]	; (80097b4 <TIM_TI1_SetConfig+0xd8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00b      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4a22      	ldr	r2, [pc, #136]	; (80097b8 <TIM_TI1_SetConfig+0xdc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d007      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4a21      	ldr	r2, [pc, #132]	; (80097bc <TIM_TI1_SetConfig+0xe0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d003      	beq.n	8009742 <TIM_TI1_SetConfig+0x66>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a20      	ldr	r2, [pc, #128]	; (80097c0 <TIM_TI1_SetConfig+0xe4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d101      	bne.n	8009746 <TIM_TI1_SetConfig+0x6a>
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <TIM_TI1_SetConfig+0x6c>
 8009746:	2300      	movs	r3, #0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d008      	beq.n	800975e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e003      	b.n	8009766 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800976c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	011b      	lsls	r3, r3, #4
 8009772:	b2db      	uxtb	r3, r3
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f023 030a 	bic.w	r3, r3, #10
 8009780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f003 030a 	and.w	r3, r3, #10
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	4313      	orrs	r3, r2
 800978c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	621a      	str	r2, [r3, #32]
}
 800979a:	bf00      	nop
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	40012c00 	.word	0x40012c00
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	40013400 	.word	0x40013400
 80097bc:	40014000 	.word	0x40014000
 80097c0:	40015000 	.word	0x40015000

080097c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f023 0201 	bic.w	r2, r3, #1
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 030a 	bic.w	r3, r3, #10
 8009800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	621a      	str	r2, [r3, #32]
}
 8009816:	bf00      	nop
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009822:	b480      	push	{r7}
 8009824:	b087      	sub	sp, #28
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	f023 0210 	bic.w	r2, r3, #16
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800984e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	021b      	lsls	r3, r3, #8
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	4313      	orrs	r3, r2
 8009858:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	031b      	lsls	r3, r3, #12
 8009866:	b29b      	uxth	r3, r3
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009874:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	621a      	str	r2, [r3, #32]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f023 0210 	bic.w	r2, r3, #16
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	031b      	lsls	r3, r3, #12
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	621a      	str	r2, [r3, #32]
}
 80098f0:	bf00      	nop
 80098f2:	371c      	adds	r7, #28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6a1b      	ldr	r3, [r3, #32]
 8009920:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009938:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	011b      	lsls	r3, r3, #4
 800993e:	b2db      	uxtb	r3, r3
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800994c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	021b      	lsls	r3, r3, #8
 8009952:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4313      	orrs	r3, r2
 800995a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	621a      	str	r2, [r3, #32]
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	031b      	lsls	r3, r3, #12
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4313      	orrs	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80099c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	031b      	lsls	r3, r3, #12
 80099cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	621a      	str	r2, [r3, #32]
}
 80099e2:	bf00      	nop
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f043 0307 	orr.w	r3, r3, #7
 8009a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	609a      	str	r2, [r3, #8]
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	021a      	lsls	r2, r3, #8
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	609a      	str	r2, [r3, #8]
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f003 031f 	and.w	r3, r3, #31
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a1a      	ldr	r2, [r3, #32]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	401a      	ands	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1a      	ldr	r2, [r3, #32]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f003 031f 	and.w	r3, r3, #31
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	621a      	str	r2, [r3, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a26      	ldr	r2, [pc, #152]	; (8009b58 <TIM_ResetCallback+0xa4>)
 8009ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a25      	ldr	r2, [pc, #148]	; (8009b5c <TIM_ResetCallback+0xa8>)
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a24      	ldr	r2, [pc, #144]	; (8009b60 <TIM_ResetCallback+0xac>)
 8009ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a23      	ldr	r2, [pc, #140]	; (8009b64 <TIM_ResetCallback+0xb0>)
 8009ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a22      	ldr	r2, [pc, #136]	; (8009b68 <TIM_ResetCallback+0xb4>)
 8009ae0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a21      	ldr	r2, [pc, #132]	; (8009b6c <TIM_ResetCallback+0xb8>)
 8009ae8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a20      	ldr	r2, [pc, #128]	; (8009b70 <TIM_ResetCallback+0xbc>)
 8009af0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a1f      	ldr	r2, [pc, #124]	; (8009b74 <TIM_ResetCallback+0xc0>)
 8009af8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a1e      	ldr	r2, [pc, #120]	; (8009b78 <TIM_ResetCallback+0xc4>)
 8009b00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a1d      	ldr	r2, [pc, #116]	; (8009b7c <TIM_ResetCallback+0xc8>)
 8009b08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a1c      	ldr	r2, [pc, #112]	; (8009b80 <TIM_ResetCallback+0xcc>)
 8009b10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a1b      	ldr	r2, [pc, #108]	; (8009b84 <TIM_ResetCallback+0xd0>)
 8009b18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a1a      	ldr	r2, [pc, #104]	; (8009b88 <TIM_ResetCallback+0xd4>)
 8009b20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a19      	ldr	r2, [pc, #100]	; (8009b8c <TIM_ResetCallback+0xd8>)
 8009b28:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a18      	ldr	r2, [pc, #96]	; (8009b90 <TIM_ResetCallback+0xdc>)
 8009b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a17      	ldr	r2, [pc, #92]	; (8009b94 <TIM_ResetCallback+0xe0>)
 8009b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a16      	ldr	r2, [pc, #88]	; (8009b98 <TIM_ResetCallback+0xe4>)
 8009b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a15      	ldr	r2, [pc, #84]	; (8009b9c <TIM_ResetCallback+0xe8>)
 8009b48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	080089d1 	.word	0x080089d1
 8009b5c:	080089e5 	.word	0x080089e5
 8009b60:	08008a5d 	.word	0x08008a5d
 8009b64:	08008a71 	.word	0x08008a71
 8009b68:	08008a0d 	.word	0x08008a0d
 8009b6c:	08008a21 	.word	0x08008a21
 8009b70:	080089f9 	.word	0x080089f9
 8009b74:	08008a35 	.word	0x08008a35
 8009b78:	08008a49 	.word	0x08008a49
 8009b7c:	08008a85 	.word	0x08008a85
 8009b80:	08009f4d 	.word	0x08009f4d
 8009b84:	08009f61 	.word	0x08009f61
 8009b88:	08009f75 	.word	0x08009f75
 8009b8c:	08009f89 	.word	0x08009f89
 8009b90:	08009f9d 	.word	0x08009f9d
 8009b94:	08009fb1 	.word	0x08009fb1
 8009b98:	08009fc5 	.word	0x08009fc5
 8009b9c:	08009fd9 	.word	0x08009fd9

08009ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e074      	b.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a34      	ldr	r2, [pc, #208]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d009      	beq.n	8009bf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a33      	ldr	r2, [pc, #204]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d004      	beq.n	8009bf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a31      	ldr	r2, [pc, #196]	; (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d108      	bne.n	8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a21      	ldr	r2, [pc, #132]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c38:	d01d      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1f      	ldr	r2, [pc, #124]	; (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1d      	ldr	r2, [pc, #116]	; (8009cc0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a1c      	ldr	r2, [pc, #112]	; (8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a11      	ldr	r2, [pc, #68]	; (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d10c      	bne.n	8009c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40012c00 	.word	0x40012c00
 8009cb4:	40013400 	.word	0x40013400
 8009cb8:	40015000 	.word	0x40015000
 8009cbc:	40000400 	.word	0x40000400
 8009cc0:	40000800 	.word	0x40000800
 8009cc4:	40000c00 	.word	0x40000c00
 8009cc8:	40014000 	.word	0x40014000

08009ccc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d101      	bne.n	8009ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e096      	b.n	8009e16 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a2f      	ldr	r2, [pc, #188]	; (8009e24 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d009      	beq.n	8009d80 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a2d      	ldr	r2, [pc, #180]	; (8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d004      	beq.n	8009d80 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a2c      	ldr	r2, [pc, #176]	; (8009e2c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d106      	bne.n	8009d8e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a24      	ldr	r2, [pc, #144]	; (8009e24 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d009      	beq.n	8009dac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a22      	ldr	r2, [pc, #136]	; (8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a21      	ldr	r2, [pc, #132]	; (8009e2c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d12b      	bne.n	8009e04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	051b      	lsls	r3, r3, #20
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a11      	ldr	r2, [pc, #68]	; (8009e24 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d009      	beq.n	8009df6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a10      	ldr	r2, [pc, #64]	; (8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d004      	beq.n	8009df6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a0e      	ldr	r2, [pc, #56]	; (8009e2c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d106      	bne.n	8009e04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	40012c00 	.word	0x40012c00
 8009e28:	40013400 	.word	0x40013400
 8009e2c:	40015000 	.word	0x40015000

08009e30 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_TIMEx_TISelection+0x1e>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e073      	b.n	8009f36 <HAL_TIMEx_TISelection+0x106>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b0c      	cmp	r3, #12
 8009e5a:	d864      	bhi.n	8009f26 <HAL_TIMEx_TISelection+0xf6>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <HAL_TIMEx_TISelection+0x34>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e99 	.word	0x08009e99
 8009e68:	08009f27 	.word	0x08009f27
 8009e6c:	08009f27 	.word	0x08009f27
 8009e70:	08009f27 	.word	0x08009f27
 8009e74:	08009ee5 	.word	0x08009ee5
 8009e78:	08009f27 	.word	0x08009f27
 8009e7c:	08009f27 	.word	0x08009f27
 8009e80:	08009f27 	.word	0x08009f27
 8009e84:	08009efb 	.word	0x08009efb
 8009e88:	08009f27 	.word	0x08009f27
 8009e8c:	08009f27 	.word	0x08009f27
 8009e90:	08009f27 	.word	0x08009f27
 8009e94:	08009f11 	.word	0x08009f11
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9e:	f023 010f 	bic.w	r1, r3, #15
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a24      	ldr	r2, [pc, #144]	; (8009f44 <HAL_TIMEx_TISelection+0x114>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d004      	beq.n	8009ec0 <HAL_TIMEx_TISelection+0x90>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a23      	ldr	r2, [pc, #140]	; (8009f48 <HAL_TIMEx_TISelection+0x118>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d108      	bne.n	8009ed2 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	669a      	str	r2, [r3, #104]	; 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8009ed0:	e02c      	b.n	8009f2c <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0201 	bic.w	r2, r2, #1
 8009ee0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8009ee2:	e023      	b.n	8009f2c <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eea:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009ef8:	e018      	b.n	8009f2c <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f00:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f0e:	e00d      	b.n	8009f2c <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f16:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f24:	e002      	b.n	8009f2c <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
      break;
 8009f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	371c      	adds	r7, #28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40014400 	.word	0x40014400
 8009f48:	40014800 	.word	0x40014800

08009f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <__cxa_pure_virtual>:
 8009fec:	b508      	push	{r3, lr}
 8009fee:	f000 f80d 	bl	800a00c <_ZSt9terminatev>

08009ff2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009ff2:	b508      	push	{r3, lr}
 8009ff4:	4780      	blx	r0
 8009ff6:	f000 f80e 	bl	800a016 <abort>
	...

08009ffc <_ZSt13get_terminatev>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <_ZSt13get_terminatev+0xc>)
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	f3bf 8f5b 	dmb	ish
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	20000030 	.word	0x20000030

0800a00c <_ZSt9terminatev>:
 800a00c:	b508      	push	{r3, lr}
 800a00e:	f7ff fff5 	bl	8009ffc <_ZSt13get_terminatev>
 800a012:	f7ff ffee 	bl	8009ff2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a016 <abort>:
 800a016:	b508      	push	{r3, lr}
 800a018:	2006      	movs	r0, #6
 800a01a:	f000 f85d 	bl	800a0d8 <raise>
 800a01e:	2001      	movs	r0, #1
 800a020:	f7f8 fb24 	bl	800266c <_exit>

0800a024 <__errno>:
 800a024:	4b01      	ldr	r3, [pc, #4]	; (800a02c <__errno+0x8>)
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	20000034 	.word	0x20000034

0800a030 <__libc_init_array>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	4d0d      	ldr	r5, [pc, #52]	; (800a068 <__libc_init_array+0x38>)
 800a034:	4c0d      	ldr	r4, [pc, #52]	; (800a06c <__libc_init_array+0x3c>)
 800a036:	1b64      	subs	r4, r4, r5
 800a038:	10a4      	asrs	r4, r4, #2
 800a03a:	2600      	movs	r6, #0
 800a03c:	42a6      	cmp	r6, r4
 800a03e:	d109      	bne.n	800a054 <__libc_init_array+0x24>
 800a040:	4d0b      	ldr	r5, [pc, #44]	; (800a070 <__libc_init_array+0x40>)
 800a042:	4c0c      	ldr	r4, [pc, #48]	; (800a074 <__libc_init_array+0x44>)
 800a044:	f000 f864 	bl	800a110 <_init>
 800a048:	1b64      	subs	r4, r4, r5
 800a04a:	10a4      	asrs	r4, r4, #2
 800a04c:	2600      	movs	r6, #0
 800a04e:	42a6      	cmp	r6, r4
 800a050:	d105      	bne.n	800a05e <__libc_init_array+0x2e>
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	f855 3b04 	ldr.w	r3, [r5], #4
 800a058:	4798      	blx	r3
 800a05a:	3601      	adds	r6, #1
 800a05c:	e7ee      	b.n	800a03c <__libc_init_array+0xc>
 800a05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a062:	4798      	blx	r3
 800a064:	3601      	adds	r6, #1
 800a066:	e7f2      	b.n	800a04e <__libc_init_array+0x1e>
 800a068:	0800a378 	.word	0x0800a378
 800a06c:	0800a378 	.word	0x0800a378
 800a070:	0800a378 	.word	0x0800a378
 800a074:	0800a380 	.word	0x0800a380

0800a078 <memset>:
 800a078:	4402      	add	r2, r0
 800a07a:	4603      	mov	r3, r0
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d100      	bne.n	800a082 <memset+0xa>
 800a080:	4770      	bx	lr
 800a082:	f803 1b01 	strb.w	r1, [r3], #1
 800a086:	e7f9      	b.n	800a07c <memset+0x4>

0800a088 <_raise_r>:
 800a088:	291f      	cmp	r1, #31
 800a08a:	b538      	push	{r3, r4, r5, lr}
 800a08c:	4604      	mov	r4, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	d904      	bls.n	800a09c <_raise_r+0x14>
 800a092:	2316      	movs	r3, #22
 800a094:	6003      	str	r3, [r0, #0]
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a09e:	b112      	cbz	r2, 800a0a6 <_raise_r+0x1e>
 800a0a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0a4:	b94b      	cbnz	r3, 800a0ba <_raise_r+0x32>
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 f830 	bl	800a10c <_getpid_r>
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0b6:	f000 b817 	b.w	800a0e8 <_kill_r>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d00a      	beq.n	800a0d4 <_raise_r+0x4c>
 800a0be:	1c59      	adds	r1, r3, #1
 800a0c0:	d103      	bne.n	800a0ca <_raise_r+0x42>
 800a0c2:	2316      	movs	r3, #22
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e7e7      	b.n	800a09a <_raise_r+0x12>
 800a0ca:	2400      	movs	r4, #0
 800a0cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	4798      	blx	r3
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e7e0      	b.n	800a09a <_raise_r+0x12>

0800a0d8 <raise>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <raise+0xc>)
 800a0da:	4601      	mov	r1, r0
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f7ff bfd3 	b.w	800a088 <_raise_r>
 800a0e2:	bf00      	nop
 800a0e4:	20000034 	.word	0x20000034

0800a0e8 <_kill_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d07      	ldr	r5, [pc, #28]	; (800a108 <_kill_r+0x20>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	f7f8 faa9 	bl	800264c <_kill>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	d102      	bne.n	800a104 <_kill_r+0x1c>
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	b103      	cbz	r3, 800a104 <_kill_r+0x1c>
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	bd38      	pop	{r3, r4, r5, pc}
 800a106:	bf00      	nop
 800a108:	20019464 	.word	0x20019464

0800a10c <_getpid_r>:
 800a10c:	f7f8 ba96 	b.w	800263c <_getpid>

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
